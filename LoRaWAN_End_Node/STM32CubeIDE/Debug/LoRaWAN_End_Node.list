
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c068  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e08  0801c1a8  0801c1a8  0002c1a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801efb0  0801efb0  0003e5f8  2**0
                  CONTENTS
  4 .ARM          00000008  0801efb0  0801efb0  0002efb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801efb8  0801efb8  0003e5f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801efb8  0801efb8  0002efb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0801efc0  0801efc0  0002efc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000f8  0803e500  0803e500  0003e500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000330  20000000  0801efc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000bd0  20008000  20008000  00048000  2**3
                  ALLOC
 11 .bss          00002070  20000330  20000330  00040330  2**3
                  ALLOC
 12 RAM1_region   00000000  200023a0  200023a0  0003e5f8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5f8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  200023a0  200023a0  00040330  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5f8  2**0
                  CONTENTS, READONLY
 16 .comment      00000043  00000000  00000000  0003e622  2**0
                  CONTENTS, READONLY
 17 .debug_info   000681c6  00000000  00000000  0003e665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0000ce55  00000000  00000000  000a682b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0001b02a  00000000  00000000  000b3680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00003198  00000000  00000000  000ce6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00002a3f  00000000  00000000  000d1848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0002ee84  00000000  00000000  000d4287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   0005cad5  00000000  00000000  0010310b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    000e5c00  00000000  00000000  0015fbe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_frame  0000a1b4  00000000  00000000  002457e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line_str 0000008b  00000000  00000000  0024f994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000330 	.word	0x20000330
 800015c:	00000000 	.word	0x00000000
 8000160:	0801c190 	.word	0x0801c190

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000334 	.word	0x20000334
 800017c:	0801c190 	.word	0x0801c190

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_frsub>:
 8000c38:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c3c:	e002      	b.n	8000c44 <__addsf3>
 8000c3e:	bf00      	nop

08000c40 <__aeabi_fsub>:
 8000c40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c44 <__addsf3>:
 8000c44:	0042      	lsls	r2, r0, #1
 8000c46:	bf1f      	itttt	ne
 8000c48:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c4c:	ea92 0f03 	teqne	r2, r3
 8000c50:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c54:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c58:	d06a      	beq.n	8000d30 <__addsf3+0xec>
 8000c5a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c5e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c62:	bfc1      	itttt	gt
 8000c64:	18d2      	addgt	r2, r2, r3
 8000c66:	4041      	eorgt	r1, r0
 8000c68:	4048      	eorgt	r0, r1
 8000c6a:	4041      	eorgt	r1, r0
 8000c6c:	bfb8      	it	lt
 8000c6e:	425b      	neglt	r3, r3
 8000c70:	2b19      	cmp	r3, #25
 8000c72:	bf88      	it	hi
 8000c74:	4770      	bxhi	lr
 8000c76:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c7a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c8a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c8e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4249      	negne	r1, r1
 8000c96:	ea92 0f03 	teq	r2, r3
 8000c9a:	d03f      	beq.n	8000d1c <__addsf3+0xd8>
 8000c9c:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca0:	fa41 fc03 	asr.w	ip, r1, r3
 8000ca4:	eb10 000c 	adds.w	r0, r0, ip
 8000ca8:	f1c3 0320 	rsb	r3, r3, #32
 8000cac:	fa01 f103 	lsl.w	r1, r1, r3
 8000cb0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cb4:	d502      	bpl.n	8000cbc <__addsf3+0x78>
 8000cb6:	4249      	negs	r1, r1
 8000cb8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cc0:	d313      	bcc.n	8000cea <__addsf3+0xa6>
 8000cc2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cc6:	d306      	bcc.n	8000cd6 <__addsf3+0x92>
 8000cc8:	0840      	lsrs	r0, r0, #1
 8000cca:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cce:	f102 0201 	add.w	r2, r2, #1
 8000cd2:	2afe      	cmp	r2, #254	; 0xfe
 8000cd4:	d251      	bcs.n	8000d7a <__addsf3+0x136>
 8000cd6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cda:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cde:	bf08      	it	eq
 8000ce0:	f020 0001 	biceq.w	r0, r0, #1
 8000ce4:	ea40 0003 	orr.w	r0, r0, r3
 8000ce8:	4770      	bx	lr
 8000cea:	0049      	lsls	r1, r1, #1
 8000cec:	eb40 0000 	adc.w	r0, r0, r0
 8000cf0:	3a01      	subs	r2, #1
 8000cf2:	bf28      	it	cs
 8000cf4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cf8:	d2ed      	bcs.n	8000cd6 <__addsf3+0x92>
 8000cfa:	fab0 fc80 	clz	ip, r0
 8000cfe:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d02:	ebb2 020c 	subs.w	r2, r2, ip
 8000d06:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d0a:	bfaa      	itet	ge
 8000d0c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d10:	4252      	neglt	r2, r2
 8000d12:	4318      	orrge	r0, r3
 8000d14:	bfbc      	itt	lt
 8000d16:	40d0      	lsrlt	r0, r2
 8000d18:	4318      	orrlt	r0, r3
 8000d1a:	4770      	bx	lr
 8000d1c:	f092 0f00 	teq	r2, #0
 8000d20:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d24:	bf06      	itte	eq
 8000d26:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d2a:	3201      	addeq	r2, #1
 8000d2c:	3b01      	subne	r3, #1
 8000d2e:	e7b5      	b.n	8000c9c <__addsf3+0x58>
 8000d30:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d34:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d38:	bf18      	it	ne
 8000d3a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d3e:	d021      	beq.n	8000d84 <__addsf3+0x140>
 8000d40:	ea92 0f03 	teq	r2, r3
 8000d44:	d004      	beq.n	8000d50 <__addsf3+0x10c>
 8000d46:	f092 0f00 	teq	r2, #0
 8000d4a:	bf08      	it	eq
 8000d4c:	4608      	moveq	r0, r1
 8000d4e:	4770      	bx	lr
 8000d50:	ea90 0f01 	teq	r0, r1
 8000d54:	bf1c      	itt	ne
 8000d56:	2000      	movne	r0, #0
 8000d58:	4770      	bxne	lr
 8000d5a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d5e:	d104      	bne.n	8000d6a <__addsf3+0x126>
 8000d60:	0040      	lsls	r0, r0, #1
 8000d62:	bf28      	it	cs
 8000d64:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d68:	4770      	bx	lr
 8000d6a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d6e:	bf3c      	itt	cc
 8000d70:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bxcc	lr
 8000d76:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d7a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d82:	4770      	bx	lr
 8000d84:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d88:	bf16      	itet	ne
 8000d8a:	4608      	movne	r0, r1
 8000d8c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d90:	4601      	movne	r1, r0
 8000d92:	0242      	lsls	r2, r0, #9
 8000d94:	bf06      	itte	eq
 8000d96:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d9a:	ea90 0f01 	teqeq	r0, r1
 8000d9e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000da2:	4770      	bx	lr

08000da4 <__aeabi_ui2f>:
 8000da4:	f04f 0300 	mov.w	r3, #0
 8000da8:	e004      	b.n	8000db4 <__aeabi_i2f+0x8>
 8000daa:	bf00      	nop

08000dac <__aeabi_i2f>:
 8000dac:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000db0:	bf48      	it	mi
 8000db2:	4240      	negmi	r0, r0
 8000db4:	ea5f 0c00 	movs.w	ip, r0
 8000db8:	bf08      	it	eq
 8000dba:	4770      	bxeq	lr
 8000dbc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000dc0:	4601      	mov	r1, r0
 8000dc2:	f04f 0000 	mov.w	r0, #0
 8000dc6:	e01c      	b.n	8000e02 <__aeabi_l2f+0x2a>

08000dc8 <__aeabi_ul2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	e00a      	b.n	8000dec <__aeabi_l2f+0x14>
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_l2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000de4:	d502      	bpl.n	8000dec <__aeabi_l2f+0x14>
 8000de6:	4240      	negs	r0, r0
 8000de8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dec:	ea5f 0c01 	movs.w	ip, r1
 8000df0:	bf02      	ittt	eq
 8000df2:	4684      	moveq	ip, r0
 8000df4:	4601      	moveq	r1, r0
 8000df6:	2000      	moveq	r0, #0
 8000df8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dfc:	bf08      	it	eq
 8000dfe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e02:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e06:	fabc f28c 	clz	r2, ip
 8000e0a:	3a08      	subs	r2, #8
 8000e0c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e10:	db10      	blt.n	8000e34 <__aeabi_l2f+0x5c>
 8000e12:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e16:	4463      	add	r3, ip
 8000e18:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e1c:	f1c2 0220 	rsb	r2, r2, #32
 8000e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e24:	fa20 f202 	lsr.w	r2, r0, r2
 8000e28:	eb43 0002 	adc.w	r0, r3, r2
 8000e2c:	bf08      	it	eq
 8000e2e:	f020 0001 	biceq.w	r0, r0, #1
 8000e32:	4770      	bx	lr
 8000e34:	f102 0220 	add.w	r2, r2, #32
 8000e38:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e44:	fa21 f202 	lsr.w	r2, r1, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e52:	4770      	bx	lr

08000e54 <__aeabi_fmul>:
 8000e54:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e58:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e62:	ea92 0f0c 	teqne	r2, ip
 8000e66:	ea93 0f0c 	teqne	r3, ip
 8000e6a:	d06f      	beq.n	8000f4c <__aeabi_fmul+0xf8>
 8000e6c:	441a      	add	r2, r3
 8000e6e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e72:	0240      	lsls	r0, r0, #9
 8000e74:	bf18      	it	ne
 8000e76:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e7a:	d01e      	beq.n	8000eba <__aeabi_fmul+0x66>
 8000e7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e80:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e84:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e88:	fba0 3101 	umull	r3, r1, r0, r1
 8000e8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e90:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e94:	bf3e      	ittt	cc
 8000e96:	0049      	lslcc	r1, r1, #1
 8000e98:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e9c:	005b      	lslcc	r3, r3, #1
 8000e9e:	ea40 0001 	orr.w	r0, r0, r1
 8000ea2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000ea6:	2afd      	cmp	r2, #253	; 0xfd
 8000ea8:	d81d      	bhi.n	8000ee6 <__aeabi_fmul+0x92>
 8000eaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000eae:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eb2:	bf08      	it	eq
 8000eb4:	f020 0001 	biceq.w	r0, r0, #1
 8000eb8:	4770      	bx	lr
 8000eba:	f090 0f00 	teq	r0, #0
 8000ebe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ec2:	bf08      	it	eq
 8000ec4:	0249      	lsleq	r1, r1, #9
 8000ec6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eca:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000ece:	3a7f      	subs	r2, #127	; 0x7f
 8000ed0:	bfc2      	ittt	gt
 8000ed2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ed6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eda:	4770      	bxgt	lr
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	f04f 0300 	mov.w	r3, #0
 8000ee4:	3a01      	subs	r2, #1
 8000ee6:	dc5d      	bgt.n	8000fa4 <__aeabi_fmul+0x150>
 8000ee8:	f112 0f19 	cmn.w	r2, #25
 8000eec:	bfdc      	itt	le
 8000eee:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ef2:	4770      	bxle	lr
 8000ef4:	f1c2 0200 	rsb	r2, r2, #0
 8000ef8:	0041      	lsls	r1, r0, #1
 8000efa:	fa21 f102 	lsr.w	r1, r1, r2
 8000efe:	f1c2 0220 	rsb	r2, r2, #32
 8000f02:	fa00 fc02 	lsl.w	ip, r0, r2
 8000f06:	ea5f 0031 	movs.w	r0, r1, rrx
 8000f0a:	f140 0000 	adc.w	r0, r0, #0
 8000f0e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000f12:	bf08      	it	eq
 8000f14:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000f18:	4770      	bx	lr
 8000f1a:	f092 0f00 	teq	r2, #0
 8000f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f22:	bf02      	ittt	eq
 8000f24:	0040      	lsleq	r0, r0, #1
 8000f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f2a:	3a01      	subeq	r2, #1
 8000f2c:	d0f9      	beq.n	8000f22 <__aeabi_fmul+0xce>
 8000f2e:	ea40 000c 	orr.w	r0, r0, ip
 8000f32:	f093 0f00 	teq	r3, #0
 8000f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f3a:	bf02      	ittt	eq
 8000f3c:	0049      	lsleq	r1, r1, #1
 8000f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f42:	3b01      	subeq	r3, #1
 8000f44:	d0f9      	beq.n	8000f3a <__aeabi_fmul+0xe6>
 8000f46:	ea41 010c 	orr.w	r1, r1, ip
 8000f4a:	e78f      	b.n	8000e6c <__aeabi_fmul+0x18>
 8000f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f50:	ea92 0f0c 	teq	r2, ip
 8000f54:	bf18      	it	ne
 8000f56:	ea93 0f0c 	teqne	r3, ip
 8000f5a:	d00a      	beq.n	8000f72 <__aeabi_fmul+0x11e>
 8000f5c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f60:	bf18      	it	ne
 8000f62:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f66:	d1d8      	bne.n	8000f1a <__aeabi_fmul+0xc6>
 8000f68:	ea80 0001 	eor.w	r0, r0, r1
 8000f6c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f70:	4770      	bx	lr
 8000f72:	f090 0f00 	teq	r0, #0
 8000f76:	bf17      	itett	ne
 8000f78:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f7c:	4608      	moveq	r0, r1
 8000f7e:	f091 0f00 	teqne	r1, #0
 8000f82:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f86:	d014      	beq.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fmul+0x13e>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d10f      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000f92:	ea93 0f0c 	teq	r3, ip
 8000f96:	d103      	bne.n	8000fa0 <__aeabi_fmul+0x14c>
 8000f98:	024b      	lsls	r3, r1, #9
 8000f9a:	bf18      	it	ne
 8000f9c:	4608      	movne	r0, r1
 8000f9e:	d108      	bne.n	8000fb2 <__aeabi_fmul+0x15e>
 8000fa0:	ea80 0001 	eor.w	r0, r0, r1
 8000fa4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000fa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fb0:	4770      	bx	lr
 8000fb2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000fb6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000fba:	4770      	bx	lr

08000fbc <__aeabi_fdiv>:
 8000fbc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000fc0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000fc4:	bf1e      	ittt	ne
 8000fc6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000fca:	ea92 0f0c 	teqne	r2, ip
 8000fce:	ea93 0f0c 	teqne	r3, ip
 8000fd2:	d069      	beq.n	80010a8 <__aeabi_fdiv+0xec>
 8000fd4:	eba2 0203 	sub.w	r2, r2, r3
 8000fd8:	ea80 0c01 	eor.w	ip, r0, r1
 8000fdc:	0249      	lsls	r1, r1, #9
 8000fde:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000fe2:	d037      	beq.n	8001054 <__aeabi_fdiv+0x98>
 8000fe4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000fe8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000fec:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ff0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ff4:	428b      	cmp	r3, r1
 8000ff6:	bf38      	it	cc
 8000ff8:	005b      	lslcc	r3, r3, #1
 8000ffa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ffe:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8001002:	428b      	cmp	r3, r1
 8001004:	bf24      	itt	cs
 8001006:	1a5b      	subcs	r3, r3, r1
 8001008:	ea40 000c 	orrcs.w	r0, r0, ip
 800100c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8001010:	bf24      	itt	cs
 8001012:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8001016:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800101a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 800101e:	bf24      	itt	cs
 8001020:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8001024:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001028:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 800102c:	bf24      	itt	cs
 800102e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8001032:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	bf18      	it	ne
 800103a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 800103e:	d1e0      	bne.n	8001002 <__aeabi_fdiv+0x46>
 8001040:	2afd      	cmp	r2, #253	; 0xfd
 8001042:	f63f af50 	bhi.w	8000ee6 <__aeabi_fmul+0x92>
 8001046:	428b      	cmp	r3, r1
 8001048:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800104c:	bf08      	it	eq
 800104e:	f020 0001 	biceq.w	r0, r0, #1
 8001052:	4770      	bx	lr
 8001054:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001058:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800105c:	327f      	adds	r2, #127	; 0x7f
 800105e:	bfc2      	ittt	gt
 8001060:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001064:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001068:	4770      	bxgt	lr
 800106a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	3a01      	subs	r2, #1
 8001074:	e737      	b.n	8000ee6 <__aeabi_fmul+0x92>
 8001076:	f092 0f00 	teq	r2, #0
 800107a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800107e:	bf02      	ittt	eq
 8001080:	0040      	lsleq	r0, r0, #1
 8001082:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001086:	3a01      	subeq	r2, #1
 8001088:	d0f9      	beq.n	800107e <__aeabi_fdiv+0xc2>
 800108a:	ea40 000c 	orr.w	r0, r0, ip
 800108e:	f093 0f00 	teq	r3, #0
 8001092:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001096:	bf02      	ittt	eq
 8001098:	0049      	lsleq	r1, r1, #1
 800109a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800109e:	3b01      	subeq	r3, #1
 80010a0:	d0f9      	beq.n	8001096 <__aeabi_fdiv+0xda>
 80010a2:	ea41 010c 	orr.w	r1, r1, ip
 80010a6:	e795      	b.n	8000fd4 <__aeabi_fdiv+0x18>
 80010a8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80010ac:	ea92 0f0c 	teq	r2, ip
 80010b0:	d108      	bne.n	80010c4 <__aeabi_fdiv+0x108>
 80010b2:	0242      	lsls	r2, r0, #9
 80010b4:	f47f af7d 	bne.w	8000fb2 <__aeabi_fmul+0x15e>
 80010b8:	ea93 0f0c 	teq	r3, ip
 80010bc:	f47f af70 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010c0:	4608      	mov	r0, r1
 80010c2:	e776      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010c4:	ea93 0f0c 	teq	r3, ip
 80010c8:	d104      	bne.n	80010d4 <__aeabi_fdiv+0x118>
 80010ca:	024b      	lsls	r3, r1, #9
 80010cc:	f43f af4c 	beq.w	8000f68 <__aeabi_fmul+0x114>
 80010d0:	4608      	mov	r0, r1
 80010d2:	e76e      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010d4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80010d8:	bf18      	it	ne
 80010da:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80010de:	d1ca      	bne.n	8001076 <__aeabi_fdiv+0xba>
 80010e0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80010e4:	f47f af5c 	bne.w	8000fa0 <__aeabi_fmul+0x14c>
 80010e8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80010ec:	f47f af3c 	bne.w	8000f68 <__aeabi_fmul+0x114>
 80010f0:	e75f      	b.n	8000fb2 <__aeabi_fmul+0x15e>
 80010f2:	bf00      	nop

080010f4 <__gesf2>:
 80010f4:	f04f 3cff 	mov.w	ip, #4294967295
 80010f8:	e006      	b.n	8001108 <__cmpsf2+0x4>
 80010fa:	bf00      	nop

080010fc <__lesf2>:
 80010fc:	f04f 0c01 	mov.w	ip, #1
 8001100:	e002      	b.n	8001108 <__cmpsf2+0x4>
 8001102:	bf00      	nop

08001104 <__cmpsf2>:
 8001104:	f04f 0c01 	mov.w	ip, #1
 8001108:	f84d cd04 	str.w	ip, [sp, #-4]!
 800110c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001110:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001114:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001118:	bf18      	it	ne
 800111a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800111e:	d011      	beq.n	8001144 <__cmpsf2+0x40>
 8001120:	b001      	add	sp, #4
 8001122:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001126:	bf18      	it	ne
 8001128:	ea90 0f01 	teqne	r0, r1
 800112c:	bf58      	it	pl
 800112e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001132:	bf88      	it	hi
 8001134:	17c8      	asrhi	r0, r1, #31
 8001136:	bf38      	it	cc
 8001138:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800113c:	bf18      	it	ne
 800113e:	f040 0001 	orrne.w	r0, r0, #1
 8001142:	4770      	bx	lr
 8001144:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001148:	d102      	bne.n	8001150 <__cmpsf2+0x4c>
 800114a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800114e:	d105      	bne.n	800115c <__cmpsf2+0x58>
 8001150:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001154:	d1e4      	bne.n	8001120 <__cmpsf2+0x1c>
 8001156:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800115a:	d0e1      	beq.n	8001120 <__cmpsf2+0x1c>
 800115c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <__aeabi_cfrcmple>:
 8001164:	4684      	mov	ip, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4661      	mov	r1, ip
 800116a:	e7ff      	b.n	800116c <__aeabi_cfcmpeq>

0800116c <__aeabi_cfcmpeq>:
 800116c:	b50f      	push	{r0, r1, r2, r3, lr}
 800116e:	f7ff ffc9 	bl	8001104 <__cmpsf2>
 8001172:	2800      	cmp	r0, #0
 8001174:	bf48      	it	mi
 8001176:	f110 0f00 	cmnmi.w	r0, #0
 800117a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800117c <__aeabi_fcmpeq>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff fff4 	bl	800116c <__aeabi_cfcmpeq>
 8001184:	bf0c      	ite	eq
 8001186:	2001      	moveq	r0, #1
 8001188:	2000      	movne	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmplt>:
 8001190:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001194:	f7ff ffea 	bl	800116c <__aeabi_cfcmpeq>
 8001198:	bf34      	ite	cc
 800119a:	2001      	movcc	r0, #1
 800119c:	2000      	movcs	r0, #0
 800119e:	f85d fb08 	ldr.w	pc, [sp], #8
 80011a2:	bf00      	nop

080011a4 <__aeabi_fcmple>:
 80011a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011a8:	f7ff ffe0 	bl	800116c <__aeabi_cfcmpeq>
 80011ac:	bf94      	ite	ls
 80011ae:	2001      	movls	r0, #1
 80011b0:	2000      	movhi	r0, #0
 80011b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80011b6:	bf00      	nop

080011b8 <__aeabi_fcmpge>:
 80011b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011bc:	f7ff ffd2 	bl	8001164 <__aeabi_cfrcmple>
 80011c0:	bf94      	ite	ls
 80011c2:	2001      	movls	r0, #1
 80011c4:	2000      	movhi	r0, #0
 80011c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80011ca:	bf00      	nop

080011cc <__aeabi_fcmpgt>:
 80011cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80011d0:	f7ff ffc8 	bl	8001164 <__aeabi_cfrcmple>
 80011d4:	bf34      	ite	cc
 80011d6:	2001      	movcc	r0, #1
 80011d8:	2000      	movcs	r0, #0
 80011da:	f85d fb08 	ldr.w	pc, [sp], #8
 80011de:	bf00      	nop

080011e0 <__aeabi_f2iz>:
 80011e0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011e8:	d30f      	bcc.n	800120a <__aeabi_f2iz+0x2a>
 80011ea:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011f2:	d90d      	bls.n	8001210 <__aeabi_f2iz+0x30>
 80011f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011fc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001200:	fa23 f002 	lsr.w	r0, r3, r2
 8001204:	bf18      	it	ne
 8001206:	4240      	negne	r0, r0
 8001208:	4770      	bx	lr
 800120a:	f04f 0000 	mov.w	r0, #0
 800120e:	4770      	bx	lr
 8001210:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001214:	d101      	bne.n	800121a <__aeabi_f2iz+0x3a>
 8001216:	0242      	lsls	r2, r0, #9
 8001218:	d105      	bne.n	8001226 <__aeabi_f2iz+0x46>
 800121a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800121e:	bf08      	it	eq
 8001220:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001224:	4770      	bx	lr
 8001226:	f04f 0000 	mov.w	r0, #0
 800122a:	4770      	bx	lr

0800122c <__aeabi_f2uiz>:
 800122c:	0042      	lsls	r2, r0, #1
 800122e:	d20e      	bcs.n	800124e <__aeabi_f2uiz+0x22>
 8001230:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001234:	d30b      	bcc.n	800124e <__aeabi_f2uiz+0x22>
 8001236:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800123a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800123e:	d409      	bmi.n	8001254 <__aeabi_f2uiz+0x28>
 8001240:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001244:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001248:	fa23 f002 	lsr.w	r0, r3, r2
 800124c:	4770      	bx	lr
 800124e:	f04f 0000 	mov.w	r0, #0
 8001252:	4770      	bx	lr
 8001254:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001258:	d101      	bne.n	800125e <__aeabi_f2uiz+0x32>
 800125a:	0242      	lsls	r2, r0, #9
 800125c:	d102      	bne.n	8001264 <__aeabi_f2uiz+0x38>
 800125e:	f04f 30ff 	mov.w	r0, #4294967295
 8001262:	4770      	bx	lr
 8001264:	f04f 0000 	mov.w	r0, #0
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <__aeabi_uldivmod>:
 800126c:	b953      	cbnz	r3, 8001284 <__aeabi_uldivmod+0x18>
 800126e:	b94a      	cbnz	r2, 8001284 <__aeabi_uldivmod+0x18>
 8001270:	2900      	cmp	r1, #0
 8001272:	bf08      	it	eq
 8001274:	2800      	cmpeq	r0, #0
 8001276:	bf1c      	itt	ne
 8001278:	f04f 31ff 	movne.w	r1, #4294967295
 800127c:	f04f 30ff 	movne.w	r0, #4294967295
 8001280:	f000 b9a8 	b.w	80015d4 <__aeabi_idiv0>
 8001284:	f1ad 0c08 	sub.w	ip, sp, #8
 8001288:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800128c:	f000 f83e 	bl	800130c <__udivmoddi4>
 8001290:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001294:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001298:	b004      	add	sp, #16
 800129a:	4770      	bx	lr

0800129c <__aeabi_d2lz>:
 800129c:	b538      	push	{r3, r4, r5, lr}
 800129e:	4605      	mov	r5, r0
 80012a0:	460c      	mov	r4, r1
 80012a2:	4628      	mov	r0, r5
 80012a4:	4621      	mov	r1, r4
 80012a6:	2200      	movs	r2, #0
 80012a8:	2300      	movs	r3, #0
 80012aa:	f7ff fbef 	bl	8000a8c <__aeabi_dcmplt>
 80012ae:	b928      	cbnz	r0, 80012bc <__aeabi_d2lz+0x20>
 80012b0:	4628      	mov	r0, r5
 80012b2:	4621      	mov	r1, r4
 80012b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80012b8:	f000 b80a 	b.w	80012d0 <__aeabi_d2ulz>
 80012bc:	4628      	mov	r0, r5
 80012be:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 80012c2:	f000 f805 	bl	80012d0 <__aeabi_d2ulz>
 80012c6:	4240      	negs	r0, r0
 80012c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80012cc:	bd38      	pop	{r3, r4, r5, pc}
 80012ce:	bf00      	nop

080012d0 <__aeabi_d2ulz>:
 80012d0:	b5d0      	push	{r4, r6, r7, lr}
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__aeabi_d2ulz+0x34>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	4606      	mov	r6, r0
 80012d8:	460f      	mov	r7, r1
 80012da:	f7ff f965 	bl	80005a8 <__aeabi_dmul>
 80012de:	f7ff fc3b 	bl	8000b58 <__aeabi_d2uiz>
 80012e2:	4604      	mov	r4, r0
 80012e4:	f7ff f8e6 	bl	80004b4 <__aeabi_ui2d>
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <__aeabi_d2ulz+0x38>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	f7ff f95c 	bl	80005a8 <__aeabi_dmul>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4630      	mov	r0, r6
 80012f6:	4639      	mov	r1, r7
 80012f8:	f7fe ff9e 	bl	8000238 <__aeabi_dsub>
 80012fc:	f7ff fc2c 	bl	8000b58 <__aeabi_d2uiz>
 8001300:	4621      	mov	r1, r4
 8001302:	bdd0      	pop	{r4, r6, r7, pc}
 8001304:	3df00000 	.word	0x3df00000
 8001308:	41f00000 	.word	0x41f00000

0800130c <__udivmoddi4>:
 800130c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001310:	9e08      	ldr	r6, [sp, #32]
 8001312:	460d      	mov	r5, r1
 8001314:	4604      	mov	r4, r0
 8001316:	460f      	mov	r7, r1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d14a      	bne.n	80013b2 <__udivmoddi4+0xa6>
 800131c:	428a      	cmp	r2, r1
 800131e:	4694      	mov	ip, r2
 8001320:	d965      	bls.n	80013ee <__udivmoddi4+0xe2>
 8001322:	fab2 f382 	clz	r3, r2
 8001326:	b143      	cbz	r3, 800133a <__udivmoddi4+0x2e>
 8001328:	fa02 fc03 	lsl.w	ip, r2, r3
 800132c:	f1c3 0220 	rsb	r2, r3, #32
 8001330:	409f      	lsls	r7, r3
 8001332:	fa20 f202 	lsr.w	r2, r0, r2
 8001336:	4317      	orrs	r7, r2
 8001338:	409c      	lsls	r4, r3
 800133a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800133e:	fa1f f58c 	uxth.w	r5, ip
 8001342:	fbb7 f1fe 	udiv	r1, r7, lr
 8001346:	0c22      	lsrs	r2, r4, #16
 8001348:	fb0e 7711 	mls	r7, lr, r1, r7
 800134c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001350:	fb01 f005 	mul.w	r0, r1, r5
 8001354:	4290      	cmp	r0, r2
 8001356:	d90a      	bls.n	800136e <__udivmoddi4+0x62>
 8001358:	eb1c 0202 	adds.w	r2, ip, r2
 800135c:	f101 37ff 	add.w	r7, r1, #4294967295
 8001360:	f080 811b 	bcs.w	800159a <__udivmoddi4+0x28e>
 8001364:	4290      	cmp	r0, r2
 8001366:	f240 8118 	bls.w	800159a <__udivmoddi4+0x28e>
 800136a:	3902      	subs	r1, #2
 800136c:	4462      	add	r2, ip
 800136e:	1a12      	subs	r2, r2, r0
 8001370:	b2a4      	uxth	r4, r4
 8001372:	fbb2 f0fe 	udiv	r0, r2, lr
 8001376:	fb0e 2210 	mls	r2, lr, r0, r2
 800137a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800137e:	fb00 f505 	mul.w	r5, r0, r5
 8001382:	42a5      	cmp	r5, r4
 8001384:	d90a      	bls.n	800139c <__udivmoddi4+0x90>
 8001386:	eb1c 0404 	adds.w	r4, ip, r4
 800138a:	f100 32ff 	add.w	r2, r0, #4294967295
 800138e:	f080 8106 	bcs.w	800159e <__udivmoddi4+0x292>
 8001392:	42a5      	cmp	r5, r4
 8001394:	f240 8103 	bls.w	800159e <__udivmoddi4+0x292>
 8001398:	4464      	add	r4, ip
 800139a:	3802      	subs	r0, #2
 800139c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80013a0:	1b64      	subs	r4, r4, r5
 80013a2:	2100      	movs	r1, #0
 80013a4:	b11e      	cbz	r6, 80013ae <__udivmoddi4+0xa2>
 80013a6:	40dc      	lsrs	r4, r3
 80013a8:	2300      	movs	r3, #0
 80013aa:	e9c6 4300 	strd	r4, r3, [r6]
 80013ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013b2:	428b      	cmp	r3, r1
 80013b4:	d908      	bls.n	80013c8 <__udivmoddi4+0xbc>
 80013b6:	2e00      	cmp	r6, #0
 80013b8:	f000 80ec 	beq.w	8001594 <__udivmoddi4+0x288>
 80013bc:	2100      	movs	r1, #0
 80013be:	e9c6 0500 	strd	r0, r5, [r6]
 80013c2:	4608      	mov	r0, r1
 80013c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013c8:	fab3 f183 	clz	r1, r3
 80013cc:	2900      	cmp	r1, #0
 80013ce:	d149      	bne.n	8001464 <__udivmoddi4+0x158>
 80013d0:	42ab      	cmp	r3, r5
 80013d2:	d302      	bcc.n	80013da <__udivmoddi4+0xce>
 80013d4:	4282      	cmp	r2, r0
 80013d6:	f200 80f7 	bhi.w	80015c8 <__udivmoddi4+0x2bc>
 80013da:	1a84      	subs	r4, r0, r2
 80013dc:	eb65 0203 	sbc.w	r2, r5, r3
 80013e0:	2001      	movs	r0, #1
 80013e2:	4617      	mov	r7, r2
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	d0e2      	beq.n	80013ae <__udivmoddi4+0xa2>
 80013e8:	e9c6 4700 	strd	r4, r7, [r6]
 80013ec:	e7df      	b.n	80013ae <__udivmoddi4+0xa2>
 80013ee:	b902      	cbnz	r2, 80013f2 <__udivmoddi4+0xe6>
 80013f0:	deff      	udf	#255	; 0xff
 80013f2:	fab2 f382 	clz	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	f040 808f 	bne.w	800151a <__udivmoddi4+0x20e>
 80013fc:	1a8a      	subs	r2, r1, r2
 80013fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001402:	fa1f fe8c 	uxth.w	lr, ip
 8001406:	2101      	movs	r1, #1
 8001408:	fbb2 f5f7 	udiv	r5, r2, r7
 800140c:	fb07 2015 	mls	r0, r7, r5, r2
 8001410:	0c22      	lsrs	r2, r4, #16
 8001412:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001416:	fb0e f005 	mul.w	r0, lr, r5
 800141a:	4290      	cmp	r0, r2
 800141c:	d908      	bls.n	8001430 <__udivmoddi4+0x124>
 800141e:	eb1c 0202 	adds.w	r2, ip, r2
 8001422:	f105 38ff 	add.w	r8, r5, #4294967295
 8001426:	d202      	bcs.n	800142e <__udivmoddi4+0x122>
 8001428:	4290      	cmp	r0, r2
 800142a:	f200 80ca 	bhi.w	80015c2 <__udivmoddi4+0x2b6>
 800142e:	4645      	mov	r5, r8
 8001430:	1a12      	subs	r2, r2, r0
 8001432:	b2a4      	uxth	r4, r4
 8001434:	fbb2 f0f7 	udiv	r0, r2, r7
 8001438:	fb07 2210 	mls	r2, r7, r0, r2
 800143c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001440:	fb0e fe00 	mul.w	lr, lr, r0
 8001444:	45a6      	cmp	lr, r4
 8001446:	d908      	bls.n	800145a <__udivmoddi4+0x14e>
 8001448:	eb1c 0404 	adds.w	r4, ip, r4
 800144c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001450:	d202      	bcs.n	8001458 <__udivmoddi4+0x14c>
 8001452:	45a6      	cmp	lr, r4
 8001454:	f200 80ba 	bhi.w	80015cc <__udivmoddi4+0x2c0>
 8001458:	4610      	mov	r0, r2
 800145a:	eba4 040e 	sub.w	r4, r4, lr
 800145e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001462:	e79f      	b.n	80013a4 <__udivmoddi4+0x98>
 8001464:	f1c1 0720 	rsb	r7, r1, #32
 8001468:	408b      	lsls	r3, r1
 800146a:	fa22 fc07 	lsr.w	ip, r2, r7
 800146e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001472:	fa05 f401 	lsl.w	r4, r5, r1
 8001476:	fa20 f307 	lsr.w	r3, r0, r7
 800147a:	40fd      	lsrs	r5, r7
 800147c:	4323      	orrs	r3, r4
 800147e:	fa00 f901 	lsl.w	r9, r0, r1
 8001482:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8001486:	fa1f fe8c 	uxth.w	lr, ip
 800148a:	fbb5 f8f0 	udiv	r8, r5, r0
 800148e:	0c1c      	lsrs	r4, r3, #16
 8001490:	fb00 5518 	mls	r5, r0, r8, r5
 8001494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001498:	fb08 f50e 	mul.w	r5, r8, lr
 800149c:	42a5      	cmp	r5, r4
 800149e:	fa02 f201 	lsl.w	r2, r2, r1
 80014a2:	d90b      	bls.n	80014bc <__udivmoddi4+0x1b0>
 80014a4:	eb1c 0404 	adds.w	r4, ip, r4
 80014a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80014ac:	f080 8087 	bcs.w	80015be <__udivmoddi4+0x2b2>
 80014b0:	42a5      	cmp	r5, r4
 80014b2:	f240 8084 	bls.w	80015be <__udivmoddi4+0x2b2>
 80014b6:	f1a8 0802 	sub.w	r8, r8, #2
 80014ba:	4464      	add	r4, ip
 80014bc:	1b64      	subs	r4, r4, r5
 80014be:	b29d      	uxth	r5, r3
 80014c0:	fbb4 f3f0 	udiv	r3, r4, r0
 80014c4:	fb00 4413 	mls	r4, r0, r3, r4
 80014c8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80014cc:	fb03 fe0e 	mul.w	lr, r3, lr
 80014d0:	45a6      	cmp	lr, r4
 80014d2:	d908      	bls.n	80014e6 <__udivmoddi4+0x1da>
 80014d4:	eb1c 0404 	adds.w	r4, ip, r4
 80014d8:	f103 30ff 	add.w	r0, r3, #4294967295
 80014dc:	d26b      	bcs.n	80015b6 <__udivmoddi4+0x2aa>
 80014de:	45a6      	cmp	lr, r4
 80014e0:	d969      	bls.n	80015b6 <__udivmoddi4+0x2aa>
 80014e2:	3b02      	subs	r3, #2
 80014e4:	4464      	add	r4, ip
 80014e6:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80014ea:	fba0 8302 	umull	r8, r3, r0, r2
 80014ee:	eba4 040e 	sub.w	r4, r4, lr
 80014f2:	429c      	cmp	r4, r3
 80014f4:	46c6      	mov	lr, r8
 80014f6:	461d      	mov	r5, r3
 80014f8:	d355      	bcc.n	80015a6 <__udivmoddi4+0x29a>
 80014fa:	d052      	beq.n	80015a2 <__udivmoddi4+0x296>
 80014fc:	b156      	cbz	r6, 8001514 <__udivmoddi4+0x208>
 80014fe:	ebb9 030e 	subs.w	r3, r9, lr
 8001502:	eb64 0405 	sbc.w	r4, r4, r5
 8001506:	fa04 f707 	lsl.w	r7, r4, r7
 800150a:	40cb      	lsrs	r3, r1
 800150c:	40cc      	lsrs	r4, r1
 800150e:	431f      	orrs	r7, r3
 8001510:	e9c6 7400 	strd	r7, r4, [r6]
 8001514:	2100      	movs	r1, #0
 8001516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800151a:	f1c3 0120 	rsb	r1, r3, #32
 800151e:	fa02 fc03 	lsl.w	ip, r2, r3
 8001522:	fa20 f201 	lsr.w	r2, r0, r1
 8001526:	fa25 f101 	lsr.w	r1, r5, r1
 800152a:	409d      	lsls	r5, r3
 800152c:	432a      	orrs	r2, r5
 800152e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001532:	fa1f fe8c 	uxth.w	lr, ip
 8001536:	fbb1 f0f7 	udiv	r0, r1, r7
 800153a:	fb07 1510 	mls	r5, r7, r0, r1
 800153e:	0c11      	lsrs	r1, r2, #16
 8001540:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8001544:	fb00 f50e 	mul.w	r5, r0, lr
 8001548:	428d      	cmp	r5, r1
 800154a:	fa04 f403 	lsl.w	r4, r4, r3
 800154e:	d908      	bls.n	8001562 <__udivmoddi4+0x256>
 8001550:	eb1c 0101 	adds.w	r1, ip, r1
 8001554:	f100 38ff 	add.w	r8, r0, #4294967295
 8001558:	d22f      	bcs.n	80015ba <__udivmoddi4+0x2ae>
 800155a:	428d      	cmp	r5, r1
 800155c:	d92d      	bls.n	80015ba <__udivmoddi4+0x2ae>
 800155e:	3802      	subs	r0, #2
 8001560:	4461      	add	r1, ip
 8001562:	1b49      	subs	r1, r1, r5
 8001564:	b292      	uxth	r2, r2
 8001566:	fbb1 f5f7 	udiv	r5, r1, r7
 800156a:	fb07 1115 	mls	r1, r7, r5, r1
 800156e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001572:	fb05 f10e 	mul.w	r1, r5, lr
 8001576:	4291      	cmp	r1, r2
 8001578:	d908      	bls.n	800158c <__udivmoddi4+0x280>
 800157a:	eb1c 0202 	adds.w	r2, ip, r2
 800157e:	f105 38ff 	add.w	r8, r5, #4294967295
 8001582:	d216      	bcs.n	80015b2 <__udivmoddi4+0x2a6>
 8001584:	4291      	cmp	r1, r2
 8001586:	d914      	bls.n	80015b2 <__udivmoddi4+0x2a6>
 8001588:	3d02      	subs	r5, #2
 800158a:	4462      	add	r2, ip
 800158c:	1a52      	subs	r2, r2, r1
 800158e:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001592:	e739      	b.n	8001408 <__udivmoddi4+0xfc>
 8001594:	4631      	mov	r1, r6
 8001596:	4630      	mov	r0, r6
 8001598:	e709      	b.n	80013ae <__udivmoddi4+0xa2>
 800159a:	4639      	mov	r1, r7
 800159c:	e6e7      	b.n	800136e <__udivmoddi4+0x62>
 800159e:	4610      	mov	r0, r2
 80015a0:	e6fc      	b.n	800139c <__udivmoddi4+0x90>
 80015a2:	45c1      	cmp	r9, r8
 80015a4:	d2aa      	bcs.n	80014fc <__udivmoddi4+0x1f0>
 80015a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80015aa:	eb63 050c 	sbc.w	r5, r3, ip
 80015ae:	3801      	subs	r0, #1
 80015b0:	e7a4      	b.n	80014fc <__udivmoddi4+0x1f0>
 80015b2:	4645      	mov	r5, r8
 80015b4:	e7ea      	b.n	800158c <__udivmoddi4+0x280>
 80015b6:	4603      	mov	r3, r0
 80015b8:	e795      	b.n	80014e6 <__udivmoddi4+0x1da>
 80015ba:	4640      	mov	r0, r8
 80015bc:	e7d1      	b.n	8001562 <__udivmoddi4+0x256>
 80015be:	46d0      	mov	r8, sl
 80015c0:	e77c      	b.n	80014bc <__udivmoddi4+0x1b0>
 80015c2:	3d02      	subs	r5, #2
 80015c4:	4462      	add	r2, ip
 80015c6:	e733      	b.n	8001430 <__udivmoddi4+0x124>
 80015c8:	4608      	mov	r0, r1
 80015ca:	e70b      	b.n	80013e4 <__udivmoddi4+0xd8>
 80015cc:	4464      	add	r4, ip
 80015ce:	3802      	subs	r0, #2
 80015d0:	e743      	b.n	800145a <__udivmoddi4+0x14e>
 80015d2:	bf00      	nop

080015d4 <__aeabi_idiv0>:
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop

080015d8 <clearModbusParams>:
        arr[i] = val;
    }
}


void clearModbusParams(uint8_t deviceNum){  // Device 1 to 16
 80015d8:	b570      	push	{r4, r5, r6, lr}
 80015da:	f5ad 7d74 	sub.w	sp, sp, #976	; 0x3d0
 80015de:	4606      	mov	r6, r0
	struct ModbusDevice _modbusInitParams;

	  _modbusInitParams.DeviceActive = 0;
 80015e0:	2400      	movs	r4, #0
 80015e2:	f88d 4000 	strb.w	r4, [sp]
	  _modbusInitParams.ID = 0;
 80015e6:	f88d 4001 	strb.w	r4, [sp, #1]
	  _modbusInitParams.Parity = 0;
 80015ea:	f88d 4003 	strb.w	r4, [sp, #3]
	  _modbusInitParams.StopBits = 0;
 80015ee:	f88d 4004 	strb.w	r4, [sp, #4]
	  _modbusInitParams.Baudrate = 0;
 80015f2:	f88d 4002 	strb.w	r4, [sp, #2]

	  for (int i = 0; i < NUM_DEV_SEGMENTS; i++) {
 80015f6:	e01f      	b.n	8001638 <clearModbusParams+0x60>
		  memset(_modbusInitParams.Segment[i].cmdRaw, 0, sizeof(_modbusInitParams.Segment[i].cmdRaw));
 80015f8:	00e5      	lsls	r5, r4, #3
 80015fa:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
 80015fe:	00c0      	lsls	r0, r0, #3
 8001600:	3008      	adds	r0, #8
 8001602:	4468      	add	r0, sp
 8001604:	2220      	movs	r2, #32
 8001606:	2100      	movs	r1, #0
 8001608:	3001      	adds	r0, #1
 800160a:	f016 fe77 	bl	80182fc <memset>
		  _modbusInitParams.Segment[i].cmdSize = 8;
 800160e:	1b2b      	subs	r3, r5, r4
 8001610:	eb0d 03c3 	add.w	r3, sp, r3, lsl #3
 8001614:	2208      	movs	r2, #8
 8001616:	721a      	strb	r2, [r3, #8]
		  _modbusInitParams.Segment[i].sendNow = 0;
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		  _modbusInitParams.Segment[i].sendNow = 0;
		  _modbusInitParams.Segment[i].validAddresses = 0x00000000;
 800161e:	2000      	movs	r0, #0
 8001620:	2100      	movs	r1, #0
 8001622:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
		  _modbusInitParams.Segment[i].enableSegment = 0;
 8001626:	3401      	adds	r4, #1
 8001628:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	f80d 2003 	strb.w	r2, [sp, r3]

		  HAL_Delay(10);
 8001632:	200a      	movs	r0, #10
 8001634:	f001 f954 	bl	80028e0 <HAL_Delay>
	  for (int i = 0; i < NUM_DEV_SEGMENTS; i++) {
 8001638:	2c0f      	cmp	r4, #15
 800163a:	dddd      	ble.n	80015f8 <clearModbusParams+0x20>
	  }

	  /* Write New Segment Configuration for Selected Device */
		if (FLASH_IF_Erase((void *)ModbusDeviceFlashAddresses[deviceNum - 1], FLASH_PAGE_SIZE) == FLASH_IF_OK){
 800163c:	3e01      	subs	r6, #1
 800163e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <clearModbusParams+0xc4>)
 8001644:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8001648:	f000 fd70 	bl	800212c <FLASH_IF_Erase>
 800164c:	b9e0      	cbnz	r0, 8001688 <clearModbusParams+0xb0>
			APP_LOG(TS_OFF, VLEVEL_M, "ERASE OK");
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <clearModbusParams+0xc8>)
 8001650:	2200      	movs	r2, #0
 8001652:	4611      	mov	r1, r2
 8001654:	2002      	movs	r0, #2
 8001656:	f014 ff95 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			if(FLASH_IF_Write((void *)ModbusDeviceFlashAddresses[deviceNum - 1], (void *)&_modbusInitParams, sizeof(struct ModbusDevice)) == FLASH_IF_OK){
 800165a:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 800165e:	4669      	mov	r1, sp
 8001660:	4b0e      	ldr	r3, [pc, #56]	; (800169c <clearModbusParams+0xc4>)
 8001662:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8001666:	f000 fd29 	bl	80020bc <FLASH_IF_Write>
 800166a:	b930      	cbnz	r0, 800167a <clearModbusParams+0xa2>
				APP_LOG(TS_OFF, VLEVEL_M, "WRITE OK");
 800166c:	4b0d      	ldr	r3, [pc, #52]	; (80016a4 <clearModbusParams+0xcc>)
 800166e:	2200      	movs	r2, #0
 8001670:	4611      	mov	r1, r2
 8001672:	2002      	movs	r0, #2
 8001674:	f014 ff86 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8001678:	e00c      	b.n	8001694 <clearModbusParams+0xbc>
			}
			else{
				APP_LOG(TS_OFF, VLEVEL_M, "WRITE ERROR");
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <clearModbusParams+0xd0>)
 800167c:	2200      	movs	r2, #0
 800167e:	4611      	mov	r1, r2
 8001680:	2002      	movs	r0, #2
 8001682:	f014 ff7f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8001686:	e005      	b.n	8001694 <clearModbusParams+0xbc>
			}
		}
		else{
			APP_LOG(TS_OFF, VLEVEL_M, "ERASE ERROR");
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <clearModbusParams+0xd4>)
 800168a:	2200      	movs	r2, #0
 800168c:	4611      	mov	r1, r2
 800168e:	2002      	movs	r0, #2
 8001690:	f014 ff78 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		}
}
 8001694:	f50d 7d74 	add.w	sp, sp, #976	; 0x3d0
 8001698:	bd70      	pop	{r4, r5, r6, pc}
 800169a:	bf00      	nop
 800169c:	20000000 	.word	0x20000000
 80016a0:	0801c31c 	.word	0x0801c31c
 80016a4:	0801c328 	.word	0x0801c328
 80016a8:	0801c334 	.word	0x0801c334
 80016ac:	0801c340 	.word	0x0801c340

080016b0 <showMonitoringSlotParams>:

void showMonitoringSlotParams(struct ModbusDevice MonitoringSlotNVM){
 80016b0:	b084      	sub	sp, #16
 80016b2:	b530      	push	{r4, r5, lr}
 80016b4:	b085      	sub	sp, #20
 80016b6:	ac08      	add	r4, sp, #32
 80016b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t cmdSize = MonitoringSlotNVM.MonitoringSlot.cmdSize;
 80016bc:	f89d 53c8 	ldrb.w	r5, [sp, #968]	; 0x3c8

	APP_LOG(TS_OFF, VLEVEL_M, "ModBus Command: ");
 80016c0:	4b64      	ldr	r3, [pc, #400]	; (8001854 <showMonitoringSlotParams+0x1a4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	4611      	mov	r1, r2
 80016c6:	2002      	movs	r0, #2
 80016c8:	f014 ff5c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	for (int j = 0; j < cmdSize; j++) {
 80016cc:	2400      	movs	r4, #0
 80016ce:	e00c      	b.n	80016ea <showMonitoringSlotParams+0x3a>
		APP_LOG(TS_OFF, VLEVEL_M, "%02X ", MonitoringSlotNVM.MonitoringSlot.modbusCMD[j]);
 80016d0:	f104 0320 	add.w	r3, r4, #32
 80016d4:	446b      	add	r3, sp
 80016d6:	f893 3388 	ldrb.w	r3, [r3, #904]	; 0x388
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <showMonitoringSlotParams+0x1a8>)
 80016de:	2200      	movs	r2, #0
 80016e0:	4611      	mov	r1, r2
 80016e2:	2002      	movs	r0, #2
 80016e4:	f014 ff4e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	for (int j = 0; j < cmdSize; j++) {
 80016e8:	3401      	adds	r4, #1
 80016ea:	42a5      	cmp	r5, r4
 80016ec:	dcf0      	bgt.n	80016d0 <showMonitoringSlotParams+0x20>
	}
	APP_LOG(TS_OFF, VLEVEL_M, "\n");
 80016ee:	4b5b      	ldr	r3, [pc, #364]	; (800185c <showMonitoringSlotParams+0x1ac>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	4611      	mov	r1, r2
 80016f4:	2002      	movs	r0, #2
 80016f6:	f014 ff45 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Baudrate: %u \r\n", MonitoringSlotNVM.Baudrate);
 80016fa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	4b57      	ldr	r3, [pc, #348]	; (8001860 <showMonitoringSlotParams+0x1b0>)
 8001702:	2200      	movs	r2, #0
 8001704:	4611      	mov	r1, r2
 8001706:	2002      	movs	r0, #2
 8001708:	f014 ff3c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Parity: %d   \r\n", MonitoringSlotNVM.Parity);
 800170c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4b54      	ldr	r3, [pc, #336]	; (8001864 <showMonitoringSlotParams+0x1b4>)
 8001714:	2200      	movs	r2, #0
 8001716:	4611      	mov	r1, r2
 8001718:	2002      	movs	r0, #2
 800171a:	f014 ff33 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "StopBits: %d \r\n", MonitoringSlotNVM.StopBits);
 800171e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8001722:	9300      	str	r3, [sp, #0]
 8001724:	4b50      	ldr	r3, [pc, #320]	; (8001868 <showMonitoringSlotParams+0x1b8>)
 8001726:	2200      	movs	r2, #0
 8001728:	4611      	mov	r1, r2
 800172a:	2002      	movs	r0, #2
 800172c:	f014 ff2a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Device Enable: %s \r\n", MonitoringSlotNVM.DeviceActive == 1 ? "true" : "false");
 8001730:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8001734:	2b01      	cmp	r3, #1
 8001736:	f000 8086 	beq.w	8001846 <showMonitoringSlotParams+0x196>
 800173a:	4b4c      	ldr	r3, [pc, #304]	; (800186c <showMonitoringSlotParams+0x1bc>)
 800173c:	9300      	str	r3, [sp, #0]
 800173e:	4b4c      	ldr	r3, [pc, #304]	; (8001870 <showMonitoringSlotParams+0x1c0>)
 8001740:	2200      	movs	r2, #0
 8001742:	4611      	mov	r1, r2
 8001744:	2002      	movs	r0, #2
 8001746:	f014 ff1d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>

	APP_LOG(TS_OFF, VLEVEL_M, "DataType: %d \r\n", MonitoringSlotNVM.MonitoringSlot.dataType);
 800174a:	f89d 33c9 	ldrb.w	r3, [sp, #969]	; 0x3c9
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	4b48      	ldr	r3, [pc, #288]	; (8001874 <showMonitoringSlotParams+0x1c4>)
 8001752:	2200      	movs	r2, #0
 8001754:	4611      	mov	r1, r2
 8001756:	2002      	movs	r0, #2
 8001758:	f014 ff14 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Data Start Index: %d \r\n", MonitoringSlotNVM.MonitoringSlot.valueStartIndex);
 800175c:	f89d 33ca 	ldrb.w	r3, [sp, #970]	; 0x3ca
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4b45      	ldr	r3, [pc, #276]	; (8001878 <showMonitoringSlotParams+0x1c8>)
 8001764:	2200      	movs	r2, #0
 8001766:	4611      	mov	r1, r2
 8001768:	2002      	movs	r0, #2
 800176a:	f014 ff0b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Threshold Active: %04X \r\n", MonitoringSlotNVM.MonitoringSlot.ThresholdActive);
 800176e:	f8bd 33d6 	ldrh.w	r3, [sp, #982]	; 0x3d6
 8001772:	9300      	str	r3, [sp, #0]
 8001774:	4b41      	ldr	r3, [pc, #260]	; (800187c <showMonitoringSlotParams+0x1cc>)
 8001776:	2200      	movs	r2, #0
 8001778:	4611      	mov	r1, r2
 800177a:	2002      	movs	r0, #2
 800177c:	f014 ff02 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Spike Up TH: %02X %02X %02X %02X \r\n", MonitoringSlotNVM.MonitoringSlot.SpikeUp.buff[0], MonitoringSlotNVM.MonitoringSlot.SpikeUp.buff[1], MonitoringSlotNVM.MonitoringSlot.SpikeUp.buff[2], MonitoringSlotNVM.MonitoringSlot.SpikeUp.buff[3]);
 8001780:	f89d 33d8 	ldrb.w	r3, [sp, #984]	; 0x3d8
 8001784:	f89d 23d9 	ldrb.w	r2, [sp, #985]	; 0x3d9
 8001788:	f89d 13da 	ldrb.w	r1, [sp, #986]	; 0x3da
 800178c:	f89d 03db 	ldrb.w	r0, [sp, #987]	; 0x3db
 8001790:	9003      	str	r0, [sp, #12]
 8001792:	9102      	str	r1, [sp, #8]
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	4b39      	ldr	r3, [pc, #228]	; (8001880 <showMonitoringSlotParams+0x1d0>)
 800179a:	2200      	movs	r2, #0
 800179c:	4611      	mov	r1, r2
 800179e:	2002      	movs	r0, #2
 80017a0:	f014 fef0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Spike Down TH: %02X %02X %02X %02X \r\n", MonitoringSlotNVM.MonitoringSlot.SpikeDown.buff[0], MonitoringSlotNVM.MonitoringSlot.SpikeDown.buff[1], MonitoringSlotNVM.MonitoringSlot.SpikeDown.buff[2], MonitoringSlotNVM.MonitoringSlot.SpikeDown.buff[3]);
 80017a4:	f89d 33dc 	ldrb.w	r3, [sp, #988]	; 0x3dc
 80017a8:	f89d 23dd 	ldrb.w	r2, [sp, #989]	; 0x3dd
 80017ac:	f89d 13de 	ldrb.w	r1, [sp, #990]	; 0x3de
 80017b0:	f89d 03df 	ldrb.w	r0, [sp, #991]	; 0x3df
 80017b4:	9003      	str	r0, [sp, #12]
 80017b6:	9102      	str	r1, [sp, #8]
 80017b8:	9201      	str	r2, [sp, #4]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4b31      	ldr	r3, [pc, #196]	; (8001884 <showMonitoringSlotParams+0x1d4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	4611      	mov	r1, r2
 80017c2:	2002      	movs	r0, #2
 80017c4:	f014 fede 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Threshold High TH: %02X %02X %02X %02X \r\n", MonitoringSlotNVM.MonitoringSlot.thresholdHigh.buff[0], MonitoringSlotNVM.MonitoringSlot.thresholdHigh.buff[1], MonitoringSlotNVM.MonitoringSlot.thresholdHigh.buff[2], MonitoringSlotNVM.MonitoringSlot.thresholdHigh.buff[3]);
 80017c8:	f89d 33e0 	ldrb.w	r3, [sp, #992]	; 0x3e0
 80017cc:	f89d 23e1 	ldrb.w	r2, [sp, #993]	; 0x3e1
 80017d0:	f89d 13e2 	ldrb.w	r1, [sp, #994]	; 0x3e2
 80017d4:	f89d 03e3 	ldrb.w	r0, [sp, #995]	; 0x3e3
 80017d8:	9003      	str	r0, [sp, #12]
 80017da:	9102      	str	r1, [sp, #8]
 80017dc:	9201      	str	r2, [sp, #4]
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	4b29      	ldr	r3, [pc, #164]	; (8001888 <showMonitoringSlotParams+0x1d8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	4611      	mov	r1, r2
 80017e6:	2002      	movs	r0, #2
 80017e8:	f014 fecc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Threshold Low TH: %02X %02X %02X %02X \r\n", MonitoringSlotNVM.MonitoringSlot.thresholdLow.buff[0], MonitoringSlotNVM.MonitoringSlot.thresholdLow.buff[1], MonitoringSlotNVM.MonitoringSlot.thresholdLow.buff[2], MonitoringSlotNVM.MonitoringSlot.thresholdLow.buff[3]);
 80017ec:	f89d 33e4 	ldrb.w	r3, [sp, #996]	; 0x3e4
 80017f0:	f89d 23e5 	ldrb.w	r2, [sp, #997]	; 0x3e5
 80017f4:	f89d 13e6 	ldrb.w	r1, [sp, #998]	; 0x3e6
 80017f8:	f89d 03e7 	ldrb.w	r0, [sp, #999]	; 0x3e7
 80017fc:	9003      	str	r0, [sp, #12]
 80017fe:	9102      	str	r1, [sp, #8]
 8001800:	9201      	str	r2, [sp, #4]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4b21      	ldr	r3, [pc, #132]	; (800188c <showMonitoringSlotParams+0x1dc>)
 8001806:	2200      	movs	r2, #0
 8001808:	4611      	mov	r1, r2
 800180a:	2002      	movs	r0, #2
 800180c:	f014 feba 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "On Change: %s \r\n", MonitoringSlotNVM.MonitoringSlot.onChange == 1 ? "true" : "false");
 8001810:	f89d 33e8 	ldrb.w	r3, [sp, #1000]	; 0x3e8
 8001814:	b1cb      	cbz	r3, 800184a <showMonitoringSlotParams+0x19a>
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <showMonitoringSlotParams+0x1e0>)
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <showMonitoringSlotParams+0x1e4>)
 800181c:	2200      	movs	r2, #0
 800181e:	4611      	mov	r1, r2
 8001820:	2002      	movs	r0, #2
 8001822:	f014 feaf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "Active State : %s \r\n", MonitoringSlotNVM.MonitoringSlot.isActive == 1 ? "true" : "false");
 8001826:	f89d 33d4 	ldrb.w	r3, [sp, #980]	; 0x3d4
 800182a:	b183      	cbz	r3, 800184e <showMonitoringSlotParams+0x19e>
 800182c:	4b18      	ldr	r3, [pc, #96]	; (8001890 <showMonitoringSlotParams+0x1e0>)
 800182e:	9300      	str	r3, [sp, #0]
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <showMonitoringSlotParams+0x1e8>)
 8001832:	2200      	movs	r2, #0
 8001834:	4611      	mov	r1, r2
 8001836:	2002      	movs	r0, #2
 8001838:	f014 fea4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>

}
 800183c:	b005      	add	sp, #20
 800183e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001842:	b004      	add	sp, #16
 8001844:	4770      	bx	lr
	APP_LOG(TS_OFF, VLEVEL_M, "Device Enable: %s \r\n", MonitoringSlotNVM.DeviceActive == 1 ? "true" : "false");
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <showMonitoringSlotParams+0x1e0>)
 8001848:	e778      	b.n	800173c <showMonitoringSlotParams+0x8c>
	APP_LOG(TS_OFF, VLEVEL_M, "On Change: %s \r\n", MonitoringSlotNVM.MonitoringSlot.onChange == 1 ? "true" : "false");
 800184a:	4b08      	ldr	r3, [pc, #32]	; (800186c <showMonitoringSlotParams+0x1bc>)
 800184c:	e7e4      	b.n	8001818 <showMonitoringSlotParams+0x168>
	APP_LOG(TS_OFF, VLEVEL_M, "Active State : %s \r\n", MonitoringSlotNVM.MonitoringSlot.isActive == 1 ? "true" : "false");
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <showMonitoringSlotParams+0x1bc>)
 8001850:	e7ed      	b.n	800182e <showMonitoringSlotParams+0x17e>
 8001852:	bf00      	nop
 8001854:	0801c35c 	.word	0x0801c35c
 8001858:	0801c280 	.word	0x0801c280
 800185c:	0801da6c 	.word	0x0801da6c
 8001860:	0801c370 	.word	0x0801c370
 8001864:	0801c380 	.word	0x0801c380
 8001868:	0801c390 	.word	0x0801c390
 800186c:	0801c354 	.word	0x0801c354
 8001870:	0801c3a0 	.word	0x0801c3a0
 8001874:	0801c3b8 	.word	0x0801c3b8
 8001878:	0801c3c8 	.word	0x0801c3c8
 800187c:	0801c3e0 	.word	0x0801c3e0
 8001880:	0801c3fc 	.word	0x0801c3fc
 8001884:	0801c420 	.word	0x0801c420
 8001888:	0801c448 	.word	0x0801c448
 800188c:	0801c474 	.word	0x0801c474
 8001890:	0801c34c 	.word	0x0801c34c
 8001894:	0801c4a0 	.word	0x0801c4a0
 8001898:	0801c4b4 	.word	0x0801c4b4

0800189c <initMonitoringSlotParams>:

void initMonitoringSlotParams(uint8_t slotId){
 800189c:	b530      	push	{r4, r5, lr}
 800189e:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
 80018a2:	4604      	mov	r4, r0

	struct ModbusDevice MonitoringSlotNVM;

	if (FLASH_IF_Read(&MonitoringSlotNVM, ModbusDeviceFlashAddresses[slotId], sizeof(MonitoringSlotNVM)) == FLASH_IF_OK) {
 80018a4:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 80018a8:	4b43      	ldr	r3, [pc, #268]	; (80019b8 <initMonitoringSlotParams+0x11c>)
 80018aa:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80018ae:	a802      	add	r0, sp, #8
 80018b0:	f000 fc20 	bl	80020f4 <FLASH_IF_Read>
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d177      	bne.n	80019a8 <initMonitoringSlotParams+0x10c>
	  MonitoringSlotNVM.MonitoringSlot.cmdSize = 6;
 80018b8:	2306      	movs	r3, #6
 80018ba:	f88d 33b0 	strb.w	r3, [sp, #944]	; 0x3b0

	  uint8_t testCommand[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <initMonitoringSlotParams+0x120>)
 80018c0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018c4:	9000      	str	r0, [sp, #0]
 80018c6:	f8ad 1004 	strh.w	r1, [sp, #4]
	  for(uint8_t i = 0; i < MonitoringSlotNVM.MonitoringSlot.cmdSize; i++){
 80018ca:	2300      	movs	r3, #0
 80018cc:	e007      	b.n	80018de <initMonitoringSlotParams+0x42>
		  MonitoringSlotNVM.MonitoringSlot.modbusCMD[i] = testCommand[i];
 80018ce:	f81d 1003 	ldrb.w	r1, [sp, r3]
 80018d2:	aa02      	add	r2, sp, #8
 80018d4:	441a      	add	r2, r3
 80018d6:	f882 1388 	strb.w	r1, [r2, #904]	; 0x388
	  for(uint8_t i = 0; i < MonitoringSlotNVM.MonitoringSlot.cmdSize; i++){
 80018da:	3301      	adds	r3, #1
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d9f5      	bls.n	80018ce <initMonitoringSlotParams+0x32>
	  }
	  MonitoringSlotNVM.MonitoringSlot.dataType = Modbus_Float_ABCD;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f88d 33b1 	strb.w	r3, [sp, #945]	; 0x3b1
	  MonitoringSlotNVM.MonitoringSlot.valueStartIndex = 0;
 80018e8:	f88d 33b2 	strb.w	r3, [sp, #946]	; 0x3b2
	  MonitoringSlotNVM.MonitoringSlot.ThresholdActive = 0x0000;
 80018ec:	f8ad 33be 	strh.w	r3, [sp, #958]	; 0x3be

	  VarData_u TH_High, TH_Low, TH_SpikeUp, TH_SpikeDown;

	  TH_High.buff[0] = 0X00;       // 30.00 degrees celsius
 80018f0:	4619      	mov	r1, r3
 80018f2:	f363 0107 	bfi	r1, r3, #0, #8
	  TH_High.buff[1] = 0X00;
 80018f6:	f363 210f 	bfi	r1, r3, #8, #8
	  TH_High.buff[2] = 0X00;       // 30.00 degrees celsius
 80018fa:	f363 4117 	bfi	r1, r3, #16, #8
	  TH_High.buff[3] = 0X00;
 80018fe:	f363 611f 	bfi	r1, r3, #24, #8

	  TH_Low.buff[0] = 0X00;        // 21.50 degrees celsius
 8001902:	461a      	mov	r2, r3
 8001904:	f363 0207 	bfi	r2, r3, #0, #8
	  TH_Low.buff[1] = 0X00;
 8001908:	f363 220f 	bfi	r2, r3, #8, #8
	  TH_Low.buff[2] = 0X00;
 800190c:	f363 4217 	bfi	r2, r3, #16, #8
	  TH_Low.buff[3] = 0X00;
 8001910:	f363 621f 	bfi	r2, r3, #24, #8

	  TH_SpikeUp.buff[0] = 0X00;    // +3 degree Celcius
 8001914:	461d      	mov	r5, r3
 8001916:	f363 0507 	bfi	r5, r3, #0, #8
	  TH_SpikeUp.buff[1] = 0X00;
 800191a:	f363 250f 	bfi	r5, r3, #8, #8
	  TH_SpikeUp.buff[2] = 0X00;
 800191e:	f363 4517 	bfi	r5, r3, #16, #8
	  TH_SpikeUp.buff[3] = 0X00;
 8001922:	f363 651f 	bfi	r5, r3, #24, #8

	  TH_SpikeDown.buff[0] = 0X00;    // -3 degree Celcius
 8001926:	4618      	mov	r0, r3
 8001928:	f363 0007 	bfi	r0, r3, #0, #8
	  TH_SpikeDown.buff[1] = 0X00;
 800192c:	f363 200f 	bfi	r0, r3, #8, #8
	  TH_SpikeDown.buff[2] = 0X00;
 8001930:	f363 4017 	bfi	r0, r3, #16, #8
	  TH_SpikeDown.buff[3] = 0X00;
 8001934:	f363 601f 	bfi	r0, r3, #24, #8

	  MonitoringSlotNVM.MonitoringSlot.SpikeUp = TH_SpikeUp;
 8001938:	95f0      	str	r5, [sp, #960]	; 0x3c0
	  MonitoringSlotNVM.MonitoringSlot.SpikeDown = TH_SpikeDown;
 800193a:	90f1      	str	r0, [sp, #964]	; 0x3c4
	  MonitoringSlotNVM.MonitoringSlot.thresholdHigh = TH_High;
 800193c:	91f2      	str	r1, [sp, #968]	; 0x3c8
	  MonitoringSlotNVM.MonitoringSlot.thresholdLow = TH_Low;
 800193e:	92f3      	str	r2, [sp, #972]	; 0x3cc
	  MonitoringSlotNVM.MonitoringSlot.onChange = false;
 8001940:	f88d 33d0 	strb.w	r3, [sp, #976]	; 0x3d0
	  MonitoringSlotNVM.MonitoringSlot.triggerFlagValue = false;
 8001944:	f88d 33d1 	strb.w	r3, [sp, #977]	; 0x3d1
	  MonitoringSlotNVM.MonitoringSlot.isActive = false;
 8001948:	f88d 33bc 	strb.w	r3, [sp, #956]	; 0x3bc


		if (FLASH_IF_Erase((void *)ModbusDeviceFlashAddresses[slotId], FLASH_PAGE_SIZE) == FLASH_IF_OK){
 800194c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <initMonitoringSlotParams+0x11c>)
 8001952:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001956:	f000 fbe9 	bl	800212c <FLASH_IF_Erase>
 800195a:	b9e0      	cbnz	r0, 8001996 <initMonitoringSlotParams+0xfa>
			APP_LOG(TS_OFF, VLEVEL_M, "ERASE OK");
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <initMonitoringSlotParams+0x124>)
 800195e:	2200      	movs	r2, #0
 8001960:	4611      	mov	r1, r2
 8001962:	2002      	movs	r0, #2
 8001964:	f014 fe0e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			if(FLASH_IF_Write((void *)ModbusDeviceFlashAddresses[slotId], (void *)&MonitoringSlotNVM, sizeof(struct ModbusDevice)) == FLASH_IF_OK){
 8001968:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 800196c:	a902      	add	r1, sp, #8
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <initMonitoringSlotParams+0x11c>)
 8001970:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001974:	f000 fba2 	bl	80020bc <FLASH_IF_Write>
 8001978:	b930      	cbnz	r0, 8001988 <initMonitoringSlotParams+0xec>
				APP_LOG(TS_OFF, VLEVEL_M, "WRITE OK");
 800197a:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <initMonitoringSlotParams+0x128>)
 800197c:	2200      	movs	r2, #0
 800197e:	4611      	mov	r1, r2
 8001980:	2002      	movs	r0, #2
 8001982:	f014 fdff 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8001986:	e00c      	b.n	80019a2 <initMonitoringSlotParams+0x106>
			}
			else{
				APP_LOG(TS_OFF, VLEVEL_M, "WRITE ERROR");
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <initMonitoringSlotParams+0x12c>)
 800198a:	2200      	movs	r2, #0
 800198c:	4611      	mov	r1, r2
 800198e:	2002      	movs	r0, #2
 8001990:	f014 fdf8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8001994:	e005      	b.n	80019a2 <initMonitoringSlotParams+0x106>
			}
		}
		else{
			APP_LOG(TS_OFF, VLEVEL_M, "ERASE ERROR");
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <initMonitoringSlotParams+0x130>)
 8001998:	2200      	movs	r2, #0
 800199a:	4611      	mov	r1, r2
 800199c:	2002      	movs	r0, #2
 800199e:	f014 fdf1 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>


	} else {
	  APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
	}
}
 80019a2:	f50d 7d77 	add.w	sp, sp, #988	; 0x3dc
 80019a6:	bd30      	pop	{r4, r5, pc}
	  APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80019a8:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <initMonitoringSlotParams+0x134>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	4611      	mov	r1, r2
 80019ae:	2002      	movs	r0, #2
 80019b0:	f014 fde8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 80019b4:	e7f5      	b.n	80019a2 <initMonitoringSlotParams+0x106>
 80019b6:	bf00      	nop
 80019b8:	20000000 	.word	0x20000000
 80019bc:	0801c1a8 	.word	0x0801c1a8
 80019c0:	0801c31c 	.word	0x0801c31c
 80019c4:	0801c328 	.word	0x0801c328
 80019c8:	0801c334 	.word	0x0801c334
 80019cc:	0801c340 	.word	0x0801c340
 80019d0:	0801c4cc 	.word	0x0801c4cc

080019d4 <viewMonitoringSlotParams>:

void viewMonitoringSlotParams(uint8_t slotId){
 80019d4:	b510      	push	{r4, lr}
 80019d6:	f5ad 6df2 	sub.w	sp, sp, #1936	; 0x790
 80019da:	4604      	mov	r4, r0
	struct ModbusDevice MonitoringSlotNVM;

	if (FLASH_IF_Read(&MonitoringSlotNVM, ModbusDeviceFlashAddresses[slotId], sizeof(MonitoringSlotNVM)) == FLASH_IF_OK) {
 80019dc:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <viewMonitoringSlotParams+0x54>)
 80019e2:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 80019e6:	a8f0      	add	r0, sp, #960	; 0x3c0
 80019e8:	f000 fb84 	bl	80020f4 <FLASH_IF_Read>
 80019ec:	b9a0      	cbnz	r0, 8001a18 <viewMonitoringSlotParams+0x44>
		APP_LOG( TS_OFF, VLEVEL_M, "MONITORING SLOT %d PARAMETERS: \r\n", slotId);
 80019ee:	9400      	str	r4, [sp, #0]
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <viewMonitoringSlotParams+0x58>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	4611      	mov	r1, r2
 80019f6:	2002      	movs	r0, #2
 80019f8:	f014 fdc4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>

		showMonitoringSlotParams(MonitoringSlotNVM);
 80019fc:	acf0      	add	r4, sp, #960	; 0x3c0
 80019fe:	f44f 7270 	mov.w	r2, #960	; 0x3c0
 8001a02:	a9f4      	add	r1, sp, #976	; 0x3d0
 8001a04:	4668      	mov	r0, sp
 8001a06:	f016 fd1a 	bl	801843e <memcpy>
 8001a0a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a0e:	f7ff fe4f 	bl	80016b0 <showMonitoringSlotParams>

	} else {
	  APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
	}
}
 8001a12:	f50d 6df2 	add.w	sp, sp, #1936	; 0x790
 8001a16:	bd10      	pop	{r4, pc}
	  APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <viewMonitoringSlotParams+0x5c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f014 fdb0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8001a24:	e7f5      	b.n	8001a12 <viewMonitoringSlotParams+0x3e>
 8001a26:	bf00      	nop
 8001a28:	20000000 	.word	0x20000000
 8001a2c:	0801c4e4 	.word	0x0801c4e4
 8001a30:	0801c4cc 	.word	0x0801c4cc

08001a34 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001a34:	b500      	push	{lr}
 8001a36:	b083      	sub	sp, #12
 8001a38:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3e:	2201      	movs	r2, #1
 8001a40:	a901      	add	r1, sp, #4
 8001a42:	4803      	ldr	r0, [pc, #12]	; (8001a50 <__io_putchar+0x1c>)
 8001a44:	f00a fcc1 	bl	800c3ca <HAL_UART_Transmit>
  return ch;
}
 8001a48:	9801      	ldr	r0, [sp, #4]
 8001a4a:	b003      	add	sp, #12
 8001a4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001a50:	20000c60 	.word	0x20000c60

08001a54 <initMonitorSlot>:
 * @param triggerFlagValue The trigger flag value.
 */

void initMonitorSlot(uint8_t ID, uint8_t *modbusCMD, uint8_t cmdSize, uint8_t dataType, uint8_t valueStartIndex, uint16_t ThresholdActive, VarData_u SpikeUp, VarData_u SpikeDown, VarData_u thresholdHigh, VarData_u thresholdLow, bool onChange, bool triggerFlagValue) {
    // Check if ID is within a valid range
    if (ID >= 0 && ID < 16) {
 8001a54:	280f      	cmp	r0, #15
 8001a56:	d900      	bls.n	8001a5a <initMonitorSlot+0x6>
 8001a58:	4770      	bx	lr
void initMonitorSlot(uint8_t ID, uint8_t *modbusCMD, uint8_t cmdSize, uint8_t dataType, uint8_t valueStartIndex, uint16_t ThresholdActive, VarData_u SpikeUp, VarData_u SpikeDown, VarData_u thresholdHigh, VarData_u thresholdLow, bool onChange, bool triggerFlagValue) {
 8001a5a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a5e:	460d      	mov	r5, r1
 8001a60:	4617      	mov	r7, r2
 8001a62:	461e      	mov	r6, r3
        // Clear the contents of the monitoring slot
        memset(&MonitoringSlot[ID], 0, sizeof(ModbusMonitorSlot_t));
 8001a64:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8001adc <initMonitorSlot+0x88>
 8001a68:	eb00 1400 	add.w	r4, r0, r0, lsl #4
 8001a6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8001a70:	eb09 0484 	add.w	r4, r9, r4, lsl #2
 8001a74:	2244      	movs	r2, #68	; 0x44
 8001a76:	2100      	movs	r1, #0
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f016 fc3f 	bl	80182fc <memset>

        // Initialize the MonitoringSlot using the provided parameters
        memcpy(MonitoringSlot[ID].modbusCMD, modbusCMD, sizeof(MonitoringSlot[ID].modbusCMD));
 8001a7e:	6828      	ldr	r0, [r5, #0]
 8001a80:	6869      	ldr	r1, [r5, #4]
 8001a82:	68aa      	ldr	r2, [r5, #8]
 8001a84:	68eb      	ldr	r3, [r5, #12]
 8001a86:	f849 000b 	str.w	r0, [r9, fp]
 8001a8a:	6061      	str	r1, [r4, #4]
 8001a8c:	60a2      	str	r2, [r4, #8]
 8001a8e:	60e3      	str	r3, [r4, #12]
 8001a90:	6928      	ldr	r0, [r5, #16]
 8001a92:	6969      	ldr	r1, [r5, #20]
 8001a94:	69aa      	ldr	r2, [r5, #24]
 8001a96:	69eb      	ldr	r3, [r5, #28]
 8001a98:	6120      	str	r0, [r4, #16]
 8001a9a:	6161      	str	r1, [r4, #20]
 8001a9c:	61a2      	str	r2, [r4, #24]
 8001a9e:	61e3      	str	r3, [r4, #28]
        MonitoringSlot[ID].cmdSize = cmdSize;
 8001aa0:	f884 7020 	strb.w	r7, [r4, #32]
        MonitoringSlot[ID].dataType = dataType;
 8001aa4:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
        MonitoringSlot[ID].valueStartIndex = valueStartIndex;
 8001aa8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8001aac:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
        MonitoringSlot[ID].ThresholdActive = ThresholdActive;
 8001ab0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8001ab4:	85e3      	strh	r3, [r4, #46]	; 0x2e
        MonitoringSlot[ID].SpikeUp = SpikeUp;
 8001ab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001ab8:	6323      	str	r3, [r4, #48]	; 0x30
        MonitoringSlot[ID].SpikeDown = SpikeDown;
 8001aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001abc:	6363      	str	r3, [r4, #52]	; 0x34
        MonitoringSlot[ID].thresholdHigh = thresholdHigh;
 8001abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001ac0:	63a3      	str	r3, [r4, #56]	; 0x38
        MonitoringSlot[ID].thresholdLow = thresholdLow;
 8001ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ac4:	63e3      	str	r3, [r4, #60]	; 0x3c
        MonitoringSlot[ID].onChange = onChange;
 8001ac6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8001aca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        MonitoringSlot[ID].triggerFlagValue = triggerFlagValue;
 8001ace:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8001ad2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

    } else {
        // Handle invalid ID (out of range)
        // You can add error handling code here if needed
    }
}
 8001ad6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ada:	bf00      	nop
 8001adc:	2000034c 	.word	0x2000034c

08001ae0 <initModbus>:
 *
 * @param serialPort Pointer to the UART handle for Modbus communication.
 * @param EN_GPIOPort GPIO port for MODBUS_EN pin.
 * @param EN_GPIOPin GPIO pin for MODBUS_EN.
 */
void initModbus(UART_HandleTypeDef *serialPort, GPIO_TypeDef * EN_GPIOPort, uint16_t EN_GPIOPin){
 8001ae0:	b538      	push	{r3, r4, r5, lr}
 8001ae2:	460d      	mov	r5, r1
 8001ae4:	4614      	mov	r4, r2

	modbusSerial = *serialPort;
 8001ae6:	2294      	movs	r2, #148	; 0x94
 8001ae8:	4601      	mov	r1, r0
 8001aea:	4803      	ldr	r0, [pc, #12]	; (8001af8 <initModbus+0x18>)
 8001aec:	f016 fca7 	bl	801843e <memcpy>
	MODBUS_EN.port = EN_GPIOPort;
 8001af0:	4b02      	ldr	r3, [pc, #8]	; (8001afc <initModbus+0x1c>)
 8001af2:	601d      	str	r5, [r3, #0]
	MODBUS_EN.pin = EN_GPIOPin;
 8001af4:	711c      	strb	r4, [r3, #4]

}
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	20000794 	.word	0x20000794
 8001afc:	2000078c 	.word	0x2000078c

08001b00 <Serial_Transmit>:
	HAL_Delay(10);

}

// Transmit data through UART
void Serial_Transmit(uint8_t *data, uint16_t length) {
 8001b00:	b508      	push	{r3, lr}
 8001b02:	460a      	mov	r2, r1
    // Assuming UART1 has been initialized
    // Transmit data
    HAL_UART_Transmit(&modbusSerial, data, length, HAL_MAX_DELAY);
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	4601      	mov	r1, r0
 8001b0a:	4802      	ldr	r0, [pc, #8]	; (8001b14 <Serial_Transmit+0x14>)
 8001b0c:	f00a fc5d 	bl	800c3ca <HAL_UART_Transmit>
}
 8001b10:	bd08      	pop	{r3, pc}
 8001b12:	bf00      	nop
 8001b14:	20000794 	.word	0x20000794

08001b18 <sendRaw>:
void sendRaw(uint8_t *modbusCMD, uint16_t cmdLen, ModBus_t *modbusResponse) {
 8001b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b1c:	4606      	mov	r6, r0
 8001b1e:	460f      	mov	r7, r1
 8001b20:	4614      	mov	r4, r2
	memset(modbusResponse->buffer, '\0', sizeof(modbusResponse->buffer) * sizeof(modbusResponse->buffer[0]));
 8001b22:	f102 0902 	add.w	r9, r2, #2
 8001b26:	2296      	movs	r2, #150	; 0x96
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4648      	mov	r0, r9
 8001b2c:	f016 fbe6 	bl	80182fc <memset>
	modbusResponse->rxIndex = 0;
 8001b30:	2500      	movs	r5, #0
 8001b32:	8025      	strh	r5, [r4, #0]
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_SET);
 8001b34:	4c12      	ldr	r4, [pc, #72]	; (8001b80 <sendRaw+0x68>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	7921      	ldrb	r1, [r4, #4]
 8001b3a:	6820      	ldr	r0, [r4, #0]
 8001b3c:	f007 fb3a 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);  // ADDED FOR WATER LEVEL ONLY REMOVE THISSS
 8001b40:	f8df 8040 	ldr.w	r8, [pc, #64]	; 8001b84 <sendRaw+0x6c>
 8001b44:	2201      	movs	r2, #1
 8001b46:	2104      	movs	r1, #4
 8001b48:	4640      	mov	r0, r8
 8001b4a:	f007 fb33 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)modbusResponse->buffer, 1);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	4649      	mov	r1, r9
 8001b52:	480d      	ldr	r0, [pc, #52]	; (8001b88 <sendRaw+0x70>)
 8001b54:	f00a fda8 	bl	800c6a8 <HAL_UART_Receive_IT>
	Serial_Transmit(modbusCMD, cmdLen);
 8001b58:	4639      	mov	r1, r7
 8001b5a:	4630      	mov	r0, r6
 8001b5c:	f7ff ffd0 	bl	8001b00 <Serial_Transmit>
	HAL_GPIO_WritePin(MODBUS_EN.port, MODBUS_EN.pin, GPIO_PIN_RESET);
 8001b60:	462a      	mov	r2, r5
 8001b62:	7921      	ldrb	r1, [r4, #4]
 8001b64:	6820      	ldr	r0, [r4, #0]
 8001b66:	f007 fb25 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);  // ADDED FOR WATER LEVEL ONLY REMOVE THISSS
 8001b6a:	462a      	mov	r2, r5
 8001b6c:	2104      	movs	r1, #4
 8001b6e:	4640      	mov	r0, r8
 8001b70:	f007 fb20 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f000 feb3 	bl	80028e0 <HAL_Delay>
}
 8001b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b7e:	bf00      	nop
 8001b80:	2000078c 	.word	0x2000078c
 8001b84:	48000800 	.word	0x48000800
 8001b88:	20000794 	.word	0x20000794

08001b8c <Modbus_RxCallback>:
 * `buffer` of the `_ModbusResponse` structure, updates the `rxIndex`, and continues to receive the next character.
 * If the buffer overflows, the `rxIndex` is reset to prevent data loss.
 *
 * @param _ModbusResponse Pointer to the ModBus response structure.
 */
void Modbus_RxCallback(ModBus_t *_ModbusResponse) {
 8001b8c:	b508      	push	{r3, lr}
    if (_ModbusResponse->rxIndex < sizeof(_ModbusResponse->buffer)) {
 8001b8e:	8803      	ldrh	r3, [r0, #0]
 8001b90:	2b95      	cmp	r3, #149	; 0x95
 8001b92:	d80e      	bhi.n	8001bb2 <Modbus_RxCallback+0x26>
        _ModbusResponse->buffer[_ModbusResponse->rxIndex] = modbusSerial.Instance->RDR;  // Store the received character
 8001b94:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <Modbus_RxCallback+0x2c>)
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001b9a:	18c2      	adds	r2, r0, r3
 8001b9c:	7091      	strb	r1, [r2, #2]
        _ModbusResponse->rxIndex++;
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	8003      	strh	r3, [r0, #0]
        // Buffer overflow, reset the index
        _ModbusResponse->rxIndex = 0;
    }

    // Continue to receive the next character
    HAL_UART_Receive_IT(&modbusSerial, (uint8_t *)(_ModbusResponse->buffer + _ModbusResponse->rxIndex), 1);
 8001ba2:	f830 1b02 	ldrh.w	r1, [r0], #2
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	4401      	add	r1, r0
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <Modbus_RxCallback+0x2c>)
 8001bac:	f00a fd7c 	bl	800c6a8 <HAL_UART_Receive_IT>
}
 8001bb0:	bd08      	pop	{r3, pc}
        _ModbusResponse->rxIndex = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	8003      	strh	r3, [r0, #0]
 8001bb6:	e7f4      	b.n	8001ba2 <Modbus_RxCallback+0x16>
 8001bb8:	20000794 	.word	0x20000794

08001bbc <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001bbc:	b508      	push	{r3, lr}

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001bbe:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_ADC_Init+0x50>)
 8001bc0:	4b13      	ldr	r3, [pc, #76]	; (8001c10 <MX_ADC_Init+0x54>)
 8001bc2:	6003      	str	r3, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bc4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001bc8:	6043      	str	r3, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bce:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001bd0:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bd2:	2204      	movs	r2, #4
 8001bd4:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001bd6:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001bd8:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001bda:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001be0:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be4:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be6:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001be8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bf0:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8001bf2:	2207      	movs	r2, #7
 8001bf4:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8001bf6:	6382      	str	r2, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001bf8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001bfc:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001bfe:	f006 f861 	bl	8007cc4 <HAL_ADC_Init>
 8001c02:	b900      	cbnz	r0, 8001c06 <MX_ADC_Init+0x4a>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001c04:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001c06:	f000 fbc1 	bl	800238c <Error_Handler>
}
 8001c0a:	e7fb      	b.n	8001c04 <MX_ADC_Init+0x48>
 8001c0c:	20000828 	.word	0x20000828
 8001c10:	40012400 	.word	0x40012400

08001c14 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001c14:	6802      	ldr	r2, [r0, #0]
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_ADC_MspInit+0x28>)
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d000      	beq.n	8001c1e <HAL_ADC_MspInit+0xa>
 8001c1c:	4770      	bx	lr
{
 8001c1e:	b082      	sub	sp, #8
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c24:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c2a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c32:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001c34:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_ADC_CLK_ENABLE();
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8001c36:	b002      	add	sp, #8
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40012400 	.word	0x40012400

08001c40 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8001c40:	6802      	ldr	r2, [r0, #0]
 8001c42:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_ADC_MspDeInit+0x18>)
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d000      	beq.n	8001c4a <HAL_ADC_MspDeInit+0xa>
    __HAL_RCC_ADC_CLK_DISABLE();
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001c48:	4770      	bx	lr
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001c4a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c4e:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001c54:	6613      	str	r3, [r2, #96]	; 0x60
 8001c56:	e7f7      	b.n	8001c48 <HAL_ADC_MspDeInit+0x8>
 8001c58:	40012400 	.word	0x40012400

08001c5c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8001c5c:	b530      	push	{r4, r5, lr}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c62:	2300      	movs	r3, #0
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	9302      	str	r3, [sp, #8]
 8001c68:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 8001c6a:	f7ff ffa7 	bl	8001bbc <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001c6e:	4816      	ldr	r0, [pc, #88]	; (8001cc8 <ADC_ReadChannels+0x6c>)
 8001c70:	f006 fc60 	bl	8008534 <HAL_ADCEx_Calibration_Start>
 8001c74:	b9f8      	cbnz	r0, 8001cb6 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001c76:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001c7c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001c7e:	a901      	add	r1, sp, #4
 8001c80:	4811      	ldr	r0, [pc, #68]	; (8001cc8 <ADC_ReadChannels+0x6c>)
 8001c82:	f006 f999 	bl	8007fb8 <HAL_ADC_ConfigChannel>
 8001c86:	b9c8      	cbnz	r0, 8001cbc <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001c88:	480f      	ldr	r0, [pc, #60]	; (8001cc8 <ADC_ReadChannels+0x6c>)
 8001c8a:	f006 fb57 	bl	800833c <HAL_ADC_Start>
 8001c8e:	b9c0      	cbnz	r0, 8001cc2 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001c90:	4c0d      	ldr	r4, [pc, #52]	; (8001cc8 <ADC_ReadChannels+0x6c>)
 8001c92:	f04f 31ff 	mov.w	r1, #4294967295
 8001c96:	4620      	mov	r0, r4
 8001c98:	f006 f92c 	bl	8007ef4 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f006 fc29 	bl	80084f4 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001ca2:	4620      	mov	r0, r4
 8001ca4:	f006 f985 	bl	8007fb2 <HAL_ADC_GetValue>
 8001ca8:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 8001caa:	4620      	mov	r0, r4
 8001cac:	f006 fbc2 	bl	8008434 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001cb0:	4628      	mov	r0, r5
 8001cb2:	b005      	add	sp, #20
 8001cb4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001cb6:	f000 fb69 	bl	800238c <Error_Handler>
 8001cba:	e7dc      	b.n	8001c76 <ADC_ReadChannels+0x1a>
    Error_Handler();
 8001cbc:	f000 fb66 	bl	800238c <Error_Handler>
 8001cc0:	e7e2      	b.n	8001c88 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001cc2:	f000 fb63 	bl	800238c <Error_Handler>
 8001cc6:	e7e3      	b.n	8001c90 <ADC_ReadChannels+0x34>
 8001cc8:	20000828 	.word	0x20000828

08001ccc <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 8001ccc:	4b01      	ldr	r3, [pc, #4]	; (8001cd4 <SYS_InitMeasurement+0x8>)
 8001cce:	4a02      	ldr	r2, [pc, #8]	; (8001cd8 <SYS_InitMeasurement+0xc>)
 8001cd0:	601a      	str	r2, [r3, #0]
}
 8001cd2:	4770      	bx	lr
 8001cd4:	20000828 	.word	0x20000828
 8001cd8:	40012400 	.word	0x40012400

08001cdc <SYS_GetBatteryLevel>:
{
 8001cdc:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001cde:	480d      	ldr	r0, [pc, #52]	; (8001d14 <SYS_GetBatteryLevel+0x38>)
 8001ce0:	f7ff ffbc 	bl	8001c5c <ADC_ReadChannels>
  if (measuredLevel == 0)
 8001ce4:	b1a0      	cbz	r0, 8001d10 <SYS_GetBatteryLevel+0x34>
 8001ce6:	4603      	mov	r3, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <SYS_GetBatteryLevel+0x3c>)
 8001cea:	f8b2 00aa 	ldrh.w	r0, [r2, #170]	; 0xaa
 8001cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	d007      	beq.n	8001d06 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001cf6:	f640 42e4 	movw	r2, #3300	; 0xce4
 8001cfa:	fb02 f000 	mul.w	r0, r2, r0
 8001cfe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d02:	b280      	uxth	r0, r0
 8001d04:	e005      	b.n	8001d12 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <SYS_GetBatteryLevel+0x40>)
 8001d08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d0c:	b280      	uxth	r0, r0
 8001d0e:	e000      	b.n	8001d12 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 8001d10:	2000      	movs	r0, #0
}
 8001d12:	bd08      	pop	{r3, pc}
 8001d14:	b4002000 	.word	0xb4002000
 8001d18:	1fff7500 	.word	0x1fff7500
 8001d1c:	004c08d8 	.word	0x004c08d8

08001d20 <SYS_GetTemperatureLevel>:
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	b082      	sub	sp, #8
  __IO int16_t temperatureDegreeC = 0;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 8001d2a:	f7ff ffd7 	bl	8001cdc <SYS_GetBatteryLevel>
 8001d2e:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8001d30:	4821      	ldr	r0, [pc, #132]	; (8001db8 <SYS_GetTemperatureLevel+0x98>)
 8001d32:	f7ff ff93 	bl	8001c5c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001d36:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <SYS_GetTemperatureLevel+0x9c>)
 8001d38:	f8b3 20c8 	ldrh.w	r2, [r3, #200]	; 0xc8
 8001d3c:	f8b3 10a8 	ldrh.w	r1, [r3, #168]	; 0xa8
 8001d40:	428a      	cmp	r2, r1
 8001d42:	d01d      	beq.n	8001d80 <SYS_GetTemperatureLevel+0x60>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 8001d44:	fb00 f304 	mul.w	r3, r0, r4
 8001d48:	089b      	lsrs	r3, r3, #2
 8001d4a:	481d      	ldr	r0, [pc, #116]	; (8001dc0 <SYS_GetTemperatureLevel+0xa0>)
 8001d4c:	fba0 0303 	umull	r0, r3, r0, r3
 8001d50:	ebc1 1353 	rsb	r3, r1, r3, lsr #5
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1a52      	subs	r2, r2, r1
 8001d5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001d60:	331e      	adds	r3, #30
 8001d62:	b21b      	sxth	r3, r3
 8001d64:	f8ad 3006 	strh.w	r3, [sp, #6]
  temperatureDegreeC <<= 8;
 8001d68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001d6c:	b21b      	sxth	r3, r3
 8001d6e:	021b      	lsls	r3, r3, #8
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	f8ad 3006 	strh.w	r3, [sp, #6]
  return (int16_t) temperatureDegreeC;
 8001d76:	f8bd 0006 	ldrh.w	r0, [sp, #6]
}
 8001d7a:	b200      	sxth	r0, r0
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001d80:	fb04 f000 	mul.w	r0, r4, r0
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <SYS_GetTemperatureLevel+0xa4>)
 8001d86:	fba3 2300 	umull	r2, r3, r3, r0
 8001d8a:	1ac4      	subs	r4, r0, r3
 8001d8c:	eb03 0354 	add.w	r3, r3, r4, lsr #1
 8001d90:	0adb      	lsrs	r3, r3, #11
 8001d92:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d96:	fb02 f303 	mul.w	r3, r2, r3
 8001d9a:	f5a3 2339 	sub.w	r3, r3, #757760	; 0xb9000
 8001d9e:	f5a3 630c 	sub.w	r3, r3, #2240	; 0x8c0
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <SYS_GetTemperatureLevel+0xa8>)
 8001da4:	fb82 1203 	smull	r1, r2, r2, r3
 8001da8:	17db      	asrs	r3, r3, #31
 8001daa:	ebc3 23a2 	rsb	r3, r3, r2, asr #10
 8001dae:	331e      	adds	r3, #30
 8001db0:	b21b      	sxth	r3, r3
 8001db2:	f8ad 3006 	strh.w	r3, [sp, #6]
 8001db6:	e7d7      	b.n	8001d68 <SYS_GetTemperatureLevel+0x48>
 8001db8:	b0001000 	.word	0xb0001000
 8001dbc:	1fff7500 	.word	0x1fff7500
 8001dc0:	09ee009f 	.word	0x09ee009f
 8001dc4:	00100101 	.word	0x00100101
 8001dc8:	68db8bad 	.word	0x68db8bad

08001dcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dcc:	b500      	push	{lr}
 8001dce:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001dd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dd6:	f042 0204 	orr.w	r2, r2, #4
 8001dda:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001ddc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001dde:	f002 0204 	and.w	r2, r2, #4
 8001de2:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001de4:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001de6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df0:	f003 0301 	and.w	r3, r3, #1
 8001df4:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001df6:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	200f      	movs	r0, #15
 8001dfe:	f006 fc4b 	bl	8008698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001e02:	200f      	movs	r0, #15
 8001e04:	f006 fc80 	bl	8008708 <HAL_NVIC_EnableIRQ>

}
 8001e08:	b003      	add	sp, #12
 8001e0a:	f85d fb04 	ldr.w	pc, [sp], #4

08001e0e <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e001      	b.n	8001e16 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 8001e12:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001e14:	3308      	adds	r3, #8
 8001e16:	428b      	cmp	r3, r1
 8001e18:	d20a      	bcs.n	8001e30 <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001e1a:	6842      	ldr	r2, [r0, #4]
 8001e1c:	f8d0 c000 	ldr.w	ip, [r0]
 8001e20:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001e24:	bf08      	it	eq
 8001e26:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 8001e2a:	d0f2      	beq.n	8001e12 <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001e2c:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 8001e2e:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 8001e30:	2000      	movs	r0, #0
 8001e32:	4770      	bx	lr

08001e34 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001e34:	b130      	cbz	r0, 8001e44 <FLASH_IF_INT_Read+0x10>
{
 8001e36:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001e38:	b139      	cbz	r1, 8001e4a <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001e3a:	b292      	uxth	r2, r2
 8001e3c:	f014 fcb8 	bl	80167b0 <UTIL_MEM_cpy_8>
  return ret_status;
 8001e40:	2000      	movs	r0, #0
}
 8001e42:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001e44:	f06f 0005 	mvn.w	r0, #5
}
 8001e48:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 8001e4a:	f06f 0005 	mvn.w	r0, #5
 8001e4e:	e7f8      	b.n	8001e42 <FLASH_IF_INT_Read+0xe>

08001e50 <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 8001e50:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 8001e52:	f006 ff3b 	bl	8008ccc <HAL_FLASH_Unlock>
 8001e56:	b978      	cbnz	r0, 8001e78 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <FLASH_IF_INT_Clear_Error+0x30>)
 8001e5a:	699a      	ldr	r2, [r3, #24]
 8001e5c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8001e60:	619a      	str	r2, [r3, #24]
 8001e62:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001e66:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001e68:	f006 ff48 	bl	8008cfc <HAL_FLASH_Lock>
 8001e6c:	b908      	cbnz	r0, 8001e72 <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 8001e6e:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 8001e70:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 8001e72:	f06f 0004 	mvn.w	r0, #4
 8001e76:	e7fb      	b.n	8001e70 <FLASH_IF_INT_Clear_Error+0x20>
 8001e78:	f06f 0004 	mvn.w	r0, #4
 8001e7c:	e7f8      	b.n	8001e70 <FLASH_IF_INT_Clear_Error+0x20>
 8001e7e:	bf00      	nop
 8001e80:	58004000 	.word	0x58004000

08001e84 <FLASH_IF_INT_Erase>:
{
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8001e8c:	2800      	cmp	r0, #0
 8001e8e:	d039      	beq.n	8001f04 <FLASH_IF_INT_Erase+0x80>
 8001e90:	460e      	mov	r6, r1
 8001e92:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001e94:	f7ff ffdc 	bl	8001e50 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001e98:	4605      	mov	r5, r0
 8001e9a:	b110      	cbz	r0, 8001ea2 <FLASH_IF_INT_Erase+0x1e>
}
 8001e9c:	4628      	mov	r0, r5
 8001e9e:	b004      	add	sp, #16
 8001ea0:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001ea2:	f006 ff13 	bl	8008ccc <HAL_FLASH_Unlock>
 8001ea6:	bb80      	cbnz	r0, 8001f0a <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8001eac:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001eb0:	4817      	ldr	r0, [pc, #92]	; (8001f10 <FLASH_IF_INT_Erase+0x8c>)
 8001eb2:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 8001eb6:	4a17      	ldr	r2, [pc, #92]	; (8001f14 <FLASH_IF_INT_Erase+0x90>)
 8001eb8:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 8001ebc:	fbb3 fcf1 	udiv	ip, r3, r1
 8001ec0:	fb01 331c 	mls	r3, r1, ip, r3
 8001ec4:	0adb      	lsrs	r3, r3, #11
 8001ec6:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 8001ec8:	19a1      	adds	r1, r4, r6
 8001eca:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 8001ece:	3901      	subs	r1, #1
 8001ed0:	f8d0 05e0 	ldr.w	r0, [r0, #1504]	; 0x5e0
 8001ed4:	ea02 2280 	and.w	r2, r2, r0, lsl #10
 8001ed8:	fbb1 f0f2 	udiv	r0, r1, r2
 8001edc:	fb02 1110 	mls	r1, r2, r0, r1
 8001ee0:	ebc3 23d1 	rsb	r3, r3, r1, lsr #11
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	9302      	str	r3, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 8001ee8:	a903      	add	r1, sp, #12
 8001eea:	4668      	mov	r0, sp
 8001eec:	f006 ffd2 	bl	8008e94 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 8001ef0:	b118      	cbz	r0, 8001efa <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d004      	beq.n	8001f00 <FLASH_IF_INT_Erase+0x7c>
 8001ef6:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 8001efa:	f006 feff 	bl	8008cfc <HAL_FLASH_Lock>
 8001efe:	e7cd      	b.n	8001e9c <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 8001f00:	2501      	movs	r5, #1
 8001f02:	e7fa      	b.n	8001efa <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 8001f04:	f06f 0505 	mvn.w	r5, #5
 8001f08:	e7c8      	b.n	8001e9c <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001f0a:	f06f 0504 	mvn.w	r5, #4
 8001f0e:	e7c5      	b.n	8001e9c <FLASH_IF_INT_Erase+0x18>
 8001f10:	1fff7000 	.word	0x1fff7000
 8001f14:	03fffc00 	.word	0x03fffc00

08001f18 <FLASH_IF_INT_Write>:
{
 8001f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f1c:	b089      	sub	sp, #36	; 0x24
 8001f1e:	9003      	str	r0, [sp, #12]
 8001f20:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 8001f22:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001f24:	2800      	cmp	r0, #0
 8001f26:	f000 80a9 	beq.w	800207c <FLASH_IF_INT_Write+0x164>
 8001f2a:	4683      	mov	fp, r0
 8001f2c:	2900      	cmp	r1, #0
 8001f2e:	f000 80a9 	beq.w	8002084 <FLASH_IF_INT_Write+0x16c>
 8001f32:	f012 0f07 	tst.w	r2, #7
 8001f36:	f040 80a9 	bne.w	800208c <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001f3a:	f010 0307 	ands.w	r3, r0, #7
 8001f3e:	9305      	str	r3, [sp, #20]
 8001f40:	f040 80a8 	bne.w	8002094 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001f44:	f7ff ff84 	bl	8001e50 <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001f48:	9002      	str	r0, [sp, #8]
 8001f4a:	b118      	cbz	r0, 8001f54 <FLASH_IF_INT_Write+0x3c>
}
 8001f4c:	9802      	ldr	r0, [sp, #8]
 8001f4e:	b009      	add	sp, #36	; 0x24
 8001f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001f54:	f006 feba 	bl	8008ccc <HAL_FLASH_Unlock>
 8001f58:	2800      	cmp	r0, #0
 8001f5a:	f040 809f 	bne.w	800209c <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 8001f5e:	9c03      	ldr	r4, [sp, #12]
 8001f60:	f104 4278 	add.w	r2, r4, #4160749568	; 0xf8000000
 8001f64:	4b4f      	ldr	r3, [pc, #316]	; (80020a4 <FLASH_IF_INT_Write+0x18c>)
 8001f66:	f8d3 35e0 	ldr.w	r3, [r3, #1504]	; 0x5e0
 8001f6a:	494f      	ldr	r1, [pc, #316]	; (80020a8 <FLASH_IF_INT_Write+0x190>)
 8001f6c:	ea01 2183 	and.w	r1, r1, r3, lsl #10
 8001f70:	fbb2 f3f1 	udiv	r3, r2, r1
 8001f74:	fb01 2213 	mls	r2, r1, r3, r2
 8001f78:	0ad3      	lsrs	r3, r2, #11
 8001f7a:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001f7c:	9b04      	ldr	r3, [sp, #16]
 8001f7e:	18e3      	adds	r3, r4, r3
 8001f80:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001f84:	3b01      	subs	r3, #1
 8001f86:	fbb3 f0f1 	udiv	r0, r3, r1
 8001f8a:	fb01 3310 	mls	r3, r1, r0, r3
 8001f8e:	0adb      	lsrs	r3, r3, #11
 8001f90:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001f94:	3301      	adds	r3, #1
 8001f96:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d906      	bls.n	8001faa <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001f9c:	f3c4 090a 	ubfx	r9, r4, #0, #11
 8001fa0:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
            ret_status = FLASH_IF_WRITE_ERROR;
 8001fa4:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001fa8:	e02f      	b.n	800200a <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 8001faa:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8001fae:	e7f9      	b.n	8001fa4 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 8001fb0:	46c8      	mov	r8, r9
          current_source = uSource;
 8001fb2:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 8001fb4:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001fb6:	9d05      	ldr	r5, [sp, #20]
 8001fb8:	4545      	cmp	r5, r8
 8001fba:	d215      	bcs.n	8001fe8 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 8001fbc:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 8001fbe:	e9d6 2300 	ldrd	r2, r3, [r6]
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	2001      	movs	r0, #1
 8001fc6:	f006 fedd 	bl	8008d84 <HAL_FLASH_Program>
 8001fca:	b950      	cbnz	r0, 8001fe2 <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 8001fcc:	6820      	ldr	r0, [r4, #0]
 8001fce:	6862      	ldr	r2, [r4, #4]
 8001fd0:	59e9      	ldr	r1, [r5, r7]
 8001fd2:	6873      	ldr	r3, [r6, #4]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	bf08      	it	eq
 8001fd8:	4288      	cmpeq	r0, r1
 8001fda:	d141      	bne.n	8002060 <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 8001fdc:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 8001fde:	3508      	adds	r5, #8
 8001fe0:	e7ea      	b.n	8001fb8 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 8001fe2:	f06f 0303 	mvn.w	r3, #3
 8001fe6:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 8001fe8:	9b02      	ldr	r3, [sp, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d13f      	bne.n	800206e <FLASH_IF_INT_Write+0x156>
        uDest += length;
 8001fee:	44cb      	add	fp, r9
        uSource += length;
 8001ff0:	9b01      	ldr	r3, [sp, #4]
 8001ff2:	444b      	add	r3, r9
 8001ff4:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 8001ff6:	9b04      	ldr	r3, [sp, #16]
 8001ff8:	eba3 0909 	sub.w	r9, r3, r9
 8001ffc:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 8002000:	bf28      	it	cs
 8002002:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 8002006:	f10a 0a01 	add.w	sl, sl, #1
 800200a:	9b06      	ldr	r3, [sp, #24]
 800200c:	9a07      	ldr	r2, [sp, #28]
 800200e:	4413      	add	r3, r2
 8002010:	4553      	cmp	r3, sl
 8002012:	d92c      	bls.n	800206e <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8002014:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8002018:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 800201a:	4649      	mov	r1, r9
 800201c:	9803      	ldr	r0, [sp, #12]
 800201e:	f7ff fef6 	bl	8001e0e <FLASH_IF_INT_IsEmpty>
 8002022:	2800      	cmp	r0, #0
 8002024:	d0c4      	beq.n	8001fb0 <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8002026:	4b21      	ldr	r3, [pc, #132]	; (80020ac <FLASH_IF_INT_Write+0x194>)
 8002028:	6818      	ldr	r0, [r3, #0]
 800202a:	b1e8      	cbz	r0, 8002068 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 800202c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002030:	4621      	mov	r1, r4
 8002032:	f7ff feff 	bl	8001e34 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8002036:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <FLASH_IF_INT_Write+0x194>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f3cb 000a 	ubfx	r0, fp, #0, #11
 800203e:	fa1f f289 	uxth.w	r2, r9
 8002042:	9901      	ldr	r1, [sp, #4]
 8002044:	4418      	add	r0, r3
 8002046:	f014 fbb3 	bl	80167b0 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 800204a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800204e:	4620      	mov	r0, r4
 8002050:	f7ff ff18 	bl	8001e84 <FLASH_IF_INT_Erase>
 8002054:	b970      	cbnz	r0, 8002074 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <FLASH_IF_INT_Write+0x194>)
 8002058:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 800205a:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800205e:	e7aa      	b.n	8001fb6 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 8002060:	f06f 0303 	mvn.w	r3, #3
 8002064:	9302      	str	r3, [sp, #8]
 8002066:	e7bf      	b.n	8001fe8 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8002068:	f06f 0305 	mvn.w	r3, #5
 800206c:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800206e:	f006 fe45 	bl	8008cfc <HAL_FLASH_Lock>
 8002072:	e76b      	b.n	8001f4c <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8002074:	f06f 0301 	mvn.w	r3, #1
 8002078:	9302      	str	r3, [sp, #8]
 800207a:	e7f8      	b.n	800206e <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 800207c:	f06f 0305 	mvn.w	r3, #5
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	e763      	b.n	8001f4c <FLASH_IF_INT_Write+0x34>
 8002084:	f06f 0305 	mvn.w	r3, #5
 8002088:	9302      	str	r3, [sp, #8]
 800208a:	e75f      	b.n	8001f4c <FLASH_IF_INT_Write+0x34>
 800208c:	f06f 0305 	mvn.w	r3, #5
 8002090:	9302      	str	r3, [sp, #8]
 8002092:	e75b      	b.n	8001f4c <FLASH_IF_INT_Write+0x34>
 8002094:	f06f 0305 	mvn.w	r3, #5
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	e757      	b.n	8001f4c <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 800209c:	f06f 0304 	mvn.w	r3, #4
 80020a0:	9302      	str	r3, [sp, #8]
 80020a2:	e753      	b.n	8001f4c <FLASH_IF_INT_Write+0x34>
 80020a4:	1fff7000 	.word	0x1fff7000
 80020a8:	03fffc00 	.word	0x03fffc00
 80020ac:	2000088c 	.word	0x2000088c

080020b0 <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 80020b0:	4b01      	ldr	r3, [pc, #4]	; (80020b8 <FLASH_IF_Init+0x8>)
 80020b2:	6018      	str	r0, [r3, #0]
}
 80020b4:	2000      	movs	r0, #0
 80020b6:	4770      	bx	lr
 80020b8:	2000088c 	.word	0x2000088c

080020bc <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80020bc:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80020c0:	d30e      	bcc.n	80020e0 <FLASH_IF_Write+0x24>
{
 80020c2:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80020c4:	4b09      	ldr	r3, [pc, #36]	; (80020ec <FLASH_IF_Write+0x30>)
 80020c6:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <FLASH_IF_Write+0x34>)
 80020cc:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80020d0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80020d4:	3b01      	subs	r3, #1
 80020d6:	4298      	cmp	r0, r3
 80020d8:	d805      	bhi.n	80020e6 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80020da:	f7ff ff1d 	bl	8001f18 <FLASH_IF_INT_Write>
}
 80020de:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80020e0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80020e4:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80020e6:	f04f 30ff 	mov.w	r0, #4294967295
 80020ea:	e7f8      	b.n	80020de <FLASH_IF_Write+0x22>
 80020ec:	1fff7000 	.word	0x1fff7000
 80020f0:	03fffc00 	.word	0x03fffc00

080020f4 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80020f4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80020f8:	d30e      	bcc.n	8002118 <FLASH_IF_Read+0x24>
{
 80020fa:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <FLASH_IF_Read+0x30>)
 80020fe:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <FLASH_IF_Read+0x34>)
 8002104:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 8002108:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800210c:	3b01      	subs	r3, #1
 800210e:	4299      	cmp	r1, r3
 8002110:	d805      	bhi.n	800211e <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 8002112:	f7ff fe8f 	bl	8001e34 <FLASH_IF_INT_Read>
}
 8002116:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8002118:	f04f 30ff 	mov.w	r0, #4294967295
}
 800211c:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800211e:	f04f 30ff 	mov.w	r0, #4294967295
 8002122:	e7f8      	b.n	8002116 <FLASH_IF_Read+0x22>
 8002124:	1fff7000 	.word	0x1fff7000
 8002128:	03fffc00 	.word	0x03fffc00

0800212c <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 800212c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 8002130:	d30e      	bcc.n	8002150 <FLASH_IF_Erase+0x24>
{
 8002132:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <FLASH_IF_Erase+0x30>)
 8002136:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <FLASH_IF_Erase+0x34>)
 800213c:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 8002140:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002144:	3b01      	subs	r3, #1
 8002146:	4298      	cmp	r0, r3
 8002148:	d805      	bhi.n	8002156 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 800214a:	f7ff fe9b 	bl	8001e84 <FLASH_IF_INT_Erase>
}
 800214e:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002154:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8002156:	f04f 30ff 	mov.w	r0, #4294967295
 800215a:	e7f8      	b.n	800214e <FLASH_IF_Erase+0x22>
 800215c:	1fff7000 	.word	0x1fff7000
 8002160:	03fffc00 	.word	0x03fffc00

08002164 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002168:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	2400      	movs	r4, #0
 800216c:	9403      	str	r4, [sp, #12]
 800216e:	9404      	str	r4, [sp, #16]
 8002170:	9405      	str	r4, [sp, #20]
 8002172:	9406      	str	r4, [sp, #24]
 8002174:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800217c:	f042 0201 	orr.w	r2, r2, #1
 8002180:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002184:	f002 0201 	and.w	r2, r2, #1
 8002188:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800218a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800218c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800218e:	f042 0202 	orr.w	r2, r2, #2
 8002192:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002194:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002196:	f002 0202 	and.w	r2, r2, #2
 800219a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800219c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800219e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021a0:	f042 0204 	orr.w	r2, r2, #4
 80021a4:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80021ae:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 80021b0:	4e3b      	ldr	r6, [pc, #236]	; (80022a0 <MX_GPIO_Init+0x13c>)
 80021b2:	4622      	mov	r2, r4
 80021b4:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80021b8:	4630      	mov	r0, r6
 80021ba:	f006 fffb 	bl	80091b4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80021be:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80022a4 <MX_GPIO_Init+0x140>
 80021c2:	4622      	mov	r2, r4
 80021c4:	2104      	movs	r1, #4
 80021c6:	4640      	mov	r0, r8
 80021c8:	f006 fff4 	bl	80091b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80021cc:	4622      	mov	r2, r4
 80021ce:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80021d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d6:	f006 ffed 	bl	80091b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80021da:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80021de:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e0:	2501      	movs	r5, #1
 80021e2:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e4:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e6:	2302      	movs	r3, #2
 80021e8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ea:	a903      	add	r1, sp, #12
 80021ec:	4630      	mov	r0, r6
 80021ee:	f006 fe91 	bl	8008f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021f2:	2304      	movs	r3, #4
 80021f4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fc:	a903      	add	r1, sp, #12
 80021fe:	4640      	mov	r0, r8
 8002200:	f006 fe88 	bl	8008f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8002204:	2703      	movs	r7, #3
 8002206:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002208:	f44f 1904 	mov.w	r9, #2162688	; 0x210000
 800220c:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002210:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002212:	a903      	add	r1, sp, #12
 8002214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002218:	f006 fe7c 	bl	8008f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 800221c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002220:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002222:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002226:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	a903      	add	r1, sp, #12
 800222a:	4630      	mov	r0, r6
 800222c:	f006 fe72 	bl	8008f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1;
 8002230:	2706      	movs	r7, #6
 8002232:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002234:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002238:	a903      	add	r1, sp, #12
 800223a:	4630      	mov	r0, r6
 800223c:	f006 fe6a 	bl	8008f14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8002240:	2340      	movs	r3, #64	; 0x40
 8002242:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002244:	f8cd 9010 	str.w	r9, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002248:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800224a:	a903      	add	r1, sp, #12
 800224c:	4640      	mov	r0, r8
 800224e:	f006 fe61 	bl	8008f14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002252:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
 8002256:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002258:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	a903      	add	r1, sp, #12
 8002260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002264:	f006 fe56 	bl	8008f14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002268:	4622      	mov	r2, r4
 800226a:	4621      	mov	r1, r4
 800226c:	4638      	mov	r0, r7
 800226e:	f006 fa13 	bl	8008698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002272:	4638      	mov	r0, r7
 8002274:	f006 fa48 	bl	8008708 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002278:	4622      	mov	r2, r4
 800227a:	4621      	mov	r1, r4
 800227c:	2007      	movs	r0, #7
 800227e:	f006 fa0b 	bl	8008698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002282:	2007      	movs	r0, #7
 8002284:	f006 fa40 	bl	8008708 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002288:	4622      	mov	r2, r4
 800228a:	4621      	mov	r1, r4
 800228c:	2016      	movs	r0, #22
 800228e:	f006 fa03 	bl	8008698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002292:	2016      	movs	r0, #22
 8002294:	f006 fa38 	bl	8008708 <HAL_NVIC_EnableIRQ>

}
 8002298:	b009      	add	sp, #36	; 0x24
 800229a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800229e:	bf00      	nop
 80022a0:	48000400 	.word	0x48000400
 80022a4:	48000800 	.word	0x48000800

080022a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80022a8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022aa:	4812      	ldr	r0, [pc, #72]	; (80022f4 <MX_I2C1_Init+0x4c>)
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <MX_I2C1_Init+0x50>)
 80022ae:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <MX_I2C1_Init+0x54>)
 80022b2:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022b8:	2201      	movs	r2, #1
 80022ba:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022bc:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80022be:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80022c0:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022c2:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022c4:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022c6:	f007 f941 	bl	800954c <HAL_I2C_Init>
 80022ca:	b950      	cbnz	r0, 80022e2 <MX_I2C1_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022cc:	2100      	movs	r1, #0
 80022ce:	4809      	ldr	r0, [pc, #36]	; (80022f4 <MX_I2C1_Init+0x4c>)
 80022d0:	f007 fb46 	bl	8009960 <HAL_I2CEx_ConfigAnalogFilter>
 80022d4:	b940      	cbnz	r0, 80022e8 <MX_I2C1_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80022d6:	2100      	movs	r1, #0
 80022d8:	4806      	ldr	r0, [pc, #24]	; (80022f4 <MX_I2C1_Init+0x4c>)
 80022da:	f007 fb6f 	bl	80099bc <HAL_I2CEx_ConfigDigitalFilter>
 80022de:	b930      	cbnz	r0, 80022ee <MX_I2C1_Init+0x46>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80022e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80022e2:	f000 f853 	bl	800238c <Error_Handler>
 80022e6:	e7f1      	b.n	80022cc <MX_I2C1_Init+0x24>
    Error_Handler();
 80022e8:	f000 f850 	bl	800238c <Error_Handler>
 80022ec:	e7f3      	b.n	80022d6 <MX_I2C1_Init+0x2e>
    Error_Handler();
 80022ee:	f000 f84d 	bl	800238c <Error_Handler>
}
 80022f2:	e7f5      	b.n	80022e0 <MX_I2C1_Init+0x38>
 80022f4:	20000890 	.word	0x20000890
 80022f8:	40005400 	.word	0x40005400
 80022fc:	20303e5d 	.word	0x20303e5d

08002300 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	b096      	sub	sp, #88	; 0x58
 8002304:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002306:	2100      	movs	r1, #0
 8002308:	9111      	str	r1, [sp, #68]	; 0x44
 800230a:	9112      	str	r1, [sp, #72]	; 0x48
 800230c:	9113      	str	r1, [sp, #76]	; 0x4c
 800230e:	9114      	str	r1, [sp, #80]	; 0x50
 8002310:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002312:	2238      	movs	r2, #56	; 0x38
 8002314:	a803      	add	r0, sp, #12
 8002316:	f015 fff1 	bl	80182fc <memset>
  if(i2cHandle->Instance==I2C1)
 800231a:	6822      	ldr	r2, [r4, #0]
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_I2C_MspInit+0x84>)
 800231e:	429a      	cmp	r2, r3
 8002320:	d001      	beq.n	8002326 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002322:	b016      	add	sp, #88	; 0x58
 8002324:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800232a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800232e:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002330:	a803      	add	r0, sp, #12
 8002332:	f008 f98f 	bl	800a654 <HAL_RCCEx_PeriphCLKConfig>
 8002336:	bb08      	cbnz	r0, 800237c <HAL_I2C_MspInit+0x7c>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002338:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800233c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002344:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800234c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800234e:	23c0      	movs	r3, #192	; 0xc0
 8002350:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002352:	2312      	movs	r3, #18
 8002354:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235a:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800235c:	2304      	movs	r3, #4
 800235e:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	a911      	add	r1, sp, #68	; 0x44
 8002362:	4809      	ldr	r0, [pc, #36]	; (8002388 <HAL_I2C_MspInit+0x88>)
 8002364:	f006 fdd6 	bl	8008f14 <HAL_GPIO_Init>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002368:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800236a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800236e:	65a3      	str	r3, [r4, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002370:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002372:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002376:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002378:	9b01      	ldr	r3, [sp, #4]
}
 800237a:	e7d2      	b.n	8002322 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 800237c:	f000 f806 	bl	800238c <Error_Handler>
 8002380:	e7da      	b.n	8002338 <HAL_I2C_MspInit+0x38>
 8002382:	bf00      	nop
 8002384:	40005400 	.word	0x40005400
 8002388:	48000400 	.word	0x48000400

0800238c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800238c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800238e:	e7fe      	b.n	800238e <Error_Handler+0x2>

08002390 <SystemClock_Config>:
{
 8002390:	b510      	push	{r4, lr}
 8002392:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002394:	2248      	movs	r2, #72	; 0x48
 8002396:	2100      	movs	r1, #0
 8002398:	a808      	add	r0, sp, #32
 800239a:	f015 ffaf 	bl	80182fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800239e:	2400      	movs	r4, #0
 80023a0:	9401      	str	r4, [sp, #4]
 80023a2:	9402      	str	r4, [sp, #8]
 80023a4:	9403      	str	r4, [sp, #12]
 80023a6:	9404      	str	r4, [sp, #16]
 80023a8:	9405      	str	r4, [sp, #20]
 80023aa:	9406      	str	r4, [sp, #24]
 80023ac:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 80023ae:	f007 fb31 	bl	8009a14 <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80023b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023b6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80023ba:	f023 0318 	bic.w	r3, r3, #24
 80023be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023c6:	6813      	ldr	r3, [r2, #0]
 80023c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	6813      	ldr	r3, [r2, #0]
 80023d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80023dc:	2324      	movs	r3, #36	; 0x24
 80023de:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80023e0:	2381      	movs	r3, #129	; 0x81
 80023e2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80023e4:	2301      	movs	r3, #1
 80023e6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80023e8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80023ea:	23b0      	movs	r3, #176	; 0xb0
 80023ec:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80023ee:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023f0:	a808      	add	r0, sp, #32
 80023f2:	f007 fca9 	bl	8009d48 <HAL_RCC_OscConfig>
 80023f6:	b970      	cbnz	r0, 8002416 <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80023f8:	234f      	movs	r3, #79	; 0x4f
 80023fa:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80023fc:	2300      	movs	r3, #0
 80023fe:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002400:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002402:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002404:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8002406:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002408:	2102      	movs	r1, #2
 800240a:	a801      	add	r0, sp, #4
 800240c:	f007 ffce 	bl	800a3ac <HAL_RCC_ClockConfig>
 8002410:	b918      	cbnz	r0, 800241a <SystemClock_Config+0x8a>
}
 8002412:	b01a      	add	sp, #104	; 0x68
 8002414:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002416:	f7ff ffb9 	bl	800238c <Error_Handler>
    Error_Handler();
 800241a:	f7ff ffb7 	bl	800238c <Error_Handler>
	...

08002420 <main>:
{
 8002420:	b510      	push	{r4, lr}
 8002422:	b082      	sub	sp, #8
  HAL_Init();
 8002424:	f005 fc00 	bl	8007c28 <HAL_Init>
  SystemClock_Config();
 8002428:	f7ff ffb2 	bl	8002390 <SystemClock_Config>
  MX_GPIO_Init();
 800242c:	f7ff fe9a 	bl	8002164 <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 8002430:	f002 f914 	bl	800465c <MX_LoRaWAN_Init>
  MX_I2C1_Init();
 8002434:	f7ff ff38 	bl	80022a8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002438:	f000 fc60 	bl	8002cfc <MX_USART1_UART_Init>
  initModbus(&huart1, GPIOC, GPIO_PIN_2);
 800243c:	4c24      	ldr	r4, [pc, #144]	; (80024d0 <main+0xb0>)
 800243e:	2204      	movs	r2, #4
 8002440:	4924      	ldr	r1, [pc, #144]	; (80024d4 <main+0xb4>)
 8002442:	4620      	mov	r0, r4
 8002444:	f7ff fb4c 	bl	8001ae0 <initModbus>
  MX_USART2_UART_Init();
 8002448:	f000 fc8c 	bl	8002d64 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800244c:	2201      	movs	r2, #1
 800244e:	4922      	ldr	r1, [pc, #136]	; (80024d8 <main+0xb8>)
 8002450:	4822      	ldr	r0, [pc, #136]	; (80024dc <main+0xbc>)
 8002452:	f00a f929 	bl	800c6a8 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, (uint8_t *)modbus_buffer, 1);
 8002456:	2201      	movs	r2, #1
 8002458:	4921      	ldr	r1, [pc, #132]	; (80024e0 <main+0xc0>)
 800245a:	4620      	mov	r0, r4
 800245c:	f00a f924 	bl	800c6a8 <HAL_UART_Receive_IT>
  uint32_t startMillis = HAL_GetTick();
 8002460:	f000 fa32 	bl	80028c8 <HAL_GetTick>
 8002464:	4604      	mov	r4, r0
  uint32_t printMillis = HAL_GetTick();
 8002466:	f000 fa2f 	bl	80028c8 <HAL_GetTick>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800246a:	2201      	movs	r2, #1
 800246c:	2140      	movs	r1, #64	; 0x40
 800246e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002472:	f006 fe9f 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8002476:	2201      	movs	r2, #1
 8002478:	2180      	movs	r1, #128	; 0x80
 800247a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247e:	f006 fe99 	bl	80091b4 <HAL_GPIO_WritePin>
  if (FLASH_IF_Read(&DeviceParamsNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(DeviceParamsNVM)) == FLASH_IF_OK) {
 8002482:	22f8      	movs	r2, #248	; 0xf8
 8002484:	4917      	ldr	r1, [pc, #92]	; (80024e4 <main+0xc4>)
 8002486:	4818      	ldr	r0, [pc, #96]	; (80024e8 <main+0xc8>)
 8002488:	f7ff fe34 	bl	80020f4 <FLASH_IF_Read>
 800248c:	b9c0      	cbnz	r0, 80024c0 <main+0xa0>
	  APP_LOG( TS_OFF, VLEVEL_M, "MODBUS Heart Beat Interval: %u ms \r\n", DeviceParamsNVM.pwxHeartbeatInterval );
 800248e:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <main+0xc8>)
 8002490:	e9d3 2338 	ldrd	r2, r3, [r3, #224]	; 0xe0
 8002494:	e9cd 2300 	strd	r2, r3, [sp]
 8002498:	4b14      	ldr	r3, [pc, #80]	; (80024ec <main+0xcc>)
 800249a:	2200      	movs	r2, #0
 800249c:	4611      	mov	r1, r2
 800249e:	2002      	movs	r0, #2
 80024a0:	f014 f870 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	  while(HAL_GetTick() - startMillis < 5000){
 80024a4:	f000 fa10 	bl	80028c8 <HAL_GetTick>
 80024a8:	1b00      	subs	r0, r0, r4
 80024aa:	f241 3387 	movw	r3, #4999	; 0x1387
 80024ae:	4298      	cmp	r0, r3
 80024b0:	d9f8      	bls.n	80024a4 <main+0x84>
	  if(!isConfigMode){
 80024b2:	4b0f      	ldr	r3, [pc, #60]	; (80024f0 <main+0xd0>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f4      	bne.n	80024a4 <main+0x84>
		  MX_LoRaWAN_Process();
 80024ba:	f002 f8d5 	bl	8004668 <MX_LoRaWAN_Process>
 80024be:	e7f1      	b.n	80024a4 <main+0x84>
	  APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80024c0:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <main+0xd4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	4611      	mov	r1, r2
 80024c6:	2002      	movs	r0, #2
 80024c8:	f014 f85c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80024cc:	e7ea      	b.n	80024a4 <main+0x84>
 80024ce:	bf00      	nop
 80024d0:	20000bcc 	.word	0x20000bcc
 80024d4:	48000800 	.word	0x48000800
 80024d8:	20000de5 	.word	0x20000de5
 80024dc:	20000c60 	.word	0x20000c60
 80024e0:	200009e8 	.word	0x200009e8
 80024e4:	0803f000 	.word	0x0803f000
 80024e8:	200008e8 	.word	0x200008e8
 80024ec:	0801c508 	.word	0x0801c508
 80024f0:	20000df0 	.word	0x20000df0
 80024f4:	0801c4cc 	.word	0x0801c4cc

080024f8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024f8:	b500      	push	{lr}
 80024fa:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80024fc:	222c      	movs	r2, #44	; 0x2c
 80024fe:	2100      	movs	r1, #0
 8002500:	a801      	add	r0, sp, #4
 8002502:	f015 fefb 	bl	80182fc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002506:	4819      	ldr	r0, [pc, #100]	; (800256c <MX_RTC_Init+0x74>)
 8002508:	4b19      	ldr	r3, [pc, #100]	; (8002570 <MX_RTC_Init+0x78>)
 800250a:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 800250c:	231f      	movs	r3, #31
 800250e:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002514:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002516:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800251c:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800251e:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8002520:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002524:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002526:	f008 faa5 	bl	800aa74 <HAL_RTC_Init>
 800252a:	b9a8      	cbnz	r0, 8002558 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800252c:	480f      	ldr	r0, [pc, #60]	; (800256c <MX_RTC_Init+0x74>)
 800252e:	f008 fbe3 	bl	800acf8 <HAL_RTCEx_SetSSRU_IT>
 8002532:	b9a0      	cbnz	r0, 800255e <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002534:	2200      	movs	r2, #0
 8002536:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8002538:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800253a:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800253c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002540:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002542:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002546:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8002548:	a901      	add	r1, sp, #4
 800254a:	4808      	ldr	r0, [pc, #32]	; (800256c <MX_RTC_Init+0x74>)
 800254c:	f008 faf8 	bl	800ab40 <HAL_RTC_SetAlarm_IT>
 8002550:	b940      	cbnz	r0, 8002564 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002552:	b00d      	add	sp, #52	; 0x34
 8002554:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002558:	f7ff ff18 	bl	800238c <Error_Handler>
 800255c:	e7e6      	b.n	800252c <MX_RTC_Init+0x34>
    Error_Handler();
 800255e:	f7ff ff15 	bl	800238c <Error_Handler>
 8002562:	e7e7      	b.n	8002534 <MX_RTC_Init+0x3c>
    Error_Handler();
 8002564:	f7ff ff12 	bl	800238c <Error_Handler>
}
 8002568:	e7f3      	b.n	8002552 <MX_RTC_Init+0x5a>
 800256a:	bf00      	nop
 800256c:	20000b18 	.word	0x20000b18
 8002570:	40002800 	.word	0x40002800

08002574 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002574:	b510      	push	{r4, lr}
 8002576:	b090      	sub	sp, #64	; 0x40
 8002578:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800257a:	2238      	movs	r2, #56	; 0x38
 800257c:	2100      	movs	r1, #0
 800257e:	a802      	add	r0, sp, #8
 8002580:	f015 febc 	bl	80182fc <memset>
  if(rtcHandle->Instance==RTC)
 8002584:	6822      	ldr	r2, [r4, #0]
 8002586:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_RTC_MspInit+0x7c>)
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800258c:	b010      	add	sp, #64	; 0x40
 800258e:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002594:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002596:	f44f 7380 	mov.w	r3, #256	; 0x100
 800259a:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800259c:	a802      	add	r0, sp, #8
 800259e:	f008 f859 	bl	800a654 <HAL_RCCEx_PeriphCLKConfig>
 80025a2:	bb08      	cbnz	r0, 80025e8 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80025a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80025ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 80025b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80025b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025ba:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c2:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80025c4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	4611      	mov	r1, r2
 80025ca:	2002      	movs	r0, #2
 80025cc:	f006 f864 	bl	8008698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80025d0:	2002      	movs	r0, #2
 80025d2:	f006 f899 	bl	8008708 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	4611      	mov	r1, r2
 80025da:	202a      	movs	r0, #42	; 0x2a
 80025dc:	f006 f85c 	bl	8008698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80025e0:	202a      	movs	r0, #42	; 0x2a
 80025e2:	f006 f891 	bl	8008708 <HAL_NVIC_EnableIRQ>
}
 80025e6:	e7d1      	b.n	800258c <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80025e8:	f7ff fed0 	bl	800238c <Error_Handler>
 80025ec:	e7da      	b.n	80025a4 <HAL_RTC_MspInit+0x30>
 80025ee:	bf00      	nop
 80025f0:	40002800 	.word	0x40002800

080025f4 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80025f4:	4770      	bx	lr

080025f6 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80025f6:	4770      	bx	lr

080025f8 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80025f8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80025fa:	f005 fb2b 	bl	8007c54 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80025fe:	2001      	movs	r0, #1
 8002600:	4b02      	ldr	r3, [pc, #8]	; (800260c <PWR_EnterStopMode+0x14>)
 8002602:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002606:	f007 fa69 	bl	8009adc <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800260a:	bd08      	pop	{r3, pc}
 800260c:	58000400 	.word	0x58000400

08002610 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8002610:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8002612:	f005 fb26 	bl	8007c62 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8002616:	bd08      	pop	{r3, pc}

08002618 <PWR_ExitStopMode>:
{
 8002618:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 800261a:	f005 fb22 	bl	8007c62 <HAL_ResumeTick>
  vcom_Resume();
 800261e:	f000 fd17 	bl	8003050 <vcom_Resume>
}
 8002622:	bd08      	pop	{r3, pc}

08002624 <PWR_EnterSleepMode>:
{
 8002624:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 8002626:	f005 fb15 	bl	8007c54 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800262a:	2101      	movs	r1, #1
 800262c:	2000      	movs	r0, #0
 800262e:	f007 f9f9 	bl	8009a24 <HAL_PWR_EnterSLEEPMode>
}
 8002632:	bd08      	pop	{r3, pc}

08002634 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002634:	4770      	bx	lr

08002636 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002636:	e7fe      	b.n	8002636 <NMI_Handler>

08002638 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <HardFault_Handler>

0800263a <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800263a:	e7fe      	b.n	800263a <MemManage_Handler>

0800263c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800263c:	e7fe      	b.n	800263c <BusFault_Handler>

0800263e <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <UsageFault_Handler>

08002640 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002640:	4770      	bx	lr

08002642 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002642:	4770      	bx	lr

08002644 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002644:	4770      	bx	lr

08002646 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002646:	4770      	bx	lr

08002648 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8002648:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 800264a:	4802      	ldr	r0, [pc, #8]	; (8002654 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 800264c:	f008 fb80 	bl	800ad50 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8002650:	bd08      	pop	{r3, pc}
 8002652:	bf00      	nop
 8002654:	20000b18 	.word	0x20000b18

08002658 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002658:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 800265a:	2001      	movs	r0, #1
 800265c:	f006 fdb8 	bl	80091d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002660:	bd08      	pop	{r3, pc}

08002662 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002662:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 8002664:	2002      	movs	r0, #2
 8002666:	f006 fdb3 	bl	80091d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800266a:	bd08      	pop	{r3, pc}

0800266c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800266c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800266e:	4802      	ldr	r0, [pc, #8]	; (8002678 <DMA1_Channel5_IRQHandler+0xc>)
 8002670:	f006 fa7a 	bl	8008b68 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002674:	bd08      	pop	{r3, pc}
 8002676:	bf00      	nop
 8002678:	20000b6c 	.word	0x20000b6c

0800267c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 800267c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 800267e:	2040      	movs	r0, #64	; 0x40
 8002680:	f006 fda6 	bl	80091d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002684:	bd08      	pop	{r3, pc}
	...

08002688 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 8002688:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800268a:	4802      	ldr	r0, [pc, #8]	; (8002694 <USART1_IRQHandler+0xc>)
 800268c:	f009 f81e 	bl	800b6cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002690:	bd08      	pop	{r3, pc}
 8002692:	bf00      	nop
 8002694:	20000bcc 	.word	0x20000bcc

08002698 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002698:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800269a:	4802      	ldr	r0, [pc, #8]	; (80026a4 <USART2_IRQHandler+0xc>)
 800269c:	f009 f816 	bl	800b6cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026a0:	bd08      	pop	{r3, pc}
 80026a2:	bf00      	nop
 80026a4:	20000c60 	.word	0x20000c60

080026a8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 80026a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80026aa:	4802      	ldr	r0, [pc, #8]	; (80026b4 <RTC_Alarm_IRQHandler+0xc>)
 80026ac:	f008 f95c 	bl	800a968 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80026b0:	bd08      	pop	{r3, pc}
 80026b2:	bf00      	nop
 80026b4:	20000b18 	.word	0x20000b18

080026b8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 80026b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 80026ba:	4802      	ldr	r0, [pc, #8]	; (80026c4 <SUBGHZ_Radio_IRQHandler+0xc>)
 80026bc:	f008 fdfc 	bl	800b2b8 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 80026c0:	bd08      	pop	{r3, pc}
 80026c2:	bf00      	nop
 80026c4:	20000b50 	.word	0x20000b50

080026c8 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 80026c8:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 80026ca:	4805      	ldr	r0, [pc, #20]	; (80026e0 <MX_SUBGHZ_Init+0x18>)
 80026cc:	2308      	movs	r3, #8
 80026ce:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 80026d0:	f008 fb74 	bl	800adbc <HAL_SUBGHZ_Init>
 80026d4:	b900      	cbnz	r0, 80026d8 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 80026d6:	bd08      	pop	{r3, pc}
    Error_Handler();
 80026d8:	f7ff fe58 	bl	800238c <Error_Handler>
}
 80026dc:	e7fb      	b.n	80026d6 <MX_SUBGHZ_Init+0xe>
 80026de:	bf00      	nop
 80026e0:	20000b50 	.word	0x20000b50

080026e4 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 80026e4:	b500      	push	{lr}
 80026e6:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80026f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80026fc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80026fe:	2200      	movs	r2, #0
 8002700:	4611      	mov	r1, r2
 8002702:	2032      	movs	r0, #50	; 0x32
 8002704:	f005 ffc8 	bl	8008698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8002708:	2032      	movs	r0, #50	; 0x32
 800270a:	f005 fffd 	bl	8008708 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 800270e:	b003      	add	sp, #12
 8002710:	f85d fb04 	ldr.w	pc, [sp], #4

08002714 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8002714:	b40c      	push	{r2, r3}
 8002716:	b500      	push	{lr}
 8002718:	b083      	sub	sp, #12
 800271a:	ab04      	add	r3, sp, #16
 800271c:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8002720:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002722:	f014 fc1f 	bl	8016f64 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002726:	b003      	add	sp, #12
 8002728:	f85d eb04 	ldr.w	lr, [sp], #4
 800272c:	b002      	add	sp, #8
 800272e:	4770      	bx	lr

08002730 <TimestampNow>:
{
 8002730:	b530      	push	{r4, r5, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	4604      	mov	r4, r0
 8002736:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002738:	a802      	add	r0, sp, #8
 800273a:	f014 f987 	bl	8016a4c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 800273e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	9b02      	ldr	r3, [sp, #8]
 8002746:	4a05      	ldr	r2, [pc, #20]	; (800275c <TimestampNow+0x2c>)
 8002748:	2110      	movs	r1, #16
 800274a:	4620      	mov	r0, r4
 800274c:	f7ff ffe2 	bl	8002714 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8002750:	4620      	mov	r0, r4
 8002752:	f7fd fd65 	bl	8000220 <strlen>
 8002756:	8028      	strh	r0, [r5, #0]
}
 8002758:	b005      	add	sp, #20
 800275a:	bd30      	pop	{r4, r5, pc}
 800275c:	0801c548 	.word	0x0801c548

08002760 <SystemApp_Init>:
{
 8002760:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8002762:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002766:	6893      	ldr	r3, [r2, #8]
 8002768:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800276c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800276e:	f014 f9f1 	bl	8016b54 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8002772:	2401      	movs	r4, #1
 8002774:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <SystemApp_Init+0x4c>)
 8002776:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8002778:	f000 f8bc 	bl	80028f4 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 800277c:	f013 fe8e 	bl	801649c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002780:	480b      	ldr	r0, [pc, #44]	; (80027b0 <SystemApp_Init+0x50>)
 8002782:	f013 fea5 	bl	80164d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <SystemApp_Init+0x54>)
 8002788:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800278c:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800278e:	2002      	movs	r0, #2
 8002790:	f013 fea4 	bl	80164dc <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002794:	f7ff fa9a 	bl	8001ccc <SYS_InitMeasurement>
  EnvSensors_Init();
 8002798:	f000 f914 	bl	80029c4 <EnvSensors_Init>
  UTIL_LPM_Init();
 800279c:	f013 ffae 	bl	80166fc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 80027a0:	4621      	mov	r1, r4
 80027a2:	4620      	mov	r0, r4
 80027a4:	f013 ffca 	bl	801673c <UTIL_LPM_SetOffMode>
}
 80027a8:	bd10      	pop	{r4, pc}
 80027aa:	bf00      	nop
 80027ac:	20000b5c 	.word	0x20000b5c
 80027b0:	08002731 	.word	0x08002731
 80027b4:	58004000 	.word	0x58004000

080027b8 <UTIL_SEQ_Idle>:
{
 80027b8:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 80027ba:	f013 ffd5 	bl	8016768 <UTIL_LPM_EnterLowPower>
}
 80027be:	bd08      	pop	{r3, pc}

080027c0 <GetBatteryLevel>:
{
 80027c0:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 80027c2:	f7ff fa8b 	bl	8001cdc <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 80027c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80027ca:	4298      	cmp	r0, r3
 80027cc:	d80d      	bhi.n	80027ea <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 80027ce:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 80027d2:	d30c      	bcc.n	80027ee <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 80027d4:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 80027d8:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 80027dc:	0040      	lsls	r0, r0, #1
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <GetBatteryLevel+0x34>)
 80027e0:	fba3 3000 	umull	r3, r0, r3, r0
 80027e4:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 80027e8:	e000      	b.n	80027ec <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 80027ea:	20fe      	movs	r0, #254	; 0xfe
}
 80027ec:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 80027ee:	2000      	movs	r0, #0
 80027f0:	e7fc      	b.n	80027ec <GetBatteryLevel+0x2c>
 80027f2:	bf00      	nop
 80027f4:	1b4e81b5 	.word	0x1b4e81b5

080027f8 <GetTemperatureLevel>:
{
 80027f8:	b500      	push	{lr}
 80027fa:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 80027fc:	4668      	mov	r0, sp
 80027fe:	f000 f8c5 	bl	800298c <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8002802:	9801      	ldr	r0, [sp, #4]
 8002804:	f7fe fcec 	bl	80011e0 <__aeabi_f2iz>
}
 8002808:	b200      	sxth	r0, r0
 800280a:	b007      	add	sp, #28
 800280c:	f85d fb04 	ldr.w	pc, [sp], #4

08002810 <GetUniqueId>:
{
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8002814:	4b18      	ldr	r3, [pc, #96]	; (8002878 <GetUniqueId+0x68>)
 8002816:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d013      	beq.n	8002848 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8002820:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8002822:	0a1a      	lsrs	r2, r3, #8
 8002824:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8002826:	0c1a      	lsrs	r2, r3, #16
 8002828:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 800282a:	0e1b      	lsrs	r3, r3, #24
 800282c:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <GetUniqueId+0x68>)
 8002830:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8002834:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8002836:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800283a:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 800283c:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 800283e:	0c1a      	lsrs	r2, r3, #16
 8002840:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8002842:	0e1b      	lsrs	r3, r3, #24
 8002844:	7003      	strb	r3, [r0, #0]
}
 8002846:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002848:	f005 fa12 	bl	8007c70 <HAL_GetUIDw0>
 800284c:	4605      	mov	r5, r0
 800284e:	f005 fa1b 	bl	8007c88 <HAL_GetUIDw2>
 8002852:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8002854:	f005 fa12 	bl	8007c7c <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8002858:	0e2b      	lsrs	r3, r5, #24
 800285a:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 800285c:	0c2b      	lsrs	r3, r5, #16
 800285e:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8002860:	0a2b      	lsrs	r3, r5, #8
 8002862:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8002864:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8002866:	0e03      	lsrs	r3, r0, #24
 8002868:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 800286a:	0c03      	lsrs	r3, r0, #16
 800286c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 800286e:	0a03      	lsrs	r3, r0, #8
 8002870:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8002872:	7020      	strb	r0, [r4, #0]
 8002874:	e7e7      	b.n	8002846 <GetUniqueId+0x36>
 8002876:	bf00      	nop
 8002878:	1fff7000 	.word	0x1fff7000

0800287c <GetDevAddr>:
{
 800287c:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 800287e:	4b0a      	ldr	r3, [pc, #40]	; (80028a8 <GetDevAddr+0x2c>)
 8002880:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8002884:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8002886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288a:	d000      	beq.n	800288e <GetDevAddr+0x12>
}
 800288c:	bd38      	pop	{r3, r4, r5, pc}
 800288e:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002890:	f005 f9ee 	bl	8007c70 <HAL_GetUIDw0>
 8002894:	4605      	mov	r5, r0
 8002896:	f005 f9f1 	bl	8007c7c <HAL_GetUIDw1>
 800289a:	4045      	eors	r5, r0
 800289c:	f005 f9f4 	bl	8007c88 <HAL_GetUIDw2>
 80028a0:	4045      	eors	r5, r0
 80028a2:	6025      	str	r5, [r4, #0]
}
 80028a4:	e7f2      	b.n	800288c <GetDevAddr+0x10>
 80028a6:	bf00      	nop
 80028a8:	1fff7000 	.word	0x1fff7000

080028ac <UTIL_ADV_TRACE_PreSendHook>:
{
 80028ac:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 80028ae:	2101      	movs	r1, #1
 80028b0:	2002      	movs	r0, #2
 80028b2:	f013 ff2d 	bl	8016710 <UTIL_LPM_SetStopMode>
}
 80028b6:	bd08      	pop	{r3, pc}

080028b8 <UTIL_ADV_TRACE_PostSendHook>:
{
 80028b8:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 80028ba:	2100      	movs	r1, #0
 80028bc:	2002      	movs	r0, #2
 80028be:	f013 ff27 	bl	8016710 <UTIL_LPM_SetStopMode>
}
 80028c2:	bd08      	pop	{r3, pc}

080028c4 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 80028c4:	2000      	movs	r0, #0
 80028c6:	4770      	bx	lr

080028c8 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 80028c8:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <HAL_GetTick+0x14>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	b90b      	cbnz	r3, 80028d4 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 80028d0:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 80028d2:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 80028d4:	f000 f900 	bl	8002ad8 <TIMER_IF_GetTimerValue>
 80028d8:	e7fb      	b.n	80028d2 <HAL_GetTick+0xa>
 80028da:	bf00      	nop
 80028dc:	20000b5c 	.word	0x20000b5c

080028e0 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 80028e0:	b500      	push	{lr}
 80028e2:	b083      	sub	sp, #12
 80028e4:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 80028e6:	9801      	ldr	r0, [sp, #4]
 80028e8:	f000 f9dc 	bl	8002ca4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 80028ec:	b003      	add	sp, #12
 80028ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080028f4 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 80028f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028f6:	b089      	sub	sp, #36	; 0x24
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80028f8:	4a22      	ldr	r2, [pc, #136]	; (8002984 <DBG_Init+0x90>)
 80028fa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80028fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_DBGMCU_DisableDBGStandbyMode();
#elif defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
  /* Disabled HAL_DBGMCU_  */
  HAL_DBGMCU_EnableDBGSleepMode();
 8002906:	f005 f9c5 	bl	8007c94 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 800290a:	f005 f9cb 	bl	8007ca4 <HAL_DBGMCU_EnableDBGStopMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
 800290e:	f005 f9d1 	bl	8007cb4 <HAL_DBGMCU_EnableDBGStandbyMode>
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8002912:	2400      	movs	r4, #0
 8002914:	9403      	str	r4, [sp, #12]
 8002916:	9404      	str	r4, [sp, #16]
 8002918:	9405      	str	r4, [sp, #20]
 800291a:	9406      	str	r4, [sp, #24]
 800291c:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 800291e:	2301      	movs	r3, #1
 8002920:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8002922:	2303      	movs	r3, #3
 8002924:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800292c:	f042 0202 	orr.w	r2, r2, #2
 8002930:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002932:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002934:	f002 0202 	and.w	r2, r2, #2
 8002938:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800293a:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800293c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800293e:	f042 0202 	orr.w	r2, r2, #2
 8002942:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800294c:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 800294e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8002952:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8002954:	4d0c      	ldr	r5, [pc, #48]	; (8002988 <DBG_Init+0x94>)
 8002956:	a903      	add	r1, sp, #12
 8002958:	4628      	mov	r0, r5
 800295a:	f006 fadb 	bl	8008f14 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 800295e:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8002962:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8002964:	a903      	add	r1, sp, #12
 8002966:	4628      	mov	r0, r5
 8002968:	f006 fad4 	bl	8008f14 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 800296c:	4622      	mov	r2, r4
 800296e:	4639      	mov	r1, r7
 8002970:	4628      	mov	r0, r5
 8002972:	f006 fc1f 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8002976:	4622      	mov	r2, r4
 8002978:	4631      	mov	r1, r6
 800297a:	4628      	mov	r0, r5
 800297c:	f006 fc1a 	bl	80091b4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8002980:	b009      	add	sp, #36	; 0x24
 8002982:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002984:	58000800 	.word	0x58000800
 8002988:	48000400 	.word	0x48000400

0800298c <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 800298c:	b510      	push	{r4, lr}
 800298e:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8002990:	f7ff f9c6 	bl	8001d20 <SYS_GetTemperatureLevel>
 8002994:	f340 200f 	sbfx	r0, r0, #8, #16
 8002998:	f7fe fa08 	bl	8000dac <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 800299c:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <EnvSensors_Read+0x28>)
 800299e:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 80029a0:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 80029a2:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <EnvSensors_Read+0x2c>)
 80029a4:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <EnvSensors_Read+0x30>)
 80029a8:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <EnvSensors_Read+0x34>)
 80029ac:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 80029ae:	2000      	movs	r0, #0
 80029b0:	bd10      	pop	{r4, pc}
 80029b2:	bf00      	nop
 80029b4:	42480000 	.word	0x42480000
 80029b8:	447a0000 	.word	0x447a0000
 80029bc:	003e090d 	.word	0x003e090d
 80029c0:	000503ab 	.word	0x000503ab

080029c4 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 80029c4:	2000      	movs	r0, #0
 80029c6:	4770      	bx	lr

080029c8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80029c8:	2001      	movs	r0, #1
 80029ca:	4770      	bx	lr

080029cc <_kill>:

int _kill(int pid, int sig)
{
 80029cc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ce:	f015 fd09 	bl	80183e4 <__errno>
 80029d2:	2316      	movs	r3, #22
 80029d4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80029d6:	f04f 30ff 	mov.w	r0, #4294967295
 80029da:	bd08      	pop	{r3, pc}

080029dc <_exit>:

void _exit (int status)
{
 80029dc:	b508      	push	{r3, lr}
  _kill(status, -1);
 80029de:	f04f 31ff 	mov.w	r1, #4294967295
 80029e2:	f7ff fff3 	bl	80029cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80029e6:	e7fe      	b.n	80029e6 <_exit+0xa>

080029e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	460c      	mov	r4, r1
 80029ec:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029ee:	2500      	movs	r5, #0
 80029f0:	e006      	b.n	8002a00 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 80029f2:	f3af 8000 	nop.w
 80029f6:	4621      	mov	r1, r4
 80029f8:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fc:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 80029fe:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a00:	42b5      	cmp	r5, r6
 8002a02:	dbf6      	blt.n	80029f2 <_read+0xa>
  }

  return len;
}
 8002a04:	4630      	mov	r0, r6
 8002a06:	bd70      	pop	{r4, r5, r6, pc}

08002a08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a08:	b570      	push	{r4, r5, r6, lr}
 8002a0a:	460c      	mov	r4, r1
 8002a0c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0e:	2500      	movs	r5, #0
 8002a10:	e004      	b.n	8002a1c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8002a12:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002a16:	f7ff f80d 	bl	8001a34 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1a:	3501      	adds	r5, #1
 8002a1c:	42b5      	cmp	r5, r6
 8002a1e:	dbf8      	blt.n	8002a12 <_write+0xa>
  }
  return len;
}
 8002a20:	4630      	mov	r0, r6
 8002a22:	bd70      	pop	{r4, r5, r6, pc}

08002a24 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	4770      	bx	lr

08002a2a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8002a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a2e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8002a30:	2000      	movs	r0, #0
 8002a32:	4770      	bx	lr

08002a34 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8002a34:	2001      	movs	r0, #1
 8002a36:	4770      	bx	lr

08002a38 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8002a38:	2000      	movs	r0, #0
 8002a3a:	4770      	bx	lr

08002a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a3c:	b510      	push	{r4, lr}
 8002a3e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <_sbrk+0x38>)
 8002a42:	490d      	ldr	r1, [pc, #52]	; (8002a78 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a44:	480d      	ldr	r0, [pc, #52]	; (8002a7c <_sbrk+0x40>)
 8002a46:	6800      	ldr	r0, [r0, #0]
 8002a48:	b140      	cbz	r0, 8002a5c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <_sbrk+0x40>)
 8002a4c:	6800      	ldr	r0, [r0, #0]
 8002a4e:	4403      	add	r3, r0
 8002a50:	1a52      	subs	r2, r2, r1
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d806      	bhi.n	8002a64 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <_sbrk+0x40>)
 8002a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8002a5a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8002a5c:	4807      	ldr	r0, [pc, #28]	; (8002a7c <_sbrk+0x40>)
 8002a5e:	4c08      	ldr	r4, [pc, #32]	; (8002a80 <_sbrk+0x44>)
 8002a60:	6004      	str	r4, [r0, #0]
 8002a62:	e7f2      	b.n	8002a4a <_sbrk+0xe>
    errno = ENOMEM;
 8002a64:	f015 fcbe 	bl	80183e4 <__errno>
 8002a68:	230c      	movs	r3, #12
 8002a6a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8002a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a70:	e7f3      	b.n	8002a5a <_sbrk+0x1e>
 8002a72:	bf00      	nop
 8002a74:	20008000 	.word	0x20008000
 8002a78:	00000800 	.word	0x00000800
 8002a7c:	20000b60 	.word	0x20000b60
 8002a80:	200023a0 	.word	0x200023a0

08002a84 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <TIMER_IF_SetTimerContext+0x1c>)
 8002a86:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002a88:	e001      	b.n	8002a8e <TIMER_IF_SetTimerContext+0xa>
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <TIMER_IF_SetTimerContext+0x1c>)
 8002a8c:	6898      	ldr	r0, [r3, #8]
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <TIMER_IF_SetTimerContext+0x1c>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	4283      	cmp	r3, r0
 8002a94:	d1f9      	bne.n	8002a8a <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8002a96:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <TIMER_IF_SetTimerContext+0x20>)
 8002a9a:	6018      	str	r0, [r3, #0]
}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40002800 	.word	0x40002800
 8002aa4:	20000b68 	.word	0x20000b68

08002aa8 <TIMER_IF_GetTimerContext>:
}
 8002aa8:	4b01      	ldr	r3, [pc, #4]	; (8002ab0 <TIMER_IF_GetTimerContext+0x8>)
 8002aaa:	6818      	ldr	r0, [r3, #0]
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	20000b68 	.word	0x20000b68

08002ab4 <TIMER_IF_GetTimerElapsedTime>:
 8002ab4:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002ab6:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ab8:	e001      	b.n	8002abe <TIMER_IF_GetTimerElapsedTime+0xa>
 8002aba:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002abc:	6898      	ldr	r0, [r3, #8]
 8002abe:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	4283      	cmp	r3, r0
 8002ac4:	d1f9      	bne.n	8002aba <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8002ac6:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8002ac8:	4b02      	ldr	r3, [pc, #8]	; (8002ad4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	1ac0      	subs	r0, r0, r3
 8002ace:	4770      	bx	lr
 8002ad0:	40002800 	.word	0x40002800
 8002ad4:	20000b68 	.word	0x20000b68

08002ad8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8002ad8:	4b07      	ldr	r3, [pc, #28]	; (8002af8 <TIMER_IF_GetTimerValue+0x20>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	b153      	cbz	r3, 8002af4 <TIMER_IF_GetTimerValue+0x1c>
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <TIMER_IF_GetTimerValue+0x24>)
 8002ae0:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002ae2:	e001      	b.n	8002ae8 <TIMER_IF_GetTimerValue+0x10>
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <TIMER_IF_GetTimerValue+0x24>)
 8002ae6:	6898      	ldr	r0, [r3, #8]
 8002ae8:	4b04      	ldr	r3, [pc, #16]	; (8002afc <TIMER_IF_GetTimerValue+0x24>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4283      	cmp	r3, r0
 8002aee:	d1f9      	bne.n	8002ae4 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8002af0:	43c0      	mvns	r0, r0
 8002af2:	4770      	bx	lr
  uint32_t ret = 0;
 8002af4:	2000      	movs	r0, #0
}
 8002af6:	4770      	bx	lr
 8002af8:	20000b64 	.word	0x20000b64
 8002afc:	40002800 	.word	0x40002800

08002b00 <TIMER_IF_GetMinimumTimeout>:
}
 8002b00:	2003      	movs	r0, #3
 8002b02:	4770      	bx	lr

08002b04 <TIMER_IF_Convert_ms2Tick>:
{
 8002b04:	b508      	push	{r3, lr}
 8002b06:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002b08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	0280      	lsls	r0, r0, #10
 8002b10:	0d89      	lsrs	r1, r1, #22
 8002b12:	f7fe fbab 	bl	800126c <__aeabi_uldivmod>
}
 8002b16:	bd08      	pop	{r3, pc}

08002b18 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8002b18:	0ec2      	lsrs	r2, r0, #27
 8002b1a:	0143      	lsls	r3, r0, #5
 8002b1c:	1a1b      	subs	r3, r3, r0
 8002b1e:	f162 0200 	sbc.w	r2, r2, #0
 8002b22:	0092      	lsls	r2, r2, #2
 8002b24:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	181b      	adds	r3, r3, r0
 8002b2c:	f142 0000 	adc.w	r0, r2, #0
 8002b30:	00c0      	lsls	r0, r0, #3
 8002b32:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8002b36:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8002b3a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8002b3e:	4770      	bx	lr

08002b40 <TIMER_IF_StopTimer>:
{
 8002b40:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <TIMER_IF_StopTimer+0x20>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002b48:	4c06      	ldr	r4, [pc, #24]	; (8002b64 <TIMER_IF_StopTimer+0x24>)
 8002b4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f007 feca 	bl	800a8e8 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
 8002b58:	6323      	str	r3, [r4, #48]	; 0x30
}
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	bd10      	pop	{r4, pc}
 8002b5e:	bf00      	nop
 8002b60:	40002800 	.word	0x40002800
 8002b64:	20000b18 	.word	0x20000b18

08002b68 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8002b68:	b508      	push	{r3, lr}
 8002b6a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8002b70:	f008 f903 	bl	800ad7a <HAL_RTCEx_BKUPWrite>
}
 8002b74:	bd08      	pop	{r3, pc}
 8002b76:	bf00      	nop
 8002b78:	20000b18 	.word	0x20000b18

08002b7c <TIMER_IF_Init>:
{
 8002b7c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8002b7e:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <TIMER_IF_Init+0x40>)
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	b10b      	cbz	r3, 8002b88 <TIMER_IF_Init+0xc>
}
 8002b84:	2000      	movs	r0, #0
 8002b86:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002b88:	4c0d      	ldr	r4, [pc, #52]	; (8002bc0 <TIMER_IF_Init+0x44>)
 8002b8a:	f04f 35ff 	mov.w	r5, #4294967295
 8002b8e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8002b90:	f7ff fcb2 	bl	80024f8 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8002b94:	f7ff ffd4 	bl	8002b40 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002b98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b9c:	4620      	mov	r0, r4
 8002b9e:	f007 fea3 	bl	800a8e8 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8002ba2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f008 f887 	bl	800acb8 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8002baa:	2000      	movs	r0, #0
 8002bac:	f7ff ffdc 	bl	8002b68 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8002bb0:	f7ff ff68 	bl	8002a84 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8002bb4:	4b01      	ldr	r3, [pc, #4]	; (8002bbc <TIMER_IF_Init+0x40>)
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
 8002bba:	e7e3      	b.n	8002b84 <TIMER_IF_Init+0x8>
 8002bbc:	20000b64 	.word	0x20000b64
 8002bc0:	20000b18 	.word	0x20000b18

08002bc4 <TIMER_IF_BkUp_Write_Seconds>:
{
 8002bc4:	b508      	push	{r3, lr}
 8002bc6:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4802      	ldr	r0, [pc, #8]	; (8002bd4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8002bcc:	f008 f8d5 	bl	800ad7a <HAL_RTCEx_BKUPWrite>
}
 8002bd0:	bd08      	pop	{r3, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000b18 	.word	0x20000b18

08002bd8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8002bd8:	b508      	push	{r3, lr}
 8002bda:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002bdc:	2101      	movs	r1, #1
 8002bde:	4802      	ldr	r0, [pc, #8]	; (8002be8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8002be0:	f008 f8cb 	bl	800ad7a <HAL_RTCEx_BKUPWrite>
}
 8002be4:	bd08      	pop	{r3, pc}
 8002be6:	bf00      	nop
 8002be8:	20000b18 	.word	0x20000b18

08002bec <TIMER_IF_StartTimer>:
{
 8002bec:	b510      	push	{r4, lr}
 8002bee:	b08c      	sub	sp, #48	; 0x30
 8002bf0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8002bf2:	222c      	movs	r2, #44	; 0x2c
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	a801      	add	r0, sp, #4
 8002bf8:	f015 fb80 	bl	80182fc <memset>
  TIMER_IF_StopTimer();
 8002bfc:	f7ff ffa0 	bl	8002b40 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <TIMER_IF_StartTimer+0x48>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8002c06:	2300      	movs	r3, #0
 8002c08:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8002c0a:	43e4      	mvns	r4, r4
 8002c0c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002c0e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8002c10:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002c14:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8002c16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	a901      	add	r1, sp, #4
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <TIMER_IF_StartTimer+0x4c>)
 8002c22:	f007 ff8d 	bl	800ab40 <HAL_RTC_SetAlarm_IT>
 8002c26:	b910      	cbnz	r0, 8002c2e <TIMER_IF_StartTimer+0x42>
}
 8002c28:	2000      	movs	r0, #0
 8002c2a:	b00c      	add	sp, #48	; 0x30
 8002c2c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8002c2e:	f7ff fbad 	bl	800238c <Error_Handler>
 8002c32:	e7f9      	b.n	8002c28 <TIMER_IF_StartTimer+0x3c>
 8002c34:	20000b68 	.word	0x20000b68
 8002c38:	20000b18 	.word	0x20000b18

08002c3c <TIMER_IF_BkUp_Read_MSBticks>:
{
 8002c3c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8002c3e:	2102      	movs	r1, #2
 8002c40:	4801      	ldr	r0, [pc, #4]	; (8002c48 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8002c42:	f008 f8a1 	bl	800ad88 <HAL_RTCEx_BKUPRead>
}
 8002c46:	bd08      	pop	{r3, pc}
 8002c48:	20000b18 	.word	0x20000b18

08002c4c <TIMER_IF_GetTime>:
{
 8002c4c:	b538      	push	{r3, r4, r5, lr}
 8002c4e:	4605      	mov	r5, r0
 8002c50:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <TIMER_IF_GetTime+0x34>)
 8002c52:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002c54:	e001      	b.n	8002c5a <TIMER_IF_GetTime+0xe>
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <TIMER_IF_GetTime+0x34>)
 8002c58:	689c      	ldr	r4, [r3, #8]
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <TIMER_IF_GetTime+0x34>)
 8002c5c:	6892      	ldr	r2, [r2, #8]
 8002c5e:	42a2      	cmp	r2, r4
 8002c60:	d1f9      	bne.n	8002c56 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8002c62:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8002c64:	f7ff ffea 	bl	8002c3c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002c68:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8002c6a:	0aa4      	lsrs	r4, r4, #10
 8002c6c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8002c70:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8002c74:	f7ff ff50 	bl	8002b18 <TIMER_IF_Convert_Tick2ms>
 8002c78:	8028      	strh	r0, [r5, #0]
}
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	bd38      	pop	{r3, r4, r5, pc}
 8002c7e:	bf00      	nop
 8002c80:	40002800 	.word	0x40002800

08002c84 <TIMER_IF_BkUp_Read_Seconds>:
{
 8002c84:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002c86:	2100      	movs	r1, #0
 8002c88:	4801      	ldr	r0, [pc, #4]	; (8002c90 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8002c8a:	f008 f87d 	bl	800ad88 <HAL_RTCEx_BKUPRead>
}
 8002c8e:	bd08      	pop	{r3, pc}
 8002c90:	20000b18 	.word	0x20000b18

08002c94 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8002c94:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002c96:	2101      	movs	r1, #1
 8002c98:	4801      	ldr	r0, [pc, #4]	; (8002ca0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8002c9a:	f008 f875 	bl	800ad88 <HAL_RTCEx_BKUPRead>
}
 8002c9e:	bd08      	pop	{r3, pc}
 8002ca0:	20000b18 	.word	0x20000b18

08002ca4 <TIMER_IF_DelayMs>:
{
 8002ca4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8002ca6:	f7ff ff2d 	bl	8002b04 <TIMER_IF_Convert_ms2Tick>
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <TIMER_IF_DelayMs+0x3c>)
 8002cac:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002cae:	e001      	b.n	8002cb4 <TIMER_IF_DelayMs+0x10>
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <TIMER_IF_DelayMs+0x3c>)
 8002cb2:	6899      	ldr	r1, [r3, #8]
 8002cb4:	4a0a      	ldr	r2, [pc, #40]	; (8002ce0 <TIMER_IF_DelayMs+0x3c>)
 8002cb6:	6892      	ldr	r2, [r2, #8]
 8002cb8:	428a      	cmp	r2, r1
 8002cba:	d1f9      	bne.n	8002cb0 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8002cbc:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002cbe:	e00a      	b.n	8002cd6 <TIMER_IF_DelayMs+0x32>
 8002cc0:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <TIMER_IF_DelayMs+0x3c>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a06      	ldr	r2, [pc, #24]	; (8002ce0 <TIMER_IF_DelayMs+0x3c>)
 8002cc6:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d1f9      	bne.n	8002cc0 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8002ccc:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002cce:	1a5b      	subs	r3, r3, r1
 8002cd0:	4283      	cmp	r3, r0
 8002cd2:	d203      	bcs.n	8002cdc <TIMER_IF_DelayMs+0x38>
    __NOP();
 8002cd4:	bf00      	nop
 8002cd6:	4b02      	ldr	r3, [pc, #8]	; (8002ce0 <TIMER_IF_DelayMs+0x3c>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8002cda:	e7f3      	b.n	8002cc4 <TIMER_IF_DelayMs+0x20>
}
 8002cdc:	bd08      	pop	{r3, pc}
 8002cde:	bf00      	nop
 8002ce0:	40002800 	.word	0x40002800

08002ce4 <HAL_RTC_AlarmAEventCallback>:
{
 8002ce4:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8002ce6:	f014 f859 	bl	8016d9c <UTIL_TIMER_IRQ_Handler>
}
 8002cea:	bd08      	pop	{r3, pc}

08002cec <HAL_RTCEx_SSRUEventCallback>:
{
 8002cec:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002cee:	f7ff ffa5 	bl	8002c3c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002cf2:	3001      	adds	r0, #1
 8002cf4:	f7ff ff38 	bl	8002b68 <TIMER_IF_BkUp_Write_MSBticks>
}
 8002cf8:	bd08      	pop	{r3, pc}
	...

08002cfc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002cfc:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002cfe:	4817      	ldr	r0, [pc, #92]	; (8002d5c <MX_USART1_UART_Init+0x60>)
 8002d00:	4b17      	ldr	r3, [pc, #92]	; (8002d60 <MX_USART1_UART_Init+0x64>)
 8002d02:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;	// originally 115200
 8002d04:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002d08:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d0e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d10:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d12:	220c      	movs	r2, #12
 8002d14:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d16:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d18:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d1a:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d1c:	6243      	str	r3, [r0, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d1e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d20:	f009 fbf0 	bl	800c504 <HAL_UART_Init>
 8002d24:	b970      	cbnz	r0, 8002d44 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d26:	2100      	movs	r1, #0
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <MX_USART1_UART_Init+0x60>)
 8002d2a:	f009 fdbf 	bl	800c8ac <HAL_UARTEx_SetTxFifoThreshold>
 8002d2e:	b960      	cbnz	r0, 8002d4a <MX_USART1_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d30:	2100      	movs	r1, #0
 8002d32:	480a      	ldr	r0, [pc, #40]	; (8002d5c <MX_USART1_UART_Init+0x60>)
 8002d34:	f009 fddf 	bl	800c8f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002d38:	b950      	cbnz	r0, 8002d50 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d3a:	4808      	ldr	r0, [pc, #32]	; (8002d5c <MX_USART1_UART_Init+0x60>)
 8002d3c:	f009 fd97 	bl	800c86e <HAL_UARTEx_DisableFifoMode>
 8002d40:	b948      	cbnz	r0, 8002d56 <MX_USART1_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d42:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002d44:	f7ff fb22 	bl	800238c <Error_Handler>
 8002d48:	e7ed      	b.n	8002d26 <MX_USART1_UART_Init+0x2a>
    Error_Handler();
 8002d4a:	f7ff fb1f 	bl	800238c <Error_Handler>
 8002d4e:	e7ef      	b.n	8002d30 <MX_USART1_UART_Init+0x34>
    Error_Handler();
 8002d50:	f7ff fb1c 	bl	800238c <Error_Handler>
 8002d54:	e7f1      	b.n	8002d3a <MX_USART1_UART_Init+0x3e>
    Error_Handler();
 8002d56:	f7ff fb19 	bl	800238c <Error_Handler>
}
 8002d5a:	e7f2      	b.n	8002d42 <MX_USART1_UART_Init+0x46>
 8002d5c:	20000bcc 	.word	0x20000bcc
 8002d60:	40013800 	.word	0x40013800

08002d64 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002d64:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d66:	4817      	ldr	r0, [pc, #92]	; (8002dc4 <MX_USART2_UART_Init+0x60>)
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <MX_USART2_UART_Init+0x64>)
 8002d6a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8002d6c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002d70:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d72:	2300      	movs	r3, #0
 8002d74:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d76:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d78:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d7a:	220c      	movs	r2, #12
 8002d7c:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d7e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d80:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d82:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d84:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d86:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d88:	f009 fbbc 	bl	800c504 <HAL_UART_Init>
 8002d8c:	b970      	cbnz	r0, 8002dac <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d8e:	2100      	movs	r1, #0
 8002d90:	480c      	ldr	r0, [pc, #48]	; (8002dc4 <MX_USART2_UART_Init+0x60>)
 8002d92:	f009 fd8b 	bl	800c8ac <HAL_UARTEx_SetTxFifoThreshold>
 8002d96:	b960      	cbnz	r0, 8002db2 <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d98:	2100      	movs	r1, #0
 8002d9a:	480a      	ldr	r0, [pc, #40]	; (8002dc4 <MX_USART2_UART_Init+0x60>)
 8002d9c:	f009 fdab 	bl	800c8f6 <HAL_UARTEx_SetRxFifoThreshold>
 8002da0:	b950      	cbnz	r0, 8002db8 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8002da2:	4808      	ldr	r0, [pc, #32]	; (8002dc4 <MX_USART2_UART_Init+0x60>)
 8002da4:	f009 fd3f 	bl	800c826 <HAL_UARTEx_EnableFifoMode>
 8002da8:	b948      	cbnz	r0, 8002dbe <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002daa:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002dac:	f7ff faee 	bl	800238c <Error_Handler>
 8002db0:	e7ed      	b.n	8002d8e <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 8002db2:	f7ff faeb 	bl	800238c <Error_Handler>
 8002db6:	e7ef      	b.n	8002d98 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002db8:	f7ff fae8 	bl	800238c <Error_Handler>
 8002dbc:	e7f1      	b.n	8002da2 <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002dbe:	f7ff fae5 	bl	800238c <Error_Handler>
}
 8002dc2:	e7f2      	b.n	8002daa <MX_USART2_UART_Init+0x46>
 8002dc4:	20000c60 	.word	0x20000c60
 8002dc8:	40004400 	.word	0x40004400

08002dcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dcc:	b530      	push	{r4, r5, lr}
 8002dce:	b099      	sub	sp, #100	; 0x64
 8002dd0:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	9113      	str	r1, [sp, #76]	; 0x4c
 8002dd6:	9114      	str	r1, [sp, #80]	; 0x50
 8002dd8:	9115      	str	r1, [sp, #84]	; 0x54
 8002dda:	9116      	str	r1, [sp, #88]	; 0x58
 8002ddc:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dde:	2238      	movs	r2, #56	; 0x38
 8002de0:	a805      	add	r0, sp, #20
 8002de2:	f015 fa8b 	bl	80182fc <memset>
  if(uartHandle->Instance==USART1)
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <HAL_UART_MspInit+0x14c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d004      	beq.n	8002df8 <HAL_UART_MspInit+0x2c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002dee:	4a4b      	ldr	r2, [pc, #300]	; (8002f1c <HAL_UART_MspInit+0x150>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d039      	beq.n	8002e68 <HAL_UART_MspInit+0x9c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002df4:	b019      	add	sp, #100	; 0x64
 8002df6:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dfc:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002e00:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e02:	a805      	add	r0, sp, #20
 8002e04:	f007 fc26 	bl	800a654 <HAL_RCCEx_PeriphCLKConfig>
 8002e08:	bb58      	cbnz	r0, 8002e62 <HAL_UART_MspInit+0x96>
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e14:	661a      	str	r2, [r3, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e16:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e18:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002e1c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002e1e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002e30:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8002e32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e36:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e38:	2302      	movs	r3, #2
 8002e3a:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3c:	2400      	movs	r4, #0
 8002e3e:	9415      	str	r4, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	9416      	str	r4, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e42:	2307      	movs	r3, #7
 8002e44:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e46:	a913      	add	r1, sp, #76	; 0x4c
 8002e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e4c:	f006 f862 	bl	8008f14 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002e50:	4622      	mov	r2, r4
 8002e52:	4621      	mov	r1, r4
 8002e54:	2024      	movs	r0, #36	; 0x24
 8002e56:	f005 fc1f 	bl	8008698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e5a:	2024      	movs	r0, #36	; 0x24
 8002e5c:	f005 fc54 	bl	8008708 <HAL_NVIC_EnableIRQ>
 8002e60:	e7c8      	b.n	8002df4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002e62:	f7ff fa93 	bl	800238c <Error_Handler>
 8002e66:	e7d0      	b.n	8002e0a <HAL_UART_MspInit+0x3e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e68:	2302      	movs	r3, #2
 8002e6a:	9305      	str	r3, [sp, #20]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002e6c:	4b2c      	ldr	r3, [pc, #176]	; (8002f20 <HAL_UART_MspInit+0x154>)
 8002e6e:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e70:	a805      	add	r0, sp, #20
 8002e72:	f007 fbef 	bl	800a654 <HAL_RCCEx_PeriphCLKConfig>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d144      	bne.n	8002f04 <HAL_UART_MspInit+0x138>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e7e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e80:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002e84:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002e88:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002e8c:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8002e8e:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e90:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e92:	f042 0201 	orr.w	r2, r2, #1
 8002e96:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8002ea0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2500      	movs	r5, #0
 8002eac:	9515      	str	r5, [sp, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	9316      	str	r3, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	9317      	str	r3, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	a913      	add	r1, sp, #76	; 0x4c
 8002eb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ebc:	f006 f82a 	bl	8008f14 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8002ec0:	4818      	ldr	r0, [pc, #96]	; (8002f24 <HAL_UART_MspInit+0x158>)
 8002ec2:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_UART_MspInit+0x15c>)
 8002ec4:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002ec6:	2314      	movs	r3, #20
 8002ec8:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eca:	2310      	movs	r3, #16
 8002ecc:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ece:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed0:	2380      	movs	r3, #128	; 0x80
 8002ed2:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ed4:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ed6:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002ed8:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002eda:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002edc:	f005 fcb6 	bl	800884c <HAL_DMA_Init>
 8002ee0:	b998      	cbnz	r0, 8002f0a <HAL_UART_MspInit+0x13e>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8002ee2:	2110      	movs	r1, #16
 8002ee4:	480f      	ldr	r0, [pc, #60]	; (8002f24 <HAL_UART_MspInit+0x158>)
 8002ee6:	f005 feb3 	bl	8008c50 <HAL_DMA_ConfigChannelAttributes>
 8002eea:	b988      	cbnz	r0, 8002f10 <HAL_UART_MspInit+0x144>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002eec:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <HAL_UART_MspInit+0x158>)
 8002eee:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002ef0:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	2102      	movs	r1, #2
 8002ef6:	2025      	movs	r0, #37	; 0x25
 8002ef8:	f005 fbce 	bl	8008698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002efc:	2025      	movs	r0, #37	; 0x25
 8002efe:	f005 fc03 	bl	8008708 <HAL_NVIC_EnableIRQ>
}
 8002f02:	e777      	b.n	8002df4 <HAL_UART_MspInit+0x28>
      Error_Handler();
 8002f04:	f7ff fa42 	bl	800238c <Error_Handler>
 8002f08:	e7b7      	b.n	8002e7a <HAL_UART_MspInit+0xae>
      Error_Handler();
 8002f0a:	f7ff fa3f 	bl	800238c <Error_Handler>
 8002f0e:	e7e8      	b.n	8002ee2 <HAL_UART_MspInit+0x116>
      Error_Handler();
 8002f10:	f7ff fa3c 	bl	800238c <Error_Handler>
 8002f14:	e7ea      	b.n	8002eec <HAL_UART_MspInit+0x120>
 8002f16:	bf00      	nop
 8002f18:	40013800 	.word	0x40013800
 8002f1c:	40004400 	.word	0x40004400
 8002f20:	000c0004 	.word	0x000c0004
 8002f24:	20000b6c 	.word	0x20000b6c
 8002f28:	40020058 	.word	0x40020058

08002f2c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8002f2c:	b510      	push	{r4, lr}

  if(uartHandle->Instance==USART1)
 8002f2e:	6803      	ldr	r3, [r0, #0]
 8002f30:	4a14      	ldr	r2, [pc, #80]	; (8002f84 <HAL_UART_MspDeInit+0x58>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d004      	beq.n	8002f40 <HAL_UART_MspDeInit+0x14>
 8002f36:	4604      	mov	r4, r0
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8002f38:	4a13      	ldr	r2, [pc, #76]	; (8002f88 <HAL_UART_MspDeInit+0x5c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d010      	beq.n	8002f60 <HAL_UART_MspDeInit+0x34>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002f3e:	bd10      	pop	{r4, pc}
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002f40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f44:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8002f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f4a:	6613      	str	r3, [r2, #96]	; 0x60
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_10|GPIO_PIN_9);
 8002f4c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f54:	f006 f8b0 	bl	80090b8 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002f58:	2024      	movs	r0, #36	; 0x24
 8002f5a:	f005 fbe3 	bl	8008724 <HAL_NVIC_DisableIRQ>
 8002f5e:	e7ee      	b.n	8002f3e <HAL_UART_MspDeInit+0x12>
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002f60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f64:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002f66:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002f6c:	210c      	movs	r1, #12
 8002f6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f72:	f006 f8a1 	bl	80090b8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002f76:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002f78:	f005 fcda 	bl	8008930 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002f7c:	2025      	movs	r0, #37	; 0x25
 8002f7e:	f005 fbd1 	bl	8008724 <HAL_NVIC_DisableIRQ>
}
 8002f82:	e7dc      	b.n	8002f3e <HAL_UART_MspDeInit+0x12>
 8002f84:	40013800 	.word	0x40013800
 8002f88:	40004400 	.word	0x40004400

08002f8c <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002f8c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002f8e:	4b07      	ldr	r3, [pc, #28]	; (8002fac <vcom_Init+0x20>)
 8002f90:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002f92:	f7fe ff1b 	bl	8001dcc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002f96:	f7ff fee5 	bl	8002d64 <MX_USART2_UART_Init>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <vcom_Init+0x24>)
 8002f9c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002fa0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002fa8:	2000      	movs	r0, #0
 8002faa:	bd08      	pop	{r3, pc}
 8002fac:	20000cf8 	.word	0x20000cf8
 8002fb0:	58000800 	.word	0x58000800

08002fb4 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002fb4:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8002fb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002fc0:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fc4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002fc8:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002fca:	4804      	ldr	r0, [pc, #16]	; (8002fdc <vcom_DeInit+0x28>)
 8002fcc:	f7ff ffae 	bl	8002f2c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002fd0:	200f      	movs	r0, #15
 8002fd2:	f005 fba7 	bl	8008724 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	bd08      	pop	{r3, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000c60 	.word	0x20000c60

08002fe0 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002fe0:	b508      	push	{r3, lr}
 8002fe2:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002fe4:	4601      	mov	r1, r0
 8002fe6:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <vcom_Trace_DMA+0x10>)
 8002fe8:	f008 faac 	bl	800b544 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002fec:	2000      	movs	r0, #0
 8002fee:	bd08      	pop	{r3, pc}
 8002ff0:	20000c60 	.word	0x20000c60

08002ff4 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002ff4:	b510      	push	{r4, lr}
 8002ff6:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <vcom_ReceiveInit+0x50>)
 8002ffa:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002ffc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003000:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8003002:	ab02      	add	r3, sp, #8
 8003004:	e913 0006 	ldmdb	r3, {r1, r2}
 8003008:	480f      	ldr	r0, [pc, #60]	; (8003048 <vcom_ReceiveInit+0x54>)
 800300a:	f009 fbb4 	bl	800c776 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <vcom_ReceiveInit+0x54>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8003018:	d1f9      	bne.n	800300e <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 800301a:	69da      	ldr	r2, [r3, #28]
 800301c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8003020:	d0fb      	beq.n	800301a <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003028:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 800302a:	4c07      	ldr	r4, [pc, #28]	; (8003048 <vcom_ReceiveInit+0x54>)
 800302c:	4620      	mov	r0, r4
 800302e:	f009 fbe3 	bl	800c7f8 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8003032:	2201      	movs	r2, #1
 8003034:	4905      	ldr	r1, [pc, #20]	; (800304c <vcom_ReceiveInit+0x58>)
 8003036:	4620      	mov	r0, r4
 8003038:	f009 fb36 	bl	800c6a8 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800303c:	2000      	movs	r0, #0
 800303e:	b002      	add	sp, #8
 8003040:	bd10      	pop	{r4, pc}
 8003042:	bf00      	nop
 8003044:	20000cf4 	.word	0x20000cf4
 8003048:	20000c60 	.word	0x20000c60
 800304c:	20000de5 	.word	0x20000de5

08003050 <vcom_Resume>:

void vcom_Resume(void)
{
 8003050:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003052:	4807      	ldr	r0, [pc, #28]	; (8003070 <vcom_Resume+0x20>)
 8003054:	f009 fa56 	bl	800c504 <HAL_UART_Init>
 8003058:	b920      	cbnz	r0, 8003064 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800305a:	4806      	ldr	r0, [pc, #24]	; (8003074 <vcom_Resume+0x24>)
 800305c:	f005 fbf6 	bl	800884c <HAL_DMA_Init>
 8003060:	b918      	cbnz	r0, 800306a <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8003062:	bd08      	pop	{r3, pc}
    Error_Handler();
 8003064:	f7ff f992 	bl	800238c <Error_Handler>
 8003068:	e7f7      	b.n	800305a <vcom_Resume+0xa>
    Error_Handler();
 800306a:	f7ff f98f 	bl	800238c <Error_Handler>
}
 800306e:	e7f8      	b.n	8003062 <vcom_Resume+0x12>
 8003070:	20000c60 	.word	0x20000c60
 8003074:	20000b6c 	.word	0x20000b6c

08003078 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003078:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800307a:	6802      	ldr	r2, [r0, #0]
 800307c:	4b04      	ldr	r3, [pc, #16]	; (8003090 <HAL_UART_TxCpltCallback+0x18>)
 800307e:	429a      	cmp	r2, r3
 8003080:	d000      	beq.n	8003084 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003082:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_UART_TxCpltCallback+0x1c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2000      	movs	r0, #0
 800308a:	4798      	blx	r3
}
 800308c:	e7f9      	b.n	8003082 <HAL_UART_TxCpltCallback+0xa>
 800308e:	bf00      	nop
 8003090:	40004400 	.word	0x40004400
 8003094:	20000cf8 	.word	0x20000cf8

08003098 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800309c:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 80030a0:	4681      	mov	r9, r0
  static uint64_t hbInterval;

  SecureElementNvmData_t FlashNVM; //

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 80030a2:	6802      	ldr	r2, [r0, #0]
 80030a4:	4bb6      	ldr	r3, [pc, #728]	; (8003380 <HAL_UART_RxCpltCallback+0x2e8>)
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d009      	beq.n	80030be <HAL_UART_RxCpltCallback+0x26>
	}

    HAL_UART_Receive_IT(huart, &charRx, 1);
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */
  if (huart->Instance == USART1) {
 80030aa:	f8d9 2000 	ldr.w	r2, [r9]
 80030ae:	4bb5      	ldr	r3, [pc, #724]	; (8003384 <HAL_UART_RxCpltCallback+0x2ec>)
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f001 82b4 	beq.w	800461e <HAL_UART_RxCpltCallback+0x1586>
 	Modbus_RxCallback(&ModbusResp);
 	HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);

   }
  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80030b6:	f20d 5d4c 	addw	sp, sp, #1356	; 0x54c
 80030ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 80030be:	4bb2      	ldr	r3, [pc, #712]	; (8003388 <HAL_UART_RxCpltCallback+0x2f0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	b12b      	cbz	r3, 80030d0 <HAL_UART_RxCpltCallback+0x38>
 80030c4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 80030c8:	b912      	cbnz	r2, 80030d0 <HAL_UART_RxCpltCallback+0x38>
      RxCpltCallback(&charRx, 1, 0);
 80030ca:	2101      	movs	r1, #1
 80030cc:	48af      	ldr	r0, [pc, #700]	; (800338c <HAL_UART_RxCpltCallback+0x2f4>)
 80030ce:	4798      	blx	r3
	if (charRx == '\n') {
 80030d0:	4bae      	ldr	r3, [pc, #696]	; (800338c <HAL_UART_RxCpltCallback+0x2f4>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b0a      	cmp	r3, #10
 80030d6:	d00a      	beq.n	80030ee <HAL_UART_RxCpltCallback+0x56>
		if (bufferIndex < MAX_UART_BUFFER_SIZE - 1) {
 80030d8:	4aad      	ldr	r2, [pc, #692]	; (8003390 <HAL_UART_RxCpltCallback+0x2f8>)
 80030da:	7812      	ldrb	r2, [r2, #0]
 80030dc:	2ac6      	cmp	r2, #198	; 0xc6
 80030de:	f200 810a 	bhi.w	80032f6 <HAL_UART_RxCpltCallback+0x25e>
			buffer[bufferIndex++] = charRx;
 80030e2:	1c50      	adds	r0, r2, #1
 80030e4:	49aa      	ldr	r1, [pc, #680]	; (8003390 <HAL_UART_RxCpltCallback+0x2f8>)
 80030e6:	7008      	strb	r0, [r1, #0]
 80030e8:	49aa      	ldr	r1, [pc, #680]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80030ea:	548b      	strb	r3, [r1, r2]
 80030ec:	e103      	b.n	80032f6 <HAL_UART_RxCpltCallback+0x25e>
		buffer[bufferIndex] = '\0';
 80030ee:	4ba8      	ldr	r3, [pc, #672]	; (8003390 <HAL_UART_RxCpltCallback+0x2f8>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	48a8      	ldr	r0, [pc, #672]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	54c2      	strb	r2, [r0, r3]
		if (strncmp(buffer, "set config on", 13) == 0) {
 80030f8:	220d      	movs	r2, #13
 80030fa:	49a7      	ldr	r1, [pc, #668]	; (8003398 <HAL_UART_RxCpltCallback+0x300>)
 80030fc:	f015 f906 	bl	801830c <strncmp>
 8003100:	2800      	cmp	r0, #0
 8003102:	f000 80ec 	beq.w	80032de <HAL_UART_RxCpltCallback+0x246>
		else if (strncmp(buffer, "set config off", 13) == 0) {
 8003106:	220d      	movs	r2, #13
 8003108:	49a4      	ldr	r1, [pc, #656]	; (800339c <HAL_UART_RxCpltCallback+0x304>)
 800310a:	48a2      	ldr	r0, [pc, #648]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 800310c:	f015 f8fe 	bl	801830c <strncmp>
 8003110:	2800      	cmp	r0, #0
 8003112:	f000 80f6 	beq.w	8003302 <HAL_UART_RxCpltCallback+0x26a>
		else if (strncmp(buffer, "set lora-config on", 18) == 0) {
 8003116:	2212      	movs	r2, #18
 8003118:	49a1      	ldr	r1, [pc, #644]	; (80033a0 <HAL_UART_RxCpltCallback+0x308>)
 800311a:	489e      	ldr	r0, [pc, #632]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 800311c:	f015 f8f6 	bl	801830c <strncmp>
 8003120:	2800      	cmp	r0, #0
 8003122:	f000 80f8 	beq.w	8003316 <HAL_UART_RxCpltCallback+0x27e>
		else if (strncmp(buffer, "get lora-config", 15) == 0) {
 8003126:	220f      	movs	r2, #15
 8003128:	499e      	ldr	r1, [pc, #632]	; (80033a4 <HAL_UART_RxCpltCallback+0x30c>)
 800312a:	489a      	ldr	r0, [pc, #616]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 800312c:	f015 f8ee 	bl	801830c <strncmp>
 8003130:	2800      	cmp	r0, #0
 8003132:	f000 817b 	beq.w	800342c <HAL_UART_RxCpltCallback+0x394>
		else if (strncmp(buffer, "set deveui ", 11) == 0) {
 8003136:	220b      	movs	r2, #11
 8003138:	499b      	ldr	r1, [pc, #620]	; (80033a8 <HAL_UART_RxCpltCallback+0x310>)
 800313a:	4896      	ldr	r0, [pc, #600]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 800313c:	f015 f8e6 	bl	801830c <strncmp>
 8003140:	4604      	mov	r4, r0
 8003142:	2800      	cmp	r0, #0
 8003144:	f000 8237 	beq.w	80035b6 <HAL_UART_RxCpltCallback+0x51e>
		else if (strncmp(buffer, "set appeui ", 11) == 0) {
 8003148:	220b      	movs	r2, #11
 800314a:	4998      	ldr	r1, [pc, #608]	; (80033ac <HAL_UART_RxCpltCallback+0x314>)
 800314c:	4891      	ldr	r0, [pc, #580]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 800314e:	f015 f8dd 	bl	801830c <strncmp>
 8003152:	4604      	mov	r4, r0
 8003154:	2800      	cmp	r0, #0
 8003156:	f000 8252 	beq.w	80035fe <HAL_UART_RxCpltCallback+0x566>
		else if (strncmp(buffer, "set appkey ", 11) == 0) {
 800315a:	220b      	movs	r2, #11
 800315c:	4994      	ldr	r1, [pc, #592]	; (80033b0 <HAL_UART_RxCpltCallback+0x318>)
 800315e:	488d      	ldr	r0, [pc, #564]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003160:	f015 f8d4 	bl	801830c <strncmp>
 8003164:	4604      	mov	r4, r0
 8003166:	2800      	cmp	r0, #0
 8003168:	f000 826d 	beq.w	8003646 <HAL_UART_RxCpltCallback+0x5ae>
		else if (strncmp(buffer, "set lora-tx interval ", 21) == 0) {
 800316c:	2215      	movs	r2, #21
 800316e:	4991      	ldr	r1, [pc, #580]	; (80033b4 <HAL_UART_RxCpltCallback+0x31c>)
 8003170:	4888      	ldr	r0, [pc, #544]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003172:	f015 f8cb 	bl	801830c <strncmp>
 8003176:	2800      	cmp	r0, #0
 8003178:	f000 82a3 	beq.w	80036c2 <HAL_UART_RxCpltCallback+0x62a>
		else if (strncmp(buffer, "set modbus-hb interval ", 23) == 0) {
 800317c:	2217      	movs	r2, #23
 800317e:	498e      	ldr	r1, [pc, #568]	; (80033b8 <HAL_UART_RxCpltCallback+0x320>)
 8003180:	4884      	ldr	r0, [pc, #528]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003182:	f015 f8c3 	bl	801830c <strncmp>
 8003186:	2800      	cmp	r0, #0
 8003188:	f000 82d0 	beq.w	800372c <HAL_UART_RxCpltCallback+0x694>
		else if (strncmp(buffer, "view config", 11) == 0) {
 800318c:	220b      	movs	r2, #11
 800318e:	498b      	ldr	r1, [pc, #556]	; (80033bc <HAL_UART_RxCpltCallback+0x324>)
 8003190:	4880      	ldr	r0, [pc, #512]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003192:	f015 f8bb 	bl	801830c <strncmp>
 8003196:	2800      	cmp	r0, #0
 8003198:	f000 82d9 	beq.w	800374e <HAL_UART_RxCpltCallback+0x6b6>
		else if (strncmp(buffer, "save lora-config", 16) == 0) {
 800319c:	2210      	movs	r2, #16
 800319e:	4988      	ldr	r1, [pc, #544]	; (80033c0 <HAL_UART_RxCpltCallback+0x328>)
 80031a0:	487c      	ldr	r0, [pc, #496]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80031a2:	f015 f8b3 	bl	801830c <strncmp>
 80031a6:	2800      	cmp	r0, #0
 80031a8:	f000 8384 	beq.w	80038b4 <HAL_UART_RxCpltCallback+0x81c>
		else if (strncmp(buffer, "get modbus-params dev ", 22) == 0) {
 80031ac:	2216      	movs	r2, #22
 80031ae:	4985      	ldr	r1, [pc, #532]	; (80033c4 <HAL_UART_RxCpltCallback+0x32c>)
 80031b0:	4878      	ldr	r0, [pc, #480]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80031b2:	f015 f8ab 	bl	801830c <strncmp>
 80031b6:	4604      	mov	r4, r0
 80031b8:	2800      	cmp	r0, #0
 80031ba:	f000 8494 	beq.w	8003ae6 <HAL_UART_RxCpltCallback+0xa4e>
		else if (strncmp(buffer, "set device-params ", 18) == 0) {
 80031be:	2212      	movs	r2, #18
 80031c0:	4981      	ldr	r1, [pc, #516]	; (80033c8 <HAL_UART_RxCpltCallback+0x330>)
 80031c2:	4874      	ldr	r0, [pc, #464]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80031c4:	f015 f8a2 	bl	801830c <strncmp>
 80031c8:	2800      	cmp	r0, #0
 80031ca:	f000 859a 	beq.w	8003d02 <HAL_UART_RxCpltCallback+0xc6a>
		else if (strncmp(buffer, "set segment-params ", 19) == 0) {
 80031ce:	2213      	movs	r2, #19
 80031d0:	497e      	ldr	r1, [pc, #504]	; (80033cc <HAL_UART_RxCpltCallback+0x334>)
 80031d2:	4870      	ldr	r0, [pc, #448]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80031d4:	f015 f89a 	bl	801830c <strncmp>
 80031d8:	4607      	mov	r7, r0
 80031da:	2800      	cmp	r0, #0
 80031dc:	f000 8664 	beq.w	8003ea8 <HAL_UART_RxCpltCallback+0xe10>
		else if (strncmp(buffer, "clear modbus-params dev ", 24) == 0) {
 80031e0:	2218      	movs	r2, #24
 80031e2:	497b      	ldr	r1, [pc, #492]	; (80033d0 <HAL_UART_RxCpltCallback+0x338>)
 80031e4:	486b      	ldr	r0, [pc, #428]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80031e6:	f015 f891 	bl	801830c <strncmp>
 80031ea:	2800      	cmp	r0, #0
 80031ec:	f000 8761 	beq.w	80040b2 <HAL_UART_RxCpltCallback+0x101a>
		else if (strncmp(buffer, "set device restart", 18) == 0) {
 80031f0:	2212      	movs	r2, #18
 80031f2:	4978      	ldr	r1, [pc, #480]	; (80033d4 <HAL_UART_RxCpltCallback+0x33c>)
 80031f4:	4867      	ldr	r0, [pc, #412]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 80031f6:	f015 f889 	bl	801830c <strncmp>
 80031fa:	2800      	cmp	r0, #0
 80031fc:	f000 8764 	beq.w	80040c8 <HAL_UART_RxCpltCallback+0x1030>
		else if (strncmp(buffer, "set slot-params ", 16) == 0) {
 8003200:	2210      	movs	r2, #16
 8003202:	4975      	ldr	r1, [pc, #468]	; (80033d8 <HAL_UART_RxCpltCallback+0x340>)
 8003204:	4863      	ldr	r0, [pc, #396]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003206:	f015 f881 	bl	801830c <strncmp>
 800320a:	4606      	mov	r6, r0
 800320c:	2800      	cmp	r0, #0
 800320e:	f000 875f 	beq.w	80040d0 <HAL_UART_RxCpltCallback+0x1038>
		else if (strncmp(buffer, "view slot-params ", 17) == 0) {
 8003212:	2211      	movs	r2, #17
 8003214:	4971      	ldr	r1, [pc, #452]	; (80033dc <HAL_UART_RxCpltCallback+0x344>)
 8003216:	485f      	ldr	r0, [pc, #380]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003218:	f015 f878 	bl	801830c <strncmp>
 800321c:	2800      	cmp	r0, #0
 800321e:	f001 81b3 	beq.w	8004588 <HAL_UART_RxCpltCallback+0x14f0>
		else if (strncmp(buffer, "clear slot-params ", 18) == 0) {
 8003222:	2212      	movs	r2, #18
 8003224:	496e      	ldr	r1, [pc, #440]	; (80033e0 <HAL_UART_RxCpltCallback+0x348>)
 8003226:	485b      	ldr	r0, [pc, #364]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003228:	f015 f870 	bl	801830c <strncmp>
 800322c:	2800      	cmp	r0, #0
 800322e:	f001 81b8 	beq.w	80045a2 <HAL_UART_RxCpltCallback+0x150a>
		else if (strncmp(buffer, "clear all slots-params", 22) == 0) {
 8003232:	2216      	movs	r2, #22
 8003234:	496b      	ldr	r1, [pc, #428]	; (80033e4 <HAL_UART_RxCpltCallback+0x34c>)
 8003236:	4857      	ldr	r0, [pc, #348]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003238:	f015 f868 	bl	801830c <strncmp>
 800323c:	2800      	cmp	r0, #0
 800323e:	f001 81cc 	beq.w	80045da <HAL_UART_RxCpltCallback+0x1542>
		else if (strncmp(buffer, "set slot-active ", 16) == 0) {
 8003242:	2210      	movs	r2, #16
 8003244:	4968      	ldr	r1, [pc, #416]	; (80033e8 <HAL_UART_RxCpltCallback+0x350>)
 8003246:	4853      	ldr	r0, [pc, #332]	; (8003394 <HAL_UART_RxCpltCallback+0x2fc>)
 8003248:	f015 f860 	bl	801830c <strncmp>
 800324c:	2800      	cmp	r0, #0
 800324e:	f041 81de 	bne.w	800460e <HAL_UART_RxCpltCallback+0x1576>
			sscanf(&buffer[16], "%u %u", &slotId, &state);
 8003252:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
 8003256:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800325a:	4964      	ldr	r1, [pc, #400]	; (80033ec <HAL_UART_RxCpltCallback+0x354>)
 800325c:	4864      	ldr	r0, [pc, #400]	; (80033f0 <HAL_UART_RxCpltCallback+0x358>)
 800325e:	f014 ff49 	bl	80180f4 <siscanf>
			if (FLASH_IF_Read(&MonitoringSlotNVM, ModbusDeviceFlashAddresses[slotId - 1], sizeof(MonitoringSlotNVM)) == FLASH_IF_OK) {
 8003262:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8003266:	3b01      	subs	r3, #1
 8003268:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 800326c:	4961      	ldr	r1, [pc, #388]	; (80033f4 <HAL_UART_RxCpltCallback+0x35c>)
 800326e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003272:	a820      	add	r0, sp, #128	; 0x80
 8003274:	f7fe ff3e 	bl	80020f4 <FLASH_IF_Read>
 8003278:	2800      	cmp	r0, #0
 800327a:	f041 81c0 	bne.w	80045fe <HAL_UART_RxCpltCallback+0x1566>
				MonitoringSlotNVM.MonitoringSlot.isActive = state == 1 ? 1: 0;
 800327e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003282:	2b01      	cmp	r3, #1
 8003284:	bf14      	ite	ne
 8003286:	2300      	movne	r3, #0
 8003288:	2301      	moveq	r3, #1
 800328a:	f88d 3434 	strb.w	r3, [sp, #1076]	; 0x434
				if (FLASH_IF_Erase((void *)ModbusDeviceFlashAddresses[slotId - 1], FLASH_PAGE_SIZE) == FLASH_IF_OK){
 800328e:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8003292:	3b01      	subs	r3, #1
 8003294:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003298:	4a56      	ldr	r2, [pc, #344]	; (80033f4 <HAL_UART_RxCpltCallback+0x35c>)
 800329a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800329e:	f7fe ff45 	bl	800212c <FLASH_IF_Erase>
 80032a2:	2800      	cmp	r0, #0
 80032a4:	f041 81a3 	bne.w	80045ee <HAL_UART_RxCpltCallback+0x1556>
					APP_LOG(TS_OFF, VLEVEL_M, "ERASE OK");
 80032a8:	4b53      	ldr	r3, [pc, #332]	; (80033f8 <HAL_UART_RxCpltCallback+0x360>)
 80032aa:	2200      	movs	r2, #0
 80032ac:	4611      	mov	r1, r2
 80032ae:	2002      	movs	r0, #2
 80032b0:	f013 f968 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					if(FLASH_IF_Write((void *)ModbusDeviceFlashAddresses[slotId - 1], (void *)&MonitoringSlotNVM, sizeof(struct ModbusDevice)) == FLASH_IF_OK){
 80032b4:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 80032b8:	3b01      	subs	r3, #1
 80032ba:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 80032be:	a920      	add	r1, sp, #128	; 0x80
 80032c0:	484c      	ldr	r0, [pc, #304]	; (80033f4 <HAL_UART_RxCpltCallback+0x35c>)
 80032c2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80032c6:	f7fe fef9 	bl	80020bc <FLASH_IF_Write>
 80032ca:	2800      	cmp	r0, #0
 80032cc:	f041 8187 	bne.w	80045de <HAL_UART_RxCpltCallback+0x1546>
						APP_LOG(TS_OFF, VLEVEL_M, "WRITE OK");
 80032d0:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_UART_RxCpltCallback+0x364>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	4611      	mov	r1, r2
 80032d6:	2002      	movs	r0, #2
 80032d8:	f013 f954 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80032dc:	e008      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
			APP_LOG(TS_OFF, VLEVEL_M, "###### Configuration Mode: ON \r\n");
 80032de:	4b48      	ldr	r3, [pc, #288]	; (8003400 <HAL_UART_RxCpltCallback+0x368>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	4611      	mov	r1, r2
 80032e4:	2002      	movs	r0, #2
 80032e6:	f013 f94d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			isConfigMode = true;
 80032ea:	4b46      	ldr	r3, [pc, #280]	; (8003404 <HAL_UART_RxCpltCallback+0x36c>)
 80032ec:	2201      	movs	r2, #1
 80032ee:	701a      	strb	r2, [r3, #0]
		bufferIndex = 0;
 80032f0:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_UART_RxCpltCallback+0x2f8>)
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(huart, &charRx, 1);
 80032f6:	2201      	movs	r2, #1
 80032f8:	4924      	ldr	r1, [pc, #144]	; (800338c <HAL_UART_RxCpltCallback+0x2f4>)
 80032fa:	4648      	mov	r0, r9
 80032fc:	f009 f9d4 	bl	800c6a8 <HAL_UART_Receive_IT>
 8003300:	e6d3      	b.n	80030aa <HAL_UART_RxCpltCallback+0x12>
			APP_LOG(TS_OFF, VLEVEL_M, "###### Configuration Mode: OFF \r\n");
 8003302:	4b41      	ldr	r3, [pc, #260]	; (8003408 <HAL_UART_RxCpltCallback+0x370>)
 8003304:	2200      	movs	r2, #0
 8003306:	4611      	mov	r1, r2
 8003308:	2002      	movs	r0, #2
 800330a:	f013 f93b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			isConfigMode = false; // wont work, so just restart it
 800330e:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_UART_RxCpltCallback+0x36c>)
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e7ec      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
			APP_LOG(TS_OFF, VLEVEL_M, "###### Lora-Configuration Mode: ON \r\n");
 8003316:	4b3d      	ldr	r3, [pc, #244]	; (800340c <HAL_UART_RxCpltCallback+0x374>)
 8003318:	2200      	movs	r2, #0
 800331a:	4611      	mov	r1, r2
 800331c:	2002      	movs	r0, #2
 800331e:	f013 f931 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8003322:	22f8      	movs	r2, #248	; 0xf8
 8003324:	493a      	ldr	r1, [pc, #232]	; (8003410 <HAL_UART_RxCpltCallback+0x378>)
 8003326:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 800332a:	f7fe fee3 	bl	80020f4 <FLASH_IF_Read>
 800332e:	bb00      	cbnz	r0, 8003372 <HAL_UART_RxCpltCallback+0x2da>
				memcpy1( ( uint8_t * )&_devEui, ( uint8_t * )FlashNVM.SeNvmDevJoinKey.DevEui, sizeof(_devEui));
 8003330:	2208      	movs	r2, #8
 8003332:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
 8003336:	4837      	ldr	r0, [pc, #220]	; (8003414 <HAL_UART_RxCpltCallback+0x37c>)
 8003338:	f011 fa47 	bl	80147ca <memcpy1>
				memcpy1( ( uint8_t * )&appEui, ( uint8_t * )FlashNVM.SeNvmDevJoinKey.JoinEui, sizeof(appEui));
 800333c:	2208      	movs	r2, #8
 800333e:	f50d 618b 	add.w	r1, sp, #1112	; 0x458
 8003342:	4835      	ldr	r0, [pc, #212]	; (8003418 <HAL_UART_RxCpltCallback+0x380>)
 8003344:	f011 fa41 	bl	80147ca <memcpy1>
				memcpy1( ( uint8_t * )&appKey, ( uint8_t * )FlashNVM.KeyList[0].KeyValue,    sizeof(appKey));
 8003348:	2210      	movs	r2, #16
 800334a:	f20d 4169 	addw	r1, sp, #1129	; 0x469
 800334e:	4833      	ldr	r0, [pc, #204]	; (800341c <HAL_UART_RxCpltCallback+0x384>)
 8003350:	f011 fa3b 	bl	80147ca <memcpy1>
				txInterval = FlashNVM.pwxTxInterval;
 8003354:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 8003358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800335c:	4b30      	ldr	r3, [pc, #192]	; (8003420 <HAL_UART_RxCpltCallback+0x388>)
 800335e:	e9c3 0100 	strd	r0, r1, [r3]
				hbInterval = FlashNVM.pwxHeartbeatInterval;
 8003362:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8003366:	e9d3 0100 	ldrd	r0, r1, [r3]
 800336a:	4b2e      	ldr	r3, [pc, #184]	; (8003424 <HAL_UART_RxCpltCallback+0x38c>)
 800336c:	e9c3 0100 	strd	r0, r1, [r3]
 8003370:	e7be      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
				APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8003372:	4b2d      	ldr	r3, [pc, #180]	; (8003428 <HAL_UART_RxCpltCallback+0x390>)
 8003374:	2200      	movs	r2, #0
 8003376:	4611      	mov	r1, r2
 8003378:	2002      	movs	r0, #2
 800337a:	f013 f903 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800337e:	e7b7      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
 8003380:	40004400 	.word	0x40004400
 8003384:	40013800 	.word	0x40013800
 8003388:	20000cf4 	.word	0x20000cf4
 800338c:	20000de5 	.word	0x20000de5
 8003390:	20000de4 	.word	0x20000de4
 8003394:	20000d1c 	.word	0x20000d1c
 8003398:	0801c594 	.word	0x0801c594
 800339c:	0801c5c8 	.word	0x0801c5c8
 80033a0:	0801c5fc 	.word	0x0801c5fc
 80033a4:	0801c638 	.word	0x0801c638
 80033a8:	0801c7c0 	.word	0x0801c7c0
 80033ac:	0801c7d4 	.word	0x0801c7d4
 80033b0:	0801c7e0 	.word	0x0801c7e0
 80033b4:	0801c7ec 	.word	0x0801c7ec
 80033b8:	0801c808 	.word	0x0801c808
 80033bc:	0801c848 	.word	0x0801c848
 80033c0:	0801c87c 	.word	0x0801c87c
 80033c4:	0801c918 	.word	0x0801c918
 80033c8:	0801ca30 	.word	0x0801ca30
 80033cc:	0801cadc 	.word	0x0801cadc
 80033d0:	0801cbc8 	.word	0x0801cbc8
 80033d4:	0801cbe8 	.word	0x0801cbe8
 80033d8:	0801cbfc 	.word	0x0801cbfc
 80033dc:	0801cce8 	.word	0x0801cce8
 80033e0:	0801ccfc 	.word	0x0801ccfc
 80033e4:	0801cd10 	.word	0x0801cd10
 80033e8:	0801cd28 	.word	0x0801cd28
 80033ec:	0801cd3c 	.word	0x0801cd3c
 80033f0:	20000d2c 	.word	0x20000d2c
 80033f4:	20000000 	.word	0x20000000
 80033f8:	0801c31c 	.word	0x0801c31c
 80033fc:	0801c328 	.word	0x0801c328
 8003400:	0801c5a4 	.word	0x0801c5a4
 8003404:	20000df0 	.word	0x20000df0
 8003408:	0801c5d8 	.word	0x0801c5d8
 800340c:	0801c610 	.word	0x0801c610
 8003410:	0803f000 	.word	0x0803f000
 8003414:	20000cfc 	.word	0x20000cfc
 8003418:	20000d04 	.word	0x20000d04
 800341c:	20000d0c 	.word	0x20000d0c
 8003420:	20000df8 	.word	0x20000df8
 8003424:	20000de8 	.word	0x20000de8
 8003428:	0801c4cc 	.word	0x0801c4cc
			if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 800342c:	22f8      	movs	r2, #248	; 0xf8
 800342e:	49ad      	ldr	r1, [pc, #692]	; (80036e4 <HAL_UART_RxCpltCallback+0x64c>)
 8003430:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 8003434:	f7fe fe5e 	bl	80020f4 <FLASH_IF_Read>
 8003438:	2800      	cmp	r0, #0
 800343a:	f040 80ab 	bne.w	8003594 <HAL_UART_RxCpltCallback+0x4fc>
				APP_LOG( TS_OFF, VLEVEL_M, "###### Lora-Configuration: \r\n");
 800343e:	4baa      	ldr	r3, [pc, #680]	; (80036e8 <HAL_UART_RxCpltCallback+0x650>)
 8003440:	2200      	movs	r2, #0
 8003442:	4611      	mov	r1, r2
 8003444:	2002      	movs	r0, #2
 8003446:	f013 f89d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( FlashNVM.SeNvmDevJoinKey.DevEui ) );
 800344a:	f89d 3450 	ldrb.w	r3, [sp, #1104]	; 0x450
 800344e:	f89d 2451 	ldrb.w	r2, [sp, #1105]	; 0x451
 8003452:	f89d 1452 	ldrb.w	r1, [sp, #1106]	; 0x452
 8003456:	f89d 0453 	ldrb.w	r0, [sp, #1107]	; 0x453
 800345a:	f89d 4454 	ldrb.w	r4, [sp, #1108]	; 0x454
 800345e:	f89d 5455 	ldrb.w	r5, [sp, #1109]	; 0x455
 8003462:	f89d 6456 	ldrb.w	r6, [sp, #1110]	; 0x456
 8003466:	f89d 7457 	ldrb.w	r7, [sp, #1111]	; 0x457
 800346a:	9707      	str	r7, [sp, #28]
 800346c:	9606      	str	r6, [sp, #24]
 800346e:	9505      	str	r5, [sp, #20]
 8003470:	9404      	str	r4, [sp, #16]
 8003472:	9003      	str	r0, [sp, #12]
 8003474:	9102      	str	r1, [sp, #8]
 8003476:	9201      	str	r2, [sp, #4]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	4b9c      	ldr	r3, [pc, #624]	; (80036ec <HAL_UART_RxCpltCallback+0x654>)
 800347c:	2200      	movs	r2, #0
 800347e:	4611      	mov	r1, r2
 8003480:	2002      	movs	r0, #2
 8003482:	f013 f87f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( FlashNVM.SeNvmDevJoinKey.JoinEui ) );
 8003486:	f89d 3458 	ldrb.w	r3, [sp, #1112]	; 0x458
 800348a:	f89d 2459 	ldrb.w	r2, [sp, #1113]	; 0x459
 800348e:	f89d 145a 	ldrb.w	r1, [sp, #1114]	; 0x45a
 8003492:	f89d 045b 	ldrb.w	r0, [sp, #1115]	; 0x45b
 8003496:	f89d 445c 	ldrb.w	r4, [sp, #1116]	; 0x45c
 800349a:	f89d 545d 	ldrb.w	r5, [sp, #1117]	; 0x45d
 800349e:	f89d 645e 	ldrb.w	r6, [sp, #1118]	; 0x45e
 80034a2:	f89d 745f 	ldrb.w	r7, [sp, #1119]	; 0x45f
 80034a6:	9707      	str	r7, [sp, #28]
 80034a8:	9606      	str	r6, [sp, #24]
 80034aa:	9505      	str	r5, [sp, #20]
 80034ac:	9404      	str	r4, [sp, #16]
 80034ae:	9003      	str	r0, [sp, #12]
 80034b0:	9102      	str	r1, [sp, #8]
 80034b2:	9201      	str	r2, [sp, #4]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	4b8e      	ldr	r3, [pc, #568]	; (80036f0 <HAL_UART_RxCpltCallback+0x658>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	4611      	mov	r1, r2
 80034bc:	2002      	movs	r0, #2
 80034be:	f013 f861 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG( TS_OFF, VLEVEL_M, "###### APPKEY:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX16(FlashNVM.KeyList[0].KeyValue));
 80034c2:	f89d 3469 	ldrb.w	r3, [sp, #1129]	; 0x469
 80034c6:	9317      	str	r3, [sp, #92]	; 0x5c
 80034c8:	f89d 246a 	ldrb.w	r2, [sp, #1130]	; 0x46a
 80034cc:	9218      	str	r2, [sp, #96]	; 0x60
 80034ce:	f89d 346b 	ldrb.w	r3, [sp, #1131]	; 0x46b
 80034d2:	f89d 246c 	ldrb.w	r2, [sp, #1132]	; 0x46c
 80034d6:	f89d 146d 	ldrb.w	r1, [sp, #1133]	; 0x46d
 80034da:	f89d 046e 	ldrb.w	r0, [sp, #1134]	; 0x46e
 80034de:	f89d c46f 	ldrb.w	ip, [sp, #1135]	; 0x46f
 80034e2:	f89d e470 	ldrb.w	lr, [sp, #1136]	; 0x470
 80034e6:	f89d 4471 	ldrb.w	r4, [sp, #1137]	; 0x471
 80034ea:	f89d 5472 	ldrb.w	r5, [sp, #1138]	; 0x472
 80034ee:	f89d 6473 	ldrb.w	r6, [sp, #1139]	; 0x473
 80034f2:	f89d 7474 	ldrb.w	r7, [sp, #1140]	; 0x474
 80034f6:	f89d 8475 	ldrb.w	r8, [sp, #1141]	; 0x475
 80034fa:	f89d a476 	ldrb.w	sl, [sp, #1142]	; 0x476
 80034fe:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8003502:	f89d a477 	ldrb.w	sl, [sp, #1143]	; 0x477
 8003506:	f89d b478 	ldrb.w	fp, [sp, #1144]	; 0x478
 800350a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 800350e:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003512:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8003516:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800351a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800351e:	970b      	str	r7, [sp, #44]	; 0x2c
 8003520:	960a      	str	r6, [sp, #40]	; 0x28
 8003522:	9509      	str	r5, [sp, #36]	; 0x24
 8003524:	9408      	str	r4, [sp, #32]
 8003526:	f8cd e01c 	str.w	lr, [sp, #28]
 800352a:	f8cd c018 	str.w	ip, [sp, #24]
 800352e:	9005      	str	r0, [sp, #20]
 8003530:	9104      	str	r1, [sp, #16]
 8003532:	9203      	str	r2, [sp, #12]
 8003534:	9302      	str	r3, [sp, #8]
 8003536:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003538:	9201      	str	r2, [sp, #4]
 800353a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800353c:	9300      	str	r3, [sp, #0]
 800353e:	4b6d      	ldr	r3, [pc, #436]	; (80036f4 <HAL_UART_RxCpltCallback+0x65c>)
 8003540:	2200      	movs	r2, #0
 8003542:	4611      	mov	r1, r2
 8003544:	2002      	movs	r0, #2
 8003546:	f013 f81d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus Burst Interval: %u \r\n", FlashNVM.pwxTxInterval);
 800354a:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	e9cd 2300 	strd	r2, r3, [sp]
 8003556:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_UART_RxCpltCallback+0x660>)
 8003558:	2200      	movs	r2, #0
 800355a:	4611      	mov	r1, r2
 800355c:	2002      	movs	r0, #2
 800355e:	f013 f811 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus HeartBeat Interval: %u \r\n", FlashNVM.pwxHeartbeatInterval);
 8003562:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8003566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800356a:	e9cd 2300 	strd	r2, r3, [sp]
 800356e:	4b63      	ldr	r3, [pc, #396]	; (80036fc <HAL_UART_RxCpltCallback+0x664>)
 8003570:	2200      	movs	r2, #0
 8003572:	4611      	mov	r1, r2
 8003574:	2002      	movs	r0, #2
 8003576:	f013 f805 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG( TS_OFF, VLEVEL_M, "###### ADR: On \r\n");
 800357a:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_UART_RxCpltCallback+0x668>)
 800357c:	2200      	movs	r2, #0
 800357e:	4611      	mov	r1, r2
 8003580:	2002      	movs	r0, #2
 8003582:	f012 ffff 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG( TS_OFF, VLEVEL_M, "###### SF: \r\n");
 8003586:	4b5f      	ldr	r3, [pc, #380]	; (8003704 <HAL_UART_RxCpltCallback+0x66c>)
 8003588:	2200      	movs	r2, #0
 800358a:	4611      	mov	r1, r2
 800358c:	2002      	movs	r0, #2
 800358e:	f012 fff9 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003592:	e6ad      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
				APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8003594:	4b5c      	ldr	r3, [pc, #368]	; (8003708 <HAL_UART_RxCpltCallback+0x670>)
 8003596:	2200      	movs	r2, #0
 8003598:	4611      	mov	r1, r2
 800359a:	2002      	movs	r0, #2
 800359c:	f012 fff2 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80035a0:	e6a6      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
			  sscanf(&buffer[11 + i * 2], "%02x", &_devEui[i]);
 80035a2:	0063      	lsls	r3, r4, #1
 80035a4:	330b      	adds	r3, #11
 80035a6:	4a59      	ldr	r2, [pc, #356]	; (800370c <HAL_UART_RxCpltCallback+0x674>)
 80035a8:	4422      	add	r2, r4
 80035aa:	4959      	ldr	r1, [pc, #356]	; (8003710 <HAL_UART_RxCpltCallback+0x678>)
 80035ac:	4859      	ldr	r0, [pc, #356]	; (8003714 <HAL_UART_RxCpltCallback+0x67c>)
 80035ae:	4418      	add	r0, r3
 80035b0:	f014 fda0 	bl	80180f4 <siscanf>
			for (int i = 0; i < 8; i++) {
 80035b4:	3401      	adds	r4, #1
 80035b6:	2c07      	cmp	r4, #7
 80035b8:	ddf3      	ble.n	80035a2 <HAL_UART_RxCpltCallback+0x50a>
			APP_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8(_devEui));
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <HAL_UART_RxCpltCallback+0x674>)
 80035bc:	781a      	ldrb	r2, [r3, #0]
 80035be:	7859      	ldrb	r1, [r3, #1]
 80035c0:	7898      	ldrb	r0, [r3, #2]
 80035c2:	78dc      	ldrb	r4, [r3, #3]
 80035c4:	791d      	ldrb	r5, [r3, #4]
 80035c6:	795e      	ldrb	r6, [r3, #5]
 80035c8:	799f      	ldrb	r7, [r3, #6]
 80035ca:	79db      	ldrb	r3, [r3, #7]
 80035cc:	9307      	str	r3, [sp, #28]
 80035ce:	9706      	str	r7, [sp, #24]
 80035d0:	9605      	str	r6, [sp, #20]
 80035d2:	9504      	str	r5, [sp, #16]
 80035d4:	9403      	str	r4, [sp, #12]
 80035d6:	9002      	str	r0, [sp, #8]
 80035d8:	9101      	str	r1, [sp, #4]
 80035da:	9200      	str	r2, [sp, #0]
 80035dc:	4b43      	ldr	r3, [pc, #268]	; (80036ec <HAL_UART_RxCpltCallback+0x654>)
 80035de:	2200      	movs	r2, #0
 80035e0:	4611      	mov	r1, r2
 80035e2:	2002      	movs	r0, #2
 80035e4:	f012 ffce 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80035e8:	e682      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
			  sscanf(&buffer[11 + i * 2], "%02x", &appEui[i]);
 80035ea:	0063      	lsls	r3, r4, #1
 80035ec:	330b      	adds	r3, #11
 80035ee:	4a4a      	ldr	r2, [pc, #296]	; (8003718 <HAL_UART_RxCpltCallback+0x680>)
 80035f0:	4422      	add	r2, r4
 80035f2:	4947      	ldr	r1, [pc, #284]	; (8003710 <HAL_UART_RxCpltCallback+0x678>)
 80035f4:	4847      	ldr	r0, [pc, #284]	; (8003714 <HAL_UART_RxCpltCallback+0x67c>)
 80035f6:	4418      	add	r0, r3
 80035f8:	f014 fd7c 	bl	80180f4 <siscanf>
			for (int i = 0; i < 8; i++) {
 80035fc:	3401      	adds	r4, #1
 80035fe:	2c07      	cmp	r4, #7
 8003600:	ddf3      	ble.n	80035ea <HAL_UART_RxCpltCallback+0x552>
			APP_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8(appEui));
 8003602:	4b45      	ldr	r3, [pc, #276]	; (8003718 <HAL_UART_RxCpltCallback+0x680>)
 8003604:	781a      	ldrb	r2, [r3, #0]
 8003606:	7859      	ldrb	r1, [r3, #1]
 8003608:	7898      	ldrb	r0, [r3, #2]
 800360a:	78dc      	ldrb	r4, [r3, #3]
 800360c:	791d      	ldrb	r5, [r3, #4]
 800360e:	795e      	ldrb	r6, [r3, #5]
 8003610:	799f      	ldrb	r7, [r3, #6]
 8003612:	79db      	ldrb	r3, [r3, #7]
 8003614:	9307      	str	r3, [sp, #28]
 8003616:	9706      	str	r7, [sp, #24]
 8003618:	9605      	str	r6, [sp, #20]
 800361a:	9504      	str	r5, [sp, #16]
 800361c:	9403      	str	r4, [sp, #12]
 800361e:	9002      	str	r0, [sp, #8]
 8003620:	9101      	str	r1, [sp, #4]
 8003622:	9200      	str	r2, [sp, #0]
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_UART_RxCpltCallback+0x658>)
 8003626:	2200      	movs	r2, #0
 8003628:	4611      	mov	r1, r2
 800362a:	2002      	movs	r0, #2
 800362c:	f012 ffaa 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003630:	e65e      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
			  sscanf(&buffer[11 + i * 2], "%02x", &appKey[i]);
 8003632:	0063      	lsls	r3, r4, #1
 8003634:	330b      	adds	r3, #11
 8003636:	4a39      	ldr	r2, [pc, #228]	; (800371c <HAL_UART_RxCpltCallback+0x684>)
 8003638:	4422      	add	r2, r4
 800363a:	4935      	ldr	r1, [pc, #212]	; (8003710 <HAL_UART_RxCpltCallback+0x678>)
 800363c:	4835      	ldr	r0, [pc, #212]	; (8003714 <HAL_UART_RxCpltCallback+0x67c>)
 800363e:	4418      	add	r0, r3
 8003640:	f014 fd58 	bl	80180f4 <siscanf>
			for (int i = 0; i < 16; i++) {
 8003644:	3401      	adds	r4, #1
 8003646:	2c0f      	cmp	r4, #15
 8003648:	ddf3      	ble.n	8003632 <HAL_UART_RxCpltCallback+0x59a>
			APP_LOG( TS_OFF, VLEVEL_M, "###### APPKEY:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX16(appKey));
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_UART_RxCpltCallback+0x684>)
 800364c:	781a      	ldrb	r2, [r3, #0]
 800364e:	9217      	str	r2, [sp, #92]	; 0x5c
 8003650:	7859      	ldrb	r1, [r3, #1]
 8003652:	9118      	str	r1, [sp, #96]	; 0x60
 8003654:	f893 b002 	ldrb.w	fp, [r3, #2]
 8003658:	78da      	ldrb	r2, [r3, #3]
 800365a:	7919      	ldrb	r1, [r3, #4]
 800365c:	7958      	ldrb	r0, [r3, #5]
 800365e:	799c      	ldrb	r4, [r3, #6]
 8003660:	79dd      	ldrb	r5, [r3, #7]
 8003662:	7a1e      	ldrb	r6, [r3, #8]
 8003664:	7a5f      	ldrb	r7, [r3, #9]
 8003666:	f893 c00a 	ldrb.w	ip, [r3, #10]
 800366a:	f893 e00b 	ldrb.w	lr, [r3, #11]
 800366e:	f893 800c 	ldrb.w	r8, [r3, #12]
 8003672:	f893 a00d 	ldrb.w	sl, [r3, #13]
 8003676:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 800367a:	f893 a00e 	ldrb.w	sl, [r3, #14]
 800367e:	7bdb      	ldrb	r3, [r3, #15]
 8003680:	930f      	str	r3, [sp, #60]	; 0x3c
 8003682:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003686:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 800368a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800368e:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003692:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8003696:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800369a:	9709      	str	r7, [sp, #36]	; 0x24
 800369c:	9608      	str	r6, [sp, #32]
 800369e:	9507      	str	r5, [sp, #28]
 80036a0:	9406      	str	r4, [sp, #24]
 80036a2:	9005      	str	r0, [sp, #20]
 80036a4:	9104      	str	r1, [sp, #16]
 80036a6:	9203      	str	r2, [sp, #12]
 80036a8:	f8cd b008 	str.w	fp, [sp, #8]
 80036ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80036ae:	9101      	str	r1, [sp, #4]
 80036b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80036b2:	9200      	str	r2, [sp, #0]
 80036b4:	4b0f      	ldr	r3, [pc, #60]	; (80036f4 <HAL_UART_RxCpltCallback+0x65c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	4611      	mov	r1, r2
 80036ba:	2002      	movs	r0, #2
 80036bc:	f012 ff62 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80036c0:	e616      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
			sscanf(&buffer[21], "%u", &txInterval);
 80036c2:	4c17      	ldr	r4, [pc, #92]	; (8003720 <HAL_UART_RxCpltCallback+0x688>)
 80036c4:	4622      	mov	r2, r4
 80036c6:	4917      	ldr	r1, [pc, #92]	; (8003724 <HAL_UART_RxCpltCallback+0x68c>)
 80036c8:	4817      	ldr	r0, [pc, #92]	; (8003728 <HAL_UART_RxCpltCallback+0x690>)
 80036ca:	f014 fd13 	bl	80180f4 <siscanf>
			APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus Burst Interval: %u \r\n", txInterval);
 80036ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80036d2:	e9cd 2300 	strd	r2, r3, [sp]
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <HAL_UART_RxCpltCallback+0x660>)
 80036d8:	2200      	movs	r2, #0
 80036da:	4611      	mov	r1, r2
 80036dc:	2002      	movs	r0, #2
 80036de:	f012 ff51 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80036e2:	e605      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
 80036e4:	0803f000 	.word	0x0803f000
 80036e8:	0801c648 	.word	0x0801c648
 80036ec:	0801c668 	.word	0x0801c668
 80036f0:	0801c6a8 	.word	0x0801c6a8
 80036f4:	0801c6e8 	.word	0x0801c6e8
 80036f8:	0801c750 	.word	0x0801c750
 80036fc:	0801c774 	.word	0x0801c774
 8003700:	0801c79c 	.word	0x0801c79c
 8003704:	0801c7b0 	.word	0x0801c7b0
 8003708:	0801c4cc 	.word	0x0801c4cc
 800370c:	20000cfc 	.word	0x20000cfc
 8003710:	0801c7cc 	.word	0x0801c7cc
 8003714:	20000d1c 	.word	0x20000d1c
 8003718:	20000d04 	.word	0x20000d04
 800371c:	20000d0c 	.word	0x20000d0c
 8003720:	20000df8 	.word	0x20000df8
 8003724:	0801c804 	.word	0x0801c804
 8003728:	20000d31 	.word	0x20000d31
			sscanf(&buffer[23], "%u", &hbInterval);
 800372c:	4c51      	ldr	r4, [pc, #324]	; (8003874 <HAL_UART_RxCpltCallback+0x7dc>)
 800372e:	4622      	mov	r2, r4
 8003730:	4951      	ldr	r1, [pc, #324]	; (8003878 <HAL_UART_RxCpltCallback+0x7e0>)
 8003732:	4852      	ldr	r0, [pc, #328]	; (800387c <HAL_UART_RxCpltCallback+0x7e4>)
 8003734:	f014 fcde 	bl	80180f4 <siscanf>
			APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus Heartbeat Interval: %u \r\n", hbInterval);
 8003738:	e9d4 2300 	ldrd	r2, r3, [r4]
 800373c:	e9cd 2300 	strd	r2, r3, [sp]
 8003740:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <HAL_UART_RxCpltCallback+0x7e8>)
 8003742:	2200      	movs	r2, #0
 8003744:	4611      	mov	r1, r2
 8003746:	2002      	movs	r0, #2
 8003748:	f012 ff1c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800374c:	e5d0      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
			APP_LOG( TS_OFF, VLEVEL_M, "###### Current Lora-Configuration: \r\n");
 800374e:	4b4d      	ldr	r3, [pc, #308]	; (8003884 <HAL_UART_RxCpltCallback+0x7ec>)
 8003750:	2200      	movs	r2, #0
 8003752:	4611      	mov	r1, r2
 8003754:	2002      	movs	r0, #2
 8003756:	f012 ff15 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8(_devEui) );
 800375a:	4b4b      	ldr	r3, [pc, #300]	; (8003888 <HAL_UART_RxCpltCallback+0x7f0>)
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	7859      	ldrb	r1, [r3, #1]
 8003760:	7898      	ldrb	r0, [r3, #2]
 8003762:	78dc      	ldrb	r4, [r3, #3]
 8003764:	791d      	ldrb	r5, [r3, #4]
 8003766:	795e      	ldrb	r6, [r3, #5]
 8003768:	799f      	ldrb	r7, [r3, #6]
 800376a:	79db      	ldrb	r3, [r3, #7]
 800376c:	9307      	str	r3, [sp, #28]
 800376e:	9706      	str	r7, [sp, #24]
 8003770:	9605      	str	r6, [sp, #20]
 8003772:	9504      	str	r5, [sp, #16]
 8003774:	9403      	str	r4, [sp, #12]
 8003776:	9002      	str	r0, [sp, #8]
 8003778:	9101      	str	r1, [sp, #4]
 800377a:	9200      	str	r2, [sp, #0]
 800377c:	4b43      	ldr	r3, [pc, #268]	; (800388c <HAL_UART_RxCpltCallback+0x7f4>)
 800377e:	2200      	movs	r2, #0
 8003780:	4611      	mov	r1, r2
 8003782:	2002      	movs	r0, #2
 8003784:	f012 fefe 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8(appEui) );
 8003788:	4b41      	ldr	r3, [pc, #260]	; (8003890 <HAL_UART_RxCpltCallback+0x7f8>)
 800378a:	781a      	ldrb	r2, [r3, #0]
 800378c:	7859      	ldrb	r1, [r3, #1]
 800378e:	7898      	ldrb	r0, [r3, #2]
 8003790:	78dc      	ldrb	r4, [r3, #3]
 8003792:	791d      	ldrb	r5, [r3, #4]
 8003794:	795e      	ldrb	r6, [r3, #5]
 8003796:	799f      	ldrb	r7, [r3, #6]
 8003798:	79db      	ldrb	r3, [r3, #7]
 800379a:	9307      	str	r3, [sp, #28]
 800379c:	9706      	str	r7, [sp, #24]
 800379e:	9605      	str	r6, [sp, #20]
 80037a0:	9504      	str	r5, [sp, #16]
 80037a2:	9403      	str	r4, [sp, #12]
 80037a4:	9002      	str	r0, [sp, #8]
 80037a6:	9101      	str	r1, [sp, #4]
 80037a8:	9200      	str	r2, [sp, #0]
 80037aa:	4b3a      	ldr	r3, [pc, #232]	; (8003894 <HAL_UART_RxCpltCallback+0x7fc>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	4611      	mov	r1, r2
 80037b0:	2002      	movs	r0, #2
 80037b2:	f012 fee7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG( TS_OFF, VLEVEL_M, "###### APPKEY:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX16(appKey));
 80037b6:	4b38      	ldr	r3, [pc, #224]	; (8003898 <HAL_UART_RxCpltCallback+0x800>)
 80037b8:	781a      	ldrb	r2, [r3, #0]
 80037ba:	9217      	str	r2, [sp, #92]	; 0x5c
 80037bc:	7859      	ldrb	r1, [r3, #1]
 80037be:	9118      	str	r1, [sp, #96]	; 0x60
 80037c0:	f893 b002 	ldrb.w	fp, [r3, #2]
 80037c4:	78da      	ldrb	r2, [r3, #3]
 80037c6:	7919      	ldrb	r1, [r3, #4]
 80037c8:	7958      	ldrb	r0, [r3, #5]
 80037ca:	799c      	ldrb	r4, [r3, #6]
 80037cc:	79dd      	ldrb	r5, [r3, #7]
 80037ce:	7a1e      	ldrb	r6, [r3, #8]
 80037d0:	7a5f      	ldrb	r7, [r3, #9]
 80037d2:	f893 c00a 	ldrb.w	ip, [r3, #10]
 80037d6:	f893 e00b 	ldrb.w	lr, [r3, #11]
 80037da:	f893 800c 	ldrb.w	r8, [r3, #12]
 80037de:	f893 a00d 	ldrb.w	sl, [r3, #13]
 80037e2:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 80037e6:	f893 a00e 	ldrb.w	sl, [r3, #14]
 80037ea:	7bdb      	ldrb	r3, [r3, #15]
 80037ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80037ee:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80037f2:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80037f6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80037fa:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80037fe:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8003802:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003806:	9709      	str	r7, [sp, #36]	; 0x24
 8003808:	9608      	str	r6, [sp, #32]
 800380a:	9507      	str	r5, [sp, #28]
 800380c:	9406      	str	r4, [sp, #24]
 800380e:	9005      	str	r0, [sp, #20]
 8003810:	9104      	str	r1, [sp, #16]
 8003812:	9203      	str	r2, [sp, #12]
 8003814:	f8cd b008 	str.w	fp, [sp, #8]
 8003818:	9918      	ldr	r1, [sp, #96]	; 0x60
 800381a:	9101      	str	r1, [sp, #4]
 800381c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800381e:	9200      	str	r2, [sp, #0]
 8003820:	4b1e      	ldr	r3, [pc, #120]	; (800389c <HAL_UART_RxCpltCallback+0x804>)
 8003822:	2200      	movs	r2, #0
 8003824:	4611      	mov	r1, r2
 8003826:	2002      	movs	r0, #2
 8003828:	f012 feac 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus Burst Interval: %u \r\n", txInterval);
 800382c:	4b1c      	ldr	r3, [pc, #112]	; (80038a0 <HAL_UART_RxCpltCallback+0x808>)
 800382e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003832:	e9cd 2300 	strd	r2, r3, [sp]
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <HAL_UART_RxCpltCallback+0x80c>)
 8003838:	2200      	movs	r2, #0
 800383a:	4611      	mov	r1, r2
 800383c:	2002      	movs	r0, #2
 800383e:	f012 fea1 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus HeartBeat Interval: %u \r\n", hbInterval);
 8003842:	4b0c      	ldr	r3, [pc, #48]	; (8003874 <HAL_UART_RxCpltCallback+0x7dc>)
 8003844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003848:	e9cd 2300 	strd	r2, r3, [sp]
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_UART_RxCpltCallback+0x810>)
 800384e:	2200      	movs	r2, #0
 8003850:	4611      	mov	r1, r2
 8003852:	2002      	movs	r0, #2
 8003854:	f012 fe96 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG( TS_OFF, VLEVEL_M, "###### ADR: On \r\n");
 8003858:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_UART_RxCpltCallback+0x814>)
 800385a:	2200      	movs	r2, #0
 800385c:	4611      	mov	r1, r2
 800385e:	2002      	movs	r0, #2
 8003860:	f012 fe90 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			APP_LOG( TS_OFF, VLEVEL_M, "###### SF: \r\n");
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <HAL_UART_RxCpltCallback+0x818>)
 8003866:	2200      	movs	r2, #0
 8003868:	4611      	mov	r1, r2
 800386a:	2002      	movs	r0, #2
 800386c:	f012 fe8a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003870:	e53e      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
 8003872:	bf00      	nop
 8003874:	20000de8 	.word	0x20000de8
 8003878:	0801c804 	.word	0x0801c804
 800387c:	20000d33 	.word	0x20000d33
 8003880:	0801c820 	.word	0x0801c820
 8003884:	0801c854 	.word	0x0801c854
 8003888:	20000cfc 	.word	0x20000cfc
 800388c:	0801c668 	.word	0x0801c668
 8003890:	20000d04 	.word	0x20000d04
 8003894:	0801c6a8 	.word	0x0801c6a8
 8003898:	20000d0c 	.word	0x20000d0c
 800389c:	0801c6e8 	.word	0x0801c6e8
 80038a0:	20000df8 	.word	0x20000df8
 80038a4:	0801c750 	.word	0x0801c750
 80038a8:	0801c774 	.word	0x0801c774
 80038ac:	0801c79c 	.word	0x0801c79c
 80038b0:	0801c7b0 	.word	0x0801c7b0
			APP_LOG(TS_OFF, VLEVEL_M, "###### Saving Lora Configuration \r\n");
 80038b4:	4b9b      	ldr	r3, [pc, #620]	; (8003b24 <HAL_UART_RxCpltCallback+0xa8c>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	4611      	mov	r1, r2
 80038ba:	2002      	movs	r0, #2
 80038bc:	f012 fe62 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			memcpy1( ( uint8_t * )FlashNVM.SeNvmDevJoinKey.DevEui,  ( uint8_t * )&_devEui, sizeof(_devEui));
 80038c0:	2208      	movs	r2, #8
 80038c2:	4999      	ldr	r1, [pc, #612]	; (8003b28 <HAL_UART_RxCpltCallback+0xa90>)
 80038c4:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 80038c8:	f010 ff7f 	bl	80147ca <memcpy1>
			memcpy1( ( uint8_t * )FlashNVM.SeNvmDevJoinKey.JoinEui, ( uint8_t * )&appEui, sizeof(appEui));
 80038cc:	2208      	movs	r2, #8
 80038ce:	4997      	ldr	r1, [pc, #604]	; (8003b2c <HAL_UART_RxCpltCallback+0xa94>)
 80038d0:	f50d 608b 	add.w	r0, sp, #1112	; 0x458
 80038d4:	f010 ff79 	bl	80147ca <memcpy1>
			memcpy1( ( uint8_t * )FlashNVM.KeyList[0].KeyValue,     ( uint8_t * )&appKey, sizeof(appKey));
 80038d8:	4c95      	ldr	r4, [pc, #596]	; (8003b30 <HAL_UART_RxCpltCallback+0xa98>)
 80038da:	2210      	movs	r2, #16
 80038dc:	4621      	mov	r1, r4
 80038de:	f20d 4069 	addw	r0, sp, #1129	; 0x469
 80038e2:	f010 ff72 	bl	80147ca <memcpy1>
			memcpy1( ( uint8_t * )FlashNVM.KeyList[1].KeyValue,     ( uint8_t * )&appKey, sizeof(appKey));
 80038e6:	2210      	movs	r2, #16
 80038e8:	4621      	mov	r1, r4
 80038ea:	f20d 407a 	addw	r0, sp, #1146	; 0x47a
 80038ee:	f010 ff6c 	bl	80147ca <memcpy1>
			memcpy1( ( uint8_t * )FlashNVM.KeyList[2].KeyValue,     ( uint8_t * )&appKey, sizeof(appKey));
 80038f2:	2210      	movs	r2, #16
 80038f4:	4621      	mov	r1, r4
 80038f6:	f20d 408b 	addw	r0, sp, #1163	; 0x48b
 80038fa:	f010 ff66 	bl	80147ca <memcpy1>
			memcpy1( ( uint8_t * )FlashNVM.KeyList[3].KeyValue,     ( uint8_t * )&appKey, sizeof(appKey));
 80038fe:	2210      	movs	r2, #16
 8003900:	4621      	mov	r1, r4
 8003902:	f20d 409c 	addw	r0, sp, #1180	; 0x49c
 8003906:	f010 ff60 	bl	80147ca <memcpy1>
			FlashNVM.pwxTxInterval = txInterval;
 800390a:	4b8a      	ldr	r3, [pc, #552]	; (8003b34 <HAL_UART_RxCpltCallback+0xa9c>)
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f50d 61a5 	add.w	r1, sp, #1320	; 0x528
 8003914:	e9c1 2300 	strd	r2, r3, [r1]
			FlashNVM.pwxHeartbeatInterval  = hbInterval;
 8003918:	4b87      	ldr	r3, [pc, #540]	; (8003b38 <HAL_UART_RxCpltCallback+0xaa0>)
 800391a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391e:	f50d 61a6 	add.w	r1, sp, #1328	; 0x530
 8003922:	e9c1 2300 	strd	r2, r3, [r1]
			if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8003926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800392a:	4884      	ldr	r0, [pc, #528]	; (8003b3c <HAL_UART_RxCpltCallback+0xaa4>)
 800392c:	f7fe fbfe 	bl	800212c <FLASH_IF_Erase>
 8003930:	2800      	cmp	r0, #0
 8003932:	f040 80d1 	bne.w	8003ad8 <HAL_UART_RxCpltCallback+0xa40>
				if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8003936:	22f8      	movs	r2, #248	; 0xf8
 8003938:	f50d 618a 	add.w	r1, sp, #1104	; 0x450
 800393c:	487f      	ldr	r0, [pc, #508]	; (8003b3c <HAL_UART_RxCpltCallback+0xaa4>)
 800393e:	f7fe fbbd 	bl	80020bc <FLASH_IF_Write>
 8003942:	2800      	cmp	r0, #0
 8003944:	f040 80c1 	bne.w	8003aca <HAL_UART_RxCpltCallback+0xa32>
					APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8003948:	4b7d      	ldr	r3, [pc, #500]	; (8003b40 <HAL_UART_RxCpltCallback+0xaa8>)
 800394a:	2200      	movs	r2, #0
 800394c:	4611      	mov	r1, r2
 800394e:	2002      	movs	r0, #2
 8003950:	f012 fe18 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8003954:	22f8      	movs	r2, #248	; 0xf8
 8003956:	4979      	ldr	r1, [pc, #484]	; (8003b3c <HAL_UART_RxCpltCallback+0xaa4>)
 8003958:	f50d 608a 	add.w	r0, sp, #1104	; 0x450
 800395c:	f7fe fbca 	bl	80020f4 <FLASH_IF_Read>
 8003960:	2800      	cmp	r0, #0
 8003962:	f040 80ab 	bne.w	8003abc <HAL_UART_RxCpltCallback+0xa24>
						APP_LOG( TS_OFF, VLEVEL_M, "###### Lora-Configuration: \r\n");
 8003966:	4b77      	ldr	r3, [pc, #476]	; (8003b44 <HAL_UART_RxCpltCallback+0xaac>)
 8003968:	2200      	movs	r2, #0
 800396a:	4611      	mov	r1, r2
 800396c:	2002      	movs	r0, #2
 800396e:	f012 fe09 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						APP_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( FlashNVM.SeNvmDevJoinKey.DevEui ) );
 8003972:	f89d 3450 	ldrb.w	r3, [sp, #1104]	; 0x450
 8003976:	f89d 2451 	ldrb.w	r2, [sp, #1105]	; 0x451
 800397a:	f89d 1452 	ldrb.w	r1, [sp, #1106]	; 0x452
 800397e:	f89d 0453 	ldrb.w	r0, [sp, #1107]	; 0x453
 8003982:	f89d 4454 	ldrb.w	r4, [sp, #1108]	; 0x454
 8003986:	f89d 5455 	ldrb.w	r5, [sp, #1109]	; 0x455
 800398a:	f89d 6456 	ldrb.w	r6, [sp, #1110]	; 0x456
 800398e:	f89d 7457 	ldrb.w	r7, [sp, #1111]	; 0x457
 8003992:	9707      	str	r7, [sp, #28]
 8003994:	9606      	str	r6, [sp, #24]
 8003996:	9505      	str	r5, [sp, #20]
 8003998:	9404      	str	r4, [sp, #16]
 800399a:	9003      	str	r0, [sp, #12]
 800399c:	9102      	str	r1, [sp, #8]
 800399e:	9201      	str	r2, [sp, #4]
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	4b69      	ldr	r3, [pc, #420]	; (8003b48 <HAL_UART_RxCpltCallback+0xab0>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	4611      	mov	r1, r2
 80039a8:	2002      	movs	r0, #2
 80039aa:	f012 fdeb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						APP_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( FlashNVM.SeNvmDevJoinKey.JoinEui ) );
 80039ae:	f89d 3458 	ldrb.w	r3, [sp, #1112]	; 0x458
 80039b2:	f89d 2459 	ldrb.w	r2, [sp, #1113]	; 0x459
 80039b6:	f89d 145a 	ldrb.w	r1, [sp, #1114]	; 0x45a
 80039ba:	f89d 045b 	ldrb.w	r0, [sp, #1115]	; 0x45b
 80039be:	f89d 445c 	ldrb.w	r4, [sp, #1116]	; 0x45c
 80039c2:	f89d 545d 	ldrb.w	r5, [sp, #1117]	; 0x45d
 80039c6:	f89d 645e 	ldrb.w	r6, [sp, #1118]	; 0x45e
 80039ca:	f89d 745f 	ldrb.w	r7, [sp, #1119]	; 0x45f
 80039ce:	9707      	str	r7, [sp, #28]
 80039d0:	9606      	str	r6, [sp, #24]
 80039d2:	9505      	str	r5, [sp, #20]
 80039d4:	9404      	str	r4, [sp, #16]
 80039d6:	9003      	str	r0, [sp, #12]
 80039d8:	9102      	str	r1, [sp, #8]
 80039da:	9201      	str	r2, [sp, #4]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <HAL_UART_RxCpltCallback+0xab4>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	4611      	mov	r1, r2
 80039e4:	2002      	movs	r0, #2
 80039e6:	f012 fdcd 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						APP_LOG( TS_OFF, VLEVEL_M, "###### APPKEY:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX16(FlashNVM.KeyList[0].KeyValue));
 80039ea:	f89d 3469 	ldrb.w	r3, [sp, #1129]	; 0x469
 80039ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80039f0:	f89d 246a 	ldrb.w	r2, [sp, #1130]	; 0x46a
 80039f4:	9218      	str	r2, [sp, #96]	; 0x60
 80039f6:	f89d 346b 	ldrb.w	r3, [sp, #1131]	; 0x46b
 80039fa:	f89d 246c 	ldrb.w	r2, [sp, #1132]	; 0x46c
 80039fe:	f89d 146d 	ldrb.w	r1, [sp, #1133]	; 0x46d
 8003a02:	f89d 046e 	ldrb.w	r0, [sp, #1134]	; 0x46e
 8003a06:	f89d 446f 	ldrb.w	r4, [sp, #1135]	; 0x46f
 8003a0a:	f89d 5470 	ldrb.w	r5, [sp, #1136]	; 0x470
 8003a0e:	f89d 6471 	ldrb.w	r6, [sp, #1137]	; 0x471
 8003a12:	f89d 7472 	ldrb.w	r7, [sp, #1138]	; 0x472
 8003a16:	f89d c473 	ldrb.w	ip, [sp, #1139]	; 0x473
 8003a1a:	f89d e474 	ldrb.w	lr, [sp, #1140]	; 0x474
 8003a1e:	f89d 8475 	ldrb.w	r8, [sp, #1141]	; 0x475
 8003a22:	f89d a476 	ldrb.w	sl, [sp, #1142]	; 0x476
 8003a26:	f8cd a064 	str.w	sl, [sp, #100]	; 0x64
 8003a2a:	f89d a477 	ldrb.w	sl, [sp, #1143]	; 0x477
 8003a2e:	f89d b478 	ldrb.w	fp, [sp, #1144]	; 0x478
 8003a32:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8003a36:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8003a3a:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8003a3e:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003a42:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8003a46:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8003a4a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8003a4e:	9709      	str	r7, [sp, #36]	; 0x24
 8003a50:	9608      	str	r6, [sp, #32]
 8003a52:	9507      	str	r5, [sp, #28]
 8003a54:	9406      	str	r4, [sp, #24]
 8003a56:	9005      	str	r0, [sp, #20]
 8003a58:	9104      	str	r1, [sp, #16]
 8003a5a:	9203      	str	r2, [sp, #12]
 8003a5c:	9302      	str	r3, [sp, #8]
 8003a5e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8003a60:	9201      	str	r2, [sp, #4]
 8003a62:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <HAL_UART_RxCpltCallback+0xab8>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	4611      	mov	r1, r2
 8003a6c:	2002      	movs	r0, #2
 8003a6e:	f012 fd89 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus Burst Interval: %u \r\n", FlashNVM.pwxTxInterval);
 8003a72:	f50d 63a5 	add.w	r3, sp, #1320	; 0x528
 8003a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7a:	e9cd 2300 	strd	r2, r3, [sp]
 8003a7e:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <HAL_UART_RxCpltCallback+0xabc>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	4611      	mov	r1, r2
 8003a84:	2002      	movs	r0, #2
 8003a86:	f012 fd7d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						APP_LOG( TS_OFF, VLEVEL_M, "###### ModBus HeartBeat Interval: %u \r\n", FlashNVM.pwxHeartbeatInterval);
 8003a8a:	f50d 63a6 	add.w	r3, sp, #1328	; 0x530
 8003a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a92:	e9cd 2300 	strd	r2, r3, [sp]
 8003a96:	4b30      	ldr	r3, [pc, #192]	; (8003b58 <HAL_UART_RxCpltCallback+0xac0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	2002      	movs	r0, #2
 8003a9e:	f012 fd71 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						APP_LOG( TS_OFF, VLEVEL_M, "###### ADR: On \r\n");
 8003aa2:	4b2e      	ldr	r3, [pc, #184]	; (8003b5c <HAL_UART_RxCpltCallback+0xac4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f012 fd6b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						APP_LOG( TS_OFF, VLEVEL_M, "###### SF: \r\n");
 8003aae:	4b2c      	ldr	r3, [pc, #176]	; (8003b60 <HAL_UART_RxCpltCallback+0xac8>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	2002      	movs	r0, #2
 8003ab6:	f012 fd65 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003aba:	e419      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
						APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <HAL_UART_RxCpltCallback+0xacc>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	4611      	mov	r1, r2
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f012 fd5e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003ac8:	e412      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
					APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8003aca:	4b27      	ldr	r3, [pc, #156]	; (8003b68 <HAL_UART_RxCpltCallback+0xad0>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	4611      	mov	r1, r2
 8003ad0:	2002      	movs	r0, #2
 8003ad2:	f012 fd57 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003ad6:	e40b      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
				APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8003ad8:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <HAL_UART_RxCpltCallback+0xad4>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	4611      	mov	r1, r2
 8003ade:	2002      	movs	r0, #2
 8003ae0:	f012 fd50 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003ae4:	e404      	b.n	80032f0 <HAL_UART_RxCpltCallback+0x258>
		    if (sscanf(&buffer[22], "%u seg %u", &devID, &segID) == 2) {
 8003ae6:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
 8003aea:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 8003aee:	4920      	ldr	r1, [pc, #128]	; (8003b70 <HAL_UART_RxCpltCallback+0xad8>)
 8003af0:	4820      	ldr	r0, [pc, #128]	; (8003b74 <HAL_UART_RxCpltCallback+0xadc>)
 8003af2:	f014 faff 	bl	80180f4 <siscanf>
 8003af6:	2802      	cmp	r0, #2
 8003af8:	f040 80fb 	bne.w	8003cf2 <HAL_UART_RxCpltCallback+0xc5a>
		    	if(devID >= 1 && devID <= 16 && segID >= 1 && segID <= 16){
 8003afc:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8003b00:	1e5a      	subs	r2, r3, #1
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	2a0f      	cmp	r2, #15
 8003b06:	d804      	bhi.n	8003b12 <HAL_UART_RxCpltCallback+0xa7a>
 8003b08:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8003b0c:	b10a      	cbz	r2, 8003b12 <HAL_UART_RxCpltCallback+0xa7a>
 8003b0e:	2a10      	cmp	r2, #16
 8003b10:	d934      	bls.n	8003b7c <HAL_UART_RxCpltCallback+0xae4>
		    		APP_LOG(TS_OFF, VLEVEL_M, "Parameters out of range \r\n");
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <HAL_UART_RxCpltCallback+0xae0>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	4611      	mov	r1, r2
 8003b18:	2002      	movs	r0, #2
 8003b1a:	f012 fd33 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003b1e:	f7ff bbe7 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
 8003b22:	bf00      	nop
 8003b24:	0801c890 	.word	0x0801c890
 8003b28:	20000cfc 	.word	0x20000cfc
 8003b2c:	20000d04 	.word	0x20000d04
 8003b30:	20000d0c 	.word	0x20000d0c
 8003b34:	20000df8 	.word	0x20000df8
 8003b38:	20000de8 	.word	0x20000de8
 8003b3c:	0803f000 	.word	0x0803f000
 8003b40:	0801c8b4 	.word	0x0801c8b4
 8003b44:	0801c648 	.word	0x0801c648
 8003b48:	0801c668 	.word	0x0801c668
 8003b4c:	0801c6a8 	.word	0x0801c6a8
 8003b50:	0801c6e8 	.word	0x0801c6e8
 8003b54:	0801c750 	.word	0x0801c750
 8003b58:	0801c774 	.word	0x0801c774
 8003b5c:	0801c79c 	.word	0x0801c79c
 8003b60:	0801c7b0 	.word	0x0801c7b0
 8003b64:	0801c4cc 	.word	0x0801c4cc
 8003b68:	0801c8d8 	.word	0x0801c8d8
 8003b6c:	0801c8f8 	.word	0x0801c8f8
 8003b70:	0801c930 	.word	0x0801c930
 8003b74:	20000d32 	.word	0x20000d32
 8003b78:	0801c9fc 	.word	0x0801c9fc
					if (FLASH_IF_Read(&_modbusDevice, ModbusDeviceFlashAddresses[devID - 1], sizeof(struct ModbusDevice)) == FLASH_IF_OK) {
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 8003b82:	49ae      	ldr	r1, [pc, #696]	; (8003e3c <HAL_UART_RxCpltCallback+0xda4>)
 8003b84:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003b88:	a820      	add	r0, sp, #128	; 0x80
 8003b8a:	f7fe fab3 	bl	80020f4 <FLASH_IF_Read>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d17a      	bne.n	8003c88 <HAL_UART_RxCpltCallback+0xbf0>
						APP_LOG(TS_OFF, VLEVEL_M, "READ OK\r\n");
 8003b92:	4bab      	ldr	r3, [pc, #684]	; (8003e40 <HAL_UART_RxCpltCallback+0xda8>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	4611      	mov	r1, r2
 8003b98:	2002      	movs	r0, #2
 8003b9a:	f012 fcf3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "###### Configuration for Dev ID: %u, Seg ID: %u \r\n", devID, segID);
 8003b9e:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003ba2:	9301      	str	r3, [sp, #4]
 8003ba4:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	4ba6      	ldr	r3, [pc, #664]	; (8003e44 <HAL_UART_RxCpltCallback+0xdac>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	4611      	mov	r1, r2
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f012 fce7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "Baudrate: %u \r\n", _modbusDevice.Baudrate);
 8003bb6:	f89d 3082 	ldrb.w	r3, [sp, #130]	; 0x82
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4ba2      	ldr	r3, [pc, #648]	; (8003e48 <HAL_UART_RxCpltCallback+0xdb0>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	2002      	movs	r0, #2
 8003bc4:	f012 fcde 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "Parity: %d   \r\n", _modbusDevice.Parity);
 8003bc8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	4b9f      	ldr	r3, [pc, #636]	; (8003e4c <HAL_UART_RxCpltCallback+0xdb4>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f012 fcd5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "StopBits: %d \r\n", _modbusDevice.StopBits);
 8003bda:	f89d 3084 	ldrb.w	r3, [sp, #132]	; 0x84
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	4b9b      	ldr	r3, [pc, #620]	; (8003e50 <HAL_UART_RxCpltCallback+0xdb8>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	4611      	mov	r1, r2
 8003be6:	2002      	movs	r0, #2
 8003be8:	f012 fccc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "Device Enable: %s \r\n", _modbusDevice.DeviceActive == 1 ? "true" : "false");
 8003bec:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d050      	beq.n	8003c96 <HAL_UART_RxCpltCallback+0xbfe>
 8003bf4:	4b97      	ldr	r3, [pc, #604]	; (8003e54 <HAL_UART_RxCpltCallback+0xdbc>)
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	4b97      	ldr	r3, [pc, #604]	; (8003e58 <HAL_UART_RxCpltCallback+0xdc0>)
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	2002      	movs	r0, #2
 8003c00:	f012 fcc0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "\r");
 8003c04:	4b95      	ldr	r3, [pc, #596]	; (8003e5c <HAL_UART_RxCpltCallback+0xdc4>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	4611      	mov	r1, r2
 8003c0a:	2002      	movs	r0, #2
 8003c0c:	f012 fcba 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "Segment %d Configuration: \r\n", segID);
 8003c10:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	4b92      	ldr	r3, [pc, #584]	; (8003e60 <HAL_UART_RxCpltCallback+0xdc8>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	2002      	movs	r0, #2
 8003c1e:	f012 fcb1 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "enableSegment: %s \r\n", (uint8_t)_modbusDevice.Segment[segID - 1].enableSegment == 1? "true" : "false");
 8003c22:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003c26:	2238      	movs	r2, #56	; 0x38
 8003c28:	fb02 f303 	mul.w	r3, r2, r3
 8003c2c:	aa20      	add	r2, sp, #128	; 0x80
 8003c2e:	5cd3      	ldrb	r3, [r2, r3]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d032      	beq.n	8003c9a <HAL_UART_RxCpltCallback+0xc02>
 8003c34:	4b87      	ldr	r3, [pc, #540]	; (8003e54 <HAL_UART_RxCpltCallback+0xdbc>)
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	4b8a      	ldr	r3, [pc, #552]	; (8003e64 <HAL_UART_RxCpltCallback+0xdcc>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f012 fca0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "cmdRaw: ");
 8003c44:	4b88      	ldr	r3, [pc, #544]	; (8003e68 <HAL_UART_RxCpltCallback+0xdd0>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	4611      	mov	r1, r2
 8003c4a:	2002      	movs	r0, #2
 8003c4c:	f012 fc9a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					size_t cmdSize = _modbusDevice.Segment[segID - 1].cmdSize;
 8003c50:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003c54:	3b01      	subs	r3, #1
 8003c56:	2238      	movs	r2, #56	; 0x38
 8003c58:	a920      	add	r1, sp, #128	; 0x80
 8003c5a:	fb02 1303 	mla	r3, r2, r3, r1
 8003c5e:	7a1d      	ldrb	r5, [r3, #8]
					for (int j = 0; j < cmdSize; j++) {
 8003c60:	42ac      	cmp	r4, r5
 8003c62:	d21c      	bcs.n	8003c9e <HAL_UART_RxCpltCallback+0xc06>
						APP_LOG(TS_OFF, VLEVEL_M, "%02X ", _modbusDevice.Segment[segID - 1].cmdRaw[j]);
 8003c64:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	2238      	movs	r2, #56	; 0x38
 8003c6c:	a920      	add	r1, sp, #128	; 0x80
 8003c6e:	fb02 1303 	mla	r3, r2, r3, r1
 8003c72:	4423      	add	r3, r4
 8003c74:	7a5b      	ldrb	r3, [r3, #9]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	4b7c      	ldr	r3, [pc, #496]	; (8003e6c <HAL_UART_RxCpltCallback+0xdd4>)
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	4611      	mov	r1, r2
 8003c7e:	2002      	movs	r0, #2
 8003c80:	f012 fc80 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					for (int j = 0; j < cmdSize; j++) {
 8003c84:	3401      	adds	r4, #1
 8003c86:	e7eb      	b.n	8003c60 <HAL_UART_RxCpltCallback+0xbc8>
						APP_LOG(TS_OFF, VLEVEL_M, "READ ERROR\r\n");
 8003c88:	4b79      	ldr	r3, [pc, #484]	; (8003e70 <HAL_UART_RxCpltCallback+0xdd8>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	2002      	movs	r0, #2
 8003c90:	f012 fc78 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003c94:	e783      	b.n	8003b9e <HAL_UART_RxCpltCallback+0xb06>
					APP_LOG(TS_OFF, VLEVEL_M, "Device Enable: %s \r\n", _modbusDevice.DeviceActive == 1 ? "true" : "false");
 8003c96:	4b77      	ldr	r3, [pc, #476]	; (8003e74 <HAL_UART_RxCpltCallback+0xddc>)
 8003c98:	e7ad      	b.n	8003bf6 <HAL_UART_RxCpltCallback+0xb5e>
					APP_LOG(TS_OFF, VLEVEL_M, "enableSegment: %s \r\n", (uint8_t)_modbusDevice.Segment[segID - 1].enableSegment == 1? "true" : "false");
 8003c9a:	4b76      	ldr	r3, [pc, #472]	; (8003e74 <HAL_UART_RxCpltCallback+0xddc>)
 8003c9c:	e7cb      	b.n	8003c36 <HAL_UART_RxCpltCallback+0xb9e>
					APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8003c9e:	4b76      	ldr	r3, [pc, #472]	; (8003e78 <HAL_UART_RxCpltCallback+0xde0>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	2002      	movs	r0, #2
 8003ca6:	f012 fc6d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "validAddresses: %08X \r\n", (uint32_t)_modbusDevice.Segment[segID - 1].validAddresses);
 8003caa:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	2438      	movs	r4, #56	; 0x38
 8003cb2:	aa20      	add	r2, sp, #128	; 0x80
 8003cb4:	fb04 2303 	mla	r3, r4, r3, r2
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <HAL_UART_RxCpltCallback+0xde4>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	4611      	mov	r1, r2
 8003cc2:	2002      	movs	r0, #2
 8003cc4:	f012 fc5e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "sendNow: %s \r\n\n", _modbusDevice.Segment[segID - 1].sendNow ? "true" : "false");
 8003cc8:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	aa20      	add	r2, sp, #128	; 0x80
 8003cd0:	fb04 2303 	mla	r3, r4, r3, r2
 8003cd4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8003cd8:	b14b      	cbz	r3, 8003cee <HAL_UART_RxCpltCallback+0xc56>
 8003cda:	4b66      	ldr	r3, [pc, #408]	; (8003e74 <HAL_UART_RxCpltCallback+0xddc>)
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	4b68      	ldr	r3, [pc, #416]	; (8003e80 <HAL_UART_RxCpltCallback+0xde8>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	4611      	mov	r1, r2
 8003ce4:	2002      	movs	r0, #2
 8003ce6:	f012 fc4d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		    	if(devID >= 1 && devID <= 16 && segID >= 1 && segID <= 16){
 8003cea:	f7ff bb01 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
					APP_LOG(TS_OFF, VLEVEL_M, "sendNow: %s \r\n\n", _modbusDevice.Segment[segID - 1].sendNow ? "true" : "false");
 8003cee:	4b59      	ldr	r3, [pc, #356]	; (8003e54 <HAL_UART_RxCpltCallback+0xdbc>)
 8003cf0:	e7f4      	b.n	8003cdc <HAL_UART_RxCpltCallback+0xc44>
		        APP_LOG(TS_OFF, VLEVEL_M, "Invalid input format\r\n");
 8003cf2:	4b64      	ldr	r3, [pc, #400]	; (8003e84 <HAL_UART_RxCpltCallback+0xdec>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	2002      	movs	r0, #2
 8003cfa:	f012 fc43 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003cfe:	f7ff baf7 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			int parsed = sscanf(buffer, "set device-params %u %u %u %u %u %u", &cmdID, &devId, &baudRate, &parity, &stopBit, &isActive);
 8003d02:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 8003d0c:	9302      	str	r3, [sp, #8]
 8003d0e:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
 8003d12:	9301      	str	r3, [sp, #4]
 8003d14:	ab1f      	add	r3, sp, #124	; 0x7c
 8003d16:	9300      	str	r3, [sp, #0]
 8003d18:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8003d1c:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8003d20:	4959      	ldr	r1, [pc, #356]	; (8003e88 <HAL_UART_RxCpltCallback+0xdf0>)
 8003d22:	485a      	ldr	r0, [pc, #360]	; (8003e8c <HAL_UART_RxCpltCallback+0xdf4>)
 8003d24:	f014 f9e6 	bl	80180f4 <siscanf>
			if (parsed == 6) {
 8003d28:	2806      	cmp	r0, #6
 8003d2a:	d007      	beq.n	8003d3c <HAL_UART_RxCpltCallback+0xca4>
				APP_LOG(TS_OFF, VLEVEL_M, "Error: Failed to parse input string \r\n");
 8003d2c:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <HAL_UART_RxCpltCallback+0xdf8>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	4611      	mov	r1, r2
 8003d32:	2002      	movs	r0, #2
 8003d34:	f012 fc26 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003d38:	f7ff bada 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
				APP_LOG(TS_OFF, VLEVEL_M, "cmdID: %u, DevId: %u, Baudrate: %u, Parity: %u, StopBit: %u, Active: %u \r\n", cmdID, devId, baudRate, parity, stopBit, isActive);
 8003d3c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003d40:	9305      	str	r3, [sp, #20]
 8003d42:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8003d46:	9304      	str	r3, [sp, #16]
 8003d48:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8003d4c:	9303      	str	r3, [sp, #12]
 8003d4e:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8003d52:	9302      	str	r3, [sp, #8]
 8003d54:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	4b4c      	ldr	r3, [pc, #304]	; (8003e94 <HAL_UART_RxCpltCallback+0xdfc>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	4611      	mov	r1, r2
 8003d66:	2002      	movs	r0, #2
 8003d68:	f012 fc0c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				if (FLASH_IF_Read(&_modbusDevice, ModbusDeviceFlashAddresses[devId - 1], sizeof(struct ModbusDevice)) == FLASH_IF_OK) {
 8003d6c:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003d70:	3b01      	subs	r3, #1
 8003d72:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 8003d76:	4931      	ldr	r1, [pc, #196]	; (8003e3c <HAL_UART_RxCpltCallback+0xda4>)
 8003d78:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003d7c:	a820      	add	r0, sp, #128	; 0x80
 8003d7e:	f7fe f9b9 	bl	80020f4 <FLASH_IF_Read>
 8003d82:	bb78      	cbnz	r0, 8003de4 <HAL_UART_RxCpltCallback+0xd4c>
					APP_LOG(TS_OFF, VLEVEL_M, "READ OK\r\n");
 8003d84:	4b2e      	ldr	r3, [pc, #184]	; (8003e40 <HAL_UART_RxCpltCallback+0xda8>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	4611      	mov	r1, r2
 8003d8a:	2002      	movs	r0, #2
 8003d8c:	f012 fbfa 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				if(cmdID == 0x01){
 8003d90:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d02c      	beq.n	8003df2 <HAL_UART_RxCpltCallback+0xd5a>
				if (FLASH_IF_Erase((void *)ModbusDeviceFlashAddresses[devId - 1], FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8003d98:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003da2:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <HAL_UART_RxCpltCallback+0xda4>)
 8003da4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003da8:	f7fe f9c0 	bl	800212c <FLASH_IF_Erase>
 8003dac:	2800      	cmp	r0, #0
 8003dae:	d13c      	bne.n	8003e2a <HAL_UART_RxCpltCallback+0xd92>
					APP_LOG(TS_OFF, VLEVEL_M, "ERASE OK");
 8003db0:	4b39      	ldr	r3, [pc, #228]	; (8003e98 <HAL_UART_RxCpltCallback+0xe00>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	4611      	mov	r1, r2
 8003db6:	2002      	movs	r0, #2
 8003db8:	f012 fbe4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					if(FLASH_IF_Write((void *)ModbusDeviceFlashAddresses[devId - 1], (void *)&_modbusDevice, sizeof(struct ModbusDevice)) == FLASH_IF_OK){
 8003dbc:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 8003dc6:	a920      	add	r1, sp, #128	; 0x80
 8003dc8:	481c      	ldr	r0, [pc, #112]	; (8003e3c <HAL_UART_RxCpltCallback+0xda4>)
 8003dca:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8003dce:	f7fe f975 	bl	80020bc <FLASH_IF_Write>
 8003dd2:	bb10      	cbnz	r0, 8003e1a <HAL_UART_RxCpltCallback+0xd82>
						APP_LOG(TS_OFF, VLEVEL_M, "WRITE OK");
 8003dd4:	4b31      	ldr	r3, [pc, #196]	; (8003e9c <HAL_UART_RxCpltCallback+0xe04>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	4611      	mov	r1, r2
 8003dda:	2002      	movs	r0, #2
 8003ddc:	f012 fbd2 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003de0:	f7ff ba86 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
					APP_LOG(TS_OFF, VLEVEL_M, "READ ERROR\r\n");
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <HAL_UART_RxCpltCallback+0xdd8>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	4611      	mov	r1, r2
 8003dea:	2002      	movs	r0, #2
 8003dec:	f012 fbca 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003df0:	e7ce      	b.n	8003d90 <HAL_UART_RxCpltCallback+0xcf8>
					_modbusDevice.Baudrate = baudRate;
 8003df2:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 8003df6:	f88d 3082 	strb.w	r3, [sp, #130]	; 0x82
					_modbusDevice.Parity   = parity;
 8003dfa:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 8003dfe:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
					_modbusDevice.StopBits = stopBit;
 8003e02:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8003e06:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
					_modbusDevice.DeviceActive = isActive == 0 ? 0 : 1;
 8003e0a:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003e0e:	3b00      	subs	r3, #0
 8003e10:	bf18      	it	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	f88d 3080 	strb.w	r3, [sp, #128]	; 0x80
 8003e18:	e7be      	b.n	8003d98 <HAL_UART_RxCpltCallback+0xd00>
						APP_LOG(TS_OFF, VLEVEL_M, "WRITE ERROR");
 8003e1a:	4b21      	ldr	r3, [pc, #132]	; (8003ea0 <HAL_UART_RxCpltCallback+0xe08>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	4611      	mov	r1, r2
 8003e20:	2002      	movs	r0, #2
 8003e22:	f012 fbaf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003e26:	f7ff ba63 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
					APP_LOG(TS_OFF, VLEVEL_M, "ERASE ERROR");
 8003e2a:	4b1e      	ldr	r3, [pc, #120]	; (8003ea4 <HAL_UART_RxCpltCallback+0xe0c>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	4611      	mov	r1, r2
 8003e30:	2002      	movs	r0, #2
 8003e32:	f012 fba7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003e36:	f7ff ba5b 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
 8003e3a:	bf00      	nop
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	0801c93c 	.word	0x0801c93c
 8003e44:	0801c958 	.word	0x0801c958
 8003e48:	0801c370 	.word	0x0801c370
 8003e4c:	0801c380 	.word	0x0801c380
 8003e50:	0801c390 	.word	0x0801c390
 8003e54:	0801c354 	.word	0x0801c354
 8003e58:	0801c3a0 	.word	0x0801c3a0
 8003e5c:	0801c98c 	.word	0x0801c98c
 8003e60:	0801c990 	.word	0x0801c990
 8003e64:	0801c9b0 	.word	0x0801c9b0
 8003e68:	0801c9c8 	.word	0x0801c9c8
 8003e6c:	0801c280 	.word	0x0801c280
 8003e70:	0801c948 	.word	0x0801c948
 8003e74:	0801c34c 	.word	0x0801c34c
 8003e78:	0801d0b4 	.word	0x0801d0b4
 8003e7c:	0801c9d4 	.word	0x0801c9d4
 8003e80:	0801c9ec 	.word	0x0801c9ec
 8003e84:	0801ca18 	.word	0x0801ca18
 8003e88:	0801ca44 	.word	0x0801ca44
 8003e8c:	20000d1c 	.word	0x20000d1c
 8003e90:	0801cab4 	.word	0x0801cab4
 8003e94:	0801ca68 	.word	0x0801ca68
 8003e98:	0801c31c 	.word	0x0801c31c
 8003e9c:	0801c328 	.word	0x0801c328
 8003ea0:	0801c334 	.word	0x0801c334
 8003ea4:	0801c340 	.word	0x0801c340
			int parsed = sscanf(buffer, "set segment-params %u %u %u %u %u %x %x %x %x %x ", &cmdID, &devId, &segId, &enSegment, &sendNow, &validAdd_1, &validAdd_2, &validAdd_3, &validAdd_4, &cmdSize);
 8003ea8:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
 8003eac:	9307      	str	r3, [sp, #28]
 8003eae:	f10d 047e 	add.w	r4, sp, #126	; 0x7e
 8003eb2:	9406      	str	r4, [sp, #24]
 8003eb4:	f10d 067d 	add.w	r6, sp, #125	; 0x7d
 8003eb8:	9605      	str	r6, [sp, #20]
 8003eba:	ad1f      	add	r5, sp, #124	; 0x7c
 8003ebc:	9504      	str	r5, [sp, #16]
 8003ebe:	f10d 087b 	add.w	r8, sp, #123	; 0x7b
 8003ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec6:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 8003eca:	9302      	str	r3, [sp, #8]
 8003ecc:	f10d 0379 	add.w	r3, sp, #121	; 0x79
 8003ed0:	9301      	str	r3, [sp, #4]
 8003ed2:	ab1e      	add	r3, sp, #120	; 0x78
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	f10d 0377 	add.w	r3, sp, #119	; 0x77
 8003eda:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8003ede:	49a4      	ldr	r1, [pc, #656]	; (8004170 <HAL_UART_RxCpltCallback+0x10d8>)
 8003ee0:	48a4      	ldr	r0, [pc, #656]	; (8004174 <HAL_UART_RxCpltCallback+0x10dc>)
 8003ee2:	f014 f907 	bl	80180f4 <siscanf>
			_validAddr |= ((uint32_t)validAdd_1 << 24);
 8003ee6:	f89d 207b 	ldrb.w	r2, [sp, #123]	; 0x7b
			_validAddr |= ((uint32_t)validAdd_2 << 16);
 8003eea:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 8003eee:	040d      	lsls	r5, r1, #16
 8003ef0:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
			_validAddr |= ((uint32_t)validAdd_3 << 8);
 8003ef4:	f89d 607d 	ldrb.w	r6, [sp, #125]	; 0x7d
 8003ef8:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
			_validAddr |= validAdd_4;
 8003efc:	f89d 407e 	ldrb.w	r4, [sp, #126]	; 0x7e
 8003f00:	4325      	orrs	r5, r4
			if(parsed == 10){
 8003f02:	280a      	cmp	r0, #10
 8003f04:	d007      	beq.n	8003f16 <HAL_UART_RxCpltCallback+0xe7e>
				APP_LOG(TS_OFF, VLEVEL_M, "Error: Failed to parse input string \r\n");
 8003f06:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <HAL_UART_RxCpltCallback+0x10e0>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	2002      	movs	r0, #2
 8003f0e:	f012 fb39 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003f12:	f7ff b9ed 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
				APP_LOG(TS_OFF, VLEVEL_M, "cmdID: %u, devId: %u, segId: %u, enSegment: %u, sendNow: %u, validAdd_1: %02X, validAdd_2: %02X, validAdd_3: %02X, validAdd_4: %02X, cmdSize: %u \r\n", cmdID, devId, segId, enSegment, sendNow, sendNow, validAdd_1, validAdd_2, validAdd_3, validAdd_4, cmdSize);
 8003f16:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 8003f1a:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
 8003f1e:	900a      	str	r0, [sp, #40]	; 0x28
 8003f20:	9409      	str	r4, [sp, #36]	; 0x24
 8003f22:	9608      	str	r6, [sp, #32]
 8003f24:	9107      	str	r1, [sp, #28]
 8003f26:	9206      	str	r2, [sp, #24]
 8003f28:	9305      	str	r3, [sp, #20]
 8003f2a:	9304      	str	r3, [sp, #16]
 8003f2c:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8003f30:	9303      	str	r3, [sp, #12]
 8003f32:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8003f36:	9302      	str	r3, [sp, #8]
 8003f38:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8003f3c:	9301      	str	r3, [sp, #4]
 8003f3e:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 8003f42:	9300      	str	r3, [sp, #0]
 8003f44:	4b8d      	ldr	r3, [pc, #564]	; (800417c <HAL_UART_RxCpltCallback+0x10e4>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	4611      	mov	r1, r2
 8003f4a:	2002      	movs	r0, #2
 8003f4c:	f012 fb1a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				uint8_t *cmdRaw = (uint8_t*)malloc(cmdSize * sizeof(uint8_t));
 8003f50:	f89d 007f 	ldrb.w	r0, [sp, #127]	; 0x7f
 8003f54:	f013 f8ca 	bl	80170ec <malloc>
 8003f58:	4606      	mov	r6, r0
				for(uint8_t i = 0; i < cmdSize; i++){
 8003f5a:	2400      	movs	r4, #0
 8003f5c:	e00a      	b.n	8003f74 <HAL_UART_RxCpltCallback+0xedc>
					sscanf(&buffer[49 + (i * 3)], "%x ", (unsigned int *)&cmdRaw[i]);
 8003f5e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003f62:	3331      	adds	r3, #49	; 0x31
 8003f64:	1932      	adds	r2, r6, r4
 8003f66:	4986      	ldr	r1, [pc, #536]	; (8004180 <HAL_UART_RxCpltCallback+0x10e8>)
 8003f68:	4882      	ldr	r0, [pc, #520]	; (8004174 <HAL_UART_RxCpltCallback+0x10dc>)
 8003f6a:	4418      	add	r0, r3
 8003f6c:	f014 f8c2 	bl	80180f4 <siscanf>
				for(uint8_t i = 0; i < cmdSize; i++){
 8003f70:	3401      	adds	r4, #1
 8003f72:	b2e4      	uxtb	r4, r4
 8003f74:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	d8f0      	bhi.n	8003f5e <HAL_UART_RxCpltCallback+0xec6>
				APP_LOG(TS_OFF, VLEVEL_M, "CMD RAW: ");
 8003f7c:	4b81      	ldr	r3, [pc, #516]	; (8004184 <HAL_UART_RxCpltCallback+0x10ec>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	4611      	mov	r1, r2
 8003f82:	2002      	movs	r0, #2
 8003f84:	f012 fafe 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				for (int j = 0; j < cmdSize; j++) {
 8003f88:	e008      	b.n	8003f9c <HAL_UART_RxCpltCallback+0xf04>
					APP_LOG(TS_OFF, VLEVEL_M, "%02X ", cmdRaw[j]);
 8003f8a:	5df3      	ldrb	r3, [r6, r7]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	4b7e      	ldr	r3, [pc, #504]	; (8004188 <HAL_UART_RxCpltCallback+0x10f0>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	4611      	mov	r1, r2
 8003f94:	2002      	movs	r0, #2
 8003f96:	f012 faf5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				for (int j = 0; j < cmdSize; j++) {
 8003f9a:	3701      	adds	r7, #1
 8003f9c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8003fa0:	42bb      	cmp	r3, r7
 8003fa2:	dcf2      	bgt.n	8003f8a <HAL_UART_RxCpltCallback+0xef2>
				APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8003fa4:	4b79      	ldr	r3, [pc, #484]	; (800418c <HAL_UART_RxCpltCallback+0x10f4>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	4611      	mov	r1, r2
 8003faa:	2002      	movs	r0, #2
 8003fac:	f012 faea 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				if (FLASH_IF_Read(&_modbusDevice, ModbusDeviceFlashAddresses[devId - 1], sizeof(struct ModbusDevice)) == FLASH_IF_OK) {
 8003fb0:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 8003fba:	4975      	ldr	r1, [pc, #468]	; (8004190 <HAL_UART_RxCpltCallback+0x10f8>)
 8003fbc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8003fc0:	a820      	add	r0, sp, #128	; 0x80
 8003fc2:	f7fe f897 	bl	80020f4 <FLASH_IF_Read>
 8003fc6:	b938      	cbnz	r0, 8003fd8 <HAL_UART_RxCpltCallback+0xf40>
					APP_LOG(TS_OFF, VLEVEL_M, "READ OK\r\n");
 8003fc8:	4b72      	ldr	r3, [pc, #456]	; (8004194 <HAL_UART_RxCpltCallback+0x10fc>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	4611      	mov	r1, r2
 8003fce:	2002      	movs	r0, #2
 8003fd0:	f012 fad8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				for(uint8_t i = 0; i < cmdSize; i++){
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e012      	b.n	8003ffe <HAL_UART_RxCpltCallback+0xf66>
					APP_LOG(TS_OFF, VLEVEL_M, "READ ERROR\r\n");
 8003fd8:	4b6f      	ldr	r3, [pc, #444]	; (8004198 <HAL_UART_RxCpltCallback+0x1100>)
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4611      	mov	r1, r2
 8003fde:	2002      	movs	r0, #2
 8003fe0:	f012 fad0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8003fe4:	e7f6      	b.n	8003fd4 <HAL_UART_RxCpltCallback+0xf3c>
					_modbusDevice.Segment[segId - 1].cmdRaw[i] = cmdRaw[i];
 8003fe6:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8003fea:	3a01      	subs	r2, #1
 8003fec:	5cf1      	ldrb	r1, [r6, r3]
 8003fee:	2038      	movs	r0, #56	; 0x38
 8003ff0:	ac20      	add	r4, sp, #128	; 0x80
 8003ff2:	fb00 4202 	mla	r2, r0, r2, r4
 8003ff6:	441a      	add	r2, r3
 8003ff8:	7251      	strb	r1, [r2, #9]
				for(uint8_t i = 0; i < cmdSize; i++){
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f89d 207f 	ldrb.w	r2, [sp, #127]	; 0x7f
 8004002:	429a      	cmp	r2, r3
 8004004:	d8ef      	bhi.n	8003fe6 <HAL_UART_RxCpltCallback+0xf4e>
				free(cmdRaw);
 8004006:	4630      	mov	r0, r6
 8004008:	f013 f878 	bl	80170fc <free>
				_modbusDevice.Segment[segId - 1].cmdSize        = cmdSize;
 800400c:	f89d 2078 	ldrb.w	r2, [sp, #120]	; 0x78
 8004010:	1e53      	subs	r3, r2, #1
 8004012:	a820      	add	r0, sp, #128	; 0x80
 8004014:	2438      	movs	r4, #56	; 0x38
 8004016:	fb04 0303 	mla	r3, r4, r3, r0
 800401a:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
 800401e:	7219      	strb	r1, [r3, #8]
				_modbusDevice.Segment[segId - 1].sendNow        = sendNow == 0 ? 0 : 1;
 8004020:	f89d 107a 	ldrb.w	r1, [sp, #122]	; 0x7a
 8004024:	3900      	subs	r1, #0
 8004026:	bf18      	it	ne
 8004028:	2101      	movne	r1, #1
 800402a:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
				_modbusDevice.Segment[segId - 1].validAddresses = _validAddr;
 800402e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004032:	631d      	str	r5, [r3, #48]	; 0x30
 8004034:	2300      	movs	r3, #0
 8004036:	604b      	str	r3, [r1, #4]
				_modbusDevice.Segment[segId - 1].enableSegment  = enSegment == 0 ? 0 : 1;
 8004038:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 800403c:	3b00      	subs	r3, #0
 800403e:	bf18      	it	ne
 8004040:	2301      	movne	r3, #1
 8004042:	fb04 f202 	mul.w	r2, r4, r2
 8004046:	5483      	strb	r3, [r0, r2]
				if (FLASH_IF_Erase((void *)ModbusDeviceFlashAddresses[devId - 1], FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8004048:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 800404c:	3b01      	subs	r3, #1
 800404e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004052:	4a4f      	ldr	r2, [pc, #316]	; (8004190 <HAL_UART_RxCpltCallback+0x10f8>)
 8004054:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004058:	f7fe f868 	bl	800212c <FLASH_IF_Erase>
 800405c:	bb08      	cbnz	r0, 80040a2 <HAL_UART_RxCpltCallback+0x100a>
					APP_LOG(TS_OFF, VLEVEL_M, "ERASE OK");
 800405e:	4b4f      	ldr	r3, [pc, #316]	; (800419c <HAL_UART_RxCpltCallback+0x1104>)
 8004060:	2200      	movs	r2, #0
 8004062:	4611      	mov	r1, r2
 8004064:	2002      	movs	r0, #2
 8004066:	f012 fa8d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					if(FLASH_IF_Write((void *)ModbusDeviceFlashAddresses[devId - 1], (void *)&_modbusDevice, sizeof(struct ModbusDevice)) == FLASH_IF_OK){
 800406a:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 800406e:	3b01      	subs	r3, #1
 8004070:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 8004074:	a920      	add	r1, sp, #128	; 0x80
 8004076:	4846      	ldr	r0, [pc, #280]	; (8004190 <HAL_UART_RxCpltCallback+0x10f8>)
 8004078:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800407c:	f7fe f81e 	bl	80020bc <FLASH_IF_Write>
 8004080:	b938      	cbnz	r0, 8004092 <HAL_UART_RxCpltCallback+0xffa>
						APP_LOG(TS_OFF, VLEVEL_M, "WRITE OK");
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_UART_RxCpltCallback+0x1108>)
 8004084:	2200      	movs	r2, #0
 8004086:	4611      	mov	r1, r2
 8004088:	2002      	movs	r0, #2
 800408a:	f012 fa7b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800408e:	f7ff b92f 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
						APP_LOG(TS_OFF, VLEVEL_M, "WRITE ERROR");
 8004092:	4b44      	ldr	r3, [pc, #272]	; (80041a4 <HAL_UART_RxCpltCallback+0x110c>)
 8004094:	2200      	movs	r2, #0
 8004096:	4611      	mov	r1, r2
 8004098:	2002      	movs	r0, #2
 800409a:	f012 fa73 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800409e:	f7ff b927 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
					APP_LOG(TS_OFF, VLEVEL_M, "ERASE ERROR");
 80040a2:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_UART_RxCpltCallback+0x1110>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	4611      	mov	r1, r2
 80040a8:	2002      	movs	r0, #2
 80040aa:	f012 fa6b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80040ae:	f7ff b91f 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			sscanf(&buffer[24], "%u ", &devID);
 80040b2:	aa20      	add	r2, sp, #128	; 0x80
 80040b4:	493d      	ldr	r1, [pc, #244]	; (80041ac <HAL_UART_RxCpltCallback+0x1114>)
 80040b6:	483e      	ldr	r0, [pc, #248]	; (80041b0 <HAL_UART_RxCpltCallback+0x1118>)
 80040b8:	f014 f81c 	bl	80180f4 <siscanf>
			clearModbusParams(devID);
 80040bc:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
 80040c0:	f7fd fa8a 	bl	80015d8 <clearModbusParams>
 80040c4:	f7ff b914 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			HAL_NVIC_SystemReset();
 80040c8:	f004 fb3e 	bl	8008748 <HAL_NVIC_SystemReset>
 80040cc:	f7ff b910 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			int parsed = sscanf(buffer, "set slot-params %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x ", &cmdID, &slotId, &dataType, &valueStartIndex, &THActive_1, &THActive_2, &SpikeUp_1, &SpikeUp_2, &SpikeUp_3, &SpikeUp_4, &SpikeDown_1, &SpikeDown_2, &SpikeDown_3, &SpikeDown_4, &THHigh_1, &THHigh_2, &THHigh_3, &THHigh_4, &THLow_1, &THLow_2, &THLow_3, &THLow_4, &onChange, &cmdSize);
 80040d0:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
 80040d4:	9315      	str	r3, [sp, #84]	; 0x54
 80040d6:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 80040da:	9314      	str	r3, [sp, #80]	; 0x50
 80040dc:	f10d 037d 	add.w	r3, sp, #125	; 0x7d
 80040e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80040e2:	ab1f      	add	r3, sp, #124	; 0x7c
 80040e4:	9312      	str	r3, [sp, #72]	; 0x48
 80040e6:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 80040ea:	9311      	str	r3, [sp, #68]	; 0x44
 80040ec:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 80040f0:	9310      	str	r3, [sp, #64]	; 0x40
 80040f2:	f10d 0379 	add.w	r3, sp, #121	; 0x79
 80040f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80040f8:	ab1e      	add	r3, sp, #120	; 0x78
 80040fa:	930e      	str	r3, [sp, #56]	; 0x38
 80040fc:	f10d 0377 	add.w	r3, sp, #119	; 0x77
 8004100:	930d      	str	r3, [sp, #52]	; 0x34
 8004102:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8004106:	930c      	str	r3, [sp, #48]	; 0x30
 8004108:	f10d 0375 	add.w	r3, sp, #117	; 0x75
 800410c:	930b      	str	r3, [sp, #44]	; 0x2c
 800410e:	ab1d      	add	r3, sp, #116	; 0x74
 8004110:	930a      	str	r3, [sp, #40]	; 0x28
 8004112:	f10d 0373 	add.w	r3, sp, #115	; 0x73
 8004116:	9309      	str	r3, [sp, #36]	; 0x24
 8004118:	f10d 0372 	add.w	r3, sp, #114	; 0x72
 800411c:	9308      	str	r3, [sp, #32]
 800411e:	f10d 0371 	add.w	r3, sp, #113	; 0x71
 8004122:	9307      	str	r3, [sp, #28]
 8004124:	ab1c      	add	r3, sp, #112	; 0x70
 8004126:	9306      	str	r3, [sp, #24]
 8004128:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 800412c:	9305      	str	r3, [sp, #20]
 800412e:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004132:	9304      	str	r3, [sp, #16]
 8004134:	f10d 036d 	add.w	r3, sp, #109	; 0x6d
 8004138:	9303      	str	r3, [sp, #12]
 800413a:	ab1b      	add	r3, sp, #108	; 0x6c
 800413c:	9302      	str	r3, [sp, #8]
 800413e:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	f10d 036a 	add.w	r3, sp, #106	; 0x6a
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	f10d 0369 	add.w	r3, sp, #105	; 0x69
 800414e:	aa1a      	add	r2, sp, #104	; 0x68
 8004150:	4918      	ldr	r1, [pc, #96]	; (80041b4 <HAL_UART_RxCpltCallback+0x111c>)
 8004152:	4808      	ldr	r0, [pc, #32]	; (8004174 <HAL_UART_RxCpltCallback+0x10dc>)
 8004154:	f013 ffce 	bl	80180f4 <siscanf>
			if(parsed == 24){
 8004158:	2818      	cmp	r0, #24
 800415a:	d02f      	beq.n	80041bc <HAL_UART_RxCpltCallback+0x1124>
				APP_LOG(TS_OFF, VLEVEL_M, "Invalid Input \r\n", parsed);
 800415c:	9000      	str	r0, [sp, #0]
 800415e:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <HAL_UART_RxCpltCallback+0x1120>)
 8004160:	2200      	movs	r2, #0
 8004162:	4611      	mov	r1, r2
 8004164:	2002      	movs	r0, #2
 8004166:	f012 fa0d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800416a:	f7ff b8c1 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
 800416e:	bf00      	nop
 8004170:	0801caf0 	.word	0x0801caf0
 8004174:	20000d1c 	.word	0x20000d1c
 8004178:	0801cab4 	.word	0x0801cab4
 800417c:	0801cb24 	.word	0x0801cb24
 8004180:	0801cbb8 	.word	0x0801cbb8
 8004184:	0801cbbc 	.word	0x0801cbbc
 8004188:	0801c280 	.word	0x0801c280
 800418c:	0801d0b4 	.word	0x0801d0b4
 8004190:	20000000 	.word	0x20000000
 8004194:	0801c93c 	.word	0x0801c93c
 8004198:	0801c948 	.word	0x0801c948
 800419c:	0801c31c 	.word	0x0801c31c
 80041a0:	0801c328 	.word	0x0801c328
 80041a4:	0801c334 	.word	0x0801c334
 80041a8:	0801c340 	.word	0x0801c340
 80041ac:	0801cbe4 	.word	0x0801cbe4
 80041b0:	20000d34 	.word	0x20000d34
 80041b4:	0801cc10 	.word	0x0801cc10
 80041b8:	0801ccd4 	.word	0x0801ccd4
				APP_LOG(TS_OFF, VLEVEL_M, "NUM PARSED DATA: %d \r\n", parsed);
 80041bc:	9000      	str	r0, [sp, #0]
 80041be:	4bbe      	ldr	r3, [pc, #760]	; (80044b8 <HAL_UART_RxCpltCallback+0x1420>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	4611      	mov	r1, r2
 80041c4:	2002      	movs	r0, #2
 80041c6:	f012 f9dd 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "SLOT ID: %d \r\n", slotId);
 80041ca:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	4bba      	ldr	r3, [pc, #744]	; (80044bc <HAL_UART_RxCpltCallback+0x1424>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	4611      	mov	r1, r2
 80041d6:	2002      	movs	r0, #2
 80041d8:	f012 f9d4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "CMD ID: %02X \r\n", cmdID);
 80041dc:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	4bb7      	ldr	r3, [pc, #732]	; (80044c0 <HAL_UART_RxCpltCallback+0x1428>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	4611      	mov	r1, r2
 80041e8:	2002      	movs	r0, #2
 80041ea:	f012 f9cb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "CMD SIZE: %d \r\n", cmdSize);
 80041ee:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	4bb3      	ldr	r3, [pc, #716]	; (80044c4 <HAL_UART_RxCpltCallback+0x142c>)
 80041f6:	2200      	movs	r2, #0
 80041f8:	4611      	mov	r1, r2
 80041fa:	2002      	movs	r0, #2
 80041fc:	f012 f9c2 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "DataType: %d \r\n", dataType);
 8004200:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	4bb0      	ldr	r3, [pc, #704]	; (80044c8 <HAL_UART_RxCpltCallback+0x1430>)
 8004208:	2200      	movs	r2, #0
 800420a:	4611      	mov	r1, r2
 800420c:	2002      	movs	r0, #2
 800420e:	f012 f9b9 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "Data Start Index: %d \r\n", valueStartIndex);
 8004212:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	4bac      	ldr	r3, [pc, #688]	; (80044cc <HAL_UART_RxCpltCallback+0x1434>)
 800421a:	2200      	movs	r2, #0
 800421c:	4611      	mov	r1, r2
 800421e:	2002      	movs	r0, #2
 8004220:	f012 f9b0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "Threshold Active: %02X %02X \r\n", THActive_1, THActive_2);
 8004224:	f89d 306d 	ldrb.w	r3, [sp, #109]	; 0x6d
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	4ba7      	ldr	r3, [pc, #668]	; (80044d0 <HAL_UART_RxCpltCallback+0x1438>)
 8004232:	2200      	movs	r2, #0
 8004234:	4611      	mov	r1, r2
 8004236:	2002      	movs	r0, #2
 8004238:	f012 f9a4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "Spike Up TH: %02X %02X %02X %02X \r\n", SpikeUp_1, SpikeUp_2, SpikeUp_3, SpikeUp_4);
 800423c:	f89d 3071 	ldrb.w	r3, [sp, #113]	; 0x71
 8004240:	9303      	str	r3, [sp, #12]
 8004242:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8004246:	9302      	str	r3, [sp, #8]
 8004248:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	4b9f      	ldr	r3, [pc, #636]	; (80044d4 <HAL_UART_RxCpltCallback+0x143c>)
 8004256:	2200      	movs	r2, #0
 8004258:	4611      	mov	r1, r2
 800425a:	2002      	movs	r0, #2
 800425c:	f012 f992 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "Spike Down TH: %02X %02X %02X %02X \r\n", SpikeDown_1, SpikeDown_2, SpikeDown_3, SpikeDown_4);
 8004260:	f89d 3075 	ldrb.w	r3, [sp, #117]	; 0x75
 8004264:	9303      	str	r3, [sp, #12]
 8004266:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 800426a:	9302      	str	r3, [sp, #8]
 800426c:	f89d 3073 	ldrb.w	r3, [sp, #115]	; 0x73
 8004270:	9301      	str	r3, [sp, #4]
 8004272:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4b97      	ldr	r3, [pc, #604]	; (80044d8 <HAL_UART_RxCpltCallback+0x1440>)
 800427a:	2200      	movs	r2, #0
 800427c:	4611      	mov	r1, r2
 800427e:	2002      	movs	r0, #2
 8004280:	f012 f980 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "Threshold High TH: %02X %02X %02X %02X \r\n", THHigh_1, THHigh_2, THHigh_3, THHigh_4);
 8004284:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 8004288:	9303      	str	r3, [sp, #12]
 800428a:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 800428e:	9302      	str	r3, [sp, #8]
 8004290:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	4b8f      	ldr	r3, [pc, #572]	; (80044dc <HAL_UART_RxCpltCallback+0x1444>)
 800429e:	2200      	movs	r2, #0
 80042a0:	4611      	mov	r1, r2
 80042a2:	2002      	movs	r0, #2
 80042a4:	f012 f96e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "Threshold Low TH: %02X %02X %02X %02X \r\n", THLow_1, THLow_2, THLow_3, THLow_4);
 80042a8:	f89d 307d 	ldrb.w	r3, [sp, #125]	; 0x7d
 80042ac:	9303      	str	r3, [sp, #12]
 80042ae:	f89d 307c 	ldrb.w	r3, [sp, #124]	; 0x7c
 80042b2:	9302      	str	r3, [sp, #8]
 80042b4:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 80042b8:	9301      	str	r3, [sp, #4]
 80042ba:	f89d 307a 	ldrb.w	r3, [sp, #122]	; 0x7a
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	4b87      	ldr	r3, [pc, #540]	; (80044e0 <HAL_UART_RxCpltCallback+0x1448>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	4611      	mov	r1, r2
 80042c6:	2002      	movs	r0, #2
 80042c8:	f012 f95c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "On Change: %s \r\n", onChange == 1 ? "true" : "false");
 80042cc:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d023      	beq.n	800431c <HAL_UART_RxCpltCallback+0x1284>
 80042d4:	4b83      	ldr	r3, [pc, #524]	; (80044e4 <HAL_UART_RxCpltCallback+0x144c>)
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	4b83      	ldr	r3, [pc, #524]	; (80044e8 <HAL_UART_RxCpltCallback+0x1450>)
 80042da:	2200      	movs	r2, #0
 80042dc:	4611      	mov	r1, r2
 80042de:	2002      	movs	r0, #2
 80042e0:	f012 f950 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				uint8_t *cmdRaw = (uint8_t*)malloc(cmdSize * sizeof(uint8_t));
 80042e4:	f89d 407f 	ldrb.w	r4, [sp, #127]	; 0x7f
 80042e8:	4620      	mov	r0, r4
 80042ea:	f012 feff 	bl	80170ec <malloc>
				if (cmdRaw != NULL) {
 80042ee:	4605      	mov	r5, r0
 80042f0:	b118      	cbz	r0, 80042fa <HAL_UART_RxCpltCallback+0x1262>
				    memset(cmdRaw, 0, cmdSize * sizeof(uint8_t));
 80042f2:	4622      	mov	r2, r4
 80042f4:	2100      	movs	r1, #0
 80042f6:	f014 f801 	bl	80182fc <memset>
				APP_LOG(TS_OFF, VLEVEL_M, "On Change: %s \r\n", onChange == 1 ? "true" : "false");
 80042fa:	2400      	movs	r4, #0
				for(uint8_t i = 0; i < cmdSize; i++){
 80042fc:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8004300:	42a3      	cmp	r3, r4
 8004302:	d90d      	bls.n	8004320 <HAL_UART_RxCpltCallback+0x1288>
					sscanf(&buffer[88 + (i * 3)], "%x ", (unsigned int *)&cmdRaw[i]);
 8004304:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004308:	3358      	adds	r3, #88	; 0x58
 800430a:	192a      	adds	r2, r5, r4
 800430c:	4977      	ldr	r1, [pc, #476]	; (80044ec <HAL_UART_RxCpltCallback+0x1454>)
 800430e:	4878      	ldr	r0, [pc, #480]	; (80044f0 <HAL_UART_RxCpltCallback+0x1458>)
 8004310:	4418      	add	r0, r3
 8004312:	f013 feef 	bl	80180f4 <siscanf>
				for(uint8_t i = 0; i < cmdSize; i++){
 8004316:	3401      	adds	r4, #1
 8004318:	b2e4      	uxtb	r4, r4
 800431a:	e7ef      	b.n	80042fc <HAL_UART_RxCpltCallback+0x1264>
				APP_LOG(TS_OFF, VLEVEL_M, "On Change: %s \r\n", onChange == 1 ? "true" : "false");
 800431c:	4b75      	ldr	r3, [pc, #468]	; (80044f4 <HAL_UART_RxCpltCallback+0x145c>)
 800431e:	e7da      	b.n	80042d6 <HAL_UART_RxCpltCallback+0x123e>
				APP_LOG(TS_OFF, VLEVEL_M, "CMD RAW: ");
 8004320:	4b75      	ldr	r3, [pc, #468]	; (80044f8 <HAL_UART_RxCpltCallback+0x1460>)
 8004322:	2200      	movs	r2, #0
 8004324:	4611      	mov	r1, r2
 8004326:	2002      	movs	r0, #2
 8004328:	f012 f92c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				for (int j = 0; j < cmdSize; j++) {
 800432c:	f89d 307f 	ldrb.w	r3, [sp, #127]	; 0x7f
 8004330:	42b3      	cmp	r3, r6
 8004332:	dd09      	ble.n	8004348 <HAL_UART_RxCpltCallback+0x12b0>
					APP_LOG(TS_OFF, VLEVEL_M, "%02X ", cmdRaw[j]);
 8004334:	5dab      	ldrb	r3, [r5, r6]
 8004336:	9300      	str	r3, [sp, #0]
 8004338:	4b70      	ldr	r3, [pc, #448]	; (80044fc <HAL_UART_RxCpltCallback+0x1464>)
 800433a:	2200      	movs	r2, #0
 800433c:	4611      	mov	r1, r2
 800433e:	2002      	movs	r0, #2
 8004340:	f012 f920 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				for (int j = 0; j < cmdSize; j++) {
 8004344:	3601      	adds	r6, #1
 8004346:	e7f1      	b.n	800432c <HAL_UART_RxCpltCallback+0x1294>
				APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8004348:	4b6d      	ldr	r3, [pc, #436]	; (8004500 <HAL_UART_RxCpltCallback+0x1468>)
 800434a:	2200      	movs	r2, #0
 800434c:	4611      	mov	r1, r2
 800434e:	2002      	movs	r0, #2
 8004350:	f012 f918 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				if (FLASH_IF_Read(&MonitoringSlotNVM, ModbusDeviceFlashAddresses[slotId - 1], sizeof(MonitoringSlotNVM)) == FLASH_IF_OK) {
 8004354:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 8004358:	3b01      	subs	r3, #1
 800435a:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 800435e:	4969      	ldr	r1, [pc, #420]	; (8004504 <HAL_UART_RxCpltCallback+0x146c>)
 8004360:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004364:	a820      	add	r0, sp, #128	; 0x80
 8004366:	f7fd fec5 	bl	80020f4 <FLASH_IF_Read>
 800436a:	2800      	cmp	r0, #0
 800436c:	f040 8104 	bne.w	8004578 <HAL_UART_RxCpltCallback+0x14e0>
				  MonitoringSlotNVM.MonitoringSlot.cmdSize = cmdSize;
 8004370:	f89d 107f 	ldrb.w	r1, [sp, #127]	; 0x7f
 8004374:	f88d 1428 	strb.w	r1, [sp, #1064]	; 0x428
				  for(uint8_t i = 0; i < cmdSize; i++){
 8004378:	2300      	movs	r3, #0
 800437a:	e006      	b.n	800438a <HAL_UART_RxCpltCallback+0x12f2>
					  MonitoringSlotNVM.MonitoringSlot.modbusCMD[i] = cmdRaw[i];
 800437c:	5ce8      	ldrb	r0, [r5, r3]
 800437e:	aa20      	add	r2, sp, #128	; 0x80
 8004380:	441a      	add	r2, r3
 8004382:	f882 0388 	strb.w	r0, [r2, #904]	; 0x388
				  for(uint8_t i = 0; i < cmdSize; i++){
 8004386:	3301      	adds	r3, #1
 8004388:	b2db      	uxtb	r3, r3
 800438a:	4299      	cmp	r1, r3
 800438c:	d8f6      	bhi.n	800437c <HAL_UART_RxCpltCallback+0x12e4>
				  free(cmdRaw);
 800438e:	4628      	mov	r0, r5
 8004390:	f012 feb4 	bl	80170fc <free>
				  MonitoringSlotNVM.MonitoringSlot.dataType = dataType;
 8004394:	f89d 306a 	ldrb.w	r3, [sp, #106]	; 0x6a
 8004398:	f88d 3429 	strb.w	r3, [sp, #1065]	; 0x429
				  MonitoringSlotNVM.MonitoringSlot.valueStartIndex = valueStartIndex;
 800439c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80043a0:	f88d 342a 	strb.w	r3, [sp, #1066]	; 0x42a
				  MonitoringSlotNVM.MonitoringSlot.ThresholdActive = (THActive_1 << 8) | THActive_2;
 80043a4:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
 80043a8:	f89d 306d 	ldrb.w	r3, [sp, #109]	; 0x6d
 80043ac:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80043b0:	f8ad 3436 	strh.w	r3, [sp, #1078]	; 0x436
				  TH_High.buff[0] = THHigh_1;            // 30.00 degrees celsius
 80043b4:	f89d 3076 	ldrb.w	r3, [sp, #118]	; 0x76
 80043b8:	2200      	movs	r2, #0
 80043ba:	f363 0207 	bfi	r2, r3, #0, #8
				  TH_High.buff[1] = THHigh_2;
 80043be:	f89d 3077 	ldrb.w	r3, [sp, #119]	; 0x77
 80043c2:	f363 220f 	bfi	r2, r3, #8, #8
				  TH_High.buff[2] = THHigh_3;
 80043c6:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 80043ca:	f363 4217 	bfi	r2, r3, #16, #8
				  TH_High.buff[3] = THHigh_4;
 80043ce:	f89d 3079 	ldrb.w	r3, [sp, #121]	; 0x79
 80043d2:	f363 621f 	bfi	r2, r3, #24, #8
				  TH_Low.buff[0] = THLow_1;              // 21.50 degrees celsius
 80043d6:	f89d 107a 	ldrb.w	r1, [sp, #122]	; 0x7a
 80043da:	2300      	movs	r3, #0
 80043dc:	f361 0307 	bfi	r3, r1, #0, #8
				  TH_Low.buff[1] = THLow_2;
 80043e0:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
 80043e4:	f361 230f 	bfi	r3, r1, #8, #8
				  TH_Low.buff[2] = THLow_3;
 80043e8:	f89d 107c 	ldrb.w	r1, [sp, #124]	; 0x7c
 80043ec:	f361 4317 	bfi	r3, r1, #16, #8
				  TH_Low.buff[3] = THLow_4;
 80043f0:	f89d 107d 	ldrb.w	r1, [sp, #125]	; 0x7d
 80043f4:	f361 631f 	bfi	r3, r1, #24, #8
				  TH_SpikeUp.buff[0] = SpikeUp_1;        // +3 degree Celcius
 80043f8:	f89d 106e 	ldrb.w	r1, [sp, #110]	; 0x6e
 80043fc:	2000      	movs	r0, #0
 80043fe:	f361 0007 	bfi	r0, r1, #0, #8
				  TH_SpikeUp.buff[1] = SpikeUp_2;
 8004402:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8004406:	f361 200f 	bfi	r0, r1, #8, #8
				  TH_SpikeUp.buff[2] = SpikeUp_3;
 800440a:	f89d 1070 	ldrb.w	r1, [sp, #112]	; 0x70
 800440e:	f361 4017 	bfi	r0, r1, #16, #8
				  TH_SpikeUp.buff[3] = SpikeUp_4;
 8004412:	f89d 1071 	ldrb.w	r1, [sp, #113]	; 0x71
 8004416:	f361 601f 	bfi	r0, r1, #24, #8
				  TH_SpikeDown.buff[0] = SpikeDown_1;    // -3 degree Celcius
 800441a:	f89d 4072 	ldrb.w	r4, [sp, #114]	; 0x72
 800441e:	2100      	movs	r1, #0
 8004420:	f364 0107 	bfi	r1, r4, #0, #8
				  TH_SpikeDown.buff[1] = SpikeDown_2;
 8004424:	f89d 4073 	ldrb.w	r4, [sp, #115]	; 0x73
 8004428:	f364 210f 	bfi	r1, r4, #8, #8
				  TH_SpikeDown.buff[2] = SpikeDown_3;
 800442c:	f89d 4074 	ldrb.w	r4, [sp, #116]	; 0x74
 8004430:	f364 4117 	bfi	r1, r4, #16, #8
				  TH_SpikeDown.buff[3] = SpikeDown_4;
 8004434:	f89d 4075 	ldrb.w	r4, [sp, #117]	; 0x75
 8004438:	f364 611f 	bfi	r1, r4, #24, #8
				  MonitoringSlotNVM.MonitoringSlot.SpikeUp = TH_SpikeUp;
 800443c:	f8cd 0438 	str.w	r0, [sp, #1080]	; 0x438
				  MonitoringSlotNVM.MonitoringSlot.SpikeDown = TH_SpikeDown;
 8004440:	f8cd 143c 	str.w	r1, [sp, #1084]	; 0x43c
				  MonitoringSlotNVM.MonitoringSlot.thresholdHigh = TH_High;
 8004444:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
				  MonitoringSlotNVM.MonitoringSlot.thresholdLow = TH_Low;
 8004448:	f8cd 3444 	str.w	r3, [sp, #1092]	; 0x444
				  MonitoringSlotNVM.MonitoringSlot.onChange = onChange;
 800444c:	f89d 307e 	ldrb.w	r3, [sp, #126]	; 0x7e
 8004450:	3b00      	subs	r3, #0
 8004452:	bf18      	it	ne
 8004454:	2301      	movne	r3, #1
 8004456:	f88d 3448 	strb.w	r3, [sp, #1096]	; 0x448
				  MonitoringSlotNVM.MonitoringSlot.triggerFlagValue = false;
 800445a:	2300      	movs	r3, #0
 800445c:	f88d 3449 	strb.w	r3, [sp, #1097]	; 0x449
					if (FLASH_IF_Erase((void *)ModbusDeviceFlashAddresses[slotId - 1], FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8004460:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 8004464:	3b01      	subs	r3, #1
 8004466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800446a:	4a26      	ldr	r2, [pc, #152]	; (8004504 <HAL_UART_RxCpltCallback+0x146c>)
 800446c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004470:	f7fd fe5c 	bl	800212c <FLASH_IF_Erase>
 8004474:	2800      	cmp	r0, #0
 8004476:	d14d      	bne.n	8004514 <HAL_UART_RxCpltCallback+0x147c>
						APP_LOG(TS_OFF, VLEVEL_M, "ERASE OK");
 8004478:	4b23      	ldr	r3, [pc, #140]	; (8004508 <HAL_UART_RxCpltCallback+0x1470>)
 800447a:	2200      	movs	r2, #0
 800447c:	4611      	mov	r1, r2
 800447e:	2002      	movs	r0, #2
 8004480:	f012 f880 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						if(FLASH_IF_Write((void *)ModbusDeviceFlashAddresses[slotId - 1], (void *)&MonitoringSlotNVM, sizeof(struct ModbusDevice)) == FLASH_IF_OK){
 8004484:	f89d 3069 	ldrb.w	r3, [sp, #105]	; 0x69
 8004488:	3b01      	subs	r3, #1
 800448a:	f44f 7274 	mov.w	r2, #976	; 0x3d0
 800448e:	a920      	add	r1, sp, #128	; 0x80
 8004490:	481c      	ldr	r0, [pc, #112]	; (8004504 <HAL_UART_RxCpltCallback+0x146c>)
 8004492:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8004496:	f7fd fe11 	bl	80020bc <FLASH_IF_Write>
 800449a:	b930      	cbnz	r0, 80044aa <HAL_UART_RxCpltCallback+0x1412>
							APP_LOG(TS_OFF, VLEVEL_M, "WRITE OK");
 800449c:	4b1b      	ldr	r3, [pc, #108]	; (800450c <HAL_UART_RxCpltCallback+0x1474>)
 800449e:	2200      	movs	r2, #0
 80044a0:	4611      	mov	r1, r2
 80044a2:	2002      	movs	r0, #2
 80044a4:	f012 f86e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80044a8:	e03a      	b.n	8004520 <HAL_UART_RxCpltCallback+0x1488>
							APP_LOG(TS_OFF, VLEVEL_M, "WRITE ERROR");
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <HAL_UART_RxCpltCallback+0x1478>)
 80044ac:	2200      	movs	r2, #0
 80044ae:	4611      	mov	r1, r2
 80044b0:	2002      	movs	r0, #2
 80044b2:	f012 f867 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80044b6:	e033      	b.n	8004520 <HAL_UART_RxCpltCallback+0x1488>
 80044b8:	0801cc6c 	.word	0x0801cc6c
 80044bc:	0801cc84 	.word	0x0801cc84
 80044c0:	0801cc94 	.word	0x0801cc94
 80044c4:	0801cca4 	.word	0x0801cca4
 80044c8:	0801c3b8 	.word	0x0801c3b8
 80044cc:	0801c3c8 	.word	0x0801c3c8
 80044d0:	0801ccb4 	.word	0x0801ccb4
 80044d4:	0801c3fc 	.word	0x0801c3fc
 80044d8:	0801c420 	.word	0x0801c420
 80044dc:	0801c448 	.word	0x0801c448
 80044e0:	0801c474 	.word	0x0801c474
 80044e4:	0801c354 	.word	0x0801c354
 80044e8:	0801c4a0 	.word	0x0801c4a0
 80044ec:	0801cbb8 	.word	0x0801cbb8
 80044f0:	20000d1c 	.word	0x20000d1c
 80044f4:	0801c34c 	.word	0x0801c34c
 80044f8:	0801cbbc 	.word	0x0801cbbc
 80044fc:	0801c280 	.word	0x0801c280
 8004500:	0801d0b4 	.word	0x0801d0b4
 8004504:	20000000 	.word	0x20000000
 8004508:	0801c31c 	.word	0x0801c31c
 800450c:	0801c328 	.word	0x0801c328
 8004510:	0801c334 	.word	0x0801c334
						APP_LOG(TS_OFF, VLEVEL_M, "ERASE ERROR");
 8004514:	4b48      	ldr	r3, [pc, #288]	; (8004638 <HAL_UART_RxCpltCallback+0x15a0>)
 8004516:	2200      	movs	r2, #0
 8004518:	4611      	mov	r1, r2
 800451a:	2002      	movs	r0, #2
 800451c:	f012 f832 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					initMonitorSlot(slotId - 1, MonitoringSlotNVM.MonitoringSlot.modbusCMD, MonitoringSlotNVM.MonitoringSlot.cmdSize, MonitoringSlotNVM.MonitoringSlot.dataType, MonitoringSlotNVM.MonitoringSlot.valueStartIndex, MonitoringSlotNVM.MonitoringSlot.ThresholdActive, MonitoringSlotNVM.MonitoringSlot.SpikeUp, MonitoringSlotNVM.MonitoringSlot.SpikeDown,  MonitoringSlotNVM.MonitoringSlot.thresholdHigh, MonitoringSlotNVM.MonitoringSlot.thresholdLow, MonitoringSlotNVM.MonitoringSlot.onChange, MonitoringSlotNVM.MonitoringSlot.triggerFlagValue);
 8004520:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
 8004524:	3801      	subs	r0, #1
 8004526:	f89d 3449 	ldrb.w	r3, [sp, #1097]	; 0x449
 800452a:	9307      	str	r3, [sp, #28]
 800452c:	f89d 3448 	ldrb.w	r3, [sp, #1096]	; 0x448
 8004530:	9306      	str	r3, [sp, #24]
 8004532:	f8dd 3444 	ldr.w	r3, [sp, #1092]	; 0x444
 8004536:	9305      	str	r3, [sp, #20]
 8004538:	f8dd 3440 	ldr.w	r3, [sp, #1088]	; 0x440
 800453c:	9304      	str	r3, [sp, #16]
 800453e:	f8dd 343c 	ldr.w	r3, [sp, #1084]	; 0x43c
 8004542:	9303      	str	r3, [sp, #12]
 8004544:	f8dd 3438 	ldr.w	r3, [sp, #1080]	; 0x438
 8004548:	9302      	str	r3, [sp, #8]
 800454a:	f8bd 3436 	ldrh.w	r3, [sp, #1078]	; 0x436
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	f89d 342a 	ldrb.w	r3, [sp, #1066]	; 0x42a
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	f89d 3429 	ldrb.w	r3, [sp, #1065]	; 0x429
 800455a:	f89d 2428 	ldrb.w	r2, [sp, #1064]	; 0x428
 800455e:	f50d 6181 	add.w	r1, sp, #1032	; 0x408
 8004562:	b2c0      	uxtb	r0, r0
 8004564:	f7fd fa76 	bl	8001a54 <initMonitorSlot>
					viewMonitoringSlotParams(slotId - 1);
 8004568:	f89d 0069 	ldrb.w	r0, [sp, #105]	; 0x69
 800456c:	3801      	subs	r0, #1
 800456e:	b2c0      	uxtb	r0, r0
 8004570:	f7fd fa30 	bl	80019d4 <viewMonitoringSlotParams>
 8004574:	f7fe bebc 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
				  APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8004578:	4b30      	ldr	r3, [pc, #192]	; (800463c <HAL_UART_RxCpltCallback+0x15a4>)
 800457a:	2200      	movs	r2, #0
 800457c:	4611      	mov	r1, r2
 800457e:	2002      	movs	r0, #2
 8004580:	f012 f800 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004584:	f7fe beb4 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			sscanf(&buffer[17], "%u", &slotId);
 8004588:	aa20      	add	r2, sp, #128	; 0x80
 800458a:	492d      	ldr	r1, [pc, #180]	; (8004640 <HAL_UART_RxCpltCallback+0x15a8>)
 800458c:	482d      	ldr	r0, [pc, #180]	; (8004644 <HAL_UART_RxCpltCallback+0x15ac>)
 800458e:	f013 fdb1 	bl	80180f4 <siscanf>
			viewMonitoringSlotParams(slotId - 1);
 8004592:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
 8004596:	3801      	subs	r0, #1
 8004598:	b2c0      	uxtb	r0, r0
 800459a:	f7fd fa1b 	bl	80019d4 <viewMonitoringSlotParams>
 800459e:	f7fe bea7 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			sscanf(&buffer[18], "%u", &slotId);
 80045a2:	aa20      	add	r2, sp, #128	; 0x80
 80045a4:	4926      	ldr	r1, [pc, #152]	; (8004640 <HAL_UART_RxCpltCallback+0x15a8>)
 80045a6:	4828      	ldr	r0, [pc, #160]	; (8004648 <HAL_UART_RxCpltCallback+0x15b0>)
 80045a8:	f013 fda4 	bl	80180f4 <siscanf>
			initMonitoringSlotParams(slotId - 1);
 80045ac:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
 80045b0:	3801      	subs	r0, #1
 80045b2:	b2c0      	uxtb	r0, r0
 80045b4:	f7fd f972 	bl	800189c <initMonitoringSlotParams>
			viewMonitoringSlotParams(slotId - 1);
 80045b8:	f89d 0080 	ldrb.w	r0, [sp, #128]	; 0x80
 80045bc:	3801      	subs	r0, #1
 80045be:	b2c0      	uxtb	r0, r0
 80045c0:	f7fd fa08 	bl	80019d4 <viewMonitoringSlotParams>
 80045c4:	f7fe be94 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
				initMonitoringSlotParams(i);
 80045c8:	4620      	mov	r0, r4
 80045ca:	f7fd f967 	bl	800189c <initMonitoringSlotParams>
			for(uint8_t i = 0; i < 16; i++){
 80045ce:	3401      	adds	r4, #1
 80045d0:	b2e4      	uxtb	r4, r4
 80045d2:	2c0f      	cmp	r4, #15
 80045d4:	d9f8      	bls.n	80045c8 <HAL_UART_RxCpltCallback+0x1530>
 80045d6:	f7fe be8b 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
 80045da:	2400      	movs	r4, #0
 80045dc:	e7f9      	b.n	80045d2 <HAL_UART_RxCpltCallback+0x153a>
						APP_LOG(TS_OFF, VLEVEL_M, "WRITE ERROR");
 80045de:	4b1b      	ldr	r3, [pc, #108]	; (800464c <HAL_UART_RxCpltCallback+0x15b4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	4611      	mov	r1, r2
 80045e4:	2002      	movs	r0, #2
 80045e6:	f011 ffcd 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80045ea:	f7fe be81 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
					APP_LOG(TS_OFF, VLEVEL_M, "ERASE ERROR");
 80045ee:	4b12      	ldr	r3, [pc, #72]	; (8004638 <HAL_UART_RxCpltCallback+0x15a0>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	4611      	mov	r1, r2
 80045f4:	2002      	movs	r0, #2
 80045f6:	f011 ffc5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80045fa:	f7fe be79 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			  APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80045fe:	4b0f      	ldr	r3, [pc, #60]	; (800463c <HAL_UART_RxCpltCallback+0x15a4>)
 8004600:	2200      	movs	r2, #0
 8004602:	4611      	mov	r1, r2
 8004604:	2002      	movs	r0, #2
 8004606:	f011 ffbd 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800460a:	f7fe be71 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
			APP_LOG(TS_OFF, VLEVEL_M, "###### Invalid Command! \r\n");
 800460e:	4b10      	ldr	r3, [pc, #64]	; (8004650 <HAL_UART_RxCpltCallback+0x15b8>)
 8004610:	2200      	movs	r2, #0
 8004612:	4611      	mov	r1, r2
 8004614:	2002      	movs	r0, #2
 8004616:	f011 ffb5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800461a:	f7fe be69 	b.w	80032f0 <HAL_UART_RxCpltCallback+0x258>
 	Modbus_RxCallback(&ModbusResp);
 800461e:	4c0d      	ldr	r4, [pc, #52]	; (8004654 <HAL_UART_RxCpltCallback+0x15bc>)
 8004620:	4620      	mov	r0, r4
 8004622:	f7fd fab3 	bl	8001b8c <Modbus_RxCallback>
 	HAL_UART_Receive_IT(&huart1, (uint8_t *)(ModbusResp.buffer + ModbusResp.rxIndex), 1);
 8004626:	f834 1b02 	ldrh.w	r1, [r4], #2
 800462a:	2201      	movs	r2, #1
 800462c:	4421      	add	r1, r4
 800462e:	480a      	ldr	r0, [pc, #40]	; (8004658 <HAL_UART_RxCpltCallback+0x15c0>)
 8004630:	f008 f83a 	bl	800c6a8 <HAL_UART_Receive_IT>
}
 8004634:	f7fe bd3f 	b.w	80030b6 <HAL_UART_RxCpltCallback+0x1e>
 8004638:	0801c340 	.word	0x0801c340
 800463c:	0801c4cc 	.word	0x0801c4cc
 8004640:	0801c804 	.word	0x0801c804
 8004644:	20000d2d 	.word	0x20000d2d
 8004648:	20000d2e 	.word	0x20000d2e
 800464c:	0801c334 	.word	0x0801c334
 8004650:	0801cd44 	.word	0x0801cd44
 8004654:	20000f18 	.word	0x20000f18
 8004658:	20000bcc 	.word	0x20000bcc

0800465c <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 800465c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800465e:	f7fe f87f 	bl	8002760 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8004662:	f003 f88f 	bl	8007784 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8004666:	bd08      	pop	{r3, pc}

08004668 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8004668:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800466a:	f04f 30ff 	mov.w	r0, #4294967295
 800466e:	f012 f8e7 	bl	8016840 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8004672:	bd08      	pop	{r3, pc}

08004674 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8004674:	4770      	bx	lr
	...

08004678 <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8004678:	4b01      	ldr	r3, [pc, #4]	; (8004680 <OnTxFrameCtrlChanged+0x8>)
 800467a:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	200000b0 	.word	0x200000b0

08004684 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 8004684:	4b01      	ldr	r3, [pc, #4]	; (800468c <OnPingSlotPeriodicityChanged+0x8>)
 8004686:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	200000b0 	.word	0x200000b0

08004690 <OnBeaconStatusChange>:
  if (params != NULL)
 8004690:	2800      	cmp	r0, #0
 8004692:	d03f      	beq.n	8004714 <OnBeaconStatusChange+0x84>
{
 8004694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004698:	b08c      	sub	sp, #48	; 0x30
 800469a:	4603      	mov	r3, r0
    switch (params->State)
 800469c:	7842      	ldrb	r2, [r0, #1]
 800469e:	2a02      	cmp	r2, #2
 80046a0:	d00a      	beq.n	80046b8 <OnBeaconStatusChange+0x28>
 80046a2:	2a03      	cmp	r2, #3
 80046a4:	d02f      	beq.n	8004706 <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <OnBeaconStatusChange+0x88>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	4611      	mov	r1, r2
 80046ac:	2002      	movs	r0, #2
 80046ae:	f011 ff69 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 80046b2:	b00c      	add	sp, #48	; 0x30
 80046b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 80046b8:	7c02      	ldrb	r2, [r0, #16]
 80046ba:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 80046be:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80046c2:	7d9c      	ldrb	r4, [r3, #22]
 80046c4:	7ddd      	ldrb	r5, [r3, #23]
 80046c6:	7e1e      	ldrb	r6, [r3, #24]
 80046c8:	7e5f      	ldrb	r7, [r3, #25]
 80046ca:	f893 c01a 	ldrb.w	ip, [r3, #26]
 80046ce:	f893 e01b 	ldrb.w	lr, [r3, #27]
 80046d2:	f893 801c 	ldrb.w	r8, [r3, #28]
 80046d6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80046da:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 80046de:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80046e2:	9708      	str	r7, [sp, #32]
 80046e4:	9607      	str	r6, [sp, #28]
 80046e6:	9506      	str	r5, [sp, #24]
 80046e8:	9405      	str	r4, [sp, #20]
 80046ea:	685c      	ldr	r4, [r3, #4]
 80046ec:	9404      	str	r4, [sp, #16]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	9303      	str	r3, [sp, #12]
 80046f2:	9002      	str	r0, [sp, #8]
 80046f4:	9101      	str	r1, [sp, #4]
 80046f6:	9200      	str	r2, [sp, #0]
 80046f8:	4b08      	ldr	r3, [pc, #32]	; (800471c <OnBeaconStatusChange+0x8c>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	4611      	mov	r1, r2
 80046fe:	2002      	movs	r0, #2
 8004700:	f011 ff40 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8004704:	e7d5      	b.n	80046b2 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 8004706:	4b06      	ldr	r3, [pc, #24]	; (8004720 <OnBeaconStatusChange+0x90>)
 8004708:	2200      	movs	r2, #0
 800470a:	4611      	mov	r1, r2
 800470c:	2002      	movs	r0, #2
 800470e:	f011 ff39 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8004712:	e7ce      	b.n	80046b2 <OnBeaconStatusChange+0x22>
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	0801cd70 	.word	0x0801cd70
 800471c:	0801cd88 	.word	0x0801cd88
 8004720:	0801cdfc 	.word	0x0801cdfc

08004724 <OnClassChange>:
{
 8004724:	b500      	push	{lr}
 8004726:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8004728:	4b05      	ldr	r3, [pc, #20]	; (8004740 <OnClassChange+0x1c>)
 800472a:	5c1b      	ldrb	r3, [r3, r0]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	4b05      	ldr	r3, [pc, #20]	; (8004744 <OnClassChange+0x20>)
 8004730:	2200      	movs	r2, #0
 8004732:	4611      	mov	r1, r2
 8004734:	2002      	movs	r0, #2
 8004736:	f011 ff25 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800473a:	b003      	add	sp, #12
 800473c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004740:	0801ce38 	.word	0x0801ce38
 8004744:	0801ce1c 	.word	0x0801ce1c

08004748 <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 8004748:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800474a:	2801      	cmp	r0, #1
 800474c:	d006      	beq.n	800475c <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <OnNvmDataChange+0x24>)
 8004750:	2200      	movs	r2, #0
 8004752:	4611      	mov	r1, r2
 8004754:	2002      	movs	r0, #2
 8004756:	f011 ff15 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800475a:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800475c:	4b04      	ldr	r3, [pc, #16]	; (8004770 <OnNvmDataChange+0x28>)
 800475e:	2200      	movs	r2, #0
 8004760:	4611      	mov	r1, r2
 8004762:	2002      	movs	r0, #2
 8004764:	f011 ff0e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004768:	e7f7      	b.n	800475a <OnNvmDataChange+0x12>
 800476a:	bf00      	nop
 800476c:	0801ce50 	.word	0x0801ce50
 8004770:	0801ce3c 	.word	0x0801ce3c

08004774 <OnRestoreContextRequest>:

  /* USER CODE END OnStoreContextRequest_Last */
}

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 8004774:	b508      	push	{r3, lr}
 8004776:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 8004778:	4901      	ldr	r1, [pc, #4]	; (8004780 <OnRestoreContextRequest+0xc>)
 800477a:	f7fd fcbb 	bl	80020f4 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800477e:	bd08      	pop	{r3, pc}
 8004780:	0803f000 	.word	0x0803f000

08004784 <OnStoreContextRequest>:
{
 8004784:	b538      	push	{r3, r4, r5, lr}
 8004786:	4604      	mov	r4, r0
 8004788:	460d      	mov	r5, r1
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 800478a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800478e:	4805      	ldr	r0, [pc, #20]	; (80047a4 <OnStoreContextRequest+0x20>)
 8004790:	f7fd fccc 	bl	800212c <FLASH_IF_Erase>
 8004794:	b100      	cbz	r0, 8004798 <OnStoreContextRequest+0x14>
}
 8004796:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 8004798:	462a      	mov	r2, r5
 800479a:	4621      	mov	r1, r4
 800479c:	4801      	ldr	r0, [pc, #4]	; (80047a4 <OnStoreContextRequest+0x20>)
 800479e:	f7fd fc8d 	bl	80020bc <FLASH_IF_Write>
}
 80047a2:	e7f8      	b.n	8004796 <OnStoreContextRequest+0x12>
 80047a4:	0803f000 	.word	0x0803f000

080047a8 <OnRxTimerLedEvent>:
{
 80047a8:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80047aa:	2200      	movs	r2, #0
 80047ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047b0:	4801      	ldr	r0, [pc, #4]	; (80047b8 <OnRxTimerLedEvent+0x10>)
 80047b2:	f004 fcff 	bl	80091b4 <HAL_GPIO_WritePin>
}
 80047b6:	bd08      	pop	{r3, pc}
 80047b8:	48000400 	.word	0x48000400

080047bc <OnTxTimerLedEvent>:
{
 80047bc:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80047be:	2200      	movs	r2, #0
 80047c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047c4:	4801      	ldr	r0, [pc, #4]	; (80047cc <OnTxTimerLedEvent+0x10>)
 80047c6:	f004 fcf5 	bl	80091b4 <HAL_GPIO_WritePin>
}
 80047ca:	bd08      	pop	{r3, pc}
 80047cc:	48000400 	.word	0x48000400

080047d0 <OnTxData>:
  if ((params != NULL))
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d045      	beq.n	8004860 <OnTxData+0x90>
{
 80047d4:	b510      	push	{r4, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 80047da:	7803      	ldrb	r3, [r0, #0]
 80047dc:	b90b      	cbnz	r3, 80047e2 <OnTxData+0x12>
}
 80047de:	b004      	add	sp, #16
 80047e0:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80047e2:	2201      	movs	r2, #1
 80047e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80047e8:	481e      	ldr	r0, [pc, #120]	; (8004864 <OnTxData+0x94>)
 80047ea:	f004 fce3 	bl	80091b4 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 80047ee:	481e      	ldr	r0, [pc, #120]	; (8004868 <OnTxData+0x98>)
 80047f0:	f012 fa74 	bl	8016cdc <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 80047f4:	4b1d      	ldr	r3, [pc, #116]	; (800486c <OnTxData+0x9c>)
 80047f6:	2200      	movs	r2, #0
 80047f8:	4611      	mov	r1, r2
 80047fa:	2002      	movs	r0, #2
 80047fc:	f011 fec2 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8004800:	7c23      	ldrb	r3, [r4, #16]
 8004802:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8004806:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800480a:	9103      	str	r1, [sp, #12]
 800480c:	9202      	str	r2, [sp, #8]
 800480e:	9301      	str	r3, [sp, #4]
 8004810:	68e3      	ldr	r3, [r4, #12]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	4b16      	ldr	r3, [pc, #88]	; (8004870 <OnTxData+0xa0>)
 8004816:	2200      	movs	r2, #0
 8004818:	4611      	mov	r1, r2
 800481a:	2003      	movs	r0, #3
 800481c:	f011 feb2 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
      hasJoined = true;
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <OnTxData+0xa4>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <OnTxData+0xa8>)
 8004828:	2200      	movs	r2, #0
 800482a:	4611      	mov	r1, r2
 800482c:	2003      	movs	r0, #3
 800482e:	f011 fea9 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8004832:	7a23      	ldrb	r3, [r4, #8]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d10c      	bne.n	8004852 <OnTxData+0x82>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8004838:	7a63      	ldrb	r3, [r4, #9]
 800483a:	b143      	cbz	r3, 800484e <OnTxData+0x7e>
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <OnTxData+0xac>)
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	4b0f      	ldr	r3, [pc, #60]	; (8004880 <OnTxData+0xb0>)
 8004842:	2200      	movs	r2, #0
 8004844:	4611      	mov	r1, r2
 8004846:	2003      	movs	r0, #3
 8004848:	f011 fe9c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800484c:	e7c7      	b.n	80047de <OnTxData+0xe>
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <OnTxData+0xb4>)
 8004850:	e7f5      	b.n	800483e <OnTxData+0x6e>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <OnTxData+0xb8>)
 8004854:	2200      	movs	r2, #0
 8004856:	4611      	mov	r1, r2
 8004858:	2003      	movs	r0, #3
 800485a:	f011 fe93 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800485e:	e7be      	b.n	80047de <OnTxData+0xe>
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	48000400 	.word	0x48000400
 8004868:	20000fe4 	.word	0x20000fe4
 800486c:	0801ce70 	.word	0x0801ce70
 8004870:	0801cea4 	.word	0x0801cea4
 8004874:	20001034 	.word	0x20001034
 8004878:	0801ced8 	.word	0x0801ced8
 800487c:	0801ce64 	.word	0x0801ce64
 8004880:	0801cee8 	.word	0x0801cee8
 8004884:	0801ce68 	.word	0x0801ce68
 8004888:	0801cefc 	.word	0x0801cefc

0800488c <OnTxTimerEvent>:
{
 800488c:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800488e:	2100      	movs	r1, #0
 8004890:	2002      	movs	r0, #2
 8004892:	f011 ffa1 	bl	80167d8 <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 8004896:	4802      	ldr	r0, [pc, #8]	; (80048a0 <OnTxTimerEvent+0x14>)
 8004898:	f012 fa20 	bl	8016cdc <UTIL_TIMER_Start>
}
 800489c:	bd08      	pop	{r3, pc}
 800489e:	bf00      	nop
 80048a0:	20000ffc 	.word	0x20000ffc

080048a4 <OnMacProcessNotify>:
{
 80048a4:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80048a6:	2100      	movs	r1, #0
 80048a8:	2001      	movs	r0, #1
 80048aa:	f011 ff95 	bl	80167d8 <UTIL_SEQ_SetTask>
}
 80048ae:	bd08      	pop	{r3, pc}

080048b0 <OnStopJoinTimerEvent>:
{
 80048b0:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <OnStopJoinTimerEvent+0x3c>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d013      	beq.n	80048e2 <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80048ba:	4c0d      	ldr	r4, [pc, #52]	; (80048f0 <OnStopJoinTimerEvent+0x40>)
 80048bc:	2200      	movs	r2, #0
 80048be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048c2:	4620      	mov	r0, r4
 80048c4:	f004 fc76 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80048c8:	2200      	movs	r2, #0
 80048ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80048ce:	4620      	mov	r0, r4
 80048d0:	f004 fc70 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80048d4:	2200      	movs	r2, #0
 80048d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048da:	4620      	mov	r0, r4
 80048dc:	f004 fc6a 	bl	80091b4 <HAL_GPIO_WritePin>
}
 80048e0:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 80048e2:	2100      	movs	r1, #0
 80048e4:	2008      	movs	r0, #8
 80048e6:	f011 ff77 	bl	80167d8 <UTIL_SEQ_SetTask>
 80048ea:	e7e6      	b.n	80048ba <OnStopJoinTimerEvent+0xa>
 80048ec:	20000058 	.word	0x20000058
 80048f0:	48000400 	.word	0x48000400

080048f4 <OnSystemReset>:
{
 80048f4:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80048f6:	f008 fcdb 	bl	800d2b0 <LmHandlerHalt>
 80048fa:	b100      	cbz	r0, 80048fe <OnSystemReset+0xa>
}
 80048fc:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80048fe:	f008 f995 	bl	800cc2c <LmHandlerJoinStatus>
 8004902:	2801      	cmp	r0, #1
 8004904:	d1fa      	bne.n	80048fc <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004906:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800490a:	4905      	ldr	r1, [pc, #20]	; (8004920 <OnSystemReset+0x2c>)
 800490c:	68ca      	ldr	r2, [r1, #12]
 800490e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004912:	4b04      	ldr	r3, [pc, #16]	; (8004924 <OnSystemReset+0x30>)
 8004914:	4313      	orrs	r3, r2
 8004916:	60cb      	str	r3, [r1, #12]
 8004918:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800491c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 800491e:	e7fd      	b.n	800491c <OnSystemReset+0x28>
 8004920:	e000ed00 	.word	0xe000ed00
 8004924:	05fa0004 	.word	0x05fa0004

08004928 <OnTxPeriodicityChanged>:
{
 8004928:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 800492a:	4b09      	ldr	r3, [pc, #36]	; (8004950 <OnTxPeriodicityChanged+0x28>)
 800492c:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 800492e:	b910      	cbnz	r0, 8004936 <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 8004930:	f242 7210 	movw	r2, #10000	; 0x2710
 8004934:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 8004936:	4c07      	ldr	r4, [pc, #28]	; (8004954 <OnTxPeriodicityChanged+0x2c>)
 8004938:	4620      	mov	r0, r4
 800493a:	f012 f975 	bl	8016c28 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800493e:	4b04      	ldr	r3, [pc, #16]	; (8004950 <OnTxPeriodicityChanged+0x28>)
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	4620      	mov	r0, r4
 8004944:	f012 fa10 	bl	8016d68 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8004948:	4620      	mov	r0, r4
 800494a:	f012 f9c7 	bl	8016cdc <UTIL_TIMER_Start>
}
 800494e:	bd10      	pop	{r4, pc}
 8004950:	200000c8 	.word	0x200000c8
 8004954:	20000ffc 	.word	0x20000ffc

08004958 <OnRxData>:
  if (params != NULL)
 8004958:	2900      	cmp	r1, #0
 800495a:	f000 8626 	beq.w	80055aa <OnRxData+0xc52>
{
 800495e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004962:	b0c4      	sub	sp, #272	; 0x110
 8004964:	4604      	mov	r4, r0
 8004966:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8004968:	2201      	movs	r2, #1
 800496a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800496e:	48af      	ldr	r0, [pc, #700]	; (8004c2c <OnRxData+0x2d4>)
 8004970:	f004 fc20 	bl	80091b4 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 8004974:	48ae      	ldr	r0, [pc, #696]	; (8004c30 <OnRxData+0x2d8>)
 8004976:	f012 f9b1 	bl	8016cdc <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 800497a:	782e      	ldrb	r6, [r5, #0]
 800497c:	2e00      	cmp	r6, #0
 800497e:	f000 85d9 	beq.w	8005534 <OnRxData+0xbdc>
      if (appData != NULL)
 8004982:	2c00      	cmp	r4, #0
 8004984:	f000 85d5 	beq.w	8005532 <OnRxData+0xbda>
        RxPort = appData->Port;
 8004988:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 800498a:	6863      	ldr	r3, [r4, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	f000 85d1 	beq.w	8005534 <OnRxData+0xbdc>
          switch (appData->Port)
 8004992:	2e37      	cmp	r6, #55	; 0x37
 8004994:	d06c      	beq.n	8004a70 <OnRxData+0x118>
 8004996:	d82f      	bhi.n	80049f8 <OnRxData+0xa0>
 8004998:	2e03      	cmp	r6, #3
 800499a:	d04e      	beq.n	8004a3a <OnRxData+0xe2>
 800499c:	2e19      	cmp	r6, #25
 800499e:	f040 85c9 	bne.w	8005534 <OnRxData+0xbdc>
					if(appData->Buffer != NULL && appData->BufferSize >1){
 80049a2:	7862      	ldrb	r2, [r4, #1]
 80049a4:	2a01      	cmp	r2, #1
 80049a6:	f240 85c5 	bls.w	8005534 <OnRxData+0xbdc>
		            	if(appData->Buffer[0] == CONFIG_SAMPLING_COUNT_ID){
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	f000 83a4 	beq.w	80050fa <OnRxData+0x7a2>
		            	if(appData->Buffer[0] == CONFIG_LEVEL_THRESHOLD_HIGH_ID){
 80049b2:	6863      	ldr	r3, [r4, #4]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	f000 840e 	beq.w	80051d8 <OnRxData+0x880>
		            	if(appData->Buffer[0] == CONFIG_LEVEL_THRESHOLD_LOW_ID){
 80049bc:	6863      	ldr	r3, [r4, #4]
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f000 84a1 	beq.w	8005308 <OnRxData+0x9b0>
		            	if(appData->Buffer[0] == SAMPLING_METHOD_ID){
 80049c6:	6863      	ldr	r3, [r4, #4]
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	f000 8500 	beq.w	80053d0 <OnRxData+0xa78>
		            	if(appData->Buffer[0] == MEASUREMENT_METHOD_ID){
 80049d0:	6863      	ldr	r3, [r4, #4]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b05      	cmp	r3, #5
 80049d6:	f040 85ad 	bne.w	8005534 <OnRxData+0xbdc>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 80049da:	4b96      	ldr	r3, [pc, #600]	; (8004c34 <OnRxData+0x2dc>)
 80049dc:	2200      	movs	r2, #0
 80049de:	4611      	mov	r1, r2
 80049e0:	2002      	movs	r0, #2
 80049e2:	f011 fdcf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 80049e6:	4b94      	ldr	r3, [pc, #592]	; (8004c38 <OnRxData+0x2e0>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	4611      	mov	r1, r2
 80049ec:	2002      	movs	r0, #2
 80049ee:	f011 fdc9 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 80049f2:	2700      	movs	r7, #0
 80049f4:	f000 bd57 	b.w	80054a6 <OnRxData+0xb4e>
          switch (appData->Port)
 80049f8:	2e45      	cmp	r6, #69	; 0x45
 80049fa:	f040 859b 	bne.w	8005534 <OnRxData+0xbdc>
					if (appData->Buffer != NULL && appData->BufferSize >= 1) {
 80049fe:	7862      	ldrb	r2, [r4, #1]
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	f000 8597 	beq.w	8005534 <OnRxData+0xbdc>
						if(appData->Buffer[0] == CONFIG_RESTORE_DEV_CONFIG){ //ADR
 8004a06:	781b      	ldrb	r3, [r3, #0]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	f000 8295 	beq.w	8004f38 <OnRxData+0x5e0>
						if(appData->Buffer[0] == CONFIG_CONTINUOUS_UPLINK){ //ADR
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	781a      	ldrb	r2, [r3, #0]
 8004a12:	2a02      	cmp	r2, #2
 8004a14:	f040 858e 	bne.w	8005534 <OnRxData+0xbdc>
							if(appData->Buffer[1] == 0){
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 8337 	beq.w	800508e <OnRxData+0x736>
							if(appData->Buffer[1] == 1){
 8004a20:	6863      	ldr	r3, [r4, #4]
 8004a22:	785b      	ldrb	r3, [r3, #1]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f000 834d 	beq.w	80050c4 <OnRxData+0x76c>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8004a2a:	4b82      	ldr	r3, [pc, #520]	; (8004c34 <OnRxData+0x2dc>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	4611      	mov	r1, r2
 8004a30:	2002      	movs	r0, #2
 8004a32:	f011 fda7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004a36:	f000 bd7d 	b.w	8005534 <OnRxData+0xbdc>
              if (appData->BufferSize == 1)
 8004a3a:	7862      	ldrb	r2, [r4, #1]
 8004a3c:	2a01      	cmp	r2, #1
 8004a3e:	f040 8579 	bne.w	8005534 <OnRxData+0xbdc>
                switch (appData->Buffer[0])
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d009      	beq.n	8004a5c <OnRxData+0x104>
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d00c      	beq.n	8004a66 <OnRxData+0x10e>
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 8571 	bne.w	8005534 <OnRxData+0xbdc>
                    LmHandlerRequestClass(CLASS_A);
 8004a52:	2000      	movs	r0, #0
 8004a54:	f008 f9bc 	bl	800cdd0 <LmHandlerRequestClass>
                    break;
 8004a58:	f000 bd6c 	b.w	8005534 <OnRxData+0xbdc>
                    LmHandlerRequestClass(CLASS_B);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f008 f9b7 	bl	800cdd0 <LmHandlerRequestClass>
                    break;
 8004a62:	f000 bd67 	b.w	8005534 <OnRxData+0xbdc>
                    LmHandlerRequestClass(CLASS_C);
 8004a66:	2002      	movs	r0, #2
 8004a68:	f008 f9b2 	bl	800cdd0 <LmHandlerRequestClass>
                    break;
 8004a6c:	f000 bd62 	b.w	8005534 <OnRxData+0xbdc>
            	if(appData->Buffer[0] == CONFIG_DEVEUI_ID){
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d024      	beq.n	8004ac0 <OnRxData+0x168>
            	if(appData->Buffer[0] == CONFIG_APPEUI_ID){
 8004a76:	6863      	ldr	r3, [r4, #4]
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d075      	beq.n	8004b6a <OnRxData+0x212>
            	if(appData->Buffer[0] == CONFIG_APPKEY_ID){
 8004a7e:	6863      	ldr	r3, [r4, #4]
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	f000 80c6 	beq.w	8004c14 <OnRxData+0x2bc>
            	if(appData->Buffer[0] == CONFIG_INTERVAL_ID){
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	f000 8140 	beq.w	8004d12 <OnRxData+0x3ba>
            	if(appData->Buffer[0] == CONFIG_CONF_UPLINK_ID){
 8004a92:	6863      	ldr	r3, [r4, #4]
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b07      	cmp	r3, #7
 8004a98:	f000 81a6 	beq.w	8004de8 <OnRxData+0x490>
            	if(appData->Buffer[0] == SYSTEM_DIAGNOSTIC_ID){
 8004a9c:	6863      	ldr	r3, [r4, #4]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	f000 8203 	beq.w	8004eac <OnRxData+0x554>
            	if(appData->Buffer[0] == CONFIG_SAVE_REBOOT){
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	2aaa      	cmp	r2, #170	; 0xaa
 8004aac:	f040 8542 	bne.w	8005534 <OnRxData+0xbdc>
            		if(appData->Buffer[1] == 0x01){
 8004ab0:	785b      	ldrb	r3, [r3, #1]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	f040 853e 	bne.w	8005534 <OnRxData+0xbdc>
            			HAL_NVIC_SystemReset();
 8004ab8:	f003 fe46 	bl	8008748 <HAL_NVIC_SystemReset>
 8004abc:	f000 bd3a 	b.w	8005534 <OnRxData+0xbdc>
            		uint8_t *_devEui = (uint8_t *) malloc (sizeof(uint8_t) * SE_EUI_SIZE);
 8004ac0:	2008      	movs	r0, #8
 8004ac2:	f012 fb13 	bl	80170ec <malloc>
            		if(_devEui != NULL){
 8004ac6:	4607      	mov	r7, r0
 8004ac8:	2800      	cmp	r0, #0
 8004aca:	d047      	beq.n	8004b5c <OnRxData+0x204>
            			memset(_devEui, 0, sizeof(uint8_t) * SE_EUI_SIZE);
 8004acc:	2300      	movs	r3, #0
 8004ace:	6003      	str	r3, [r0, #0]
 8004ad0:	6043      	str	r3, [r0, #4]
            			for(uint8_t i = 0; i < SE_EUI_SIZE; i++){
 8004ad2:	e005      	b.n	8004ae0 <OnRxData+0x188>
            				_devEui[i] = appData->Buffer[i + 1];
 8004ad4:	6862      	ldr	r2, [r4, #4]
 8004ad6:	441a      	add	r2, r3
 8004ad8:	7852      	ldrb	r2, [r2, #1]
 8004ada:	54fa      	strb	r2, [r7, r3]
            			for(uint8_t i = 0; i < SE_EUI_SIZE; i++){
 8004adc:	3301      	adds	r3, #1
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b07      	cmp	r3, #7
 8004ae2:	d9f7      	bls.n	8004ad4 <OnRxData+0x17c>
            			APP_LOG(TS_OFF, VLEVEL_M, "###### Lora-Configuration Mode: ON \r\n");
 8004ae4:	4b55      	ldr	r3, [pc, #340]	; (8004c3c <OnRxData+0x2e4>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4611      	mov	r1, r2
 8004aea:	2002      	movs	r0, #2
 8004aec:	f011 fd4a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8004af0:	22f8      	movs	r2, #248	; 0xf8
 8004af2:	4953      	ldr	r1, [pc, #332]	; (8004c40 <OnRxData+0x2e8>)
 8004af4:	a806      	add	r0, sp, #24
 8004af6:	f7fd fafd 	bl	80020f4 <FLASH_IF_Read>
 8004afa:	b9d0      	cbnz	r0, 8004b32 <OnRxData+0x1da>
							memcpy1( ( uint8_t * )FlashNVM.SeNvmDevJoinKey.DevEui, _devEui, SE_EUI_SIZE);
 8004afc:	2208      	movs	r2, #8
 8004afe:	4639      	mov	r1, r7
 8004b00:	a806      	add	r0, sp, #24
 8004b02:	f00f fe62 	bl	80147ca <memcpy1>
							free(_devEui);
 8004b06:	4638      	mov	r0, r7
 8004b08:	f012 faf8 	bl	80170fc <free>
						if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8004b0c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b10:	484b      	ldr	r0, [pc, #300]	; (8004c40 <OnRxData+0x2e8>)
 8004b12:	f7fd fb0b 	bl	800212c <FLASH_IF_Erase>
 8004b16:	b9d0      	cbnz	r0, 8004b4e <OnRxData+0x1f6>
							if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8004b18:	22f8      	movs	r2, #248	; 0xf8
 8004b1a:	a906      	add	r1, sp, #24
 8004b1c:	4848      	ldr	r0, [pc, #288]	; (8004c40 <OnRxData+0x2e8>)
 8004b1e:	f7fd facd 	bl	80020bc <FLASH_IF_Write>
 8004b22:	b968      	cbnz	r0, 8004b40 <OnRxData+0x1e8>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8004b24:	4b47      	ldr	r3, [pc, #284]	; (8004c44 <OnRxData+0x2ec>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	4611      	mov	r1, r2
 8004b2a:	2002      	movs	r0, #2
 8004b2c:	f011 fd2a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004b30:	e7a1      	b.n	8004a76 <OnRxData+0x11e>
							APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8004b32:	4b45      	ldr	r3, [pc, #276]	; (8004c48 <OnRxData+0x2f0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	4611      	mov	r1, r2
 8004b38:	2002      	movs	r0, #2
 8004b3a:	f011 fd23 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004b3e:	e7e5      	b.n	8004b0c <OnRxData+0x1b4>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8004b40:	4b42      	ldr	r3, [pc, #264]	; (8004c4c <OnRxData+0x2f4>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	4611      	mov	r1, r2
 8004b46:	2002      	movs	r0, #2
 8004b48:	f011 fd1c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004b4c:	e793      	b.n	8004a76 <OnRxData+0x11e>
							APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8004b4e:	4b40      	ldr	r3, [pc, #256]	; (8004c50 <OnRxData+0x2f8>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	4611      	mov	r1, r2
 8004b54:	2002      	movs	r0, #2
 8004b56:	f011 fd15 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004b5a:	e78c      	b.n	8004a76 <OnRxData+0x11e>
            			APP_LOG(TS_OFF, VLEVEL_M, "Memory Allocation Issue \r\n");
 8004b5c:	4b3d      	ldr	r3, [pc, #244]	; (8004c54 <OnRxData+0x2fc>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	4611      	mov	r1, r2
 8004b62:	2002      	movs	r0, #2
 8004b64:	f011 fd0e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004b68:	e785      	b.n	8004a76 <OnRxData+0x11e>
					uint8_t *_appEui = (uint8_t *) malloc (sizeof(uint8_t) * SE_EUI_SIZE);
 8004b6a:	2008      	movs	r0, #8
 8004b6c:	f012 fabe 	bl	80170ec <malloc>
					if(_appEui != NULL){
 8004b70:	4607      	mov	r7, r0
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d047      	beq.n	8004c06 <OnRxData+0x2ae>
						memset(_appEui, 0, sizeof(uint8_t) * SE_EUI_SIZE);
 8004b76:	2300      	movs	r3, #0
 8004b78:	6003      	str	r3, [r0, #0]
 8004b7a:	6043      	str	r3, [r0, #4]
						for(uint8_t i = 0; i < SE_EUI_SIZE; i++){
 8004b7c:	e005      	b.n	8004b8a <OnRxData+0x232>
							_appEui[i] = appData->Buffer[i + 1];
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	441a      	add	r2, r3
 8004b82:	7852      	ldrb	r2, [r2, #1]
 8004b84:	54fa      	strb	r2, [r7, r3]
						for(uint8_t i = 0; i < SE_EUI_SIZE; i++){
 8004b86:	3301      	adds	r3, #1
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b07      	cmp	r3, #7
 8004b8c:	d9f7      	bls.n	8004b7e <OnRxData+0x226>
						APP_LOG(TS_OFF, VLEVEL_M, "###### Lora-Configuration Mode: ON \r\n");
 8004b8e:	4b2b      	ldr	r3, [pc, #172]	; (8004c3c <OnRxData+0x2e4>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	4611      	mov	r1, r2
 8004b94:	2002      	movs	r0, #2
 8004b96:	f011 fcf5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8004b9a:	22f8      	movs	r2, #248	; 0xf8
 8004b9c:	4928      	ldr	r1, [pc, #160]	; (8004c40 <OnRxData+0x2e8>)
 8004b9e:	a806      	add	r0, sp, #24
 8004ba0:	f7fd faa8 	bl	80020f4 <FLASH_IF_Read>
 8004ba4:	b9d0      	cbnz	r0, 8004bdc <OnRxData+0x284>
							memcpy1( ( uint8_t * )FlashNVM.SeNvmDevJoinKey.JoinEui, _appEui, SE_EUI_SIZE);
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	4639      	mov	r1, r7
 8004baa:	a808      	add	r0, sp, #32
 8004bac:	f00f fe0d 	bl	80147ca <memcpy1>
							free(_appEui);
 8004bb0:	4638      	mov	r0, r7
 8004bb2:	f012 faa3 	bl	80170fc <free>
						if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8004bb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004bba:	4821      	ldr	r0, [pc, #132]	; (8004c40 <OnRxData+0x2e8>)
 8004bbc:	f7fd fab6 	bl	800212c <FLASH_IF_Erase>
 8004bc0:	b9d0      	cbnz	r0, 8004bf8 <OnRxData+0x2a0>
							if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8004bc2:	22f8      	movs	r2, #248	; 0xf8
 8004bc4:	a906      	add	r1, sp, #24
 8004bc6:	481e      	ldr	r0, [pc, #120]	; (8004c40 <OnRxData+0x2e8>)
 8004bc8:	f7fd fa78 	bl	80020bc <FLASH_IF_Write>
 8004bcc:	b968      	cbnz	r0, 8004bea <OnRxData+0x292>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8004bce:	4b1d      	ldr	r3, [pc, #116]	; (8004c44 <OnRxData+0x2ec>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	2002      	movs	r0, #2
 8004bd6:	f011 fcd5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004bda:	e750      	b.n	8004a7e <OnRxData+0x126>
							APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8004bdc:	4b1a      	ldr	r3, [pc, #104]	; (8004c48 <OnRxData+0x2f0>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	4611      	mov	r1, r2
 8004be2:	2002      	movs	r0, #2
 8004be4:	f011 fcce 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004be8:	e7e5      	b.n	8004bb6 <OnRxData+0x25e>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8004bea:	4b18      	ldr	r3, [pc, #96]	; (8004c4c <OnRxData+0x2f4>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	4611      	mov	r1, r2
 8004bf0:	2002      	movs	r0, #2
 8004bf2:	f011 fcc7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004bf6:	e742      	b.n	8004a7e <OnRxData+0x126>
							APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8004bf8:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <OnRxData+0x2f8>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	2002      	movs	r0, #2
 8004c00:	f011 fcc0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004c04:	e73b      	b.n	8004a7e <OnRxData+0x126>
						APP_LOG(TS_OFF, VLEVEL_M, "Memory Allocation Issue \r\n");
 8004c06:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <OnRxData+0x2fc>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	2002      	movs	r0, #2
 8004c0e:	f011 fcb9 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004c12:	e734      	b.n	8004a7e <OnRxData+0x126>
					uint8_t *_appKey = (uint8_t *) malloc (sizeof(uint8_t) * SE_KEY_SIZE);
 8004c14:	2010      	movs	r0, #16
 8004c16:	f012 fa69 	bl	80170ec <malloc>
					if(_appKey != NULL){
 8004c1a:	4607      	mov	r7, r0
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d071      	beq.n	8004d04 <OnRxData+0x3ac>
						memset(_appKey, 0, sizeof(uint8_t) * SE_KEY_SIZE);
 8004c20:	2300      	movs	r3, #0
 8004c22:	6003      	str	r3, [r0, #0]
 8004c24:	6043      	str	r3, [r0, #4]
 8004c26:	6083      	str	r3, [r0, #8]
 8004c28:	60c3      	str	r3, [r0, #12]
						for(uint8_t i = 0; i < SE_KEY_SIZE; i++){
 8004c2a:	e01b      	b.n	8004c64 <OnRxData+0x30c>
 8004c2c:	48000400 	.word	0x48000400
 8004c30:	20000fb0 	.word	0x20000fb0
 8004c34:	0801cf28 	.word	0x0801cf28
 8004c38:	0801cf5c 	.word	0x0801cf5c
 8004c3c:	0801c610 	.word	0x0801c610
 8004c40:	0803f000 	.word	0x0803f000
 8004c44:	0801c8b4 	.word	0x0801c8b4
 8004c48:	0801c4cc 	.word	0x0801c4cc
 8004c4c:	0801c8d8 	.word	0x0801c8d8
 8004c50:	0801c8f8 	.word	0x0801c8f8
 8004c54:	0801cf0c 	.word	0x0801cf0c
							_appKey[i] = appData->Buffer[i + 1];
 8004c58:	6862      	ldr	r2, [r4, #4]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	7852      	ldrb	r2, [r2, #1]
 8004c5e:	54fa      	strb	r2, [r7, r3]
						for(uint8_t i = 0; i < SE_KEY_SIZE; i++){
 8004c60:	3301      	adds	r3, #1
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b0f      	cmp	r3, #15
 8004c66:	d9f7      	bls.n	8004c58 <OnRxData+0x300>
						APP_LOG(TS_OFF, VLEVEL_M, "###### Lora-Configuration Mode: ON \r\n");
 8004c68:	4ba3      	ldr	r3, [pc, #652]	; (8004ef8 <OnRxData+0x5a0>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	4611      	mov	r1, r2
 8004c6e:	2002      	movs	r0, #2
 8004c70:	f011 fc88 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
						if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8004c74:	22f8      	movs	r2, #248	; 0xf8
 8004c76:	49a1      	ldr	r1, [pc, #644]	; (8004efc <OnRxData+0x5a4>)
 8004c78:	a806      	add	r0, sp, #24
 8004c7a:	f7fd fa3b 	bl	80020f4 <FLASH_IF_Read>
 8004c7e:	bb60      	cbnz	r0, 8004cda <OnRxData+0x382>
							memcpy1( ( uint8_t * )FlashNVM.KeyList[0].KeyValue,     _appKey, SE_KEY_SIZE);
 8004c80:	2210      	movs	r2, #16
 8004c82:	4639      	mov	r1, r7
 8004c84:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 8004c88:	f00f fd9f 	bl	80147ca <memcpy1>
							memcpy1( ( uint8_t * )FlashNVM.KeyList[1].KeyValue,     _appKey, SE_KEY_SIZE);
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	4639      	mov	r1, r7
 8004c90:	f10d 0042 	add.w	r0, sp, #66	; 0x42
 8004c94:	f00f fd99 	bl	80147ca <memcpy1>
							memcpy1( ( uint8_t * )FlashNVM.KeyList[2].KeyValue,     _appKey, SE_KEY_SIZE);
 8004c98:	2210      	movs	r2, #16
 8004c9a:	4639      	mov	r1, r7
 8004c9c:	f10d 0053 	add.w	r0, sp, #83	; 0x53
 8004ca0:	f00f fd93 	bl	80147ca <memcpy1>
							memcpy1( ( uint8_t * )FlashNVM.KeyList[3].KeyValue,     _appKey, SE_KEY_SIZE);
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	4639      	mov	r1, r7
 8004ca8:	a819      	add	r0, sp, #100	; 0x64
 8004caa:	f00f fd8e 	bl	80147ca <memcpy1>
							free(_appKey);
 8004cae:	4638      	mov	r0, r7
 8004cb0:	f012 fa24 	bl	80170fc <free>
						if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8004cb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cb8:	4890      	ldr	r0, [pc, #576]	; (8004efc <OnRxData+0x5a4>)
 8004cba:	f7fd fa37 	bl	800212c <FLASH_IF_Erase>
 8004cbe:	b9d0      	cbnz	r0, 8004cf6 <OnRxData+0x39e>
							if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8004cc0:	22f8      	movs	r2, #248	; 0xf8
 8004cc2:	a906      	add	r1, sp, #24
 8004cc4:	488d      	ldr	r0, [pc, #564]	; (8004efc <OnRxData+0x5a4>)
 8004cc6:	f7fd f9f9 	bl	80020bc <FLASH_IF_Write>
 8004cca:	b968      	cbnz	r0, 8004ce8 <OnRxData+0x390>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8004ccc:	4b8c      	ldr	r3, [pc, #560]	; (8004f00 <OnRxData+0x5a8>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	2002      	movs	r0, #2
 8004cd4:	f011 fc56 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004cd8:	e6d6      	b.n	8004a88 <OnRxData+0x130>
							APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8004cda:	4b8a      	ldr	r3, [pc, #552]	; (8004f04 <OnRxData+0x5ac>)
 8004cdc:	2200      	movs	r2, #0
 8004cde:	4611      	mov	r1, r2
 8004ce0:	2002      	movs	r0, #2
 8004ce2:	f011 fc4f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004ce6:	e7e5      	b.n	8004cb4 <OnRxData+0x35c>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8004ce8:	4b87      	ldr	r3, [pc, #540]	; (8004f08 <OnRxData+0x5b0>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	4611      	mov	r1, r2
 8004cee:	2002      	movs	r0, #2
 8004cf0:	f011 fc48 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004cf4:	e6c8      	b.n	8004a88 <OnRxData+0x130>
							APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8004cf6:	4b85      	ldr	r3, [pc, #532]	; (8004f0c <OnRxData+0x5b4>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	2002      	movs	r0, #2
 8004cfe:	f011 fc41 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004d02:	e6c1      	b.n	8004a88 <OnRxData+0x130>
						APP_LOG(TS_OFF, VLEVEL_M, "Memory Allocation Issue \r\n");
 8004d04:	4b82      	ldr	r3, [pc, #520]	; (8004f10 <OnRxData+0x5b8>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	4611      	mov	r1, r2
 8004d0a:	2002      	movs	r0, #2
 8004d0c:	f011 fc3a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004d10:	e6ba      	b.n	8004a88 <OnRxData+0x130>
					APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8004d12:	4b80      	ldr	r3, [pc, #512]	; (8004f14 <OnRxData+0x5bc>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	4611      	mov	r1, r2
 8004d18:	2002      	movs	r0, #2
 8004d1a:	f011 fc33 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 8004d1e:	4b7e      	ldr	r3, [pc, #504]	; (8004f18 <OnRxData+0x5c0>)
 8004d20:	2200      	movs	r2, #0
 8004d22:	4611      	mov	r1, r2
 8004d24:	2002      	movs	r0, #2
 8004d26:	f011 fc2d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					for (int i = 0; i < appData->BufferSize; i++) {
 8004d2a:	2700      	movs	r7, #0
 8004d2c:	7862      	ldrb	r2, [r4, #1]
 8004d2e:	42ba      	cmp	r2, r7
 8004d30:	dd0a      	ble.n	8004d48 <OnRxData+0x3f0>
						APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	5ddb      	ldrb	r3, [r3, r7]
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	4b78      	ldr	r3, [pc, #480]	; (8004f1c <OnRxData+0x5c4>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	2002      	movs	r0, #2
 8004d40:	f011 fc20 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					for (int i = 0; i < appData->BufferSize; i++) {
 8004d44:	3701      	adds	r7, #1
 8004d46:	e7f1      	b.n	8004d2c <OnRxData+0x3d4>
                    for (int i = 1; i < appData->BufferSize; i++) {
 8004d48:	2301      	movs	r3, #1
            		uint32_t parsedSeconds = 0;
 8004d4a:	2700      	movs	r7, #0
                    for (int i = 1; i < appData->BufferSize; i++) {
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	dd05      	ble.n	8004d5c <OnRxData+0x404>
                        parsedSeconds = (parsedSeconds << 8) | appData->Buffer[i];
 8004d50:	6861      	ldr	r1, [r4, #4]
 8004d52:	5cc9      	ldrb	r1, [r1, r3]
 8004d54:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
                    for (int i = 1; i < appData->BufferSize; i++) {
 8004d58:	3301      	adds	r3, #1
 8004d5a:	e7f7      	b.n	8004d4c <OnRxData+0x3f4>
            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8004d5c:	22f8      	movs	r2, #248	; 0xf8
 8004d5e:	4967      	ldr	r1, [pc, #412]	; (8004efc <OnRxData+0x5a4>)
 8004d60:	a806      	add	r0, sp, #24
 8004d62:	f7fd f9c7 	bl	80020f4 <FLASH_IF_Read>
 8004d66:	bb50      	cbnz	r0, 8004dbe <OnRxData+0x466>
            			FlashNVM.pwxTxInterval = (uint64_t)parsedSeconds*1000;
 8004d68:	0efa      	lsrs	r2, r7, #27
 8004d6a:	017b      	lsls	r3, r7, #5
 8004d6c:	1bdb      	subs	r3, r3, r7
 8004d6e:	f162 0200 	sbc.w	r2, r2, #0
 8004d72:	0092      	lsls	r2, r2, #2
 8004d74:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	19db      	adds	r3, r3, r7
 8004d7c:	f142 0200 	adc.w	r2, r2, #0
 8004d80:	00d2      	lsls	r2, r2, #3
 8004d82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	933c      	str	r3, [sp, #240]	; 0xf0
 8004d8a:	923d      	str	r2, [sp, #244]	; 0xf4
            			TRANSMIT_INTERVAL_MS = parsedSeconds*1000;
 8004d8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d90:	fb03 f707 	mul.w	r7, r3, r7
 8004d94:	4b62      	ldr	r3, [pc, #392]	; (8004f20 <OnRxData+0x5c8>)
 8004d96:	601f      	str	r7, [r3, #0]
					if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8004d98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d9c:	4857      	ldr	r0, [pc, #348]	; (8004efc <OnRxData+0x5a4>)
 8004d9e:	f7fd f9c5 	bl	800212c <FLASH_IF_Erase>
 8004da2:	b9d0      	cbnz	r0, 8004dda <OnRxData+0x482>
						if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8004da4:	22f8      	movs	r2, #248	; 0xf8
 8004da6:	a906      	add	r1, sp, #24
 8004da8:	4854      	ldr	r0, [pc, #336]	; (8004efc <OnRxData+0x5a4>)
 8004daa:	f7fd f987 	bl	80020bc <FLASH_IF_Write>
 8004dae:	b968      	cbnz	r0, 8004dcc <OnRxData+0x474>
							APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8004db0:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <OnRxData+0x5a8>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	4611      	mov	r1, r2
 8004db6:	2002      	movs	r0, #2
 8004db8:	f011 fbe4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004dbc:	e669      	b.n	8004a92 <OnRxData+0x13a>
						APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8004dbe:	4b51      	ldr	r3, [pc, #324]	; (8004f04 <OnRxData+0x5ac>)
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	2002      	movs	r0, #2
 8004dc6:	f011 fbdd 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004dca:	e7e5      	b.n	8004d98 <OnRxData+0x440>
							APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8004dcc:	4b4e      	ldr	r3, [pc, #312]	; (8004f08 <OnRxData+0x5b0>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	2002      	movs	r0, #2
 8004dd4:	f011 fbd6 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004dd8:	e65b      	b.n	8004a92 <OnRxData+0x13a>
						APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8004dda:	4b4c      	ldr	r3, [pc, #304]	; (8004f0c <OnRxData+0x5b4>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	4611      	mov	r1, r2
 8004de0:	2002      	movs	r0, #2
 8004de2:	f011 fbcf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004de6:	e654      	b.n	8004a92 <OnRxData+0x13a>
					APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8004de8:	4b4a      	ldr	r3, [pc, #296]	; (8004f14 <OnRxData+0x5bc>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	4611      	mov	r1, r2
 8004dee:	2002      	movs	r0, #2
 8004df0:	f011 fbc8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 8004df4:	4b48      	ldr	r3, [pc, #288]	; (8004f18 <OnRxData+0x5c0>)
 8004df6:	2200      	movs	r2, #0
 8004df8:	4611      	mov	r1, r2
 8004dfa:	2002      	movs	r0, #2
 8004dfc:	f011 fbc2 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					for (int i = 0; i < appData->BufferSize; i++) {
 8004e00:	2700      	movs	r7, #0
 8004e02:	7861      	ldrb	r1, [r4, #1]
 8004e04:	42b9      	cmp	r1, r7
 8004e06:	dd0a      	ble.n	8004e1e <OnRxData+0x4c6>
						APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 8004e08:	6863      	ldr	r3, [r4, #4]
 8004e0a:	5ddb      	ldrb	r3, [r3, r7]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <OnRxData+0x5c4>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	4611      	mov	r1, r2
 8004e14:	2002      	movs	r0, #2
 8004e16:	f011 fbb5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					for (int i = 0; i < appData->BufferSize; i++) {
 8004e1a:	3701      	adds	r7, #1
 8004e1c:	e7f1      	b.n	8004e02 <OnRxData+0x4aa>
                    for (int i = 1; i < appData->BufferSize; i++) {
 8004e1e:	2301      	movs	r3, #1
            		uint16_t uplinkCounter = 0;
 8004e20:	2700      	movs	r7, #0
                    for (int i = 1; i < appData->BufferSize; i++) {
 8004e22:	4299      	cmp	r1, r3
 8004e24:	dd06      	ble.n	8004e34 <OnRxData+0x4dc>
                    	uplinkCounter = (uplinkCounter << 8) | appData->Buffer[i];
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	5cd2      	ldrb	r2, [r2, r3]
 8004e2a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8004e2e:	b297      	uxth	r7, r2
                    for (int i = 1; i < appData->BufferSize; i++) {
 8004e30:	3301      	adds	r3, #1
 8004e32:	e7f6      	b.n	8004e22 <OnRxData+0x4ca>
            		APP_LOG( TS_OFF, VLEVEL_M, "###### Uplinks before sending Confirmed Uplink: %u \r\n", uplinkCounter);
 8004e34:	9700      	str	r7, [sp, #0]
 8004e36:	4b3b      	ldr	r3, [pc, #236]	; (8004f24 <OnRxData+0x5cc>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	2002      	movs	r0, #2
 8004e3e:	f011 fba1 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8004e42:	22f8      	movs	r2, #248	; 0xf8
 8004e44:	492d      	ldr	r1, [pc, #180]	; (8004efc <OnRxData+0x5a4>)
 8004e46:	a806      	add	r0, sp, #24
 8004e48:	f7fd f954 	bl	80020f4 <FLASH_IF_Read>
 8004e4c:	b9c8      	cbnz	r0, 8004e82 <OnRxData+0x52a>
            			FlashNVM.pwxCnfUplinkCount = (uint16_t)uplinkCounter;
 8004e4e:	f8ad 7100 	strh.w	r7, [sp, #256]	; 0x100
            			MAX_UPLINK_BEFORE_CONFIRMED = uplinkCounter;
 8004e52:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <OnRxData+0x5d0>)
 8004e54:	601f      	str	r7, [r3, #0]
            			confUplinkCounter = 0;
 8004e56:	4b35      	ldr	r3, [pc, #212]	; (8004f2c <OnRxData+0x5d4>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	801a      	strh	r2, [r3, #0]
					if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8004e5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004e60:	4826      	ldr	r0, [pc, #152]	; (8004efc <OnRxData+0x5a4>)
 8004e62:	f7fd f963 	bl	800212c <FLASH_IF_Erase>
 8004e66:	b9d0      	cbnz	r0, 8004e9e <OnRxData+0x546>
						if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8004e68:	22f8      	movs	r2, #248	; 0xf8
 8004e6a:	a906      	add	r1, sp, #24
 8004e6c:	4823      	ldr	r0, [pc, #140]	; (8004efc <OnRxData+0x5a4>)
 8004e6e:	f7fd f925 	bl	80020bc <FLASH_IF_Write>
 8004e72:	b968      	cbnz	r0, 8004e90 <OnRxData+0x538>
							APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8004e74:	4b22      	ldr	r3, [pc, #136]	; (8004f00 <OnRxData+0x5a8>)
 8004e76:	2200      	movs	r2, #0
 8004e78:	4611      	mov	r1, r2
 8004e7a:	2002      	movs	r0, #2
 8004e7c:	f011 fb82 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004e80:	e60c      	b.n	8004a9c <OnRxData+0x144>
						APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8004e82:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <OnRxData+0x5ac>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	4611      	mov	r1, r2
 8004e88:	2002      	movs	r0, #2
 8004e8a:	f011 fb7b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004e8e:	e7e5      	b.n	8004e5c <OnRxData+0x504>
							APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8004e90:	4b1d      	ldr	r3, [pc, #116]	; (8004f08 <OnRxData+0x5b0>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	4611      	mov	r1, r2
 8004e96:	2002      	movs	r0, #2
 8004e98:	f011 fb74 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004e9c:	e5fe      	b.n	8004a9c <OnRxData+0x144>
						APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8004e9e:	4b1b      	ldr	r3, [pc, #108]	; (8004f0c <OnRxData+0x5b4>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4611      	mov	r1, r2
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	f011 fb6d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8004eaa:	e5f7      	b.n	8004a9c <OnRxData+0x144>
					APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <OnRxData+0x5bc>)
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	2002      	movs	r0, #2
 8004eb4:	f011 fb66 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 8004eb8:	4b17      	ldr	r3, [pc, #92]	; (8004f18 <OnRxData+0x5c0>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	4611      	mov	r1, r2
 8004ebe:	2002      	movs	r0, #2
 8004ec0:	f011 fb60 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					for (int i = 0; i < appData->BufferSize; i++) {
 8004ec4:	2700      	movs	r7, #0
 8004ec6:	7863      	ldrb	r3, [r4, #1]
 8004ec8:	42bb      	cmp	r3, r7
 8004eca:	dd0a      	ble.n	8004ee2 <OnRxData+0x58a>
						APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 8004ecc:	6863      	ldr	r3, [r4, #4]
 8004ece:	5ddb      	ldrb	r3, [r3, r7]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <OnRxData+0x5c4>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	2002      	movs	r0, #2
 8004eda:	f011 fb53 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					for (int i = 0; i < appData->BufferSize; i++) {
 8004ede:	3701      	adds	r7, #1
 8004ee0:	e7f1      	b.n	8004ec6 <OnRxData+0x56e>
            		APP_LOG( TS_OFF, VLEVEL_M, "###### Sending System Diagnostic on the next uplink \r\n");
 8004ee2:	4b13      	ldr	r3, [pc, #76]	; (8004f30 <OnRxData+0x5d8>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	4611      	mov	r1, r2
 8004ee8:	2002      	movs	r0, #2
 8004eea:	f011 fb4b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            		sendSystemDiagnostic = true;
 8004eee:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <OnRxData+0x5dc>)
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	701a      	strb	r2, [r3, #0]
 8004ef4:	e5d7      	b.n	8004aa6 <OnRxData+0x14e>
 8004ef6:	bf00      	nop
 8004ef8:	0801c610 	.word	0x0801c610
 8004efc:	0803f000 	.word	0x0803f000
 8004f00:	0801c8b4 	.word	0x0801c8b4
 8004f04:	0801c4cc 	.word	0x0801c4cc
 8004f08:	0801c8d8 	.word	0x0801c8d8
 8004f0c:	0801c8f8 	.word	0x0801c8f8
 8004f10:	0801cf0c 	.word	0x0801cf0c
 8004f14:	0801cf28 	.word	0x0801cf28
 8004f18:	0801cf5c 	.word	0x0801cf5c
 8004f1c:	0801c280 	.word	0x0801c280
 8004f20:	2000004c 	.word	0x2000004c
 8004f24:	0801cf80 	.word	0x0801cf80
 8004f28:	20000040 	.word	0x20000040
 8004f2c:	200009e0 	.word	0x200009e0
 8004f30:	0801cfb8 	.word	0x0801cfb8
 8004f34:	20001048 	.word	0x20001048
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8004f38:	4fb6      	ldr	r7, [pc, #728]	; (8005214 <OnRxData+0x8bc>)
 8004f3a:	463b      	mov	r3, r7
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4611      	mov	r1, r2
 8004f40:	2002      	movs	r0, #2
 8004f42:	f011 fb1f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n 		[!]	I F*CKED UP MODE [!]              \r\n");
 8004f46:	4bb4      	ldr	r3, [pc, #720]	; (8005218 <OnRxData+0x8c0>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	2002      	movs	r0, #2
 8004f4e:	f011 fb19 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8004f52:	463b      	mov	r3, r7
 8004f54:	2200      	movs	r2, #0
 8004f56:	4611      	mov	r1, r2
 8004f58:	2002      	movs	r0, #2
 8004f5a:	f011 fb13 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n Reverting all device configuration to default \r\n");
 8004f5e:	4baf      	ldr	r3, [pc, #700]	; (800521c <OnRxData+0x8c4>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	4611      	mov	r1, r2
 8004f64:	2002      	movs	r0, #2
 8004f66:	f011 fb0d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8004f6a:	22f8      	movs	r2, #248	; 0xf8
 8004f6c:	49ac      	ldr	r1, [pc, #688]	; (8005220 <OnRxData+0x8c8>)
 8004f6e:	a806      	add	r0, sp, #24
 8004f70:	f7fd f8c0 	bl	80020f4 <FLASH_IF_Read>
 8004f74:	2800      	cmp	r0, #0
 8004f76:	d169      	bne.n	800504c <OnRxData+0x6f4>
								FlashNVM.pwxWaterLevelThresholdHigh = (uint16_t)2.0;
 8004f78:	f04f 0802 	mov.w	r8, #2
 8004f7c:	f8ad 8102 	strh.w	r8, [sp, #258]	; 0x102
								thresholdLevelHigh = 2.0;
 8004f80:	4ba8      	ldr	r3, [pc, #672]	; (8005224 <OnRxData+0x8cc>)
 8004f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004f86:	601a      	str	r2, [r3, #0]
								HAL_Delay(100);
 8004f88:	2064      	movs	r0, #100	; 0x64
 8004f8a:	f7fd fca9 	bl	80028e0 <HAL_Delay>
								FlashNVM.pwxWaterLevelThresholdLow = (uint16_t)1.5;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f8ad 3104 	strh.w	r3, [sp, #260]	; 0x104
								thresholdLevelLow = 1.5;
 8004f94:	4ba4      	ldr	r3, [pc, #656]	; (8005228 <OnRxData+0x8d0>)
 8004f96:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8004f9a:	601a      	str	r2, [r3, #0]
								HAL_Delay(100);
 8004f9c:	2064      	movs	r0, #100	; 0x64
 8004f9e:	f7fd fc9f 	bl	80028e0 <HAL_Delay>
								FlashNVM.pwxTxInterval = (uint64_t)900000;
 8004fa2:	4aa2      	ldr	r2, [pc, #648]	; (800522c <OnRxData+0x8d4>)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e9cd 233c 	strd	r2, r3, [sp, #240]	; 0xf0
								TRANSMIT_INTERVAL_MS = 900000;
 8004faa:	f8df a284 	ldr.w	sl, [pc, #644]	; 8005230 <OnRxData+0x8d8>
 8004fae:	4b9f      	ldr	r3, [pc, #636]	; (800522c <OnRxData+0x8d4>)
 8004fb0:	f8ca 3000 	str.w	r3, [sl]
								HAL_Delay(100);
 8004fb4:	2064      	movs	r0, #100	; 0x64
 8004fb6:	f7fd fc93 	bl	80028e0 <HAL_Delay>
								FlashNVM.pwxCnfUplinkCount = (uint16_t)4;
 8004fba:	2304      	movs	r3, #4
 8004fbc:	f8ad 3100 	strh.w	r3, [sp, #256]	; 0x100
								MAX_UPLINK_BEFORE_CONFIRMED = 4;
 8004fc0:	4a9c      	ldr	r2, [pc, #624]	; (8005234 <OnRxData+0x8dc>)
 8004fc2:	6013      	str	r3, [r2, #0]
								confUplinkCounter = 0;
 8004fc4:	2700      	movs	r7, #0
 8004fc6:	4b9c      	ldr	r3, [pc, #624]	; (8005238 <OnRxData+0x8e0>)
 8004fc8:	801f      	strh	r7, [r3, #0]
								HAL_Delay(100);
 8004fca:	2064      	movs	r0, #100	; 0x64
 8004fcc:	f7fd fc88 	bl	80028e0 <HAL_Delay>
								FlashNVM.pwxSamplingMethod = (uint8_t)0;
 8004fd0:	f88d 7107 	strb.w	r7, [sp, #263]	; 0x107
								samplingMethod = 0;
 8004fd4:	4b99      	ldr	r3, [pc, #612]	; (800523c <OnRxData+0x8e4>)
 8004fd6:	601f      	str	r7, [r3, #0]
								HAL_Delay(100);
 8004fd8:	2064      	movs	r0, #100	; 0x64
 8004fda:	f7fd fc81 	bl	80028e0 <HAL_Delay>
								FlashNVM.pwxMeasurementMethod = (uint8_t)0;
 8004fde:	f88d 7108 	strb.w	r7, [sp, #264]	; 0x108
								measurementMethod = 0;
 8004fe2:	4b97      	ldr	r3, [pc, #604]	; (8005240 <OnRxData+0x8e8>)
 8004fe4:	601f      	str	r7, [r3, #0]
								HAL_Delay(100);
 8004fe6:	2064      	movs	r0, #100	; 0x64
 8004fe8:	f7fd fc7a 	bl	80028e0 <HAL_Delay>
		            			FlashNVM.pwxSamplingCount = (uint16_t)5;
 8004fec:	2305      	movs	r3, #5
 8004fee:	f8ad 310a 	strh.w	r3, [sp, #266]	; 0x10a
		            			MAX_WATER_LEVEL_SAMPLES = 5;
 8004ff2:	f8df 9250 	ldr.w	r9, [pc, #592]	; 8005244 <OnRxData+0x8ec>
 8004ff6:	f8c9 3000 	str.w	r3, [r9]
						    	waterLevelSamples = (float*)malloc(sizeof(int)*MAX_WATER_LEVEL_SAMPLES);
 8004ffa:	2014      	movs	r0, #20
 8004ffc:	f012 f876 	bl	80170ec <malloc>
 8005000:	4b91      	ldr	r3, [pc, #580]	; (8005248 <OnRxData+0x8f0>)
 8005002:	6018      	str	r0, [r3, #0]
						    	SAMPLE_INTERVAL_MS = (TRANSMIT_INTERVAL_MS/MAX_WATER_LEVEL_SAMPLES);
 8005004:	f8da 3000 	ldr.w	r3, [sl]
 8005008:	f8d9 2000 	ldr.w	r2, [r9]
 800500c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005010:	4a8e      	ldr	r2, [pc, #568]	; (800524c <OnRxData+0x8f4>)
 8005012:	6013      	str	r3, [r2, #0]
						    	HAL_Delay(100);
 8005014:	2064      	movs	r0, #100	; 0x64
 8005016:	f7fd fc63 	bl	80028e0 <HAL_Delay>
						    	APP_LOG(TS_OFF, VLEVEL_M, " REVERTED ALL CONFIGURATION TO DEFAULT! \r\n");
 800501a:	4b8d      	ldr	r3, [pc, #564]	; (8005250 <OnRxData+0x8f8>)
 800501c:	463a      	mov	r2, r7
 800501e:	4639      	mov	r1, r7
 8005020:	4640      	mov	r0, r8
 8005022:	f011 faaf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8005026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800502a:	487d      	ldr	r0, [pc, #500]	; (8005220 <OnRxData+0x8c8>)
 800502c:	f7fd f87e 	bl	800212c <FLASH_IF_Erase>
 8005030:	b9d0      	cbnz	r0, 8005068 <OnRxData+0x710>
								if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8005032:	22f8      	movs	r2, #248	; 0xf8
 8005034:	a906      	add	r1, sp, #24
 8005036:	487a      	ldr	r0, [pc, #488]	; (8005220 <OnRxData+0x8c8>)
 8005038:	f7fd f840 	bl	80020bc <FLASH_IF_Write>
 800503c:	b968      	cbnz	r0, 800505a <OnRxData+0x702>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 800503e:	4b85      	ldr	r3, [pc, #532]	; (8005254 <OnRxData+0x8fc>)
 8005040:	2200      	movs	r2, #0
 8005042:	4611      	mov	r1, r2
 8005044:	2002      	movs	r0, #2
 8005046:	f011 fa9d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800504a:	e013      	b.n	8005074 <OnRxData+0x71c>
								APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 800504c:	4b82      	ldr	r3, [pc, #520]	; (8005258 <OnRxData+0x900>)
 800504e:	2200      	movs	r2, #0
 8005050:	4611      	mov	r1, r2
 8005052:	2002      	movs	r0, #2
 8005054:	f011 fa96 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005058:	e7e5      	b.n	8005026 <OnRxData+0x6ce>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 800505a:	4b80      	ldr	r3, [pc, #512]	; (800525c <OnRxData+0x904>)
 800505c:	2200      	movs	r2, #0
 800505e:	4611      	mov	r1, r2
 8005060:	2002      	movs	r0, #2
 8005062:	f011 fa8f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005066:	e005      	b.n	8005074 <OnRxData+0x71c>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8005068:	4b7d      	ldr	r3, [pc, #500]	; (8005260 <OnRxData+0x908>)
 800506a:	2200      	movs	r2, #0
 800506c:	4611      	mov	r1, r2
 800506e:	2002      	movs	r0, #2
 8005070:	f011 fa88 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							HAL_Delay(500);
 8005074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005078:	f7fd fc32 	bl	80028e0 <HAL_Delay>
							HAL_NVIC_SystemReset();
 800507c:	f003 fb64 	bl	8008748 <HAL_NVIC_SystemReset>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8005080:	4b64      	ldr	r3, [pc, #400]	; (8005214 <OnRxData+0x8bc>)
 8005082:	2200      	movs	r2, #0
 8005084:	4611      	mov	r1, r2
 8005086:	2002      	movs	r0, #2
 8005088:	f011 fa7c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800508c:	e4bf      	b.n	8004a0e <OnRxData+0xb6>
								APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 800508e:	4f61      	ldr	r7, [pc, #388]	; (8005214 <OnRxData+0x8bc>)
 8005090:	463b      	mov	r3, r7
 8005092:	2200      	movs	r2, #0
 8005094:	4611      	mov	r1, r2
 8005096:	2002      	movs	r0, #2
 8005098:	f011 fa74 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
								APP_LOG(TS_OFF, VLEVEL_M, "\r\n 	[!]	CONTINUOUS UPLINK MODE OFF [!]              \r\n");
 800509c:	4b71      	ldr	r3, [pc, #452]	; (8005264 <OnRxData+0x90c>)
 800509e:	2200      	movs	r2, #0
 80050a0:	4611      	mov	r1, r2
 80050a2:	2002      	movs	r0, #2
 80050a4:	f011 fa6e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
								APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 80050a8:	463b      	mov	r3, r7
 80050aa:	2200      	movs	r2, #0
 80050ac:	4611      	mov	r1, r2
 80050ae:	2002      	movs	r0, #2
 80050b0:	f011 fa68 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
								continuousMode = false;
 80050b4:	4b6c      	ldr	r3, [pc, #432]	; (8005268 <OnRxData+0x910>)
 80050b6:	2200      	movs	r2, #0
 80050b8:	701a      	strb	r2, [r3, #0]
								HAL_Delay(500);
 80050ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050be:	f7fd fc0f 	bl	80028e0 <HAL_Delay>
 80050c2:	e4ad      	b.n	8004a20 <OnRxData+0xc8>
								APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 80050c4:	4c53      	ldr	r4, [pc, #332]	; (8005214 <OnRxData+0x8bc>)
 80050c6:	4623      	mov	r3, r4
 80050c8:	2200      	movs	r2, #0
 80050ca:	4611      	mov	r1, r2
 80050cc:	2002      	movs	r0, #2
 80050ce:	f011 fa59 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
								APP_LOG(TS_OFF, VLEVEL_M, "\r\n 	[!]	CONTINUOUS UPLINK MODE ON [!]              \r\n");
 80050d2:	4b66      	ldr	r3, [pc, #408]	; (800526c <OnRxData+0x914>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	4611      	mov	r1, r2
 80050d8:	2002      	movs	r0, #2
 80050da:	f011 fa53 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
								APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 80050de:	4623      	mov	r3, r4
 80050e0:	2200      	movs	r2, #0
 80050e2:	4611      	mov	r1, r2
 80050e4:	2002      	movs	r0, #2
 80050e6:	f011 fa4d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
								continuousMode = true;
 80050ea:	4b5f      	ldr	r3, [pc, #380]	; (8005268 <OnRxData+0x910>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
								HAL_Delay(500);
 80050f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050f4:	f7fd fbf4 	bl	80028e0 <HAL_Delay>
 80050f8:	e497      	b.n	8004a2a <OnRxData+0xd2>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 80050fa:	4b46      	ldr	r3, [pc, #280]	; (8005214 <OnRxData+0x8bc>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	4611      	mov	r1, r2
 8005100:	2002      	movs	r0, #2
 8005102:	f011 fa3f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 8005106:	4b5a      	ldr	r3, [pc, #360]	; (8005270 <OnRxData+0x918>)
 8005108:	2200      	movs	r2, #0
 800510a:	4611      	mov	r1, r2
 800510c:	2002      	movs	r0, #2
 800510e:	f011 fa39 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 8005112:	2700      	movs	r7, #0
 8005114:	e009      	b.n	800512a <OnRxData+0x7d2>
								APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 8005116:	6863      	ldr	r3, [r4, #4]
 8005118:	5ddb      	ldrb	r3, [r3, r7]
 800511a:	9300      	str	r3, [sp, #0]
 800511c:	4b55      	ldr	r3, [pc, #340]	; (8005274 <OnRxData+0x91c>)
 800511e:	2200      	movs	r2, #0
 8005120:	4611      	mov	r1, r2
 8005122:	2002      	movs	r0, #2
 8005124:	f011 fa2e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 8005128:	3701      	adds	r7, #1
 800512a:	7862      	ldrb	r2, [r4, #1]
 800512c:	42ba      	cmp	r2, r7
 800512e:	dcf2      	bgt.n	8005116 <OnRxData+0x7be>
		                    for (int i = 1; i < appData->BufferSize; i++) {
 8005130:	2301      	movs	r3, #1
		            		int parsedCount = 0;
 8005132:	2700      	movs	r7, #0
 8005134:	e004      	b.n	8005140 <OnRxData+0x7e8>
		                    	parsedCount = (parsedCount << 8) | appData->Buffer[i];
 8005136:	6861      	ldr	r1, [r4, #4]
 8005138:	5cc9      	ldrb	r1, [r1, r3]
 800513a:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
		                    for (int i = 1; i < appData->BufferSize; i++) {
 800513e:	3301      	adds	r3, #1
 8005140:	429a      	cmp	r2, r3
 8005142:	dcf8      	bgt.n	8005136 <OnRxData+0x7de>
		            		APP_LOG( TS_OFF, VLEVEL_M, "###### Sampling Count: %u \r\n", parsedCount);
 8005144:	9700      	str	r7, [sp, #0]
 8005146:	4b4c      	ldr	r3, [pc, #304]	; (8005278 <OnRxData+0x920>)
 8005148:	2200      	movs	r2, #0
 800514a:	4611      	mov	r1, r2
 800514c:	2002      	movs	r0, #2
 800514e:	f011 fa19 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8005152:	22f8      	movs	r2, #248	; 0xf8
 8005154:	4932      	ldr	r1, [pc, #200]	; (8005220 <OnRxData+0x8c8>)
 8005156:	a806      	add	r0, sp, #24
 8005158:	f7fc ffcc 	bl	80020f4 <FLASH_IF_Read>
 800515c:	bb28      	cbnz	r0, 80051aa <OnRxData+0x852>
		            			FlashNVM.pwxSamplingCount = (uint16_t)parsedCount;
 800515e:	f8ad 710a 	strh.w	r7, [sp, #266]	; 0x10a
		            			MAX_WATER_LEVEL_SAMPLES = parsedCount;
 8005162:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005244 <OnRxData+0x8ec>
 8005166:	f8c8 7000 	str.w	r7, [r8]
						    	waterLevelSamples = (float*)malloc(sizeof(int)*MAX_WATER_LEVEL_SAMPLES);
 800516a:	00b8      	lsls	r0, r7, #2
 800516c:	f011 ffbe 	bl	80170ec <malloc>
 8005170:	4b35      	ldr	r3, [pc, #212]	; (8005248 <OnRxData+0x8f0>)
 8005172:	6018      	str	r0, [r3, #0]
						    	SAMPLE_INTERVAL_MS = (TRANSMIT_INTERVAL_MS/MAX_WATER_LEVEL_SAMPLES);
 8005174:	4b2e      	ldr	r3, [pc, #184]	; (8005230 <OnRxData+0x8d8>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f8d8 2000 	ldr.w	r2, [r8]
 800517c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005180:	4a32      	ldr	r2, [pc, #200]	; (800524c <OnRxData+0x8f4>)
 8005182:	6013      	str	r3, [r2, #0]
							if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 8005184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005188:	4825      	ldr	r0, [pc, #148]	; (8005220 <OnRxData+0x8c8>)
 800518a:	f7fc ffcf 	bl	800212c <FLASH_IF_Erase>
 800518e:	b9d8      	cbnz	r0, 80051c8 <OnRxData+0x870>
								if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8005190:	22f8      	movs	r2, #248	; 0xf8
 8005192:	a906      	add	r1, sp, #24
 8005194:	4822      	ldr	r0, [pc, #136]	; (8005220 <OnRxData+0x8c8>)
 8005196:	f7fc ff91 	bl	80020bc <FLASH_IF_Write>
 800519a:	b968      	cbnz	r0, 80051b8 <OnRxData+0x860>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <OnRxData+0x8fc>)
 800519e:	2200      	movs	r2, #0
 80051a0:	4611      	mov	r1, r2
 80051a2:	2002      	movs	r0, #2
 80051a4:	f011 f9ee 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80051a8:	e403      	b.n	80049b2 <OnRxData+0x5a>
								APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80051aa:	4b2b      	ldr	r3, [pc, #172]	; (8005258 <OnRxData+0x900>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	4611      	mov	r1, r2
 80051b0:	2002      	movs	r0, #2
 80051b2:	f011 f9e7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80051b6:	e7e5      	b.n	8005184 <OnRxData+0x82c>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <OnRxData+0x904>)
 80051ba:	2200      	movs	r2, #0
 80051bc:	4611      	mov	r1, r2
 80051be:	2002      	movs	r0, #2
 80051c0:	f011 f9e0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80051c4:	f7ff bbf5 	b.w	80049b2 <OnRxData+0x5a>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 80051c8:	4b25      	ldr	r3, [pc, #148]	; (8005260 <OnRxData+0x908>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	4611      	mov	r1, r2
 80051ce:	2002      	movs	r0, #2
 80051d0:	f011 f9d8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80051d4:	f7ff bbed 	b.w	80049b2 <OnRxData+0x5a>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 80051d8:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <OnRxData+0x8bc>)
 80051da:	2200      	movs	r2, #0
 80051dc:	4611      	mov	r1, r2
 80051de:	2002      	movs	r0, #2
 80051e0:	f011 f9d0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 80051e4:	4b22      	ldr	r3, [pc, #136]	; (8005270 <OnRxData+0x918>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	4611      	mov	r1, r2
 80051ea:	2002      	movs	r0, #2
 80051ec:	f011 f9ca 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 80051f0:	2700      	movs	r7, #0
 80051f2:	e009      	b.n	8005208 <OnRxData+0x8b0>
								APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 80051f4:	6863      	ldr	r3, [r4, #4]
 80051f6:	5ddb      	ldrb	r3, [r3, r7]
 80051f8:	9300      	str	r3, [sp, #0]
 80051fa:	4b1e      	ldr	r3, [pc, #120]	; (8005274 <OnRxData+0x91c>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	4611      	mov	r1, r2
 8005200:	2002      	movs	r0, #2
 8005202:	f011 f9bf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 8005206:	3701      	adds	r7, #1
 8005208:	7862      	ldrb	r2, [r4, #1]
 800520a:	42ba      	cmp	r2, r7
 800520c:	dcf2      	bgt.n	80051f4 <OnRxData+0x89c>
		                    for (int i = 1; i < appData->BufferSize; i++) {
 800520e:	2301      	movs	r3, #1
		            		int parsedLevel = 0;
 8005210:	2700      	movs	r7, #0
 8005212:	e038      	b.n	8005286 <OnRxData+0x92e>
 8005214:	0801cf28 	.word	0x0801cf28
 8005218:	0801cff0 	.word	0x0801cff0
 800521c:	0801d020 	.word	0x0801d020
 8005220:	0803f000 	.word	0x0803f000
 8005224:	20000050 	.word	0x20000050
 8005228:	20000054 	.word	0x20000054
 800522c:	000dbba0 	.word	0x000dbba0
 8005230:	2000004c 	.word	0x2000004c
 8005234:	20000040 	.word	0x20000040
 8005238:	200009e0 	.word	0x200009e0
 800523c:	20000b14 	.word	0x20000b14
 8005240:	200009e4 	.word	0x200009e4
 8005244:	20000044 	.word	0x20000044
 8005248:	20001060 	.word	0x20001060
 800524c:	20000048 	.word	0x20000048
 8005250:	0801d054 	.word	0x0801d054
 8005254:	0801c8b4 	.word	0x0801c8b4
 8005258:	0801c4cc 	.word	0x0801c4cc
 800525c:	0801c8d8 	.word	0x0801c8d8
 8005260:	0801c8f8 	.word	0x0801c8f8
 8005264:	0801d080 	.word	0x0801d080
 8005268:	20001028 	.word	0x20001028
 800526c:	0801d0b8 	.word	0x0801d0b8
 8005270:	0801cf5c 	.word	0x0801cf5c
 8005274:	0801c280 	.word	0x0801c280
 8005278:	0801d0f0 	.word	0x0801d0f0
		                    	parsedLevel = (parsedLevel << 8) | appData->Buffer[i];
 800527c:	6861      	ldr	r1, [r4, #4]
 800527e:	5cc9      	ldrb	r1, [r1, r3]
 8005280:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
		                    for (int i = 1; i < appData->BufferSize; i++) {
 8005284:	3301      	adds	r3, #1
 8005286:	429a      	cmp	r2, r3
 8005288:	dcf8      	bgt.n	800527c <OnRxData+0x924>
		            		APP_LOG( TS_OFF, VLEVEL_M, "###### Water Level HIGH Threshold: %u \r\n", parsedLevel);
 800528a:	9700      	str	r7, [sp, #0]
 800528c:	4bac      	ldr	r3, [pc, #688]	; (8005540 <OnRxData+0xbe8>)
 800528e:	2200      	movs	r2, #0
 8005290:	4611      	mov	r1, r2
 8005292:	2002      	movs	r0, #2
 8005294:	f011 f976 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8005298:	22f8      	movs	r2, #248	; 0xf8
 800529a:	49aa      	ldr	r1, [pc, #680]	; (8005544 <OnRxData+0xbec>)
 800529c:	a806      	add	r0, sp, #24
 800529e:	f7fc ff29 	bl	80020f4 <FLASH_IF_Read>
 80052a2:	b9d0      	cbnz	r0, 80052da <OnRxData+0x982>
		            			FlashNVM.pwxWaterLevelThresholdHigh = (uint16_t)parsedLevel;
 80052a4:	f8ad 7102 	strh.w	r7, [sp, #258]	; 0x102
		            			thresholdLevelHigh = parsedLevel;
 80052a8:	4638      	mov	r0, r7
 80052aa:	f7fb fd7f 	bl	8000dac <__aeabi_i2f>
 80052ae:	4ba6      	ldr	r3, [pc, #664]	; (8005548 <OnRxData+0xbf0>)
 80052b0:	6018      	str	r0, [r3, #0]
							if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 80052b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80052b6:	48a3      	ldr	r0, [pc, #652]	; (8005544 <OnRxData+0xbec>)
 80052b8:	f7fc ff38 	bl	800212c <FLASH_IF_Erase>
 80052bc:	b9e0      	cbnz	r0, 80052f8 <OnRxData+0x9a0>
								if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 80052be:	22f8      	movs	r2, #248	; 0xf8
 80052c0:	a906      	add	r1, sp, #24
 80052c2:	48a0      	ldr	r0, [pc, #640]	; (8005544 <OnRxData+0xbec>)
 80052c4:	f7fc fefa 	bl	80020bc <FLASH_IF_Write>
 80052c8:	b970      	cbnz	r0, 80052e8 <OnRxData+0x990>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 80052ca:	4ba0      	ldr	r3, [pc, #640]	; (800554c <OnRxData+0xbf4>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	4611      	mov	r1, r2
 80052d0:	2002      	movs	r0, #2
 80052d2:	f011 f957 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80052d6:	f7ff bb71 	b.w	80049bc <OnRxData+0x64>
								APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80052da:	4b9d      	ldr	r3, [pc, #628]	; (8005550 <OnRxData+0xbf8>)
 80052dc:	2200      	movs	r2, #0
 80052de:	4611      	mov	r1, r2
 80052e0:	2002      	movs	r0, #2
 80052e2:	f011 f94f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80052e6:	e7e4      	b.n	80052b2 <OnRxData+0x95a>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 80052e8:	4b9a      	ldr	r3, [pc, #616]	; (8005554 <OnRxData+0xbfc>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	4611      	mov	r1, r2
 80052ee:	2002      	movs	r0, #2
 80052f0:	f011 f948 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80052f4:	f7ff bb62 	b.w	80049bc <OnRxData+0x64>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 80052f8:	4b97      	ldr	r3, [pc, #604]	; (8005558 <OnRxData+0xc00>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	4611      	mov	r1, r2
 80052fe:	2002      	movs	r0, #2
 8005300:	f011 f940 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005304:	f7ff bb5a 	b.w	80049bc <OnRxData+0x64>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8005308:	4b94      	ldr	r3, [pc, #592]	; (800555c <OnRxData+0xc04>)
 800530a:	2200      	movs	r2, #0
 800530c:	4611      	mov	r1, r2
 800530e:	2002      	movs	r0, #2
 8005310:	f011 f938 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 8005314:	4b92      	ldr	r3, [pc, #584]	; (8005560 <OnRxData+0xc08>)
 8005316:	2200      	movs	r2, #0
 8005318:	4611      	mov	r1, r2
 800531a:	2002      	movs	r0, #2
 800531c:	f011 f932 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 8005320:	2700      	movs	r7, #0
 8005322:	e009      	b.n	8005338 <OnRxData+0x9e0>
								APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	5ddb      	ldrb	r3, [r3, r7]
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	4b8e      	ldr	r3, [pc, #568]	; (8005564 <OnRxData+0xc0c>)
 800532c:	2200      	movs	r2, #0
 800532e:	4611      	mov	r1, r2
 8005330:	2002      	movs	r0, #2
 8005332:	f011 f927 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 8005336:	3701      	adds	r7, #1
 8005338:	7862      	ldrb	r2, [r4, #1]
 800533a:	42ba      	cmp	r2, r7
 800533c:	dcf2      	bgt.n	8005324 <OnRxData+0x9cc>
		                    for (int i = 1; i < appData->BufferSize; i++) {
 800533e:	2301      	movs	r3, #1
		            		int parsedLevel = 0;
 8005340:	2700      	movs	r7, #0
 8005342:	e004      	b.n	800534e <OnRxData+0x9f6>
		                    	parsedLevel = (parsedLevel << 8) | appData->Buffer[i];
 8005344:	6861      	ldr	r1, [r4, #4]
 8005346:	5cc9      	ldrb	r1, [r1, r3]
 8005348:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
		                    for (int i = 1; i < appData->BufferSize; i++) {
 800534c:	3301      	adds	r3, #1
 800534e:	429a      	cmp	r2, r3
 8005350:	dcf8      	bgt.n	8005344 <OnRxData+0x9ec>
		            		APP_LOG( TS_OFF, VLEVEL_M, "###### Water Level LOW Threshold: %u \r\n", parsedLevel);
 8005352:	9700      	str	r7, [sp, #0]
 8005354:	4b84      	ldr	r3, [pc, #528]	; (8005568 <OnRxData+0xc10>)
 8005356:	2200      	movs	r2, #0
 8005358:	4611      	mov	r1, r2
 800535a:	2002      	movs	r0, #2
 800535c:	f011 f912 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8005360:	22f8      	movs	r2, #248	; 0xf8
 8005362:	4978      	ldr	r1, [pc, #480]	; (8005544 <OnRxData+0xbec>)
 8005364:	a806      	add	r0, sp, #24
 8005366:	f7fc fec5 	bl	80020f4 <FLASH_IF_Read>
 800536a:	b9d0      	cbnz	r0, 80053a2 <OnRxData+0xa4a>
		            			FlashNVM.pwxWaterLevelThresholdLow = (uint16_t)parsedLevel;
 800536c:	f8ad 7104 	strh.w	r7, [sp, #260]	; 0x104
		            			thresholdLevelLow = parsedLevel;
 8005370:	4638      	mov	r0, r7
 8005372:	f7fb fd1b 	bl	8000dac <__aeabi_i2f>
 8005376:	4b7d      	ldr	r3, [pc, #500]	; (800556c <OnRxData+0xc14>)
 8005378:	6018      	str	r0, [r3, #0]
							if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 800537a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800537e:	4871      	ldr	r0, [pc, #452]	; (8005544 <OnRxData+0xbec>)
 8005380:	f7fc fed4 	bl	800212c <FLASH_IF_Erase>
 8005384:	b9e0      	cbnz	r0, 80053c0 <OnRxData+0xa68>
								if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8005386:	22f8      	movs	r2, #248	; 0xf8
 8005388:	a906      	add	r1, sp, #24
 800538a:	486e      	ldr	r0, [pc, #440]	; (8005544 <OnRxData+0xbec>)
 800538c:	f7fc fe96 	bl	80020bc <FLASH_IF_Write>
 8005390:	b970      	cbnz	r0, 80053b0 <OnRxData+0xa58>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8005392:	4b6e      	ldr	r3, [pc, #440]	; (800554c <OnRxData+0xbf4>)
 8005394:	2200      	movs	r2, #0
 8005396:	4611      	mov	r1, r2
 8005398:	2002      	movs	r0, #2
 800539a:	f011 f8f3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800539e:	f7ff bb12 	b.w	80049c6 <OnRxData+0x6e>
								APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80053a2:	4b6b      	ldr	r3, [pc, #428]	; (8005550 <OnRxData+0xbf8>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	4611      	mov	r1, r2
 80053a8:	2002      	movs	r0, #2
 80053aa:	f011 f8eb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80053ae:	e7e4      	b.n	800537a <OnRxData+0xa22>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 80053b0:	4b68      	ldr	r3, [pc, #416]	; (8005554 <OnRxData+0xbfc>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	4611      	mov	r1, r2
 80053b6:	2002      	movs	r0, #2
 80053b8:	f011 f8e4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80053bc:	f7ff bb03 	b.w	80049c6 <OnRxData+0x6e>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 80053c0:	4b65      	ldr	r3, [pc, #404]	; (8005558 <OnRxData+0xc00>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	4611      	mov	r1, r2
 80053c6:	2002      	movs	r0, #2
 80053c8:	f011 f8dc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80053cc:	f7ff bafb 	b.w	80049c6 <OnRxData+0x6e>
							APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 80053d0:	4b62      	ldr	r3, [pc, #392]	; (800555c <OnRxData+0xc04>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	4611      	mov	r1, r2
 80053d6:	2002      	movs	r0, #2
 80053d8:	f011 f8d4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							APP_LOG(TS_OFF, VLEVEL_M, "Received data from port 55 (hex): ");
 80053dc:	4b60      	ldr	r3, [pc, #384]	; (8005560 <OnRxData+0xc08>)
 80053de:	2200      	movs	r2, #0
 80053e0:	4611      	mov	r1, r2
 80053e2:	2002      	movs	r0, #2
 80053e4:	f011 f8ce 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 80053e8:	2700      	movs	r7, #0
 80053ea:	e009      	b.n	8005400 <OnRxData+0xaa8>
								APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 80053ec:	6863      	ldr	r3, [r4, #4]
 80053ee:	5ddb      	ldrb	r3, [r3, r7]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	4b5c      	ldr	r3, [pc, #368]	; (8005564 <OnRxData+0xc0c>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	4611      	mov	r1, r2
 80053f8:	2002      	movs	r0, #2
 80053fa:	f011 f8c3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 80053fe:	3701      	adds	r7, #1
 8005400:	7862      	ldrb	r2, [r4, #1]
 8005402:	42ba      	cmp	r2, r7
 8005404:	dcf2      	bgt.n	80053ec <OnRxData+0xa94>
		                    for (int i = 1; i < appData->BufferSize; i++) {
 8005406:	2301      	movs	r3, #1
		            		int parsedSamplingMethod = 0;
 8005408:	2700      	movs	r7, #0
 800540a:	e004      	b.n	8005416 <OnRxData+0xabe>
		                    	parsedSamplingMethod = (parsedSamplingMethod << 8) | appData->Buffer[i];
 800540c:	6861      	ldr	r1, [r4, #4]
 800540e:	5cc9      	ldrb	r1, [r1, r3]
 8005410:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
		                    for (int i = 1; i < appData->BufferSize; i++) {
 8005414:	3301      	adds	r3, #1
 8005416:	429a      	cmp	r2, r3
 8005418:	dcf8      	bgt.n	800540c <OnRxData+0xab4>
		            		APP_LOG( TS_OFF, VLEVEL_M, "###### Sampling Method: %u \r\n", parsedSamplingMethod);
 800541a:	9700      	str	r7, [sp, #0]
 800541c:	4b54      	ldr	r3, [pc, #336]	; (8005570 <OnRxData+0xc18>)
 800541e:	2200      	movs	r2, #0
 8005420:	4611      	mov	r1, r2
 8005422:	2002      	movs	r0, #2
 8005424:	f011 f8ae 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8005428:	22f8      	movs	r2, #248	; 0xf8
 800542a:	4946      	ldr	r1, [pc, #280]	; (8005544 <OnRxData+0xbec>)
 800542c:	a806      	add	r0, sp, #24
 800542e:	f7fc fe61 	bl	80020f4 <FLASH_IF_Read>
 8005432:	b9b8      	cbnz	r0, 8005464 <OnRxData+0xb0c>
		            			FlashNVM.pwxSamplingMethod = (uint8_t)parsedSamplingMethod;
 8005434:	f88d 7107 	strb.w	r7, [sp, #263]	; 0x107
		            			samplingMethod = parsedSamplingMethod;
 8005438:	4b4e      	ldr	r3, [pc, #312]	; (8005574 <OnRxData+0xc1c>)
 800543a:	601f      	str	r7, [r3, #0]
							if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 800543c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005440:	4840      	ldr	r0, [pc, #256]	; (8005544 <OnRxData+0xbec>)
 8005442:	f7fc fe73 	bl	800212c <FLASH_IF_Erase>
 8005446:	b9e0      	cbnz	r0, 8005482 <OnRxData+0xb2a>
								if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 8005448:	22f8      	movs	r2, #248	; 0xf8
 800544a:	a906      	add	r1, sp, #24
 800544c:	483d      	ldr	r0, [pc, #244]	; (8005544 <OnRxData+0xbec>)
 800544e:	f7fc fe35 	bl	80020bc <FLASH_IF_Write>
 8005452:	b970      	cbnz	r0, 8005472 <OnRxData+0xb1a>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8005454:	4b3d      	ldr	r3, [pc, #244]	; (800554c <OnRxData+0xbf4>)
 8005456:	2200      	movs	r2, #0
 8005458:	4611      	mov	r1, r2
 800545a:	2002      	movs	r0, #2
 800545c:	f011 f892 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005460:	f7ff bab6 	b.w	80049d0 <OnRxData+0x78>
								APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8005464:	4b3a      	ldr	r3, [pc, #232]	; (8005550 <OnRxData+0xbf8>)
 8005466:	2200      	movs	r2, #0
 8005468:	4611      	mov	r1, r2
 800546a:	2002      	movs	r0, #2
 800546c:	f011 f88a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005470:	e7e4      	b.n	800543c <OnRxData+0xae4>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8005472:	4b38      	ldr	r3, [pc, #224]	; (8005554 <OnRxData+0xbfc>)
 8005474:	2200      	movs	r2, #0
 8005476:	4611      	mov	r1, r2
 8005478:	2002      	movs	r0, #2
 800547a:	f011 f883 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800547e:	f7ff baa7 	b.w	80049d0 <OnRxData+0x78>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8005482:	4b35      	ldr	r3, [pc, #212]	; (8005558 <OnRxData+0xc00>)
 8005484:	2200      	movs	r2, #0
 8005486:	4611      	mov	r1, r2
 8005488:	2002      	movs	r0, #2
 800548a:	f011 f87b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 800548e:	f7ff ba9f 	b.w	80049d0 <OnRxData+0x78>
								APP_LOG(TS_OFF, VLEVEL_M, "%02X ", appData->Buffer[i]);
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	5ddb      	ldrb	r3, [r3, r7]
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	4b32      	ldr	r3, [pc, #200]	; (8005564 <OnRxData+0xc0c>)
 800549a:	2200      	movs	r2, #0
 800549c:	4611      	mov	r1, r2
 800549e:	2002      	movs	r0, #2
 80054a0:	f011 f870 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
							for (int i = 0; i < appData->BufferSize; i++) {
 80054a4:	3701      	adds	r7, #1
 80054a6:	7862      	ldrb	r2, [r4, #1]
 80054a8:	42ba      	cmp	r2, r7
 80054aa:	dcf2      	bgt.n	8005492 <OnRxData+0xb3a>
		                    for (int i = 1; i < appData->BufferSize; i++) {
 80054ac:	2301      	movs	r3, #1
		            		int parsedMeasurementMethod = 0;
 80054ae:	2700      	movs	r7, #0
 80054b0:	e004      	b.n	80054bc <OnRxData+0xb64>
		                    	parsedMeasurementMethod = (parsedMeasurementMethod << 8) | appData->Buffer[i];
 80054b2:	6861      	ldr	r1, [r4, #4]
 80054b4:	5cc9      	ldrb	r1, [r1, r3]
 80054b6:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
		                    for (int i = 1; i < appData->BufferSize; i++) {
 80054ba:	3301      	adds	r3, #1
 80054bc:	429a      	cmp	r2, r3
 80054be:	dcf8      	bgt.n	80054b2 <OnRxData+0xb5a>
		            		APP_LOG( TS_OFF, VLEVEL_M, "###### Sampling Method: %u \r\n", parsedMeasurementMethod);
 80054c0:	9700      	str	r7, [sp, #0]
 80054c2:	4b2b      	ldr	r3, [pc, #172]	; (8005570 <OnRxData+0xc18>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	4611      	mov	r1, r2
 80054c8:	2002      	movs	r0, #2
 80054ca:	f011 f85b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		            		if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 80054ce:	22f8      	movs	r2, #248	; 0xf8
 80054d0:	491c      	ldr	r1, [pc, #112]	; (8005544 <OnRxData+0xbec>)
 80054d2:	a806      	add	r0, sp, #24
 80054d4:	f7fc fe0e 	bl	80020f4 <FLASH_IF_Read>
 80054d8:	b9b0      	cbnz	r0, 8005508 <OnRxData+0xbb0>
		            			FlashNVM.pwxMeasurementMethod = (uint8_t)parsedMeasurementMethod;
 80054da:	f88d 7108 	strb.w	r7, [sp, #264]	; 0x108
		            			measurementMethod = parsedMeasurementMethod;
 80054de:	4b26      	ldr	r3, [pc, #152]	; (8005578 <OnRxData+0xc20>)
 80054e0:	601f      	str	r7, [r3, #0]
							if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 80054e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054e6:	4817      	ldr	r0, [pc, #92]	; (8005544 <OnRxData+0xbec>)
 80054e8:	f7fc fe20 	bl	800212c <FLASH_IF_Erase>
 80054ec:	b9d0      	cbnz	r0, 8005524 <OnRxData+0xbcc>
								if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 80054ee:	22f8      	movs	r2, #248	; 0xf8
 80054f0:	a906      	add	r1, sp, #24
 80054f2:	4814      	ldr	r0, [pc, #80]	; (8005544 <OnRxData+0xbec>)
 80054f4:	f7fc fde2 	bl	80020bc <FLASH_IF_Write>
 80054f8:	b968      	cbnz	r0, 8005516 <OnRxData+0xbbe>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <OnRxData+0xbf4>)
 80054fc:	2200      	movs	r2, #0
 80054fe:	4611      	mov	r1, r2
 8005500:	2002      	movs	r0, #2
 8005502:	f011 f83f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005506:	e015      	b.n	8005534 <OnRxData+0xbdc>
								APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8005508:	4b11      	ldr	r3, [pc, #68]	; (8005550 <OnRxData+0xbf8>)
 800550a:	2200      	movs	r2, #0
 800550c:	4611      	mov	r1, r2
 800550e:	2002      	movs	r0, #2
 8005510:	f011 f838 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005514:	e7e5      	b.n	80054e2 <OnRxData+0xb8a>
									APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8005516:	4b0f      	ldr	r3, [pc, #60]	; (8005554 <OnRxData+0xbfc>)
 8005518:	2200      	movs	r2, #0
 800551a:	4611      	mov	r1, r2
 800551c:	2002      	movs	r0, #2
 800551e:	f011 f831 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005522:	e007      	b.n	8005534 <OnRxData+0xbdc>
								APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8005524:	4b0c      	ldr	r3, [pc, #48]	; (8005558 <OnRxData+0xc00>)
 8005526:	2200      	movs	r2, #0
 8005528:	4611      	mov	r1, r2
 800552a:	2002      	movs	r0, #2
 800552c:	f011 f82a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005530:	e000      	b.n	8005534 <OnRxData+0xbdc>
  uint8_t RxPort = 0;
 8005532:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 8005534:	7c2b      	ldrb	r3, [r5, #16]
 8005536:	2b05      	cmp	r3, #5
 8005538:	d920      	bls.n	800557c <OnRxData+0xc24>
}
 800553a:	b044      	add	sp, #272	; 0x110
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	0801d110 	.word	0x0801d110
 8005544:	0803f000 	.word	0x0803f000
 8005548:	20000050 	.word	0x20000050
 800554c:	0801c8b4 	.word	0x0801c8b4
 8005550:	0801c4cc 	.word	0x0801c4cc
 8005554:	0801c8d8 	.word	0x0801c8d8
 8005558:	0801c8f8 	.word	0x0801c8f8
 800555c:	0801cf28 	.word	0x0801cf28
 8005560:	0801cf5c 	.word	0x0801cf5c
 8005564:	0801c280 	.word	0x0801c280
 8005568:	0801d13c 	.word	0x0801d13c
 800556c:	20000054 	.word	0x20000054
 8005570:	0801d164 	.word	0x0801d164
 8005574:	20000b14 	.word	0x20000b14
 8005578:	200009e4 	.word	0x200009e4
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 800557c:	f995 2008 	ldrsb.w	r2, [r5, #8]
 8005580:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8005584:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8005588:	9005      	str	r0, [sp, #20]
 800558a:	9104      	str	r1, [sp, #16]
 800558c:	4907      	ldr	r1, [pc, #28]	; (80055ac <OnRxData+0xc54>)
 800558e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005592:	9303      	str	r3, [sp, #12]
 8005594:	9202      	str	r2, [sp, #8]
 8005596:	9601      	str	r6, [sp, #4]
 8005598:	68eb      	ldr	r3, [r5, #12]
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	4b04      	ldr	r3, [pc, #16]	; (80055b0 <OnRxData+0xc58>)
 800559e:	2200      	movs	r2, #0
 80055a0:	4611      	mov	r1, r2
 80055a2:	2003      	movs	r0, #3
 80055a4:	f010 ffee 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 80055a8:	e7c7      	b.n	800553a <OnRxData+0xbe2>
 80055aa:	4770      	bx	lr
 80055ac:	0801e034 	.word	0x0801e034
 80055b0:	0801d184 	.word	0x0801d184

080055b4 <StopJoin>:
{
 80055b4:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80055b6:	4c1e      	ldr	r4, [pc, #120]	; (8005630 <StopJoin+0x7c>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80055be:	4620      	mov	r0, r4
 80055c0:	f003 fdf8 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 80055c4:	2201      	movs	r2, #1
 80055c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055ca:	4620      	mov	r0, r4
 80055cc:	f003 fdf2 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 80055d0:	2201      	movs	r2, #1
 80055d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80055d6:	4620      	mov	r0, r4
 80055d8:	f003 fdec 	bl	80091b4 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 80055dc:	4815      	ldr	r0, [pc, #84]	; (8005634 <StopJoin+0x80>)
 80055de:	f011 fb23 	bl	8016c28 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 80055e2:	f007 fe5d 	bl	800d2a0 <LmHandlerStop>
 80055e6:	b148      	cbz	r0, 80055fc <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 80055e8:	4b13      	ldr	r3, [pc, #76]	; (8005638 <StopJoin+0x84>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	4611      	mov	r1, r2
 80055ee:	2002      	movs	r0, #2
 80055f0:	f010 ffc8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 80055f4:	4811      	ldr	r0, [pc, #68]	; (800563c <StopJoin+0x88>)
 80055f6:	f011 fb71 	bl	8016cdc <UTIL_TIMER_Start>
}
 80055fa:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 80055fc:	4b10      	ldr	r3, [pc, #64]	; (8005640 <StopJoin+0x8c>)
 80055fe:	2200      	movs	r2, #0
 8005600:	4611      	mov	r1, r2
 8005602:	2002      	movs	r0, #2
 8005604:	f010 ffbe 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 8005608:	4c0e      	ldr	r4, [pc, #56]	; (8005644 <StopJoin+0x90>)
 800560a:	2501      	movs	r5, #1
 800560c:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <StopJoin+0x94>)
 8005610:	2200      	movs	r2, #0
 8005612:	4611      	mov	r1, r2
 8005614:	2002      	movs	r0, #2
 8005616:	f010 ffb5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 800561a:	480c      	ldr	r0, [pc, #48]	; (800564c <StopJoin+0x98>)
 800561c:	f007 fcb8 	bl	800cf90 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8005620:	4629      	mov	r1, r5
 8005622:	7820      	ldrb	r0, [r4, #0]
 8005624:	f007 fa70 	bl	800cb08 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 8005628:	4802      	ldr	r0, [pc, #8]	; (8005634 <StopJoin+0x80>)
 800562a:	f011 fb57 	bl	8016cdc <UTIL_TIMER_Start>
 800562e:	e7e1      	b.n	80055f4 <StopJoin+0x40>
 8005630:	48000400 	.word	0x48000400
 8005634:	20000ffc 	.word	0x20000ffc
 8005638:	0801d1cc 	.word	0x0801d1cc
 800563c:	20000fcc 	.word	0x20000fcc
 8005640:	0801d1ec 	.word	0x0801d1ec
 8005644:	20000058 	.word	0x20000058
 8005648:	0801d200 	.word	0x0801d200
 800564c:	200000b0 	.word	0x200000b0

08005650 <StoreContext>:
{
 8005650:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 8005652:	f007 feb7 	bl	800d3c4 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 8005656:	f110 0f08 	cmn.w	r0, #8
 800565a:	d003      	beq.n	8005664 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 800565c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005660:	d007      	beq.n	8005672 <StoreContext+0x22>
}
 8005662:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <StoreContext+0x30>)
 8005666:	2200      	movs	r2, #0
 8005668:	4611      	mov	r1, r2
 800566a:	2002      	movs	r0, #2
 800566c:	f010 ff8a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005670:	e7f7      	b.n	8005662 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 8005672:	4b04      	ldr	r3, [pc, #16]	; (8005684 <StoreContext+0x34>)
 8005674:	2200      	movs	r2, #0
 8005676:	4611      	mov	r1, r2
 8005678:	2002      	movs	r0, #2
 800567a:	f010 ff83 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800567e:	e7f0      	b.n	8005662 <StoreContext+0x12>
 8005680:	0801d220 	.word	0x0801d220
 8005684:	0801d238 	.word	0x0801d238

08005688 <OnJoinTimerLedEvent>:
{
 8005688:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 800568a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800568e:	4802      	ldr	r0, [pc, #8]	; (8005698 <OnJoinTimerLedEvent+0x10>)
 8005690:	f003 fd95 	bl	80091be <HAL_GPIO_TogglePin>
}
 8005694:	bd08      	pop	{r3, pc}
 8005696:	bf00      	nop
 8005698:	48000400 	.word	0x48000400

0800569c <write_devnonce_to_flash>:
FLASH_IF_StatusTypedef write_devnonce_to_flash(uint32_t devnonce) {
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	9003      	str	r0, [sp, #12]
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n WRITING DEVNONCE TO FLASH \r\n");
 80056a2:	4b35      	ldr	r3, [pc, #212]	; (8005778 <write_devnonce_to_flash+0xdc>)
 80056a4:	2200      	movs	r2, #0
 80056a6:	4611      	mov	r1, r2
 80056a8:	2002      	movs	r0, #2
 80056aa:	f010 ff6b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    if (FLASH_IF_Init(NULL) != FLASH_IF_OK) {
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fc fcfe 	bl	80020b0 <FLASH_IF_Init>
 80056b4:	b9a0      	cbnz	r0, 80056e0 <write_devnonce_to_flash+0x44>
    for (uint32_t address = page_start_address; address < page_start_address + FLASH_PAGE_SIZE; address += sizeof(uint64_t)) {
 80056b6:	4c31      	ldr	r4, [pc, #196]	; (800577c <write_devnonce_to_flash+0xe0>)
 80056b8:	4b31      	ldr	r3, [pc, #196]	; (8005780 <write_devnonce_to_flash+0xe4>)
 80056ba:	429c      	cmp	r4, r3
 80056bc:	d23a      	bcs.n	8005734 <write_devnonce_to_flash+0x98>
        status = FLASH_IF_Read(&data, (const void *)address, sizeof(uint64_t));
 80056be:	2208      	movs	r2, #8
 80056c0:	4621      	mov	r1, r4
 80056c2:	a804      	add	r0, sp, #16
 80056c4:	f7fc fd16 	bl	80020f4 <FLASH_IF_Read>
        if (status != FLASH_IF_OK) {
 80056c8:	4605      	mov	r5, r0
 80056ca:	b990      	cbnz	r0, 80056f2 <write_devnonce_to_flash+0x56>
        if (data == UINT64_MAX) {
 80056cc:	9a04      	ldr	r2, [sp, #16]
 80056ce:	9b05      	ldr	r3, [sp, #20]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	bf08      	it	eq
 80056d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80056da:	d014      	beq.n	8005706 <write_devnonce_to_flash+0x6a>
    for (uint32_t address = page_start_address; address < page_start_address + FLASH_PAGE_SIZE; address += sizeof(uint64_t)) {
 80056dc:	3408      	adds	r4, #8
 80056de:	e7eb      	b.n	80056b8 <write_devnonce_to_flash+0x1c>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n Error: Flash failed to initialize \r\n");
 80056e0:	4b28      	ldr	r3, [pc, #160]	; (8005784 <write_devnonce_to_flash+0xe8>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	4611      	mov	r1, r2
 80056e6:	2002      	movs	r0, #2
 80056e8:	f010 ff4c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        return FLASH_IF_ERROR;
 80056ec:	f04f 35ff 	mov.w	r5, #4294967295
 80056f0:	e006      	b.n	8005700 <write_devnonce_to_flash+0x64>
            APP_LOG(TS_OFF, VLEVEL_M, "Error: Flash read failed at 0x%x\r\n", address);
 80056f2:	9400      	str	r4, [sp, #0]
 80056f4:	4b24      	ldr	r3, [pc, #144]	; (8005788 <write_devnonce_to_flash+0xec>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	4611      	mov	r1, r2
 80056fa:	2002      	movs	r0, #2
 80056fc:	f010 ff42 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8005700:	4628      	mov	r0, r5
 8005702:	b006      	add	sp, #24
 8005704:	bd70      	pop	{r4, r5, r6, pc}
            status = FLASH_IF_Write((void *)address, &devnonce, sizeof(uint64_t));
 8005706:	2208      	movs	r2, #8
 8005708:	a903      	add	r1, sp, #12
 800570a:	4620      	mov	r0, r4
 800570c:	f7fc fcd6 	bl	80020bc <FLASH_IF_Write>
            if (status != FLASH_IF_OK) {
 8005710:	4605      	mov	r5, r0
 8005712:	b938      	cbnz	r0, 8005724 <write_devnonce_to_flash+0x88>
            	APP_LOG(TS_OFF, VLEVEL_M, "Success: Flash write done at address 0x%x\r\n", address);
 8005714:	9400      	str	r4, [sp, #0]
 8005716:	4b1d      	ldr	r3, [pc, #116]	; (800578c <write_devnonce_to_flash+0xf0>)
 8005718:	2200      	movs	r2, #0
 800571a:	4611      	mov	r1, r2
 800571c:	2002      	movs	r0, #2
 800571e:	f010 ff31 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    if (!devnonceWritten) {
 8005722:	e7ed      	b.n	8005700 <write_devnonce_to_flash+0x64>
                APP_LOG(TS_OFF, VLEVEL_M, "Error: Flash write failed at 0x%x\r\n", address);
 8005724:	9400      	str	r4, [sp, #0]
 8005726:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <write_devnonce_to_flash+0xf4>)
 8005728:	2200      	movs	r2, #0
 800572a:	4611      	mov	r1, r2
 800572c:	2002      	movs	r0, #2
 800572e:	f010 ff29 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
                return status;
 8005732:	e7e5      	b.n	8005700 <write_devnonce_to_flash+0x64>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\nErasing entire page");
 8005734:	4b17      	ldr	r3, [pc, #92]	; (8005794 <write_devnonce_to_flash+0xf8>)
 8005736:	2200      	movs	r2, #0
 8005738:	4611      	mov	r1, r2
 800573a:	2002      	movs	r0, #2
 800573c:	f010 ff22 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        status = FLASH_IF_Erase((void *)page_start_address, FLASH_PAGE_SIZE);
 8005740:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005744:	480d      	ldr	r0, [pc, #52]	; (800577c <write_devnonce_to_flash+0xe0>)
 8005746:	f7fc fcf1 	bl	800212c <FLASH_IF_Erase>
        if (status != FLASH_IF_OK) {
 800574a:	4605      	mov	r5, r0
 800574c:	b960      	cbnz	r0, 8005768 <write_devnonce_to_flash+0xcc>
        status = write_devnonce_to_flash(devnonce);
 800574e:	9803      	ldr	r0, [sp, #12]
 8005750:	f7ff ffa4 	bl	800569c <write_devnonce_to_flash>
        if (status != FLASH_IF_OK) {
 8005754:	4605      	mov	r5, r0
 8005756:	2800      	cmp	r0, #0
 8005758:	d0d2      	beq.n	8005700 <write_devnonce_to_flash+0x64>
            APP_LOG(TS_OFF, VLEVEL_M, "Error: Failed to write devnonce after erasing the page\r\n");
 800575a:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <write_devnonce_to_flash+0xfc>)
 800575c:	2200      	movs	r2, #0
 800575e:	4611      	mov	r1, r2
 8005760:	2002      	movs	r0, #2
 8005762:	f010 ff0f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            return status;
 8005766:	e7cb      	b.n	8005700 <write_devnonce_to_flash+0x64>
            APP_LOG(TS_OFF, VLEVEL_M, "\r\nError: Flash erase failed\r\n");
 8005768:	4b0c      	ldr	r3, [pc, #48]	; (800579c <write_devnonce_to_flash+0x100>)
 800576a:	2200      	movs	r2, #0
 800576c:	4611      	mov	r1, r2
 800576e:	2002      	movs	r0, #2
 8005770:	f010 ff08 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            return status;
 8005774:	e7c4      	b.n	8005700 <write_devnonce_to_flash+0x64>
 8005776:	bf00      	nop
 8005778:	0801d250 	.word	0x0801d250
 800577c:	0803b000 	.word	0x0803b000
 8005780:	0803b800 	.word	0x0803b800
 8005784:	0801d270 	.word	0x0801d270
 8005788:	0801d298 	.word	0x0801d298
 800578c:	0801d2e0 	.word	0x0801d2e0
 8005790:	0801d2bc 	.word	0x0801d2bc
 8005794:	0801d30c 	.word	0x0801d30c
 8005798:	0801d344 	.word	0x0801d344
 800579c:	0801d324 	.word	0x0801d324

080057a0 <OnJoinRequest>:
  if (joinParams != NULL)
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d04e      	beq.n	8005842 <OnJoinRequest+0xa2>
{
 80057a4:	b530      	push	{r4, r5, lr}
 80057a6:	b083      	sub	sp, #12
 80057a8:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80057aa:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80057ae:	bb5b      	cbnz	r3, 8005808 <OnJoinRequest+0x68>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80057b0:	4824      	ldr	r0, [pc, #144]	; (8005844 <OnJoinRequest+0xa4>)
 80057b2:	f011 fa39 	bl	8016c28 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80057b6:	2200      	movs	r2, #0
 80057b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057bc:	4822      	ldr	r0, [pc, #136]	; (8005848 <OnJoinRequest+0xa8>)
 80057be:	f003 fcf9 	bl	80091b4 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80057c2:	4b22      	ldr	r3, [pc, #136]	; (800584c <OnJoinRequest+0xac>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	4611      	mov	r1, r2
 80057c8:	2002      	movs	r0, #2
 80057ca:	f010 fedb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\nWriting Devnonce to Flash:%d \r\n", getDevnonce);
 80057ce:	4d20      	ldr	r5, [pc, #128]	; (8005850 <OnJoinRequest+0xb0>)
 80057d0:	682b      	ldr	r3, [r5, #0]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	4b1f      	ldr	r3, [pc, #124]	; (8005854 <OnJoinRequest+0xb4>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	4611      	mov	r1, r2
 80057da:	2002      	movs	r0, #2
 80057dc:	f010 fed2 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
      write_devnonce_to_flash(getDevnonce);
 80057e0:	6828      	ldr	r0, [r5, #0]
 80057e2:	f7ff ff5b 	bl	800569c <write_devnonce_to_flash>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80057e6:	79e3      	ldrb	r3, [r4, #7]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d006      	beq.n	80057fa <OnJoinRequest+0x5a>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80057ec:	4b1a      	ldr	r3, [pc, #104]	; (8005858 <OnJoinRequest+0xb8>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	4611      	mov	r1, r2
 80057f2:	2002      	movs	r0, #2
 80057f4:	f010 fec6 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80057f8:	e015      	b.n	8005826 <OnJoinRequest+0x86>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 80057fa:	4b18      	ldr	r3, [pc, #96]	; (800585c <OnJoinRequest+0xbc>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	4611      	mov	r1, r2
 8005800:	2002      	movs	r0, #2
 8005802:	f010 febf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005806:	e00e      	b.n	8005826 <OnJoinRequest+0x86>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8005808:	4b15      	ldr	r3, [pc, #84]	; (8005860 <OnJoinRequest+0xc0>)
 800580a:	2200      	movs	r2, #0
 800580c:	4611      	mov	r1, r2
 800580e:	2002      	movs	r0, #2
 8005810:	f010 feb8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\nDevnonce:%d \r\n", getDevnonce);
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <OnJoinRequest+0xb0>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <OnJoinRequest+0xc4>)
 800581c:	2200      	movs	r2, #0
 800581e:	4611      	mov	r1, r2
 8005820:	2002      	movs	r0, #2
 8005822:	f010 feaf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 8005826:	f994 3004 	ldrsb.w	r3, [r4, #4]
 800582a:	f994 2005 	ldrsb.w	r2, [r4, #5]
 800582e:	9201      	str	r2, [sp, #4]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	4b0d      	ldr	r3, [pc, #52]	; (8005868 <OnJoinRequest+0xc8>)
 8005834:	2200      	movs	r2, #0
 8005836:	4611      	mov	r1, r2
 8005838:	2003      	movs	r0, #3
 800583a:	f010 fea3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800583e:	b003      	add	sp, #12
 8005840:	bd30      	pop	{r4, r5, pc}
 8005842:	4770      	bx	lr
 8005844:	20000f00 	.word	0x20000f00
 8005848:	48000400 	.word	0x48000400
 800584c:	0801d380 	.word	0x0801d380
 8005850:	20001030 	.word	0x20001030
 8005854:	0801d398 	.word	0x0801d398
 8005858:	0801d3dc 	.word	0x0801d3dc
 800585c:	0801d3bc 	.word	0x0801d3bc
 8005860:	0801d3fc 	.word	0x0801d3fc
 8005864:	0801d418 	.word	0x0801d418
 8005868:	0801d42c 	.word	0x0801d42c

0800586c <parseReply>:
float parseReply(uint8_t *response) {
 800586c:	b508      	push	{r3, lr}
    uint8_t highByte = response[3];
 800586e:	78c2      	ldrb	r2, [r0, #3]
    uint8_t lowByte = response[4];
 8005870:	7900      	ldrb	r0, [r0, #4]
    float distanceVal = (float)combinedValue/1000;
 8005872:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8005876:	f7fb fa95 	bl	8000da4 <__aeabi_ui2f>
 800587a:	4902      	ldr	r1, [pc, #8]	; (8005884 <parseReply+0x18>)
 800587c:	f7fb fb9e 	bl	8000fbc <__aeabi_fdiv>
}
 8005880:	bd08      	pop	{r3, pc}
 8005882:	bf00      	nop
 8005884:	447a0000 	.word	0x447a0000

08005888 <sortArray>:
void sortArray(float *array, int size) {
 8005888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800588c:	4605      	mov	r5, r0
 800588e:	4689      	mov	r9, r1
    for (int i = 0; i < size - 1; i++) {
 8005890:	f04f 0800 	mov.w	r8, #0
 8005894:	e012      	b.n	80058bc <sortArray+0x34>
        for (int j = i + 1; j < size; j++) {
 8005896:	3401      	adds	r4, #1
 8005898:	454c      	cmp	r4, r9
 800589a:	da0e      	bge.n	80058ba <sortArray+0x32>
            if (array[i] > array[j]) {
 800589c:	f855 6028 	ldr.w	r6, [r5, r8, lsl #2]
 80058a0:	f855 7024 	ldr.w	r7, [r5, r4, lsl #2]
 80058a4:	4639      	mov	r1, r7
 80058a6:	4630      	mov	r0, r6
 80058a8:	f7fb fc90 	bl	80011cc <__aeabi_fcmpgt>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d0f2      	beq.n	8005896 <sortArray+0xe>
                array[i] = array[j];
 80058b0:	f845 7028 	str.w	r7, [r5, r8, lsl #2]
                array[j] = temp;
 80058b4:	f845 6024 	str.w	r6, [r5, r4, lsl #2]
 80058b8:	e7ed      	b.n	8005896 <sortArray+0xe>
    for (int i = 0; i < size - 1; i++) {
 80058ba:	46d0      	mov	r8, sl
 80058bc:	f109 33ff 	add.w	r3, r9, #4294967295
 80058c0:	4543      	cmp	r3, r8
 80058c2:	dd03      	ble.n	80058cc <sortArray+0x44>
        for (int j = i + 1; j < size; j++) {
 80058c4:	f108 0a01 	add.w	sl, r8, #1
 80058c8:	4654      	mov	r4, sl
 80058ca:	e7e5      	b.n	8005898 <sortArray+0x10>
}
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080058d0 <getMedianValue>:
    if (size % 2 == 0) {
 80058d0:	f011 0f01 	tst.w	r1, #1
 80058d4:	d112      	bne.n	80058fc <getMedianValue+0x2c>
float getMedianValue(float *array, int size) {
 80058d6:	b508      	push	{r3, lr}
        return (array[size / 2 - 1] + array[size / 2]) / 2.0;
 80058d8:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80058dc:	104a      	asrs	r2, r1, #1
 80058de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80058e2:	eb03 0361 	add.w	r3, r3, r1, asr #1
 80058e6:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 80058ea:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80058ee:	f7fb f9a9 	bl	8000c44 <__addsf3>
 80058f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80058f6:	f7fb faad 	bl	8000e54 <__aeabi_fmul>
}
 80058fa:	bd08      	pop	{r3, pc}
        return array[size / 2];
 80058fc:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8005900:	1049      	asrs	r1, r1, #1
 8005902:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
}
 8005906:	4770      	bx	lr

08005908 <getAverageValue>:
float getAverageValue(float *array, int size) {
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	4607      	mov	r7, r0
 800590c:	460e      	mov	r6, r1
    for (int i = 0; i < size; i++) {
 800590e:	2500      	movs	r5, #0
    float sum = 0.0;
 8005910:	2400      	movs	r4, #0
    for (int i = 0; i < size; i++) {
 8005912:	e006      	b.n	8005922 <getAverageValue+0x1a>
        sum += array[i];
 8005914:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 8005918:	4620      	mov	r0, r4
 800591a:	f7fb f993 	bl	8000c44 <__addsf3>
 800591e:	4604      	mov	r4, r0
    for (int i = 0; i < size; i++) {
 8005920:	3501      	adds	r5, #1
 8005922:	42b5      	cmp	r5, r6
 8005924:	dbf6      	blt.n	8005914 <getAverageValue+0xc>
    return sum / size;
 8005926:	4630      	mov	r0, r6
 8005928:	f7fb fa40 	bl	8000dac <__aeabi_i2f>
 800592c:	4601      	mov	r1, r0
 800592e:	4620      	mov	r0, r4
 8005930:	f7fb fb44 	bl	8000fbc <__aeabi_fdiv>
}
 8005934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005938 <panicMode>:
void panicMode(void){
 8005938:	b530      	push	{r4, r5, lr}
 800593a:	b0bf      	sub	sp, #252	; 0xfc
	APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 800593c:	4c45      	ldr	r4, [pc, #276]	; (8005a54 <panicMode+0x11c>)
 800593e:	4623      	mov	r3, r4
 8005940:	2200      	movs	r2, #0
 8005942:	4611      	mov	r1, r2
 8005944:	2002      	movs	r0, #2
 8005946:	f010 fe1d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "\r\n 		[!]	I F*CKED UP MODE [!]              \r\n");
 800594a:	4b43      	ldr	r3, [pc, #268]	; (8005a58 <panicMode+0x120>)
 800594c:	2200      	movs	r2, #0
 800594e:	4611      	mov	r1, r2
 8005950:	2002      	movs	r0, #2
 8005952:	f010 fe17 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8005956:	4623      	mov	r3, r4
 8005958:	2200      	movs	r2, #0
 800595a:	4611      	mov	r1, r2
 800595c:	2002      	movs	r0, #2
 800595e:	f010 fe11 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_M, "\r\n Reverting all device configuration to default \r\n");
 8005962:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <panicMode+0x124>)
 8005964:	2200      	movs	r2, #0
 8005966:	4611      	mov	r1, r2
 8005968:	2002      	movs	r0, #2
 800596a:	f010 fe0b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 800596e:	22f8      	movs	r2, #248	; 0xf8
 8005970:	493b      	ldr	r1, [pc, #236]	; (8005a60 <panicMode+0x128>)
 8005972:	4668      	mov	r0, sp
 8005974:	f7fc fbbe 	bl	80020f4 <FLASH_IF_Read>
 8005978:	2800      	cmp	r0, #0
 800597a:	d148      	bne.n	8005a0e <panicMode+0xd6>
		FlashNVM.pwxWaterLevelThresholdHigh = (uint16_t)15.0;
 800597c:	230f      	movs	r3, #15
 800597e:	f8ad 30ea 	strh.w	r3, [sp, #234]	; 0xea
		thresholdLevelHigh = 15.0;
 8005982:	4b38      	ldr	r3, [pc, #224]	; (8005a64 <panicMode+0x12c>)
 8005984:	4a38      	ldr	r2, [pc, #224]	; (8005a68 <panicMode+0x130>)
 8005986:	601a      	str	r2, [r3, #0]
		HAL_Delay(50);
 8005988:	2032      	movs	r0, #50	; 0x32
 800598a:	f7fc ffa9 	bl	80028e0 <HAL_Delay>
		FlashNVM.pwxWaterLevelThresholdLow = (uint16_t)0.0;
 800598e:	2400      	movs	r4, #0
 8005990:	f8ad 40ec 	strh.w	r4, [sp, #236]	; 0xec
		thresholdLevelLow = 0.0;
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <panicMode+0x134>)
 8005996:	2200      	movs	r2, #0
 8005998:	601a      	str	r2, [r3, #0]
		HAL_Delay(50);
 800599a:	2032      	movs	r0, #50	; 0x32
 800599c:	f7fc ffa0 	bl	80028e0 <HAL_Delay>
		FlashNVM.pwxTxInterval = (uint64_t)900000;
 80059a0:	4a33      	ldr	r2, [pc, #204]	; (8005a70 <panicMode+0x138>)
 80059a2:	2300      	movs	r3, #0
 80059a4:	e9cd 2336 	strd	r2, r3, [sp, #216]	; 0xd8
		TRANSMIT_INTERVAL_MS = 900000;
 80059a8:	4d32      	ldr	r5, [pc, #200]	; (8005a74 <panicMode+0x13c>)
 80059aa:	4b31      	ldr	r3, [pc, #196]	; (8005a70 <panicMode+0x138>)
 80059ac:	602b      	str	r3, [r5, #0]
		HAL_Delay(50);
 80059ae:	2032      	movs	r0, #50	; 0x32
 80059b0:	f7fc ff96 	bl	80028e0 <HAL_Delay>
		FlashNVM.pwxCnfUplinkCount = (uint16_t)4;
 80059b4:	2304      	movs	r3, #4
 80059b6:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
		MAX_UPLINK_BEFORE_CONFIRMED = 4;
 80059ba:	4a2f      	ldr	r2, [pc, #188]	; (8005a78 <panicMode+0x140>)
 80059bc:	6013      	str	r3, [r2, #0]
		confUplinkCounter = 0;
 80059be:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <panicMode+0x144>)
 80059c0:	801c      	strh	r4, [r3, #0]
		HAL_Delay(50);
 80059c2:	2032      	movs	r0, #50	; 0x32
 80059c4:	f7fc ff8c 	bl	80028e0 <HAL_Delay>
		FlashNVM.pwxSamplingCount = (uint16_t)5;
 80059c8:	2305      	movs	r3, #5
 80059ca:	f8ad 30f2 	strh.w	r3, [sp, #242]	; 0xf2
		MAX_WATER_LEVEL_SAMPLES = 5;
 80059ce:	4c2c      	ldr	r4, [pc, #176]	; (8005a80 <panicMode+0x148>)
 80059d0:	6023      	str	r3, [r4, #0]
    	waterLevelSamples = (float*)malloc(sizeof(int)*MAX_WATER_LEVEL_SAMPLES);
 80059d2:	2014      	movs	r0, #20
 80059d4:	f011 fb8a 	bl	80170ec <malloc>
 80059d8:	4b2a      	ldr	r3, [pc, #168]	; (8005a84 <panicMode+0x14c>)
 80059da:	6018      	str	r0, [r3, #0]
    	SAMPLE_INTERVAL_MS = (TRANSMIT_INTERVAL_MS/MAX_WATER_LEVEL_SAMPLES);
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	6822      	ldr	r2, [r4, #0]
 80059e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80059e4:	4a28      	ldr	r2, [pc, #160]	; (8005a88 <panicMode+0x150>)
 80059e6:	6013      	str	r3, [r2, #0]
	if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK){
 80059e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059ec:	481c      	ldr	r0, [pc, #112]	; (8005a60 <panicMode+0x128>)
 80059ee:	f7fc fb9d 	bl	800212c <FLASH_IF_Erase>
 80059f2:	b9d0      	cbnz	r0, 8005a2a <panicMode+0xf2>
		if(FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, &FlashNVM, sizeof(FlashNVM)) == FLASH_IF_OK){
 80059f4:	22f8      	movs	r2, #248	; 0xf8
 80059f6:	4669      	mov	r1, sp
 80059f8:	4819      	ldr	r0, [pc, #100]	; (8005a60 <panicMode+0x128>)
 80059fa:	f7fc fb5f 	bl	80020bc <FLASH_IF_Write>
 80059fe:	b968      	cbnz	r0, 8005a1c <panicMode+0xe4>
			APP_LOG(TS_OFF, VLEVEL_M, "###### Success Saving to Flash \r\n");
 8005a00:	4b22      	ldr	r3, [pc, #136]	; (8005a8c <panicMode+0x154>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	4611      	mov	r1, r2
 8005a06:	2002      	movs	r0, #2
 8005a08:	f010 fdbc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005a0c:	e013      	b.n	8005a36 <panicMode+0xfe>
		APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 8005a0e:	4b20      	ldr	r3, [pc, #128]	; (8005a90 <panicMode+0x158>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	4611      	mov	r1, r2
 8005a14:	2002      	movs	r0, #2
 8005a16:	f010 fdb5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005a1a:	e7e5      	b.n	80059e8 <panicMode+0xb0>
			APP_LOG(TS_OFF, VLEVEL_M, "###### Error Saving to Flash \r\n");
 8005a1c:	4b1d      	ldr	r3, [pc, #116]	; (8005a94 <panicMode+0x15c>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	4611      	mov	r1, r2
 8005a22:	2002      	movs	r0, #2
 8005a24:	f010 fdae 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005a28:	e005      	b.n	8005a36 <panicMode+0xfe>
		APP_LOG(TS_OFF, VLEVEL_M, "###### Error Erasing Flash \r\n");
 8005a2a:	4b1b      	ldr	r3, [pc, #108]	; (8005a98 <panicMode+0x160>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4611      	mov	r1, r2
 8005a30:	2002      	movs	r0, #2
 8005a32:	f010 fda7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	HAL_Delay(500);
 8005a36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a3a:	f7fc ff51 	bl	80028e0 <HAL_Delay>
	HAL_NVIC_SystemReset();
 8005a3e:	f002 fe83 	bl	8008748 <HAL_NVIC_SystemReset>
	APP_LOG(TS_OFF, VLEVEL_M, "\r\n==============================================\r\n");
 8005a42:	4b04      	ldr	r3, [pc, #16]	; (8005a54 <panicMode+0x11c>)
 8005a44:	2200      	movs	r2, #0
 8005a46:	4611      	mov	r1, r2
 8005a48:	2002      	movs	r0, #2
 8005a4a:	f010 fd9b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8005a4e:	b03f      	add	sp, #252	; 0xfc
 8005a50:	bd30      	pop	{r4, r5, pc}
 8005a52:	bf00      	nop
 8005a54:	0801cf28 	.word	0x0801cf28
 8005a58:	0801cff0 	.word	0x0801cff0
 8005a5c:	0801d020 	.word	0x0801d020
 8005a60:	0803f000 	.word	0x0803f000
 8005a64:	20000050 	.word	0x20000050
 8005a68:	41700000 	.word	0x41700000
 8005a6c:	20000054 	.word	0x20000054
 8005a70:	000dbba0 	.word	0x000dbba0
 8005a74:	2000004c 	.word	0x2000004c
 8005a78:	20000040 	.word	0x20000040
 8005a7c:	200009e0 	.word	0x200009e0
 8005a80:	20000044 	.word	0x20000044
 8005a84:	20001060 	.word	0x20001060
 8005a88:	20000048 	.word	0x20000048
 8005a8c:	0801c8b4 	.word	0x0801c8b4
 8005a90:	0801c4cc 	.word	0x0801c4cc
 8005a94:	0801c8d8 	.word	0x0801c8d8
 8005a98:	0801c8f8 	.word	0x0801c8f8

08005a9c <fetchSensorDataOnce>:
void fetchSensorDataOnce() {
 8005a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005aa0:	b09f      	sub	sp, #124	; 0x7c
 8005aa2:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	2140      	movs	r1, #64	; 0x40
 8005aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005aac:	f003 fb82 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	2180      	movs	r1, #128	; 0x80
 8005ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ab8:	f003 fb7c 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8005abc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005ac0:	f7fc ff0e 	bl	80028e0 <HAL_Delay>
	uint8_t ModbusCommand[8] = {0x01,0x03,0x00,0x03,0x00,0x01,0x74,0x0A};
 8005ac4:	4a6e      	ldr	r2, [pc, #440]	; (8005c80 <fetchSensorDataOnce+0x1e4>)
 8005ac6:	1d3b      	adds	r3, r7, #4
 8005ac8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005acc:	e883 0003 	stmia.w	r3, {r0, r1}
	float waterLevels[readingCount];
 8005ad0:	4b6c      	ldr	r3, [pc, #432]	; (8005c84 <fetchSensorDataOnce+0x1e8>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	3307      	adds	r3, #7
 8005ad8:	f023 0307 	bic.w	r3, r3, #7
 8005adc:	ebad 0d03 	sub.w	sp, sp, r3
 8005ae0:	f10d 0808 	add.w	r8, sp, #8
	for(int i = 0; i < 10;  i++)	{
 8005ae4:	2500      	movs	r5, #0
	int modbusUnresponsiveCount = 0;
 8005ae6:	46a9      	mov	r9, r5
	for(int i = 0; i < 10;  i++)	{
 8005ae8:	e046      	b.n	8005b78 <fetchSensorDataOnce+0xdc>
		APP_LOG(TS_OFF, VLEVEL_M, " MODBUS RESPONSE (Hex): ");
 8005aea:	4b67      	ldr	r3, [pc, #412]	; (8005c88 <fetchSensorDataOnce+0x1ec>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	4611      	mov	r1, r2
 8005af0:	2002      	movs	r0, #2
 8005af2:	f010 fd47 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		for (int x = 0; x < ModbusResp.rxIndex; x++){
 8005af6:	2400      	movs	r4, #0
 8005af8:	e00d      	b.n	8005b16 <fetchSensorDataOnce+0x7a>
			APP_LOG(TS_OFF, VLEVEL_M, "%02X ", ModbusResp.buffer[x]);
 8005afa:	4b64      	ldr	r3, [pc, #400]	; (8005c8c <fetchSensorDataOnce+0x1f0>)
 8005afc:	4423      	add	r3, r4
 8005afe:	789b      	ldrb	r3, [r3, #2]
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	4b63      	ldr	r3, [pc, #396]	; (8005c90 <fetchSensorDataOnce+0x1f4>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	4611      	mov	r1, r2
 8005b08:	2002      	movs	r0, #2
 8005b0a:	f010 fd3b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			HAL_Delay(50);
 8005b0e:	2032      	movs	r0, #50	; 0x32
 8005b10:	f7fc fee6 	bl	80028e0 <HAL_Delay>
		for (int x = 0; x < ModbusResp.rxIndex; x++){
 8005b14:	3401      	adds	r4, #1
 8005b16:	4b5d      	ldr	r3, [pc, #372]	; (8005c8c <fetchSensorDataOnce+0x1f0>)
 8005b18:	881b      	ldrh	r3, [r3, #0]
 8005b1a:	42a3      	cmp	r3, r4
 8005b1c:	dced      	bgt.n	8005afa <fetchSensorDataOnce+0x5e>
		rawLevelVal = parseReply(ModbusResp.buffer);
 8005b1e:	485d      	ldr	r0, [pc, #372]	; (8005c94 <fetchSensorDataOnce+0x1f8>)
 8005b20:	f7ff fea4 	bl	800586c <parseReply>
 8005b24:	4c5c      	ldr	r4, [pc, #368]	; (8005c98 <fetchSensorDataOnce+0x1fc>)
 8005b26:	6020      	str	r0, [r4, #0]
		waterLevels[i] = rawLevelVal;
 8005b28:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
		HAL_Delay(50);
 8005b2c:	2032      	movs	r0, #50	; 0x32
 8005b2e:	f7fc fed7 	bl	80028e0 <HAL_Delay>
		sprintf((char*)msg, "\r\nWater Level: %f \r\n", rawLevelVal);
 8005b32:	6820      	ldr	r0, [r4, #0]
 8005b34:	f7fa fce0 	bl	80004f8 <__aeabi_f2d>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4957      	ldr	r1, [pc, #348]	; (8005c9c <fetchSensorDataOnce+0x200>)
 8005b3e:	f107 000c 	add.w	r0, r7, #12
 8005b42:	f012 fab7 	bl	80180b4 <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8005b46:	f107 000c 	add.w	r0, r7, #12
 8005b4a:	f7fa fb69 	bl	8000220 <strlen>
 8005b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005b52:	b282      	uxth	r2, r0
 8005b54:	f107 010c 	add.w	r1, r7, #12
 8005b58:	4851      	ldr	r0, [pc, #324]	; (8005ca0 <fetchSensorDataOnce+0x204>)
 8005b5a:	f006 fc36 	bl	800c3ca <HAL_UART_Transmit>
		APP_LOG(TS_OFF, VLEVEL_M, " \r\n");
 8005b5e:	4b51      	ldr	r3, [pc, #324]	; (8005ca4 <fetchSensorDataOnce+0x208>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	4611      	mov	r1, r2
 8005b64:	2002      	movs	r0, #2
 8005b66:	f010 fd0d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(1000);
 8005b6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b6e:	f7fc feb7 	bl	80028e0 <HAL_Delay>
	        modbusUnresponsiveCount = 0; // Reset count on successful response
 8005b72:	f04f 0900 	mov.w	r9, #0
 8005b76:	4635      	mov	r5, r6
	for(int i = 0; i < 10;  i++)	{
 8005b78:	2d09      	cmp	r5, #9
 8005b7a:	dc1c      	bgt.n	8005bb6 <fetchSensorDataOnce+0x11a>
		APP_LOG(TS_OFF, VLEVEL_M, " Data Fetch: %d\r\n", i+1);
 8005b7c:	1c6e      	adds	r6, r5, #1
 8005b7e:	9600      	str	r6, [sp, #0]
 8005b80:	4b49      	ldr	r3, [pc, #292]	; (8005ca8 <fetchSensorDataOnce+0x20c>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	4611      	mov	r1, r2
 8005b86:	2002      	movs	r0, #2
 8005b88:	f010 fcfc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		sendRaw(ModbusCommand, CommandSize, &ModbusResp);
 8005b8c:	4c3f      	ldr	r4, [pc, #252]	; (8005c8c <fetchSensorDataOnce+0x1f0>)
 8005b8e:	4622      	mov	r2, r4
 8005b90:	2108      	movs	r1, #8
 8005b92:	1d38      	adds	r0, r7, #4
 8005b94:	f7fb ffc0 	bl	8001b18 <sendRaw>
		HAL_Delay(250);
 8005b98:	20fa      	movs	r0, #250	; 0xfa
 8005b9a:	f7fc fea1 	bl	80028e0 <HAL_Delay>
	    int respLength = ModbusResp.rxIndex;
 8005b9e:	8823      	ldrh	r3, [r4, #0]
	    if (respLength <= 0) {
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1a2      	bne.n	8005aea <fetchSensorDataOnce+0x4e>
	        modbusUnresponsiveCount += 1;
 8005ba4:	f109 0901 	add.w	r9, r9, #1
	        APP_LOG(TS_OFF, VLEVEL_M, "No response from Modbus.\r\n");
 8005ba8:	4b40      	ldr	r3, [pc, #256]	; (8005cac <fetchSensorDataOnce+0x210>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	4611      	mov	r1, r2
 8005bae:	2002      	movs	r0, #2
 8005bb0:	f010 fce8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	        continue;
 8005bb4:	e7df      	b.n	8005b76 <fetchSensorDataOnce+0xda>
	if(modbusUnresponsiveCount >= 3){
 8005bb6:	f1b9 0f02 	cmp.w	r9, #2
 8005bba:	dc43      	bgt.n	8005c44 <fetchSensorDataOnce+0x1a8>
	sortArray(waterLevels, 10);
 8005bbc:	210a      	movs	r1, #10
 8005bbe:	4640      	mov	r0, r8
 8005bc0:	f7ff fe62 	bl	8005888 <sortArray>
	if(samplingMethod == 0){
 8005bc4:	4b3a      	ldr	r3, [pc, #232]	; (8005cb0 <fetchSensorDataOnce+0x214>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d147      	bne.n	8005c5c <fetchSensorDataOnce+0x1c0>
		waterLevel = getMedianValue(waterLevels, 10);
 8005bcc:	210a      	movs	r1, #10
 8005bce:	4640      	mov	r0, r8
 8005bd0:	f7ff fe7e 	bl	80058d0 <getMedianValue>
 8005bd4:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <fetchSensorDataOnce+0x218>)
 8005bd6:	6018      	str	r0, [r3, #0]
	waterLevelLatest = waterLevel;
 8005bd8:	4b36      	ldr	r3, [pc, #216]	; (8005cb4 <fetchSensorDataOnce+0x218>)
 8005bda:	681c      	ldr	r4, [r3, #0]
 8005bdc:	4b36      	ldr	r3, [pc, #216]	; (8005cb8 <fetchSensorDataOnce+0x21c>)
 8005bde:	601c      	str	r4, [r3, #0]
	if(waterLevelMin == 0 && waterLevelMax == 0){
 8005be0:	2100      	movs	r1, #0
 8005be2:	4b36      	ldr	r3, [pc, #216]	; (8005cbc <fetchSensorDataOnce+0x220>)
 8005be4:	6818      	ldr	r0, [r3, #0]
 8005be6:	f7fb fac9 	bl	800117c <__aeabi_fcmpeq>
 8005bea:	b148      	cbz	r0, 8005c00 <fetchSensorDataOnce+0x164>
 8005bec:	2100      	movs	r1, #0
 8005bee:	4b34      	ldr	r3, [pc, #208]	; (8005cc0 <fetchSensorDataOnce+0x224>)
 8005bf0:	6818      	ldr	r0, [r3, #0]
 8005bf2:	f7fb fac3 	bl	800117c <__aeabi_fcmpeq>
 8005bf6:	b118      	cbz	r0, 8005c00 <fetchSensorDataOnce+0x164>
		waterLevelMin = waterLevelMax = waterLevel;
 8005bf8:	4b31      	ldr	r3, [pc, #196]	; (8005cc0 <fetchSensorDataOnce+0x224>)
 8005bfa:	601c      	str	r4, [r3, #0]
 8005bfc:	4b2f      	ldr	r3, [pc, #188]	; (8005cbc <fetchSensorDataOnce+0x220>)
 8005bfe:	601c      	str	r4, [r3, #0]
	if(waterLevel < waterLevelMin){
 8005c00:	4b2e      	ldr	r3, [pc, #184]	; (8005cbc <fetchSensorDataOnce+0x220>)
 8005c02:	6819      	ldr	r1, [r3, #0]
 8005c04:	4620      	mov	r0, r4
 8005c06:	f7fb fac3 	bl	8001190 <__aeabi_fcmplt>
 8005c0a:	b370      	cbz	r0, 8005c6a <fetchSensorDataOnce+0x1ce>
		waterLevelMin = waterLevel;
 8005c0c:	4b2b      	ldr	r3, [pc, #172]	; (8005cbc <fetchSensorDataOnce+0x220>)
 8005c0e:	601c      	str	r4, [r3, #0]
	sprintf((char*)msg, "Final Water Level: %f \r\n", waterLevel);
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7fa fc71 	bl	80004f8 <__aeabi_f2d>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	492a      	ldr	r1, [pc, #168]	; (8005cc4 <fetchSensorDataOnce+0x228>)
 8005c1c:	f107 000c 	add.w	r0, r7, #12
 8005c20:	f012 fa48 	bl	80180b4 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8005c24:	f107 000c 	add.w	r0, r7, #12
 8005c28:	f7fa fafa 	bl	8000220 <strlen>
 8005c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005c30:	b282      	uxth	r2, r0
 8005c32:	f107 010c 	add.w	r1, r7, #12
 8005c36:	481a      	ldr	r0, [pc, #104]	; (8005ca0 <fetchSensorDataOnce+0x204>)
 8005c38:	f006 fbc7 	bl	800c3ca <HAL_UART_Transmit>
}
 8005c3c:	3774      	adds	r7, #116	; 0x74
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		isModbusUnresponsive = true;
 8005c44:	2301      	movs	r3, #1
 8005c46:	4a20      	ldr	r2, [pc, #128]	; (8005cc8 <fetchSensorDataOnce+0x22c>)
 8005c48:	7013      	strb	r3, [r2, #0]
		sendSystemDiagnostic = true;
 8005c4a:	4a20      	ldr	r2, [pc, #128]	; (8005ccc <fetchSensorDataOnce+0x230>)
 8005c4c:	7013      	strb	r3, [r2, #0]
		APP_LOG(TS_OFF, VLEVEL_M, "Modbus is Unresponsive.\r\n");
 8005c4e:	4b20      	ldr	r3, [pc, #128]	; (8005cd0 <fetchSensorDataOnce+0x234>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	4611      	mov	r1, r2
 8005c54:	2002      	movs	r0, #2
 8005c56:	f010 fc95 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005c5a:	e7af      	b.n	8005bbc <fetchSensorDataOnce+0x120>
		waterLevel = getAverageValue(waterLevels, 10);
 8005c5c:	210a      	movs	r1, #10
 8005c5e:	4640      	mov	r0, r8
 8005c60:	f7ff fe52 	bl	8005908 <getAverageValue>
 8005c64:	4b13      	ldr	r3, [pc, #76]	; (8005cb4 <fetchSensorDataOnce+0x218>)
 8005c66:	6018      	str	r0, [r3, #0]
 8005c68:	e7b6      	b.n	8005bd8 <fetchSensorDataOnce+0x13c>
	} else if(waterLevel > waterLevelMax){
 8005c6a:	4b15      	ldr	r3, [pc, #84]	; (8005cc0 <fetchSensorDataOnce+0x224>)
 8005c6c:	6819      	ldr	r1, [r3, #0]
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f7fb faac 	bl	80011cc <__aeabi_fcmpgt>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d0cb      	beq.n	8005c10 <fetchSensorDataOnce+0x174>
		waterLevelMax = waterLevel;
 8005c78:	4b11      	ldr	r3, [pc, #68]	; (8005cc0 <fetchSensorDataOnce+0x224>)
 8005c7a:	601c      	str	r4, [r3, #0]
 8005c7c:	e7c8      	b.n	8005c10 <fetchSensorDataOnce+0x174>
 8005c7e:	bf00      	nop
 8005c80:	0801c1b0 	.word	0x0801c1b0
 8005c84:	200000d0 	.word	0x200000d0
 8005c88:	0801d468 	.word	0x0801d468
 8005c8c:	20000f18 	.word	0x20000f18
 8005c90:	0801c280 	.word	0x0801c280
 8005c94:	20000f1a 	.word	0x20000f1a
 8005c98:	20001040 	.word	0x20001040
 8005c9c:	0801d4c8 	.word	0x0801d4c8
 8005ca0:	20000c60 	.word	0x20000c60
 8005ca4:	0801c38c 	.word	0x0801c38c
 8005ca8:	0801d498 	.word	0x0801d498
 8005cac:	0801d4ac 	.word	0x0801d4ac
 8005cb0:	20000b14 	.word	0x20000b14
 8005cb4:	20001050 	.word	0x20001050
 8005cb8:	20001054 	.word	0x20001054
 8005cbc:	2000105c 	.word	0x2000105c
 8005cc0:	20001058 	.word	0x20001058
 8005cc4:	0801d4fc 	.word	0x0801d4fc
 8005cc8:	20001036 	.word	0x20001036
 8005ccc:	20001048 	.word	0x20001048
 8005cd0:	0801d4e0 	.word	0x0801d4e0

08005cd4 <fetchSensorDataDifferential>:
void fetchSensorDataDifferential(void) {
 8005cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd8:	b09f      	sub	sp, #124	; 0x7c
 8005cda:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8005cdc:	2201      	movs	r2, #1
 8005cde:	2140      	movs	r1, #64	; 0x40
 8005ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ce4:	f003 fa66 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8005ce8:	2201      	movs	r2, #1
 8005cea:	2180      	movs	r1, #128	; 0x80
 8005cec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005cf0:	f003 fa60 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8005cf4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005cf8:	f7fc fdf2 	bl	80028e0 <HAL_Delay>
	uint8_t ModbusCommand[8] = {0x01,0x03,0x00,0x03,0x00,0x01,0x74,0x0A};
 8005cfc:	4a9e      	ldr	r2, [pc, #632]	; (8005f78 <fetchSensorDataDifferential+0x2a4>)
 8005cfe:	1d3b      	adds	r3, r7, #4
 8005d00:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d04:	e883 0003 	stmia.w	r3, {r0, r1}
	float waterLevels[readingCount];
 8005d08:	4b9c      	ldr	r3, [pc, #624]	; (8005f7c <fetchSensorDataDifferential+0x2a8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	3307      	adds	r3, #7
 8005d10:	f023 0307 	bic.w	r3, r3, #7
 8005d14:	ebad 0d03 	sub.w	sp, sp, r3
 8005d18:	f10d 0a08 	add.w	sl, sp, #8
	float differentialLevels[readingCount];
 8005d1c:	ebad 0d03 	sub.w	sp, sp, r3
 8005d20:	ae02      	add	r6, sp, #8
	for (int i = 0; i < 10; i++) {
 8005d22:	f04f 0800 	mov.w	r8, #0
	int modbusUnresponsiveCount = 0;
 8005d26:	46c1      	mov	r9, r8
	for (int i = 0; i < 10; i++) {
 8005d28:	e055      	b.n	8005dd6 <fetchSensorDataDifferential+0x102>
	    APP_LOG(TS_OFF, VLEVEL_M, " MODBUS RESPONSE (Hex): ");
 8005d2a:	4b95      	ldr	r3, [pc, #596]	; (8005f80 <fetchSensorDataDifferential+0x2ac>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	4611      	mov	r1, r2
 8005d30:	2002      	movs	r0, #2
 8005d32:	f010 fc27 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 8005d36:	2400      	movs	r4, #0
 8005d38:	e00d      	b.n	8005d56 <fetchSensorDataDifferential+0x82>
	        APP_LOG(TS_OFF, VLEVEL_M, "%02X ", ModbusResp.buffer[x]);
 8005d3a:	4b92      	ldr	r3, [pc, #584]	; (8005f84 <fetchSensorDataDifferential+0x2b0>)
 8005d3c:	4423      	add	r3, r4
 8005d3e:	789b      	ldrb	r3, [r3, #2]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	4b91      	ldr	r3, [pc, #580]	; (8005f88 <fetchSensorDataDifferential+0x2b4>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	4611      	mov	r1, r2
 8005d48:	2002      	movs	r0, #2
 8005d4a:	f010 fc1b 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	        HAL_Delay(50);
 8005d4e:	2032      	movs	r0, #50	; 0x32
 8005d50:	f7fc fdc6 	bl	80028e0 <HAL_Delay>
	    for (int x = 0; x < ModbusResp.rxIndex; x++) {
 8005d54:	3401      	adds	r4, #1
 8005d56:	4b8b      	ldr	r3, [pc, #556]	; (8005f84 <fetchSensorDataDifferential+0x2b0>)
 8005d58:	881b      	ldrh	r3, [r3, #0]
 8005d5a:	42a3      	cmp	r3, r4
 8005d5c:	dced      	bgt.n	8005d3a <fetchSensorDataDifferential+0x66>
	    rawLevelVal = parseReply(ModbusResp.buffer);
 8005d5e:	488b      	ldr	r0, [pc, #556]	; (8005f8c <fetchSensorDataDifferential+0x2b8>)
 8005d60:	f7ff fd84 	bl	800586c <parseReply>
 8005d64:	4c8a      	ldr	r4, [pc, #552]	; (8005f90 <fetchSensorDataDifferential+0x2bc>)
 8005d66:	6020      	str	r0, [r4, #0]
	    waterLevels[i] = rawLevelVal;
 8005d68:	f84a 0028 	str.w	r0, [sl, r8, lsl #2]
	    differentialLevels[i] = rawLevelVal - waterLevelLatest; // Calculate the difference
 8005d6c:	4b89      	ldr	r3, [pc, #548]	; (8005f94 <fetchSensorDataDifferential+0x2c0>)
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	f7fa ff66 	bl	8000c40 <__aeabi_fsub>
 8005d74:	f846 0028 	str.w	r0, [r6, r8, lsl #2]
	    HAL_Delay(50);
 8005d78:	2032      	movs	r0, #50	; 0x32
 8005d7a:	f7fc fdb1 	bl	80028e0 <HAL_Delay>
	    sprintf((char*)msg, "\r\nWater Level: %f, Differential: %f \r\n", rawLevelVal, differentialLevels[i]);
 8005d7e:	f856 b028 	ldr.w	fp, [r6, r8, lsl #2]
 8005d82:	6820      	ldr	r0, [r4, #0]
 8005d84:	f7fa fbb8 	bl	80004f8 <__aeabi_f2d>
 8005d88:	4680      	mov	r8, r0
 8005d8a:	4689      	mov	r9, r1
 8005d8c:	4658      	mov	r0, fp
 8005d8e:	f7fa fbb3 	bl	80004f8 <__aeabi_f2d>
 8005d92:	e9cd 0100 	strd	r0, r1, [sp]
 8005d96:	4642      	mov	r2, r8
 8005d98:	464b      	mov	r3, r9
 8005d9a:	497f      	ldr	r1, [pc, #508]	; (8005f98 <fetchSensorDataDifferential+0x2c4>)
 8005d9c:	f107 000c 	add.w	r0, r7, #12
 8005da0:	f012 f988 	bl	80180b4 <siprintf>
	    HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8005da4:	f107 000c 	add.w	r0, r7, #12
 8005da8:	f7fa fa3a 	bl	8000220 <strlen>
 8005dac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005db0:	b282      	uxth	r2, r0
 8005db2:	f107 010c 	add.w	r1, r7, #12
 8005db6:	4879      	ldr	r0, [pc, #484]	; (8005f9c <fetchSensorDataDifferential+0x2c8>)
 8005db8:	f006 fb07 	bl	800c3ca <HAL_UART_Transmit>
	    APP_LOG(TS_OFF, VLEVEL_M, " \r\n");
 8005dbc:	4b78      	ldr	r3, [pc, #480]	; (8005fa0 <fetchSensorDataDifferential+0x2cc>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	2002      	movs	r0, #2
 8005dc4:	f010 fbde 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	    HAL_Delay(1000);
 8005dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005dcc:	f7fc fd88 	bl	80028e0 <HAL_Delay>
	        modbusUnresponsiveCount = 0; // Reset count on successful response
 8005dd0:	f04f 0900 	mov.w	r9, #0
 8005dd4:	46a8      	mov	r8, r5
	for (int i = 0; i < 10; i++) {
 8005dd6:	f1b8 0f09 	cmp.w	r8, #9
 8005dda:	dc1d      	bgt.n	8005e18 <fetchSensorDataDifferential+0x144>
	    APP_LOG(TS_OFF, VLEVEL_M, " Data Fetch: %d\r\n", i + 1);
 8005ddc:	f108 0501 	add.w	r5, r8, #1
 8005de0:	9500      	str	r5, [sp, #0]
 8005de2:	4b70      	ldr	r3, [pc, #448]	; (8005fa4 <fetchSensorDataDifferential+0x2d0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	4611      	mov	r1, r2
 8005de8:	2002      	movs	r0, #2
 8005dea:	f010 fbcb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	    sendRaw(ModbusCommand, CommandSize, &ModbusResp);
 8005dee:	4c65      	ldr	r4, [pc, #404]	; (8005f84 <fetchSensorDataDifferential+0x2b0>)
 8005df0:	4622      	mov	r2, r4
 8005df2:	2108      	movs	r1, #8
 8005df4:	1d38      	adds	r0, r7, #4
 8005df6:	f7fb fe8f 	bl	8001b18 <sendRaw>
	    HAL_Delay(250);
 8005dfa:	20fa      	movs	r0, #250	; 0xfa
 8005dfc:	f7fc fd70 	bl	80028e0 <HAL_Delay>
	    int respLength = ModbusResp.rxIndex;
 8005e00:	8823      	ldrh	r3, [r4, #0]
	    if (respLength <= 0) {
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d191      	bne.n	8005d2a <fetchSensorDataDifferential+0x56>
	        modbusUnresponsiveCount += 1;
 8005e06:	f109 0901 	add.w	r9, r9, #1
	        APP_LOG(TS_OFF, VLEVEL_M, "No response from Modbus.\r\n");
 8005e0a:	4b67      	ldr	r3, [pc, #412]	; (8005fa8 <fetchSensorDataDifferential+0x2d4>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4611      	mov	r1, r2
 8005e10:	2002      	movs	r0, #2
 8005e12:	f010 fbb7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	        continue;
 8005e16:	e7dd      	b.n	8005dd4 <fetchSensorDataDifferential+0x100>
	if(modbusUnresponsiveCount >= 3){
 8005e18:	f1b9 0f02 	cmp.w	r9, #2
 8005e1c:	f300 808d 	bgt.w	8005f3a <fetchSensorDataDifferential+0x266>
	sortArray(differentialLevels, 10);
 8005e20:	210a      	movs	r1, #10
 8005e22:	4630      	mov	r0, r6
 8005e24:	f7ff fd30 	bl	8005888 <sortArray>
	if (samplingMethod == 0) {
 8005e28:	4b60      	ldr	r3, [pc, #384]	; (8005fac <fetchSensorDataDifferential+0x2d8>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f040 8090 	bne.w	8005f52 <fetchSensorDataDifferential+0x27e>
	    waterLevelChange = getMedianValue(differentialLevels, 10);
 8005e32:	210a      	movs	r1, #10
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7ff fd4b 	bl	80058d0 <getMedianValue>
 8005e3a:	4604      	mov	r4, r0
	waterLevelLatest = waterLevel + waterLevelChange;
 8005e3c:	4b5c      	ldr	r3, [pc, #368]	; (8005fb0 <fetchSensorDataDifferential+0x2dc>)
 8005e3e:	6819      	ldr	r1, [r3, #0]
 8005e40:	4620      	mov	r0, r4
 8005e42:	f7fa feff 	bl	8000c44 <__addsf3>
 8005e46:	4b53      	ldr	r3, [pc, #332]	; (8005f94 <fetchSensorDataDifferential+0x2c0>)
 8005e48:	6018      	str	r0, [r3, #0]
	sprintf((char*)msg, "\r\nWater Level Change: %f \r\n", waterLevelChange);
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f7fa fb54 	bl	80004f8 <__aeabi_f2d>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4957      	ldr	r1, [pc, #348]	; (8005fb4 <fetchSensorDataDifferential+0x2e0>)
 8005e56:	f107 000c 	add.w	r0, r7, #12
 8005e5a:	f012 f92b 	bl	80180b4 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8005e5e:	f107 000c 	add.w	r0, r7, #12
 8005e62:	f7fa f9dd 	bl	8000220 <strlen>
 8005e66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005e6a:	b282      	uxth	r2, r0
 8005e6c:	f107 010c 	add.w	r1, r7, #12
 8005e70:	484a      	ldr	r0, [pc, #296]	; (8005f9c <fetchSensorDataDifferential+0x2c8>)
 8005e72:	f006 faaa 	bl	800c3ca <HAL_UART_Transmit>
	if(waterLevelMin == 0 && waterLevelMax == 0){
 8005e76:	2100      	movs	r1, #0
 8005e78:	4b4f      	ldr	r3, [pc, #316]	; (8005fb8 <fetchSensorDataDifferential+0x2e4>)
 8005e7a:	6818      	ldr	r0, [r3, #0]
 8005e7c:	f7fb f97e 	bl	800117c <__aeabi_fcmpeq>
 8005e80:	b158      	cbz	r0, 8005e9a <fetchSensorDataDifferential+0x1c6>
 8005e82:	2100      	movs	r1, #0
 8005e84:	4b4d      	ldr	r3, [pc, #308]	; (8005fbc <fetchSensorDataDifferential+0x2e8>)
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	f7fb f978 	bl	800117c <__aeabi_fcmpeq>
 8005e8c:	b128      	cbz	r0, 8005e9a <fetchSensorDataDifferential+0x1c6>
		waterLevelMin = waterLevelMax = waterLevelLatest;
 8005e8e:	4b41      	ldr	r3, [pc, #260]	; (8005f94 <fetchSensorDataDifferential+0x2c0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4a      	ldr	r2, [pc, #296]	; (8005fbc <fetchSensorDataDifferential+0x2e8>)
 8005e94:	6013      	str	r3, [r2, #0]
 8005e96:	4a48      	ldr	r2, [pc, #288]	; (8005fb8 <fetchSensorDataDifferential+0x2e4>)
 8005e98:	6013      	str	r3, [r2, #0]
	if(waterLevel < waterLevelMin){
 8005e9a:	4b45      	ldr	r3, [pc, #276]	; (8005fb0 <fetchSensorDataDifferential+0x2dc>)
 8005e9c:	681c      	ldr	r4, [r3, #0]
 8005e9e:	4b46      	ldr	r3, [pc, #280]	; (8005fb8 <fetchSensorDataDifferential+0x2e4>)
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7fb f974 	bl	8001190 <__aeabi_fcmplt>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	d058      	beq.n	8005f5e <fetchSensorDataDifferential+0x28a>
		waterLevelMin = waterLevelLatest;
 8005eac:	4b39      	ldr	r3, [pc, #228]	; (8005f94 <fetchSensorDataDifferential+0x2c0>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b41      	ldr	r3, [pc, #260]	; (8005fb8 <fetchSensorDataDifferential+0x2e4>)
 8005eb2:	601a      	str	r2, [r3, #0]
	sprintf((char*)msg, "Final Water Level: %f \r\n", waterLevel);
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f7fa fb1f 	bl	80004f8 <__aeabi_f2d>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4940      	ldr	r1, [pc, #256]	; (8005fc0 <fetchSensorDataDifferential+0x2ec>)
 8005ec0:	f107 000c 	add.w	r0, r7, #12
 8005ec4:	f012 f8f6 	bl	80180b4 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8005ec8:	f107 000c 	add.w	r0, r7, #12
 8005ecc:	f7fa f9a8 	bl	8000220 <strlen>
 8005ed0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ed4:	b282      	uxth	r2, r0
 8005ed6:	f107 010c 	add.w	r1, r7, #12
 8005eda:	4830      	ldr	r0, [pc, #192]	; (8005f9c <fetchSensorDataDifferential+0x2c8>)
 8005edc:	f006 fa75 	bl	800c3ca <HAL_UART_Transmit>
    waterLevelSamples[sampleIndex] = waterLevel;
 8005ee0:	4c38      	ldr	r4, [pc, #224]	; (8005fc4 <fetchSensorDataDifferential+0x2f0>)
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <fetchSensorDataDifferential+0x2f4>)
 8005ee4:	6819      	ldr	r1, [r3, #0]
 8005ee6:	6822      	ldr	r2, [r4, #0]
 8005ee8:	4831      	ldr	r0, [pc, #196]	; (8005fb0 <fetchSensorDataDifferential+0x2dc>)
 8005eea:	6800      	ldr	r0, [r0, #0]
 8005eec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    sampleIndex += 1;
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	3201      	adds	r2, #1
 8005ef4:	601a      	str	r2, [r3, #0]
    TRANSMIT_INTERVAL_MS = 180000;
 8005ef6:	4b35      	ldr	r3, [pc, #212]	; (8005fcc <fetchSensorDataDifferential+0x2f8>)
 8005ef8:	4a35      	ldr	r2, [pc, #212]	; (8005fd0 <fetchSensorDataDifferential+0x2fc>)
 8005efa:	601a      	str	r2, [r3, #0]
    APP_LOG(TS_OFF, VLEVEL_M, "Transmission Cycle: %d seconds \r\n", TRANSMIT_INTERVAL_MS / 1000);
 8005efc:	23b4      	movs	r3, #180	; 0xb4
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	4b34      	ldr	r3, [pc, #208]	; (8005fd4 <fetchSensorDataDifferential+0x300>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	4611      	mov	r1, r2
 8005f06:	2002      	movs	r0, #2
 8005f08:	f010 fb3c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    MAX_WATER_LEVEL_SAMPLES = 1;
 8005f0c:	4b32      	ldr	r3, [pc, #200]	; (8005fd8 <fetchSensorDataDifferential+0x304>)
 8005f0e:	2201      	movs	r2, #1
 8005f10:	601a      	str	r2, [r3, #0]
    waterLevelSamples = (float *)malloc(sizeof(float) * MAX_WATER_LEVEL_SAMPLES);
 8005f12:	2004      	movs	r0, #4
 8005f14:	f011 f8ea 	bl	80170ec <malloc>
 8005f18:	6020      	str	r0, [r4, #0]
    transmissionType = 0;
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4b2f      	ldr	r3, [pc, #188]	; (8005fdc <fetchSensorDataDifferential+0x308>)
 8005f1e:	6019      	str	r1, [r3, #0]
    skipScheduledTransmission = false;
 8005f20:	4b2f      	ldr	r3, [pc, #188]	; (8005fe0 <fetchSensorDataDifferential+0x30c>)
 8005f22:	7019      	strb	r1, [r3, #0]
    isLevelBreached = false;
 8005f24:	4b2f      	ldr	r3, [pc, #188]	; (8005fe4 <fetchSensorDataDifferential+0x310>)
 8005f26:	7019      	strb	r1, [r3, #0]
	APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8005f28:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <fetchSensorDataDifferential+0x314>)
 8005f2a:	460a      	mov	r2, r1
 8005f2c:	2002      	movs	r0, #2
 8005f2e:	f010 fb29 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8005f32:	3774      	adds	r7, #116	; 0x74
 8005f34:	46bd      	mov	sp, r7
 8005f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		isModbusUnresponsive = true;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <fetchSensorDataDifferential+0x318>)
 8005f3e:	7013      	strb	r3, [r2, #0]
		sendSystemDiagnostic = true;
 8005f40:	4a2b      	ldr	r2, [pc, #172]	; (8005ff0 <fetchSensorDataDifferential+0x31c>)
 8005f42:	7013      	strb	r3, [r2, #0]
		APP_LOG(TS_OFF, VLEVEL_M, "Modbus is Unresponsive.\r\n");
 8005f44:	4b2b      	ldr	r3, [pc, #172]	; (8005ff4 <fetchSensorDataDifferential+0x320>)
 8005f46:	2200      	movs	r2, #0
 8005f48:	4611      	mov	r1, r2
 8005f4a:	2002      	movs	r0, #2
 8005f4c:	f010 fb1a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8005f50:	e766      	b.n	8005e20 <fetchSensorDataDifferential+0x14c>
	    waterLevelChange = getAverageValue(differentialLevels, 10);
 8005f52:	210a      	movs	r1, #10
 8005f54:	4630      	mov	r0, r6
 8005f56:	f7ff fcd7 	bl	8005908 <getAverageValue>
 8005f5a:	4604      	mov	r4, r0
 8005f5c:	e76e      	b.n	8005e3c <fetchSensorDataDifferential+0x168>
	} else if(waterLevel > waterLevelMax){
 8005f5e:	4b17      	ldr	r3, [pc, #92]	; (8005fbc <fetchSensorDataDifferential+0x2e8>)
 8005f60:	6819      	ldr	r1, [r3, #0]
 8005f62:	4620      	mov	r0, r4
 8005f64:	f7fb f932 	bl	80011cc <__aeabi_fcmpgt>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	d0a3      	beq.n	8005eb4 <fetchSensorDataDifferential+0x1e0>
		waterLevelMax = waterLevelLatest;
 8005f6c:	4b09      	ldr	r3, [pc, #36]	; (8005f94 <fetchSensorDataDifferential+0x2c0>)
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b12      	ldr	r3, [pc, #72]	; (8005fbc <fetchSensorDataDifferential+0x2e8>)
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	e79e      	b.n	8005eb4 <fetchSensorDataDifferential+0x1e0>
 8005f76:	bf00      	nop
 8005f78:	0801c1b0 	.word	0x0801c1b0
 8005f7c:	200000d0 	.word	0x200000d0
 8005f80:	0801d468 	.word	0x0801d468
 8005f84:	20000f18 	.word	0x20000f18
 8005f88:	0801c280 	.word	0x0801c280
 8005f8c:	20000f1a 	.word	0x20000f1a
 8005f90:	20001040 	.word	0x20001040
 8005f94:	20001054 	.word	0x20001054
 8005f98:	0801d518 	.word	0x0801d518
 8005f9c:	20000c60 	.word	0x20000c60
 8005fa0:	0801c38c 	.word	0x0801c38c
 8005fa4:	0801d498 	.word	0x0801d498
 8005fa8:	0801d4ac 	.word	0x0801d4ac
 8005fac:	20000b14 	.word	0x20000b14
 8005fb0:	20001050 	.word	0x20001050
 8005fb4:	0801d540 	.word	0x0801d540
 8005fb8:	2000105c 	.word	0x2000105c
 8005fbc:	20001058 	.word	0x20001058
 8005fc0:	0801d4fc 	.word	0x0801d4fc
 8005fc4:	20001060 	.word	0x20001060
 8005fc8:	20001044 	.word	0x20001044
 8005fcc:	2000004c 	.word	0x2000004c
 8005fd0:	0002bf20 	.word	0x0002bf20
 8005fd4:	0801d55c 	.word	0x0801d55c
 8005fd8:	20000044 	.word	0x20000044
 8005fdc:	2000104c 	.word	0x2000104c
 8005fe0:	20001049 	.word	0x20001049
 8005fe4:	20001035 	.word	0x20001035
 8005fe8:	0801d0b4 	.word	0x0801d0b4
 8005fec:	20001036 	.word	0x20001036
 8005ff0:	20001048 	.word	0x20001048
 8005ff4:	0801d4e0 	.word	0x0801d4e0

08005ff8 <fetchSensorData>:
void fetchSensorData(void) {
 8005ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ffc:	b0f5      	sub	sp, #468	; 0x1d4
 8005ffe:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8006000:	2201      	movs	r2, #1
 8006002:	2140      	movs	r1, #64	; 0x40
 8006004:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006008:	f003 f8d4 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800600c:	2201      	movs	r2, #1
 800600e:	2180      	movs	r1, #128	; 0x80
 8006010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006014:	f003 f8ce 	bl	80091b4 <HAL_GPIO_WritePin>
	HAL_Delay(1500);
 8006018:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800601c:	f7fc fc60 	bl	80028e0 <HAL_Delay>
	uint8_t ModbusCommand[8] = {0x01,0x03,0x00,0x03,0x00,0x01,0x74,0x0A};
 8006020:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006024:	4aac      	ldr	r2, [pc, #688]	; (80062d8 <fetchSensorData+0x2e0>)
 8006026:	e892 0003 	ldmia.w	r2, {r0, r1}
 800602a:	e883 0003 	stmia.w	r3, {r0, r1}
	float waterLevels[readingCount];
 800602e:	4bab      	ldr	r3, [pc, #684]	; (80062dc <fetchSensorData+0x2e4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	3307      	adds	r3, #7
 8006036:	f023 0307 	bic.w	r3, r3, #7
 800603a:	ebad 0d03 	sub.w	sp, sp, r3
 800603e:	f10d 0808 	add.w	r8, sp, #8
	for(int i = 0; i < 10;  i++)	{
 8006042:	2500      	movs	r5, #0
	int modbusUnresponsiveCount = 0;
 8006044:	46a9      	mov	r9, r5
	for(int i = 0; i < 10;  i++)	{
 8006046:	e046      	b.n	80060d6 <fetchSensorData+0xde>
		APP_LOG(TS_OFF, VLEVEL_M, " MODBUS RESPONSE (Hex): ");
 8006048:	4ba5      	ldr	r3, [pc, #660]	; (80062e0 <fetchSensorData+0x2e8>)
 800604a:	2200      	movs	r2, #0
 800604c:	4611      	mov	r1, r2
 800604e:	2002      	movs	r0, #2
 8006050:	f010 fa98 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		for (int x = 0; x < ModbusResp.rxIndex; x++){
 8006054:	2400      	movs	r4, #0
 8006056:	e00d      	b.n	8006074 <fetchSensorData+0x7c>
			APP_LOG(TS_OFF, VLEVEL_M, "%02X ", ModbusResp.buffer[x]);
 8006058:	4ba2      	ldr	r3, [pc, #648]	; (80062e4 <fetchSensorData+0x2ec>)
 800605a:	4423      	add	r3, r4
 800605c:	789b      	ldrb	r3, [r3, #2]
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	4ba1      	ldr	r3, [pc, #644]	; (80062e8 <fetchSensorData+0x2f0>)
 8006062:	2200      	movs	r2, #0
 8006064:	4611      	mov	r1, r2
 8006066:	2002      	movs	r0, #2
 8006068:	f010 fa8c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			HAL_Delay(50);
 800606c:	2032      	movs	r0, #50	; 0x32
 800606e:	f7fc fc37 	bl	80028e0 <HAL_Delay>
		for (int x = 0; x < ModbusResp.rxIndex; x++){
 8006072:	3401      	adds	r4, #1
 8006074:	4b9b      	ldr	r3, [pc, #620]	; (80062e4 <fetchSensorData+0x2ec>)
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	42a3      	cmp	r3, r4
 800607a:	dced      	bgt.n	8006058 <fetchSensorData+0x60>
		rawLevelVal = parseReply(ModbusResp.buffer);
 800607c:	489b      	ldr	r0, [pc, #620]	; (80062ec <fetchSensorData+0x2f4>)
 800607e:	f7ff fbf5 	bl	800586c <parseReply>
 8006082:	4c9b      	ldr	r4, [pc, #620]	; (80062f0 <fetchSensorData+0x2f8>)
 8006084:	6020      	str	r0, [r4, #0]
		waterLevels[i] = rawLevelVal;
 8006086:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
		HAL_Delay(50);
 800608a:	2032      	movs	r0, #50	; 0x32
 800608c:	f7fc fc28 	bl	80028e0 <HAL_Delay>
		sprintf((char*)msg, "\r\nWater Level: %f \r\n", rawLevelVal);
 8006090:	6820      	ldr	r0, [r4, #0]
 8006092:	f7fa fa31 	bl	80004f8 <__aeabi_f2d>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4996      	ldr	r1, [pc, #600]	; (80062f4 <fetchSensorData+0x2fc>)
 800609c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80060a0:	f012 f808 	bl	80180b4 <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80060a4:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80060a8:	f7fa f8ba 	bl	8000220 <strlen>
 80060ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060b0:	b282      	uxth	r2, r0
 80060b2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80060b6:	4890      	ldr	r0, [pc, #576]	; (80062f8 <fetchSensorData+0x300>)
 80060b8:	f006 f987 	bl	800c3ca <HAL_UART_Transmit>
		APP_LOG(TS_OFF, VLEVEL_M, " \r\n");
 80060bc:	4b8f      	ldr	r3, [pc, #572]	; (80062fc <fetchSensorData+0x304>)
 80060be:	2200      	movs	r2, #0
 80060c0:	4611      	mov	r1, r2
 80060c2:	2002      	movs	r0, #2
 80060c4:	f010 fa5e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(1000);
 80060c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80060cc:	f7fc fc08 	bl	80028e0 <HAL_Delay>
	        modbusUnresponsiveCount = 0; // Reset count on successful response
 80060d0:	f04f 0900 	mov.w	r9, #0
 80060d4:	4635      	mov	r5, r6
	for(int i = 0; i < 10;  i++)	{
 80060d6:	2d09      	cmp	r5, #9
 80060d8:	dc1d      	bgt.n	8006116 <fetchSensorData+0x11e>
		APP_LOG(TS_OFF, VLEVEL_M, " Data Fetch: %d\r\n", i+1);
 80060da:	1c6e      	adds	r6, r5, #1
 80060dc:	9600      	str	r6, [sp, #0]
 80060de:	4b88      	ldr	r3, [pc, #544]	; (8006300 <fetchSensorData+0x308>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	4611      	mov	r1, r2
 80060e4:	2002      	movs	r0, #2
 80060e6:	f010 fa4d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		sendRaw(ModbusCommand, CommandSize, &ModbusResp);
 80060ea:	4c7e      	ldr	r4, [pc, #504]	; (80062e4 <fetchSensorData+0x2ec>)
 80060ec:	4622      	mov	r2, r4
 80060ee:	2108      	movs	r1, #8
 80060f0:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80060f4:	f7fb fd10 	bl	8001b18 <sendRaw>
		HAL_Delay(250);
 80060f8:	20fa      	movs	r0, #250	; 0xfa
 80060fa:	f7fc fbf1 	bl	80028e0 <HAL_Delay>
	    int respLength = ModbusResp.rxIndex;
 80060fe:	8823      	ldrh	r3, [r4, #0]
	    if (respLength <= 0) {
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1a1      	bne.n	8006048 <fetchSensorData+0x50>
	        modbusUnresponsiveCount += 1;
 8006104:	f109 0901 	add.w	r9, r9, #1
	        APP_LOG(TS_OFF, VLEVEL_M, "No response from Modbus.\r\n");
 8006108:	4b7e      	ldr	r3, [pc, #504]	; (8006304 <fetchSensorData+0x30c>)
 800610a:	2200      	movs	r2, #0
 800610c:	4611      	mov	r1, r2
 800610e:	2002      	movs	r0, #2
 8006110:	f010 fa38 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
	        continue;
 8006114:	e7de      	b.n	80060d4 <fetchSensorData+0xdc>
	if(modbusUnresponsiveCount >= 3){
 8006116:	f1b9 0f02 	cmp.w	r9, #2
 800611a:	dc7a      	bgt.n	8006212 <fetchSensorData+0x21a>
	sortArray(waterLevels, 10);
 800611c:	210a      	movs	r1, #10
 800611e:	4640      	mov	r0, r8
 8006120:	f7ff fbb2 	bl	8005888 <sortArray>
	if(samplingMethod == 0){
 8006124:	4b78      	ldr	r3, [pc, #480]	; (8006308 <fetchSensorData+0x310>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d17e      	bne.n	800622a <fetchSensorData+0x232>
		waterLevel = getMedianValue(waterLevels, 10);
 800612c:	210a      	movs	r1, #10
 800612e:	4640      	mov	r0, r8
 8006130:	f7ff fbce 	bl	80058d0 <getMedianValue>
 8006134:	4b75      	ldr	r3, [pc, #468]	; (800630c <fetchSensorData+0x314>)
 8006136:	6018      	str	r0, [r3, #0]
	waterLevelLatest = waterLevel;
 8006138:	4b74      	ldr	r3, [pc, #464]	; (800630c <fetchSensorData+0x314>)
 800613a:	681c      	ldr	r4, [r3, #0]
 800613c:	4b74      	ldr	r3, [pc, #464]	; (8006310 <fetchSensorData+0x318>)
 800613e:	601c      	str	r4, [r3, #0]
	if(waterLevelMin == 0 && waterLevelMax == 0){
 8006140:	2100      	movs	r1, #0
 8006142:	4b74      	ldr	r3, [pc, #464]	; (8006314 <fetchSensorData+0x31c>)
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	f7fb f819 	bl	800117c <__aeabi_fcmpeq>
 800614a:	b148      	cbz	r0, 8006160 <fetchSensorData+0x168>
 800614c:	2100      	movs	r1, #0
 800614e:	4b72      	ldr	r3, [pc, #456]	; (8006318 <fetchSensorData+0x320>)
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	f7fb f813 	bl	800117c <__aeabi_fcmpeq>
 8006156:	b118      	cbz	r0, 8006160 <fetchSensorData+0x168>
		waterLevelMin = waterLevelMax = waterLevel;
 8006158:	4b6f      	ldr	r3, [pc, #444]	; (8006318 <fetchSensorData+0x320>)
 800615a:	601c      	str	r4, [r3, #0]
 800615c:	4b6d      	ldr	r3, [pc, #436]	; (8006314 <fetchSensorData+0x31c>)
 800615e:	601c      	str	r4, [r3, #0]
	if(waterLevel < waterLevelMin){
 8006160:	4b6c      	ldr	r3, [pc, #432]	; (8006314 <fetchSensorData+0x31c>)
 8006162:	6819      	ldr	r1, [r3, #0]
 8006164:	4620      	mov	r0, r4
 8006166:	f7fb f813 	bl	8001190 <__aeabi_fcmplt>
 800616a:	2800      	cmp	r0, #0
 800616c:	d064      	beq.n	8006238 <fetchSensorData+0x240>
		waterLevelMin = waterLevel;
 800616e:	4b69      	ldr	r3, [pc, #420]	; (8006314 <fetchSensorData+0x31c>)
 8006170:	601c      	str	r4, [r3, #0]
	sprintf((char*)msg, "Final Water Level: %f \r\n", waterLevel);
 8006172:	4620      	mov	r0, r4
 8006174:	f7fa f9c0 	bl	80004f8 <__aeabi_f2d>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4967      	ldr	r1, [pc, #412]	; (800631c <fetchSensorData+0x324>)
 800617e:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8006182:	f011 ff97 	bl	80180b4 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006186:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800618a:	f7fa f849 	bl	8000220 <strlen>
 800618e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006192:	b282      	uxth	r2, r0
 8006194:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8006198:	4857      	ldr	r0, [pc, #348]	; (80062f8 <fetchSensorData+0x300>)
 800619a:	f006 f916 	bl	800c3ca <HAL_UART_Transmit>
    waterLevelSamples[sampleIndex] = waterLevel;
 800619e:	4b60      	ldr	r3, [pc, #384]	; (8006320 <fetchSensorData+0x328>)
 80061a0:	6819      	ldr	r1, [r3, #0]
 80061a2:	4a60      	ldr	r2, [pc, #384]	; (8006324 <fetchSensorData+0x32c>)
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	4859      	ldr	r0, [pc, #356]	; (800630c <fetchSensorData+0x314>)
 80061a8:	6800      	ldr	r0, [r0, #0]
 80061aa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
    sampleIndex += 1;
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	3201      	adds	r2, #1
 80061b2:	601a      	str	r2, [r3, #0]
    if (continuousMode) {
 80061b4:	4b5c      	ldr	r3, [pc, #368]	; (8006328 <fetchSensorData+0x330>)
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f000 8101 	beq.w	80063c0 <fetchSensorData+0x3c8>
        if (waterLevel >= thresholdLevelHigh) {
 80061be:	4b5b      	ldr	r3, [pc, #364]	; (800632c <fetchSensorData+0x334>)
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	f7fa fff9 	bl	80011b8 <__aeabi_fcmpge>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d040      	beq.n	800624c <fetchSensorData+0x254>
        	APP_LOG(TS_OFF, VLEVEL_M, "Water Level is out of threshold range! \r\n");
 80061ca:	4b59      	ldr	r3, [pc, #356]	; (8006330 <fetchSensorData+0x338>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	4611      	mov	r1, r2
 80061d0:	2002      	movs	r0, #2
 80061d2:	f010 f9d7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            TRANSMIT_INTERVAL_MS = 180000;
 80061d6:	4b57      	ldr	r3, [pc, #348]	; (8006334 <fetchSensorData+0x33c>)
 80061d8:	4a57      	ldr	r2, [pc, #348]	; (8006338 <fetchSensorData+0x340>)
 80061da:	601a      	str	r2, [r3, #0]
            APP_LOG(TS_OFF, VLEVEL_M, "Transmission Cycle: %d seconds \r\n", TRANSMIT_INTERVAL_MS / 1000);
 80061dc:	23b4      	movs	r3, #180	; 0xb4
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	4b56      	ldr	r3, [pc, #344]	; (800633c <fetchSensorData+0x344>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	4611      	mov	r1, r2
 80061e6:	2002      	movs	r0, #2
 80061e8:	f010 f9cc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            MAX_WATER_LEVEL_SAMPLES = 1;
 80061ec:	2401      	movs	r4, #1
 80061ee:	4b54      	ldr	r3, [pc, #336]	; (8006340 <fetchSensorData+0x348>)
 80061f0:	601c      	str	r4, [r3, #0]
            waterLevelSamples = (float *)malloc(sizeof(float) * MAX_WATER_LEVEL_SAMPLES);
 80061f2:	2004      	movs	r0, #4
 80061f4:	f010 ff7a 	bl	80170ec <malloc>
 80061f8:	4b4a      	ldr	r3, [pc, #296]	; (8006324 <fetchSensorData+0x32c>)
 80061fa:	6018      	str	r0, [r3, #0]
            transmissionType = 1;
 80061fc:	4b51      	ldr	r3, [pc, #324]	; (8006344 <fetchSensorData+0x34c>)
 80061fe:	601c      	str	r4, [r3, #0]
            skipScheduledTransmission = true;
 8006200:	4b51      	ldr	r3, [pc, #324]	; (8006348 <fetchSensorData+0x350>)
 8006202:	701c      	strb	r4, [r3, #0]
            isLevelBreached = true;
 8006204:	4b51      	ldr	r3, [pc, #324]	; (800634c <fetchSensorData+0x354>)
 8006206:	701c      	strb	r4, [r3, #0]
            sampleIndex = 0;
 8006208:	4b45      	ldr	r3, [pc, #276]	; (8006320 <fetchSensorData+0x328>)
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
				sendUnscheduledTransmission = false;
 800620e:	2401      	movs	r4, #1
 8006210:	e1e7      	b.n	80065e2 <fetchSensorData+0x5ea>
		isModbusUnresponsive = true;
 8006212:	2301      	movs	r3, #1
 8006214:	4a4e      	ldr	r2, [pc, #312]	; (8006350 <fetchSensorData+0x358>)
 8006216:	7013      	strb	r3, [r2, #0]
		sendSystemDiagnostic = true;
 8006218:	4a4e      	ldr	r2, [pc, #312]	; (8006354 <fetchSensorData+0x35c>)
 800621a:	7013      	strb	r3, [r2, #0]
		APP_LOG(TS_OFF, VLEVEL_M, "Modbus is Unresponsive.\r\n");
 800621c:	4b4e      	ldr	r3, [pc, #312]	; (8006358 <fetchSensorData+0x360>)
 800621e:	2200      	movs	r2, #0
 8006220:	4611      	mov	r1, r2
 8006222:	2002      	movs	r0, #2
 8006224:	f010 f9ae 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8006228:	e778      	b.n	800611c <fetchSensorData+0x124>
		waterLevel = getAverageValue(waterLevels, 10);
 800622a:	210a      	movs	r1, #10
 800622c:	4640      	mov	r0, r8
 800622e:	f7ff fb6b 	bl	8005908 <getAverageValue>
 8006232:	4b36      	ldr	r3, [pc, #216]	; (800630c <fetchSensorData+0x314>)
 8006234:	6018      	str	r0, [r3, #0]
 8006236:	e77f      	b.n	8006138 <fetchSensorData+0x140>
	} else if(waterLevel > waterLevelMax){
 8006238:	4b37      	ldr	r3, [pc, #220]	; (8006318 <fetchSensorData+0x320>)
 800623a:	6819      	ldr	r1, [r3, #0]
 800623c:	4620      	mov	r0, r4
 800623e:	f7fa ffc5 	bl	80011cc <__aeabi_fcmpgt>
 8006242:	2800      	cmp	r0, #0
 8006244:	d095      	beq.n	8006172 <fetchSensorData+0x17a>
		waterLevelMax = waterLevel;
 8006246:	4b34      	ldr	r3, [pc, #208]	; (8006318 <fetchSensorData+0x320>)
 8006248:	601c      	str	r4, [r3, #0]
 800624a:	e792      	b.n	8006172 <fetchSensorData+0x17a>
            APP_LOG(TS_OFF, VLEVEL_M, "Water Level is within threshold. \r\n");
 800624c:	4b43      	ldr	r3, [pc, #268]	; (800635c <fetchSensorData+0x364>)
 800624e:	2200      	movs	r2, #0
 8006250:	4611      	mov	r1, r2
 8006252:	2002      	movs	r0, #2
 8006254:	f010 f996 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            if (continuousCounter < 2) {
 8006258:	4b41      	ldr	r3, [pc, #260]	; (8006360 <fetchSensorData+0x368>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	f340 8087 	ble.w	8006370 <fetchSensorData+0x378>
                if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8006262:	22f8      	movs	r2, #248	; 0xf8
 8006264:	493f      	ldr	r1, [pc, #252]	; (8006364 <fetchSensorData+0x36c>)
 8006266:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 800626a:	f7fb ff43 	bl	80020f4 <FLASH_IF_Read>
 800626e:	2800      	cmp	r0, #0
 8006270:	f040 809f 	bne.w	80063b2 <fetchSensorData+0x3ba>
                    HAL_Delay(50);
 8006274:	2032      	movs	r0, #50	; 0x32
 8006276:	f7fc fb33 	bl	80028e0 <HAL_Delay>
                    MAX_WATER_LEVEL_SAMPLES = FlashNVM.pwxSamplingCount;
 800627a:	f8b7 01c2 	ldrh.w	r0, [r7, #450]	; 0x1c2
 800627e:	4c30      	ldr	r4, [pc, #192]	; (8006340 <fetchSensorData+0x348>)
 8006280:	6020      	str	r0, [r4, #0]
                    waterLevelSamples = (float *)malloc(sizeof(float) * MAX_WATER_LEVEL_SAMPLES);
 8006282:	0080      	lsls	r0, r0, #2
 8006284:	f010 ff32 	bl	80170ec <malloc>
 8006288:	4b26      	ldr	r3, [pc, #152]	; (8006324 <fetchSensorData+0x32c>)
 800628a:	6018      	str	r0, [r3, #0]
                    SAMPLE_INTERVAL_MS = (TRANSMIT_INTERVAL_MS / MAX_WATER_LEVEL_SAMPLES);
 800628c:	4b29      	ldr	r3, [pc, #164]	; (8006334 <fetchSensorData+0x33c>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6822      	ldr	r2, [r4, #0]
 8006292:	fb93 f3f2 	sdiv	r3, r3, r2
 8006296:	4a34      	ldr	r2, [pc, #208]	; (8006368 <fetchSensorData+0x370>)
 8006298:	6013      	str	r3, [r2, #0]
                    continuousCounter = 0;
 800629a:	4b31      	ldr	r3, [pc, #196]	; (8006360 <fetchSensorData+0x368>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
                TRANSMIT_INTERVAL_MS = 900000;
 80062a0:	4b24      	ldr	r3, [pc, #144]	; (8006334 <fetchSensorData+0x33c>)
 80062a2:	4a32      	ldr	r2, [pc, #200]	; (800636c <fetchSensorData+0x374>)
 80062a4:	601a      	str	r2, [r3, #0]
                APP_LOG(TS_OFF, VLEVEL_M, "Transmission Cycle: %d seconds \r\n", TRANSMIT_INTERVAL_MS / 1000);
 80062a6:	f44f 7361 	mov.w	r3, #900	; 0x384
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	4b23      	ldr	r3, [pc, #140]	; (800633c <fetchSensorData+0x344>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	4611      	mov	r1, r2
 80062b2:	2002      	movs	r0, #2
 80062b4:	f010 f966 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
                MAX_WATER_LEVEL_SAMPLES = 5;
 80062b8:	4b21      	ldr	r3, [pc, #132]	; (8006340 <fetchSensorData+0x348>)
 80062ba:	2205      	movs	r2, #5
 80062bc:	601a      	str	r2, [r3, #0]
                waterLevelSamples = (float *)malloc(sizeof(float) * MAX_WATER_LEVEL_SAMPLES);
 80062be:	2014      	movs	r0, #20
 80062c0:	f010 ff14 	bl	80170ec <malloc>
 80062c4:	4b17      	ldr	r3, [pc, #92]	; (8006324 <fetchSensorData+0x32c>)
 80062c6:	6018      	str	r0, [r3, #0]
                transmissionType = 0;
 80062c8:	2300      	movs	r3, #0
 80062ca:	4a1e      	ldr	r2, [pc, #120]	; (8006344 <fetchSensorData+0x34c>)
 80062cc:	6013      	str	r3, [r2, #0]
                skipScheduledTransmission = false;
 80062ce:	4a1e      	ldr	r2, [pc, #120]	; (8006348 <fetchSensorData+0x350>)
 80062d0:	7013      	strb	r3, [r2, #0]
                isLevelBreached = false;
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <fetchSensorData+0x354>)
 80062d4:	7013      	strb	r3, [r2, #0]
	if(sendUnscheduledTransmission == true){
 80062d6:	e0bc      	b.n	8006452 <fetchSensorData+0x45a>
 80062d8:	0801c1b0 	.word	0x0801c1b0
 80062dc:	200000d0 	.word	0x200000d0
 80062e0:	0801d468 	.word	0x0801d468
 80062e4:	20000f18 	.word	0x20000f18
 80062e8:	0801c280 	.word	0x0801c280
 80062ec:	20000f1a 	.word	0x20000f1a
 80062f0:	20001040 	.word	0x20001040
 80062f4:	0801d4c8 	.word	0x0801d4c8
 80062f8:	20000c60 	.word	0x20000c60
 80062fc:	0801c38c 	.word	0x0801c38c
 8006300:	0801d498 	.word	0x0801d498
 8006304:	0801d4ac 	.word	0x0801d4ac
 8006308:	20000b14 	.word	0x20000b14
 800630c:	20001050 	.word	0x20001050
 8006310:	20001054 	.word	0x20001054
 8006314:	2000105c 	.word	0x2000105c
 8006318:	20001058 	.word	0x20001058
 800631c:	0801d4fc 	.word	0x0801d4fc
 8006320:	20001044 	.word	0x20001044
 8006324:	20001060 	.word	0x20001060
 8006328:	20001028 	.word	0x20001028
 800632c:	20000050 	.word	0x20000050
 8006330:	0801d580 	.word	0x0801d580
 8006334:	2000004c 	.word	0x2000004c
 8006338:	0002bf20 	.word	0x0002bf20
 800633c:	0801d55c 	.word	0x0801d55c
 8006340:	20000044 	.word	0x20000044
 8006344:	2000104c 	.word	0x2000104c
 8006348:	20001049 	.word	0x20001049
 800634c:	20001035 	.word	0x20001035
 8006350:	20001036 	.word	0x20001036
 8006354:	20001048 	.word	0x20001048
 8006358:	0801d4e0 	.word	0x0801d4e0
 800635c:	0801d5ac 	.word	0x0801d5ac
 8006360:	20001024 	.word	0x20001024
 8006364:	0803f000 	.word	0x0803f000
 8006368:	20000048 	.word	0x20000048
 800636c:	000dbba0 	.word	0x000dbba0
                TRANSMIT_INTERVAL_MS = 180000;
 8006370:	4bae      	ldr	r3, [pc, #696]	; (800662c <fetchSensorData+0x634>)
 8006372:	4aaf      	ldr	r2, [pc, #700]	; (8006630 <fetchSensorData+0x638>)
 8006374:	601a      	str	r2, [r3, #0]
                APP_LOG(TS_OFF, VLEVEL_M, "Transmission Cycle: %d seconds \r\n", TRANSMIT_INTERVAL_MS / 1000);
 8006376:	23b4      	movs	r3, #180	; 0xb4
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	4bae      	ldr	r3, [pc, #696]	; (8006634 <fetchSensorData+0x63c>)
 800637c:	2200      	movs	r2, #0
 800637e:	4611      	mov	r1, r2
 8006380:	2002      	movs	r0, #2
 8006382:	f010 f8ff 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
                MAX_WATER_LEVEL_SAMPLES = 1;
 8006386:	2401      	movs	r4, #1
 8006388:	4bab      	ldr	r3, [pc, #684]	; (8006638 <fetchSensorData+0x640>)
 800638a:	601c      	str	r4, [r3, #0]
                waterLevelSamples = (float *)malloc(sizeof(float) * MAX_WATER_LEVEL_SAMPLES);
 800638c:	2004      	movs	r0, #4
 800638e:	f010 fead 	bl	80170ec <malloc>
 8006392:	4baa      	ldr	r3, [pc, #680]	; (800663c <fetchSensorData+0x644>)
 8006394:	6018      	str	r0, [r3, #0]
                transmissionType = 1;
 8006396:	4baa      	ldr	r3, [pc, #680]	; (8006640 <fetchSensorData+0x648>)
 8006398:	601c      	str	r4, [r3, #0]
                skipScheduledTransmission = true;
 800639a:	4baa      	ldr	r3, [pc, #680]	; (8006644 <fetchSensorData+0x64c>)
 800639c:	701c      	strb	r4, [r3, #0]
                isLevelBreached = false;
 800639e:	2300      	movs	r3, #0
 80063a0:	4aa9      	ldr	r2, [pc, #676]	; (8006648 <fetchSensorData+0x650>)
 80063a2:	7013      	strb	r3, [r2, #0]
                sampleIndex = 0;
 80063a4:	4aa9      	ldr	r2, [pc, #676]	; (800664c <fetchSensorData+0x654>)
 80063a6:	6013      	str	r3, [r2, #0]
                continuousCounter++;
 80063a8:	4aa9      	ldr	r2, [pc, #676]	; (8006650 <fetchSensorData+0x658>)
 80063aa:	6813      	ldr	r3, [r2, #0]
 80063ac:	4423      	add	r3, r4
 80063ae:	6013      	str	r3, [r2, #0]
	if(sendUnscheduledTransmission == true){
 80063b0:	e72d      	b.n	800620e <fetchSensorData+0x216>
                    APP_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80063b2:	4ba8      	ldr	r3, [pc, #672]	; (8006654 <fetchSensorData+0x65c>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	4611      	mov	r1, r2
 80063b8:	2002      	movs	r0, #2
 80063ba:	f010 f8e3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80063be:	e76f      	b.n	80062a0 <fetchSensorData+0x2a8>
    	if (waterLevel >= thresholdLevelHigh) {
 80063c0:	4ba5      	ldr	r3, [pc, #660]	; (8006658 <fetchSensorData+0x660>)
 80063c2:	6819      	ldr	r1, [r3, #0]
 80063c4:	f7fa fef8 	bl	80011b8 <__aeabi_fcmpge>
 80063c8:	b310      	cbz	r0, 8006410 <fetchSensorData+0x418>
    		APP_LOG(TS_OFF, VLEVEL_M, "Water Level is out of threshold range! \r\n");
 80063ca:	4ba4      	ldr	r3, [pc, #656]	; (800665c <fetchSensorData+0x664>)
 80063cc:	2200      	movs	r2, #0
 80063ce:	4611      	mov	r1, r2
 80063d0:	2002      	movs	r0, #2
 80063d2:	f010 f8d7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            TRANSMIT_INTERVAL_MS = 180000;
 80063d6:	4b95      	ldr	r3, [pc, #596]	; (800662c <fetchSensorData+0x634>)
 80063d8:	4a95      	ldr	r2, [pc, #596]	; (8006630 <fetchSensorData+0x638>)
 80063da:	601a      	str	r2, [r3, #0]
            APP_LOG(TS_OFF, VLEVEL_M, "Transmission Cycle: %d seconds \r\n", TRANSMIT_INTERVAL_MS / 1000);
 80063dc:	23b4      	movs	r3, #180	; 0xb4
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	4b94      	ldr	r3, [pc, #592]	; (8006634 <fetchSensorData+0x63c>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	4611      	mov	r1, r2
 80063e6:	2002      	movs	r0, #2
 80063e8:	f010 f8cc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            MAX_WATER_LEVEL_SAMPLES = 1;
 80063ec:	2401      	movs	r4, #1
 80063ee:	4b92      	ldr	r3, [pc, #584]	; (8006638 <fetchSensorData+0x640>)
 80063f0:	601c      	str	r4, [r3, #0]
            waterLevelSamples = (float *)malloc(sizeof(float) * MAX_WATER_LEVEL_SAMPLES);
 80063f2:	2004      	movs	r0, #4
 80063f4:	f010 fe7a 	bl	80170ec <malloc>
 80063f8:	4b90      	ldr	r3, [pc, #576]	; (800663c <fetchSensorData+0x644>)
 80063fa:	6018      	str	r0, [r3, #0]
            transmissionType = 1;
 80063fc:	4b90      	ldr	r3, [pc, #576]	; (8006640 <fetchSensorData+0x648>)
 80063fe:	601c      	str	r4, [r3, #0]
            skipScheduledTransmission = true;
 8006400:	4b90      	ldr	r3, [pc, #576]	; (8006644 <fetchSensorData+0x64c>)
 8006402:	701c      	strb	r4, [r3, #0]
            isLevelBreached = true;
 8006404:	4b90      	ldr	r3, [pc, #576]	; (8006648 <fetchSensorData+0x650>)
 8006406:	701c      	strb	r4, [r3, #0]
            sampleIndex = 0;
 8006408:	4b90      	ldr	r3, [pc, #576]	; (800664c <fetchSensorData+0x654>)
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
	if(sendUnscheduledTransmission == true){
 800640e:	e6fe      	b.n	800620e <fetchSensorData+0x216>
            APP_LOG(TS_OFF, VLEVEL_M, "Water Level is within threshold. \r\n");
 8006410:	4b93      	ldr	r3, [pc, #588]	; (8006660 <fetchSensorData+0x668>)
 8006412:	2200      	movs	r2, #0
 8006414:	4611      	mov	r1, r2
 8006416:	2002      	movs	r0, #2
 8006418:	f010 f8b4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            TRANSMIT_INTERVAL_MS = 900000;
 800641c:	4b83      	ldr	r3, [pc, #524]	; (800662c <fetchSensorData+0x634>)
 800641e:	4a91      	ldr	r2, [pc, #580]	; (8006664 <fetchSensorData+0x66c>)
 8006420:	601a      	str	r2, [r3, #0]
            APP_LOG(TS_OFF, VLEVEL_M, "Transmission Cycle: %d seconds \r\n", TRANSMIT_INTERVAL_MS / 1000);
 8006422:	f44f 7361 	mov.w	r3, #900	; 0x384
 8006426:	9300      	str	r3, [sp, #0]
 8006428:	4b82      	ldr	r3, [pc, #520]	; (8006634 <fetchSensorData+0x63c>)
 800642a:	2200      	movs	r2, #0
 800642c:	4611      	mov	r1, r2
 800642e:	2002      	movs	r0, #2
 8006430:	f010 f8a8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
            MAX_WATER_LEVEL_SAMPLES = 5;
 8006434:	4b80      	ldr	r3, [pc, #512]	; (8006638 <fetchSensorData+0x640>)
 8006436:	2205      	movs	r2, #5
 8006438:	601a      	str	r2, [r3, #0]
            waterLevelSamples = (float *)malloc(sizeof(float) * MAX_WATER_LEVEL_SAMPLES);
 800643a:	2014      	movs	r0, #20
 800643c:	f010 fe56 	bl	80170ec <malloc>
 8006440:	4b7e      	ldr	r3, [pc, #504]	; (800663c <fetchSensorData+0x644>)
 8006442:	6018      	str	r0, [r3, #0]
            transmissionType = 0;
 8006444:	2300      	movs	r3, #0
 8006446:	4a7e      	ldr	r2, [pc, #504]	; (8006640 <fetchSensorData+0x648>)
 8006448:	6013      	str	r3, [r2, #0]
            skipScheduledTransmission = false;
 800644a:	4a7e      	ldr	r2, [pc, #504]	; (8006644 <fetchSensorData+0x64c>)
 800644c:	7013      	strb	r3, [r2, #0]
            isLevelBreached = false;
 800644e:	4a7e      	ldr	r2, [pc, #504]	; (8006648 <fetchSensorData+0x650>)
 8006450:	7013      	strb	r3, [r2, #0]
	APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 8006452:	4b85      	ldr	r3, [pc, #532]	; (8006668 <fetchSensorData+0x670>)
 8006454:	2200      	movs	r2, #0
 8006456:	4611      	mov	r1, r2
 8006458:	2002      	movs	r0, #2
 800645a:	f010 f893 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800645e:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 8006462:	46bd      	mov	sp, r7
 8006464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
						AppData.Buffer[x] = 0;
 8006468:	4a80      	ldr	r2, [pc, #512]	; (800666c <fetchSensorData+0x674>)
 800646a:	6852      	ldr	r2, [r2, #4]
 800646c:	2100      	movs	r1, #0
 800646e:	54d1      	strb	r1, [r2, r3]
				for(int x = 0; x < AppData.BufferSize; x++){
 8006470:	3301      	adds	r3, #1
 8006472:	4a7e      	ldr	r2, [pc, #504]	; (800666c <fetchSensorData+0x674>)
 8006474:	7852      	ldrb	r2, [r2, #1]
 8006476:	429a      	cmp	r2, r3
 8006478:	dcf6      	bgt.n	8006468 <fetchSensorData+0x470>
			    waterLevelLatest 	= waterLevelLatest 	* 100;
 800647a:	4c7d      	ldr	r4, [pc, #500]	; (8006670 <fetchSensorData+0x678>)
 800647c:	497d      	ldr	r1, [pc, #500]	; (8006674 <fetchSensorData+0x67c>)
 800647e:	6820      	ldr	r0, [r4, #0]
 8006480:	f7fa fce8 	bl	8000e54 <__aeabi_fmul>
 8006484:	6020      	str	r0, [r4, #0]
			    waterLevel 		 	= waterLevel 		* 100;
 8006486:	4c7c      	ldr	r4, [pc, #496]	; (8006678 <fetchSensorData+0x680>)
 8006488:	497a      	ldr	r1, [pc, #488]	; (8006674 <fetchSensorData+0x67c>)
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	f7fa fce2 	bl	8000e54 <__aeabi_fmul>
 8006490:	6020      	str	r0, [r4, #0]
			    waterLevelMin	 	= waterLevelMin 	* 100;
 8006492:	4c7a      	ldr	r4, [pc, #488]	; (800667c <fetchSensorData+0x684>)
 8006494:	4977      	ldr	r1, [pc, #476]	; (8006674 <fetchSensorData+0x67c>)
 8006496:	6820      	ldr	r0, [r4, #0]
 8006498:	f7fa fcdc 	bl	8000e54 <__aeabi_fmul>
 800649c:	6020      	str	r0, [r4, #0]
			    waterLevelMax	 	= waterLevelMax 	* 100;
 800649e:	4c78      	ldr	r4, [pc, #480]	; (8006680 <fetchSensorData+0x688>)
 80064a0:	4974      	ldr	r1, [pc, #464]	; (8006674 <fetchSensorData+0x67c>)
 80064a2:	6820      	ldr	r0, [r4, #0]
 80064a4:	f7fa fcd6 	bl	8000e54 <__aeabi_fmul>
 80064a8:	6020      	str	r0, [r4, #0]
			    if(transmissionType == 1 && sendSystemDiagnostic == true){
 80064aa:	4b65      	ldr	r3, [pc, #404]	; (8006640 <fetchSensorData+0x648>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d06e      	beq.n	8006590 <fetchSensorData+0x598>
				AppData.Buffer[i++] = (uint8_t)transmissionType;
 80064b2:	4e6e      	ldr	r6, [pc, #440]	; (800666c <fetchSensorData+0x674>)
 80064b4:	6873      	ldr	r3, [r6, #4]
 80064b6:	4c62      	ldr	r4, [pc, #392]	; (8006640 <fetchSensorData+0x648>)
 80064b8:	7822      	ldrb	r2, [r4, #0]
 80064ba:	701a      	strb	r2, [r3, #0]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelLatest >> 8);
 80064bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006670 <fetchSensorData+0x678>
 80064c0:	f8d8 0000 	ldr.w	r0, [r8]
 80064c4:	f7fa feb2 	bl	800122c <__aeabi_f2uiz>
 80064c8:	6873      	ldr	r3, [r6, #4]
 80064ca:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80064ce:	7058      	strb	r0, [r3, #1]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelLatest & 0xFF);
 80064d0:	f8d8 0000 	ldr.w	r0, [r8]
 80064d4:	f7fa feaa 	bl	800122c <__aeabi_f2uiz>
 80064d8:	6873      	ldr	r3, [r6, #4]
 80064da:	7098      	strb	r0, [r3, #2]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevel >> 8);
 80064dc:	f8df 8198 	ldr.w	r8, [pc, #408]	; 8006678 <fetchSensorData+0x680>
 80064e0:	f8d8 0000 	ldr.w	r0, [r8]
 80064e4:	f7fa fea2 	bl	800122c <__aeabi_f2uiz>
 80064e8:	6873      	ldr	r3, [r6, #4]
 80064ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80064ee:	70d8      	strb	r0, [r3, #3]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevel & 0xFF);
 80064f0:	f8d8 0000 	ldr.w	r0, [r8]
 80064f4:	f7fa fe9a 	bl	800122c <__aeabi_f2uiz>
 80064f8:	6873      	ldr	r3, [r6, #4]
 80064fa:	7118      	strb	r0, [r3, #4]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMin >> 8);
 80064fc:	4b5f      	ldr	r3, [pc, #380]	; (800667c <fetchSensorData+0x684>)
 80064fe:	6818      	ldr	r0, [r3, #0]
 8006500:	f7fa fe94 	bl	800122c <__aeabi_f2uiz>
 8006504:	6873      	ldr	r3, [r6, #4]
 8006506:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800650a:	715a      	strb	r2, [r3, #5]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMin & 0xFF);
 800650c:	6873      	ldr	r3, [r6, #4]
 800650e:	7198      	strb	r0, [r3, #6]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMax >> 8);
 8006510:	4b5b      	ldr	r3, [pc, #364]	; (8006680 <fetchSensorData+0x688>)
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	f7fa fe8a 	bl	800122c <__aeabi_f2uiz>
 8006518:	6873      	ldr	r3, [r6, #4]
 800651a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800651e:	71da      	strb	r2, [r3, #7]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMax & 0xFF);
 8006520:	6872      	ldr	r2, [r6, #4]
 8006522:	7210      	strb	r0, [r2, #8]
				if(transmissionType = 3){
 8006524:	2303      	movs	r3, #3
 8006526:	6023      	str	r3, [r4, #0]
					int measureMeth  = measurementMethod == 0 ? 0 : 1;
 8006528:	4b56      	ldr	r3, [pc, #344]	; (8006684 <fetchSensorData+0x68c>)
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	3900      	subs	r1, #0
 800652e:	bf18      	it	ne
 8006530:	2101      	movne	r1, #1
					int samplingMeth = samplingMethod == 0 ? 0 : 1;
 8006532:	4b55      	ldr	r3, [pc, #340]	; (8006688 <fetchSensorData+0x690>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3b00      	subs	r3, #0
 8006538:	bf18      	it	ne
 800653a:	2301      	movne	r3, #1
					int threshMeth	 = continuousMode == true ? 1 : 0;
 800653c:	4853      	ldr	r0, [pc, #332]	; (800668c <fetchSensorData+0x694>)
 800653e:	f890 c000 	ldrb.w	ip, [r0]
					int modbusError  = isModbusUnresponsive == true ? 1 : 0;
 8006542:	4853      	ldr	r0, [pc, #332]	; (8006690 <fetchSensorData+0x698>)
 8006544:	7804      	ldrb	r4, [r0, #0]
					int levelBreach  = isLevelBreached == true ? 1 : 0;
 8006546:	4840      	ldr	r0, [pc, #256]	; (8006648 <fetchSensorData+0x650>)
 8006548:	7800      	ldrb	r0, [r0, #0]
									   (samplingMeth << 3) |
 800654a:	00db      	lsls	r3, r3, #3
									   (measureMeth << 4)  |
 800654c:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
									   (samplingMeth << 3) |
 8006550:	ea43 038c 	orr.w	r3, r3, ip, lsl #2
 8006554:	b25b      	sxtb	r3, r3
									   (threshMeth  << 2)  |
 8006556:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
 800655a:	b25b      	sxtb	r3, r3
									   (modbusError << 1)  |
 800655c:	4303      	orrs	r3, r0
 800655e:	b2db      	uxtb	r3, r3
					systemDiagnostic = (isZeroCalib << 5)  |
 8006560:	494c      	ldr	r1, [pc, #304]	; (8006694 <fetchSensorData+0x69c>)
 8006562:	700b      	strb	r3, [r1, #0]
					AppData.Buffer[i++] = (uint8_t)systemDiagnostic;
 8006564:	7253      	strb	r3, [r2, #9]
					sendSystemDiagnostic = false;
 8006566:	2400      	movs	r4, #0
 8006568:	4b4b      	ldr	r3, [pc, #300]	; (8006698 <fetchSensorData+0x6a0>)
 800656a:	701c      	strb	r4, [r3, #0]
				AppData.BufferSize = i;
 800656c:	220a      	movs	r2, #10
 800656e:	7072      	strb	r2, [r6, #1]
				sprintf((char*)msg, "Payload Buffer Size: %u\r\n\r\n", AppData.BufferSize);
 8006570:	494a      	ldr	r1, [pc, #296]	; (800669c <fetchSensorData+0x6a4>)
 8006572:	4638      	mov	r0, r7
 8006574:	f011 fd9e 	bl	80180b4 <siprintf>
				HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006578:	4638      	mov	r0, r7
 800657a:	f7f9 fe51 	bl	8000220 <strlen>
 800657e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006582:	b282      	uxth	r2, r0
 8006584:	4639      	mov	r1, r7
 8006586:	4846      	ldr	r0, [pc, #280]	; (80066a0 <fetchSensorData+0x6a8>)
 8006588:	f005 ff1f 	bl	800c3ca <HAL_UART_Transmit>
				for(int i = 0; i < MAX_WATER_LEVEL_SAMPLES; i++){
 800658c:	4623      	mov	r3, r4
 800658e:	e00d      	b.n	80065ac <fetchSensorData+0x5b4>
			    if(transmissionType == 1 && sendSystemDiagnostic == true){
 8006590:	4b41      	ldr	r3, [pc, #260]	; (8006698 <fetchSensorData+0x6a0>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d08c      	beq.n	80064b2 <fetchSensorData+0x4ba>
			    	transmissionType = 3;
 8006598:	4b29      	ldr	r3, [pc, #164]	; (8006640 <fetchSensorData+0x648>)
 800659a:	2203      	movs	r2, #3
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e788      	b.n	80064b2 <fetchSensorData+0x4ba>
					waterLevelSamples[i] = 0;
 80065a0:	4a26      	ldr	r2, [pc, #152]	; (800663c <fetchSensorData+0x644>)
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	2100      	movs	r1, #0
 80065a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for(int i = 0; i < MAX_WATER_LEVEL_SAMPLES; i++){
 80065aa:	3301      	adds	r3, #1
 80065ac:	4a22      	ldr	r2, [pc, #136]	; (8006638 <fetchSensorData+0x640>)
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	dcf5      	bgt.n	80065a0 <fetchSensorData+0x5a8>
				if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80065b4:	4b3b      	ldr	r3, [pc, #236]	; (80066a4 <fetchSensorData+0x6ac>)
 80065b6:	7a5b      	ldrb	r3, [r3, #9]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d17f      	bne.n	80066bc <fetchSensorData+0x6c4>
				status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80065bc:	2200      	movs	r2, #0
 80065be:	4b3a      	ldr	r3, [pc, #232]	; (80066a8 <fetchSensorData+0x6b0>)
 80065c0:	78d9      	ldrb	r1, [r3, #3]
 80065c2:	482a      	ldr	r0, [pc, #168]	; (800666c <fetchSensorData+0x674>)
 80065c4:	f006 fb5a 	bl	800cc7c <LmHandlerSend>
				if(status == 0){
 80065c8:	2800      	cmp	r0, #0
 80065ca:	f000 8086 	beq.w	80066da <fetchSensorData+0x6e2>
				sendUnscheduledTransmission = false;
 80065ce:	462c      	mov	r4, r5
			APP_LOG(TS_OFF, VLEVEL_M, "[!]  LM HANDLER IS BUSY! \r\n");
 80065d0:	4b36      	ldr	r3, [pc, #216]	; (80066ac <fetchSensorData+0x6b4>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	4611      	mov	r1, r2
 80065d6:	2002      	movs	r0, #2
 80065d8:	f00f ffd4 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			HAL_Delay(100);
 80065dc:	2064      	movs	r0, #100	; 0x64
 80065de:	f7fc f97f 	bl	80028e0 <HAL_Delay>
		while(sendUnscheduledTransmission!= false){
 80065e2:	2c00      	cmp	r4, #0
 80065e4:	f43f af35 	beq.w	8006452 <fetchSensorData+0x45a>
			 HAL_Delay(100);
 80065e8:	2064      	movs	r0, #100	; 0x64
 80065ea:	f7fc f979 	bl	80028e0 <HAL_Delay>
			  if (LmHandlerIsBusy() == false)
 80065ee:	f006 fb2f 	bl	800cc50 <LmHandlerIsBusy>
 80065f2:	4605      	mov	r5, r0
 80065f4:	2800      	cmp	r0, #0
 80065f6:	d1eb      	bne.n	80065d0 <fetchSensorData+0x5d8>
				APP_LOG(TS_OFF, VLEVEL_M, "============================================= \r\n");
 80065f8:	4c2d      	ldr	r4, [pc, #180]	; (80066b0 <fetchSensorData+0x6b8>)
 80065fa:	4623      	mov	r3, r4
 80065fc:	2200      	movs	r2, #0
 80065fe:	4611      	mov	r1, r2
 8006600:	2002      	movs	r0, #2
 8006602:	f00f ffbf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "            UNSCHEDULED TRANSMISSION            \r\n");
 8006606:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <fetchSensorData+0x6bc>)
 8006608:	2200      	movs	r2, #0
 800660a:	4611      	mov	r1, r2
 800660c:	2002      	movs	r0, #2
 800660e:	f00f ffb9 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "============================================= \r\n");
 8006612:	4623      	mov	r3, r4
 8006614:	2200      	movs	r2, #0
 8006616:	4611      	mov	r1, r2
 8006618:	2002      	movs	r0, #2
 800661a:	f00f ffb3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				AppData.Port = LORAWAN_USER_APP_PORT;
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <fetchSensorData+0x674>)
 8006620:	2202      	movs	r2, #2
 8006622:	701a      	strb	r2, [r3, #0]
				_doneScanning = false;
 8006624:	2300      	movs	r3, #0
 8006626:	4a24      	ldr	r2, [pc, #144]	; (80066b8 <fetchSensorData+0x6c0>)
 8006628:	7013      	strb	r3, [r2, #0]
				for(int x = 0; x < AppData.BufferSize; x++){
 800662a:	e722      	b.n	8006472 <fetchSensorData+0x47a>
 800662c:	2000004c 	.word	0x2000004c
 8006630:	0002bf20 	.word	0x0002bf20
 8006634:	0801d55c 	.word	0x0801d55c
 8006638:	20000044 	.word	0x20000044
 800663c:	20001060 	.word	0x20001060
 8006640:	2000104c 	.word	0x2000104c
 8006644:	20001049 	.word	0x20001049
 8006648:	20001035 	.word	0x20001035
 800664c:	20001044 	.word	0x20001044
 8006650:	20001024 	.word	0x20001024
 8006654:	0801c4cc 	.word	0x0801c4cc
 8006658:	20000050 	.word	0x20000050
 800665c:	0801d580 	.word	0x0801d580
 8006660:	0801d5ac 	.word	0x0801d5ac
 8006664:	000dbba0 	.word	0x000dbba0
 8006668:	0801d0b4 	.word	0x0801d0b4
 800666c:	2000005c 	.word	0x2000005c
 8006670:	20001054 	.word	0x20001054
 8006674:	42c80000 	.word	0x42c80000
 8006678:	20001050 	.word	0x20001050
 800667c:	2000105c 	.word	0x2000105c
 8006680:	20001058 	.word	0x20001058
 8006684:	200009e4 	.word	0x200009e4
 8006688:	20000b14 	.word	0x20000b14
 800668c:	20001028 	.word	0x20001028
 8006690:	20001036 	.word	0x20001036
 8006694:	2000104a 	.word	0x2000104a
 8006698:	20001048 	.word	0x20001048
 800669c:	0801d638 	.word	0x0801d638
 80066a0:	20000c60 	.word	0x20000c60
 80066a4:	20000f00 	.word	0x20000f00
 80066a8:	200000b0 	.word	0x200000b0
 80066ac:	0801d678 	.word	0x0801d678
 80066b0:	0801d5d0 	.word	0x0801d5d0
 80066b4:	0801d604 	.word	0x0801d604
 80066b8:	20001020 	.word	0x20001020
				if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80066bc:	f006 fab6 	bl	800cc2c <LmHandlerJoinStatus>
 80066c0:	2801      	cmp	r0, #1
 80066c2:	f47f af7b 	bne.w	80065bc <fetchSensorData+0x5c4>
				  UTIL_TIMER_Stop(&JoinLedTimer);
 80066c6:	4811      	ldr	r0, [pc, #68]	; (800670c <fetchSensorData+0x714>)
 80066c8:	f010 faae 	bl	8016c28 <UTIL_TIMER_Stop>
				  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80066cc:	2200      	movs	r2, #0
 80066ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066d2:	480f      	ldr	r0, [pc, #60]	; (8006710 <fetchSensorData+0x718>)
 80066d4:	f002 fd6e 	bl	80091b4 <HAL_GPIO_WritePin>
 80066d8:	e770      	b.n	80065bc <fetchSensorData+0x5c4>
					APP_LOG(TS_ON, VLEVEL_L, "### Resetting Watchdog Timer! \r\n");
 80066da:	4b0e      	ldr	r3, [pc, #56]	; (8006714 <fetchSensorData+0x71c>)
 80066dc:	2201      	movs	r2, #1
 80066de:	2100      	movs	r1, #0
 80066e0:	4610      	mov	r0, r2
 80066e2:	f00f ff4f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80066e6:	2201      	movs	r2, #1
 80066e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066f0:	f002 fd60 	bl	80091b4 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 80066f4:	2032      	movs	r0, #50	; 0x32
 80066f6:	f7fc f8f3 	bl	80028e0 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80066fa:	2200      	movs	r2, #0
 80066fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006704:	f002 fd56 	bl	80091b4 <HAL_GPIO_WritePin>
 8006708:	e761      	b.n	80065ce <fetchSensorData+0x5d6>
 800670a:	bf00      	nop
 800670c:	20000f00 	.word	0x20000f00
 8006710:	48000400 	.word	0x48000400
 8006714:	0801d654 	.word	0x0801d654

08006718 <fetchLTCData>:
void fetchLTCData(void){
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	b0a3      	sub	sp, #140	; 0x8c
	uint8_t b_i2c_data = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
	uint16_t i2c_data = 0;
 8006724:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
	uint8_t dataBuffer1[2] = {0x1E, 0x00};
 8006728:	231e      	movs	r3, #30
 800672a:	f8ad 3080 	strh.w	r3, [sp, #128]	; 0x80
	uint8_t dataBuffer17[2] = {0x04, 0x00};
 800672e:	2304      	movs	r3, #4
 8006730:	f8ad 3078 	strh.w	r3, [sp, #120]	; 0x78
	sprintf((char*)msg, "LTC READING\r\n");
 8006734:	4b3f      	ldr	r3, [pc, #252]	; (8006834 <fetchLTCData+0x11c>)
 8006736:	ac05      	add	r4, sp, #20
 8006738:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800673a:	c407      	stmia	r4!, {r0, r1, r2}
 800673c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 800673e:	a805      	add	r0, sp, #20
 8006740:	f7f9 fd6e 	bl	8000220 <strlen>
 8006744:	4e3c      	ldr	r6, [pc, #240]	; (8006838 <fetchLTCData+0x120>)
 8006746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800674a:	b282      	uxth	r2, r0
 800674c:	a905      	add	r1, sp, #20
 800674e:	4630      	mov	r0, r6
 8006750:	f005 fe3b 	bl	800c3ca <HAL_UART_Transmit>
	sprintf((char*)msg, "=====================================================\r\n");
 8006754:	ac05      	add	r4, sp, #20
 8006756:	4d39      	ldr	r5, [pc, #228]	; (800683c <fetchLTCData+0x124>)
 8006758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800675a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800675e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006764:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006768:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 800676c:	a805      	add	r0, sp, #20
 800676e:	f7f9 fd57 	bl	8000220 <strlen>
 8006772:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006776:	b282      	uxth	r2, r0
 8006778:	a905      	add	r1, sp, #20
 800677a:	4630      	mov	r0, r6
 800677c:	f005 fe25 	bl	800c3ca <HAL_UART_Transmit>
	if (isInit == true) {
 8006780:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <fetchLTCData+0x128>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d163      	bne.n	8006850 <fetchLTCData+0x138>
	 sprintf((char*)msg, "=====================================================\r\n");
 8006788:	ac05      	add	r4, sp, #20
 800678a:	4d2c      	ldr	r5, [pc, #176]	; (800683c <fetchLTCData+0x124>)
 800678c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800678e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006798:	e895 0003 	ldmia.w	r5, {r0, r1}
 800679c:	e884 0003 	stmia.w	r4, {r0, r1}
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80067a0:	a805      	add	r0, sp, #20
 80067a2:	f7f9 fd3d 	bl	8000220 <strlen>
 80067a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067aa:	b282      	uxth	r2, r0
 80067ac:	a905      	add	r1, sp, #20
 80067ae:	4822      	ldr	r0, [pc, #136]	; (8006838 <fetchLTCData+0x120>)
 80067b0:	f005 fe0b 	bl	800c3ca <HAL_UART_Transmit>
	 if (HAL_I2C_Mem_Write(&hi2c1, 0x68 << 1, register_address, I2C_MEMADD_SIZE_8BIT, 0x05, 1, HAL_MAX_DELAY) == HAL_OK) {
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295
 80067b8:	9302      	str	r3, [sp, #8]
 80067ba:	2301      	movs	r3, #1
 80067bc:	9301      	str	r3, [sp, #4]
 80067be:	2205      	movs	r2, #5
 80067c0:	9200      	str	r2, [sp, #0]
 80067c2:	221a      	movs	r2, #26
 80067c4:	21d0      	movs	r1, #208	; 0xd0
 80067c6:	481f      	ldr	r0, [pc, #124]	; (8006844 <fetchLTCData+0x12c>)
 80067c8:	f002 ff1e 	bl	8009608 <HAL_I2C_Mem_Write>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	f040 827b 	bne.w	8006cc8 <fetchLTCData+0x5b0>
		 sprintf((char*)msg, "ICHARGE WRITTEN: %d\r\n", 0x05);
 80067d2:	2205      	movs	r2, #5
 80067d4:	491c      	ldr	r1, [pc, #112]	; (8006848 <fetchLTCData+0x130>)
 80067d6:	a805      	add	r0, sp, #20
 80067d8:	f011 fc6c 	bl	80180b4 <siprintf>
		 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80067dc:	a805      	add	r0, sp, #20
 80067de:	f7f9 fd1f 	bl	8000220 <strlen>
 80067e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067e6:	b282      	uxth	r2, r0
 80067e8:	a905      	add	r1, sp, #20
 80067ea:	4813      	ldr	r0, [pc, #76]	; (8006838 <fetchLTCData+0x120>)
 80067ec:	f005 fded 	bl	800c3ca <HAL_UART_Transmit>
		 if (HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, register_address, I2C_MEMADD_SIZE_8BIT, &b_i2c_data, 1, HAL_MAX_DELAY) == HAL_OK) {
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	9302      	str	r3, [sp, #8]
 80067f6:	2301      	movs	r3, #1
 80067f8:	9301      	str	r3, [sp, #4]
 80067fa:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 80067fe:	9200      	str	r2, [sp, #0]
 8006800:	221a      	movs	r2, #26
 8006802:	21d0      	movs	r1, #208	; 0xd0
 8006804:	480f      	ldr	r0, [pc, #60]	; (8006844 <fetchLTCData+0x12c>)
 8006806:	f002 ffd3 	bl	80097b0 <HAL_I2C_Mem_Read>
 800680a:	2800      	cmp	r0, #0
 800680c:	f040 8224 	bne.w	8006c58 <fetchLTCData+0x540>
			 sprintf((char*)msg, "ICHARGE READ: %d\r\n", b_i2c_data);
 8006810:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8006814:	490d      	ldr	r1, [pc, #52]	; (800684c <fetchLTCData+0x134>)
 8006816:	a805      	add	r0, sp, #20
 8006818:	f011 fc4c 	bl	80180b4 <siprintf>
			 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 800681c:	a805      	add	r0, sp, #20
 800681e:	f7f9 fcff 	bl	8000220 <strlen>
 8006822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006826:	b282      	uxth	r2, r0
 8006828:	a905      	add	r1, sp, #20
 800682a:	4803      	ldr	r0, [pc, #12]	; (8006838 <fetchLTCData+0x120>)
 800682c:	f005 fdcd 	bl	800c3ca <HAL_UART_Transmit>
 8006830:	e25f      	b.n	8006cf2 <fetchLTCData+0x5da>
 8006832:	bf00      	nop
 8006834:	0801d694 	.word	0x0801d694
 8006838:	20000c60 	.word	0x20000c60
 800683c:	0801d6a4 	.word	0x0801d6a4
 8006840:	200000cc 	.word	0x200000cc
 8006844:	20000890 	.word	0x20000890
 8006848:	0801d95c 	.word	0x0801d95c
 800684c:	0801d974 	.word	0x0801d974
		isInit = false;
 8006850:	4bb5      	ldr	r3, [pc, #724]	; (8006b28 <fetchLTCData+0x410>)
 8006852:	2200      	movs	r2, #0
 8006854:	701a      	strb	r2, [r3, #0]
		status = HAL_I2C_Mem_Write(&hi2c1, 0x68 << 1, 0x29, I2C_MEMADD_SIZE_8BIT, dataBuffer17, 2, 1000);
 8006856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800685a:	9302      	str	r3, [sp, #8]
 800685c:	2302      	movs	r3, #2
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	ab1e      	add	r3, sp, #120	; 0x78
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	2301      	movs	r3, #1
 8006866:	2229      	movs	r2, #41	; 0x29
 8006868:	21d0      	movs	r1, #208	; 0xd0
 800686a:	48b0      	ldr	r0, [pc, #704]	; (8006b2c <fetchLTCData+0x414>)
 800686c:	f002 fecc 	bl	8009608 <HAL_I2C_Mem_Write>
		if (status != HAL_OK) {
 8006870:	4602      	mov	r2, r0
 8006872:	2800      	cmp	r0, #0
 8006874:	f000 8183 	beq.w	8006b7e <fetchLTCData+0x466>
			sprintf((char*)msg, "Error writing new value: %d\r\n", status);
 8006878:	49ad      	ldr	r1, [pc, #692]	; (8006b30 <fetchLTCData+0x418>)
 800687a:	a805      	add	r0, sp, #20
 800687c:	f011 fc1a 	bl	80180b4 <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006880:	a805      	add	r0, sp, #20
 8006882:	f7f9 fccd 	bl	8000220 <strlen>
 8006886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800688a:	b282      	uxth	r2, r0
 800688c:	a905      	add	r1, sp, #20
 800688e:	48a9      	ldr	r0, [pc, #676]	; (8006b34 <fetchLTCData+0x41c>)
 8006890:	f005 fd9b 	bl	800c3ca <HAL_UART_Transmit>
		status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x29, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 8006894:	f04f 33ff 	mov.w	r3, #4294967295
 8006898:	9302      	str	r3, [sp, #8]
 800689a:	2301      	movs	r3, #1
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	aa21      	add	r2, sp, #132	; 0x84
 80068a0:	9200      	str	r2, [sp, #0]
 80068a2:	2229      	movs	r2, #41	; 0x29
 80068a4:	21d0      	movs	r1, #208	; 0xd0
 80068a6:	48a1      	ldr	r0, [pc, #644]	; (8006b2c <fetchLTCData+0x414>)
 80068a8:	f002 ff82 	bl	80097b0 <HAL_I2C_Mem_Read>
		if (status != HAL_OK) {
 80068ac:	4602      	mov	r2, r0
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f000 8171 	beq.w	8006b96 <fetchLTCData+0x47e>
			sprintf((char*)msg, "Error reading new value: %d\r\n", status);
 80068b4:	49a0      	ldr	r1, [pc, #640]	; (8006b38 <fetchLTCData+0x420>)
 80068b6:	a805      	add	r0, sp, #20
 80068b8:	f011 fbfc 	bl	80180b4 <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80068bc:	a805      	add	r0, sp, #20
 80068be:	f7f9 fcaf 	bl	8000220 <strlen>
 80068c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80068c6:	b282      	uxth	r2, r0
 80068c8:	a905      	add	r1, sp, #20
 80068ca:	489a      	ldr	r0, [pc, #616]	; (8006b34 <fetchLTCData+0x41c>)
 80068cc:	f005 fd7d 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 80068d0:	f04f 33ff 	mov.w	r3, #4294967295
 80068d4:	9302      	str	r3, [sp, #8]
 80068d6:	2301      	movs	r3, #1
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	aa21      	add	r2, sp, #132	; 0x84
 80068dc:	9200      	str	r2, [sp, #0]
 80068de:	221a      	movs	r2, #26
 80068e0:	21d0      	movs	r1, #208	; 0xd0
 80068e2:	4892      	ldr	r0, [pc, #584]	; (8006b2c <fetchLTCData+0x414>)
 80068e4:	f002 ff64 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 80068e8:	4602      	mov	r2, r0
 80068ea:	2800      	cmp	r0, #0
 80068ec:	f000 815a 	beq.w	8006ba4 <fetchLTCData+0x48c>
		 sprintf((char*)msg, "Error reading initial value: %d\r\n", status);
 80068f0:	4992      	ldr	r1, [pc, #584]	; (8006b3c <fetchLTCData+0x424>)
 80068f2:	a805      	add	r0, sp, #20
 80068f4:	f011 fbde 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80068f8:	a805      	add	r0, sp, #20
 80068fa:	f7f9 fc91 	bl	8000220 <strlen>
 80068fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006902:	b282      	uxth	r2, r0
 8006904:	a905      	add	r1, sp, #20
 8006906:	488b      	ldr	r0, [pc, #556]	; (8006b34 <fetchLTCData+0x41c>)
 8006908:	f005 fd5f 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_Delay(100);
 800690c:	2064      	movs	r0, #100	; 0x64
 800690e:	f7fb ffe7 	bl	80028e0 <HAL_Delay>
	 status = HAL_I2C_Mem_Write(&hi2c1, 0x68 << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, dataBuffer1, 2, HAL_MAX_DELAY);
 8006912:	f04f 33ff 	mov.w	r3, #4294967295
 8006916:	9302      	str	r3, [sp, #8]
 8006918:	2302      	movs	r3, #2
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	ab20      	add	r3, sp, #128	; 0x80
 800691e:	9300      	str	r3, [sp, #0]
 8006920:	2301      	movs	r3, #1
 8006922:	221a      	movs	r2, #26
 8006924:	21d0      	movs	r1, #208	; 0xd0
 8006926:	4881      	ldr	r0, [pc, #516]	; (8006b2c <fetchLTCData+0x414>)
 8006928:	f002 fe6e 	bl	8009608 <HAL_I2C_Mem_Write>
	 if (status != HAL_OK) {
 800692c:	4602      	mov	r2, r0
 800692e:	2800      	cmp	r0, #0
 8006930:	f000 813f 	beq.w	8006bb2 <fetchLTCData+0x49a>
		 sprintf((char*)msg, "Error writing new value: %d\r\n", status);
 8006934:	497e      	ldr	r1, [pc, #504]	; (8006b30 <fetchLTCData+0x418>)
 8006936:	a805      	add	r0, sp, #20
 8006938:	f011 fbbc 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 800693c:	a805      	add	r0, sp, #20
 800693e:	f7f9 fc6f 	bl	8000220 <strlen>
 8006942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006946:	b282      	uxth	r2, r0
 8006948:	a905      	add	r1, sp, #20
 800694a:	487a      	ldr	r0, [pc, #488]	; (8006b34 <fetchLTCData+0x41c>)
 800694c:	f005 fd3d 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_Delay(100);
 8006950:	2064      	movs	r0, #100	; 0x64
 8006952:	f7fb ffc5 	bl	80028e0 <HAL_Delay>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, readBuffer, 1, HAL_MAX_DELAY);
 8006956:	4d75      	ldr	r5, [pc, #468]	; (8006b2c <fetchLTCData+0x414>)
 8006958:	f04f 36ff 	mov.w	r6, #4294967295
 800695c:	9602      	str	r6, [sp, #8]
 800695e:	2401      	movs	r4, #1
 8006960:	9401      	str	r4, [sp, #4]
 8006962:	ab1f      	add	r3, sp, #124	; 0x7c
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	4623      	mov	r3, r4
 8006968:	221a      	movs	r2, #26
 800696a:	21d0      	movs	r1, #208	; 0xd0
 800696c:	4628      	mov	r0, r5
 800696e:	f002 ff1f 	bl	80097b0 <HAL_I2C_Mem_Read>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x1A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 8006972:	9602      	str	r6, [sp, #8]
 8006974:	9401      	str	r4, [sp, #4]
 8006976:	ab21      	add	r3, sp, #132	; 0x84
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	4623      	mov	r3, r4
 800697c:	221a      	movs	r2, #26
 800697e:	21d0      	movs	r1, #208	; 0xd0
 8006980:	4628      	mov	r0, r5
 8006982:	f002 ff15 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 8006986:	4602      	mov	r2, r0
 8006988:	2800      	cmp	r0, #0
 800698a:	f000 811b 	beq.w	8006bc4 <fetchLTCData+0x4ac>
		 sprintf((char*)msg, "Error reading new value: %d\r\n", status);
 800698e:	496a      	ldr	r1, [pc, #424]	; (8006b38 <fetchLTCData+0x420>)
 8006990:	a805      	add	r0, sp, #20
 8006992:	f011 fb8f 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006996:	a805      	add	r0, sp, #20
 8006998:	f7f9 fc42 	bl	8000220 <strlen>
 800699c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069a0:	b282      	uxth	r2, r0
 80069a2:	a905      	add	r1, sp, #20
 80069a4:	4863      	ldr	r0, [pc, #396]	; (8006b34 <fetchLTCData+0x41c>)
 80069a6:	f005 fd10 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x44, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);    //ICHARGE_DAC
 80069aa:	f04f 33ff 	mov.w	r3, #4294967295
 80069ae:	9302      	str	r3, [sp, #8]
 80069b0:	2301      	movs	r3, #1
 80069b2:	9301      	str	r3, [sp, #4]
 80069b4:	aa21      	add	r2, sp, #132	; 0x84
 80069b6:	9200      	str	r2, [sp, #0]
 80069b8:	2244      	movs	r2, #68	; 0x44
 80069ba:	21d0      	movs	r1, #208	; 0xd0
 80069bc:	485b      	ldr	r0, [pc, #364]	; (8006b2c <fetchLTCData+0x414>)
 80069be:	f002 fef7 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 80069c2:	4602      	mov	r2, r0
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f000 8104 	beq.w	8006bd2 <fetchLTCData+0x4ba>
		 sprintf((char*)msg, "Error reading new value: %d\r\n", status);
 80069ca:	495b      	ldr	r1, [pc, #364]	; (8006b38 <fetchLTCData+0x420>)
 80069cc:	a805      	add	r0, sp, #20
 80069ce:	f011 fb71 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80069d2:	a805      	add	r0, sp, #20
 80069d4:	f7f9 fc24 	bl	8000220 <strlen>
 80069d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069dc:	b282      	uxth	r2, r0
 80069de:	a905      	add	r1, sp, #20
 80069e0:	4854      	ldr	r0, [pc, #336]	; (8006b34 <fetchLTCData+0x41c>)
 80069e2:	f005 fcf2 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x39, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 80069e6:	f04f 33ff 	mov.w	r3, #4294967295
 80069ea:	9302      	str	r3, [sp, #8]
 80069ec:	2301      	movs	r3, #1
 80069ee:	9301      	str	r3, [sp, #4]
 80069f0:	aa21      	add	r2, sp, #132	; 0x84
 80069f2:	9200      	str	r2, [sp, #0]
 80069f4:	2239      	movs	r2, #57	; 0x39
 80069f6:	21d0      	movs	r1, #208	; 0xd0
 80069f8:	484c      	ldr	r0, [pc, #304]	; (8006b2c <fetchLTCData+0x414>)
 80069fa:	f002 fed9 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 80069fe:	4602      	mov	r2, r0
 8006a00:	2800      	cmp	r0, #0
 8006a02:	f000 80f6 	beq.w	8006bf2 <fetchLTCData+0x4da>
		 sprintf((char*)msg, "Error reading new system status: %d\r\n", status);
 8006a06:	494e      	ldr	r1, [pc, #312]	; (8006b40 <fetchLTCData+0x428>)
 8006a08:	a805      	add	r0, sp, #20
 8006a0a:	f011 fb53 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006a0e:	a805      	add	r0, sp, #20
 8006a10:	f7f9 fc06 	bl	8000220 <strlen>
 8006a14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a18:	b282      	uxth	r2, r0
 8006a1a:	a905      	add	r1, sp, #20
 8006a1c:	4845      	ldr	r0, [pc, #276]	; (8006b34 <fetchLTCData+0x41c>)
 8006a1e:	f005 fcd4 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x34, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 8006a22:	f04f 33ff 	mov.w	r3, #4294967295
 8006a26:	9302      	str	r3, [sp, #8]
 8006a28:	2301      	movs	r3, #1
 8006a2a:	9301      	str	r3, [sp, #4]
 8006a2c:	aa21      	add	r2, sp, #132	; 0x84
 8006a2e:	9200      	str	r2, [sp, #0]
 8006a30:	2234      	movs	r2, #52	; 0x34
 8006a32:	21d0      	movs	r1, #208	; 0xd0
 8006a34:	483d      	ldr	r0, [pc, #244]	; (8006b2c <fetchLTCData+0x414>)
 8006a36:	f002 febb 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	f000 80e8 	beq.w	8006c12 <fetchLTCData+0x4fa>
		 sprintf((char*)msg, "Error reading charger state: %d\r\n", status);
 8006a42:	4940      	ldr	r1, [pc, #256]	; (8006b44 <fetchLTCData+0x42c>)
 8006a44:	a805      	add	r0, sp, #20
 8006a46:	f011 fb35 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006a4a:	a805      	add	r0, sp, #20
 8006a4c:	f7f9 fbe8 	bl	8000220 <strlen>
 8006a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a54:	b282      	uxth	r2, r0
 8006a56:	a905      	add	r1, sp, #20
 8006a58:	4836      	ldr	r0, [pc, #216]	; (8006b34 <fetchLTCData+0x41c>)
 8006a5a:	f005 fcb6 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x35, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a62:	9302      	str	r3, [sp, #8]
 8006a64:	2301      	movs	r3, #1
 8006a66:	9301      	str	r3, [sp, #4]
 8006a68:	aa21      	add	r2, sp, #132	; 0x84
 8006a6a:	9200      	str	r2, [sp, #0]
 8006a6c:	2235      	movs	r2, #53	; 0x35
 8006a6e:	21d0      	movs	r1, #208	; 0xd0
 8006a70:	482e      	ldr	r0, [pc, #184]	; (8006b2c <fetchLTCData+0x414>)
 8006a72:	f002 fe9d 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 8006a76:	4602      	mov	r2, r0
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	f000 80d1 	beq.w	8006c20 <fetchLTCData+0x508>
		 sprintf((char*)msg, "Error reading charger status: %d\r\n", status);
 8006a7e:	4932      	ldr	r1, [pc, #200]	; (8006b48 <fetchLTCData+0x430>)
 8006a80:	a805      	add	r0, sp, #20
 8006a82:	f011 fb17 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006a86:	a805      	add	r0, sp, #20
 8006a88:	f7f9 fbca 	bl	8000220 <strlen>
 8006a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a90:	b282      	uxth	r2, r0
 8006a92:	a905      	add	r1, sp, #20
 8006a94:	4827      	ldr	r0, [pc, #156]	; (8006b34 <fetchLTCData+0x41c>)
 8006a96:	f005 fc98 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x36, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 8006a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9e:	9302      	str	r3, [sp, #8]
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	aa21      	add	r2, sp, #132	; 0x84
 8006aa6:	9200      	str	r2, [sp, #0]
 8006aa8:	2236      	movs	r2, #54	; 0x36
 8006aaa:	21d0      	movs	r1, #208	; 0xd0
 8006aac:	481f      	ldr	r0, [pc, #124]	; (8006b2c <fetchLTCData+0x414>)
 8006aae:	f002 fe7f 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f000 80ba 	beq.w	8006c2e <fetchLTCData+0x516>
		 sprintf((char*)msg, "Error reading limit alert: %d\r\n", status);
 8006aba:	4924      	ldr	r1, [pc, #144]	; (8006b4c <fetchLTCData+0x434>)
 8006abc:	a805      	add	r0, sp, #20
 8006abe:	f011 faf9 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006ac2:	a805      	add	r0, sp, #20
 8006ac4:	f7f9 fbac 	bl	8000220 <strlen>
 8006ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006acc:	b282      	uxth	r2, r0
 8006ace:	a905      	add	r1, sp, #20
 8006ad0:	4818      	ldr	r0, [pc, #96]	; (8006b34 <fetchLTCData+0x41c>)
 8006ad2:	f005 fc7a 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x37, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 8006ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	2301      	movs	r3, #1
 8006ade:	9301      	str	r3, [sp, #4]
 8006ae0:	aa21      	add	r2, sp, #132	; 0x84
 8006ae2:	9200      	str	r2, [sp, #0]
 8006ae4:	2237      	movs	r2, #55	; 0x37
 8006ae6:	21d0      	movs	r1, #208	; 0xd0
 8006ae8:	4810      	ldr	r0, [pc, #64]	; (8006b2c <fetchLTCData+0x414>)
 8006aea:	f002 fe61 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 8006aee:	4602      	mov	r2, r0
 8006af0:	2800      	cmp	r0, #0
 8006af2:	f000 80a3 	beq.w	8006c3c <fetchLTCData+0x524>
		 sprintf((char*)msg, "Error reading charger state alert: %d\r\n", status);
 8006af6:	4916      	ldr	r1, [pc, #88]	; (8006b50 <fetchLTCData+0x438>)
 8006af8:	a805      	add	r0, sp, #20
 8006afa:	f011 fadb 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006afe:	a805      	add	r0, sp, #20
 8006b00:	f7f9 fb8e 	bl	8000220 <strlen>
 8006b04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b08:	b282      	uxth	r2, r0
 8006b0a:	a905      	add	r1, sp, #20
 8006b0c:	4809      	ldr	r0, [pc, #36]	; (8006b34 <fetchLTCData+0x41c>)
 8006b0e:	f005 fc5c 	bl	800c3ca <HAL_UART_Transmit>
	 status = HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x38, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 1, HAL_MAX_DELAY);
 8006b12:	f04f 33ff 	mov.w	r3, #4294967295
 8006b16:	9302      	str	r3, [sp, #8]
 8006b18:	2301      	movs	r3, #1
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	aa21      	add	r2, sp, #132	; 0x84
 8006b1e:	9200      	str	r2, [sp, #0]
 8006b20:	2238      	movs	r2, #56	; 0x38
 8006b22:	21d0      	movs	r1, #208	; 0xd0
 8006b24:	e016      	b.n	8006b54 <fetchLTCData+0x43c>
 8006b26:	bf00      	nop
 8006b28:	200000cc 	.word	0x200000cc
 8006b2c:	20000890 	.word	0x20000890
 8006b30:	0801d6dc 	.word	0x0801d6dc
 8006b34:	20000c60 	.word	0x20000c60
 8006b38:	0801d71c 	.word	0x0801d71c
 8006b3c:	0801d750 	.word	0x0801d750
 8006b40:	0801d7ec 	.word	0x0801d7ec
 8006b44:	0801d828 	.word	0x0801d828
 8006b48:	0801d860 	.word	0x0801d860
 8006b4c:	0801d89c 	.word	0x0801d89c
 8006b50:	0801d8d0 	.word	0x0801d8d0
 8006b54:	484a      	ldr	r0, [pc, #296]	; (8006c80 <fetchLTCData+0x568>)
 8006b56:	f002 fe2b 	bl	80097b0 <HAL_I2C_Mem_Read>
	 if (status != HAL_OK) {
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	d074      	beq.n	8006c4a <fetchLTCData+0x532>
		 sprintf((char*)msg, "Error reading charger status alert: %d\r\n", status);
 8006b60:	4948      	ldr	r1, [pc, #288]	; (8006c84 <fetchLTCData+0x56c>)
 8006b62:	a805      	add	r0, sp, #20
 8006b64:	f011 faa6 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006b68:	a805      	add	r0, sp, #20
 8006b6a:	f7f9 fb59 	bl	8000220 <strlen>
 8006b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006b72:	b282      	uxth	r2, r0
 8006b74:	a905      	add	r1, sp, #20
 8006b76:	4844      	ldr	r0, [pc, #272]	; (8006c88 <fetchLTCData+0x570>)
 8006b78:	f005 fc27 	bl	800c3ca <HAL_UART_Transmit>
 8006b7c:	e604      	b.n	8006788 <fetchLTCData+0x70>
			sprintf((char*)msg, "Disabled en_jeita successful\r\n");
 8006b7e:	ac05      	add	r4, sp, #20
 8006b80:	4d42      	ldr	r5, [pc, #264]	; (8006c8c <fetchLTCData+0x574>)
 8006b82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b86:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006b8a:	c407      	stmia	r4!, {r0, r1, r2}
 8006b8c:	f824 3b02 	strh.w	r3, [r4], #2
 8006b90:	0c1b      	lsrs	r3, r3, #16
 8006b92:	7023      	strb	r3, [r4, #0]
 8006b94:	e674      	b.n	8006880 <fetchLTCData+0x168>
			sprintf((char*)msg, "JEITA Value: %d\r\n", i2c_data);
 8006b96:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006b9a:	493d      	ldr	r1, [pc, #244]	; (8006c90 <fetchLTCData+0x578>)
 8006b9c:	a805      	add	r0, sp, #20
 8006b9e:	f011 fa89 	bl	80180b4 <siprintf>
 8006ba2:	e68b      	b.n	80068bc <fetchLTCData+0x1a4>
		 sprintf((char*)msg, "CHARGER CONFIG Value: %d\r\n", i2c_data);
 8006ba4:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006ba8:	493a      	ldr	r1, [pc, #232]	; (8006c94 <fetchLTCData+0x57c>)
 8006baa:	a805      	add	r0, sp, #20
 8006bac:	f011 fa82 	bl	80180b4 <siprintf>
 8006bb0:	e6a2      	b.n	80068f8 <fetchLTCData+0x1e0>
		 sprintf((char*)msg, "Write operation successful\r\n");
 8006bb2:	ac05      	add	r4, sp, #20
 8006bb4:	4d38      	ldr	r5, [pc, #224]	; (8006c98 <fetchLTCData+0x580>)
 8006bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006bbe:	c407      	stmia	r4!, {r0, r1, r2}
 8006bc0:	7023      	strb	r3, [r4, #0]
 8006bc2:	e6bb      	b.n	800693c <fetchLTCData+0x224>
		 sprintf((char*)msg, "CHARGER CONFIG New Value: %d\r\n", i2c_data);
 8006bc4:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006bc8:	4934      	ldr	r1, [pc, #208]	; (8006c9c <fetchLTCData+0x584>)
 8006bca:	a805      	add	r0, sp, #20
 8006bcc:	f011 fa72 	bl	80180b4 <siprintf>
 8006bd0:	e6e1      	b.n	8006996 <fetchLTCData+0x27e>
		 sprintf((char*)msg, "CHARGER DAC New Value: %d\r\n", i2c_data);
 8006bd2:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006bd6:	4932      	ldr	r1, [pc, #200]	; (8006ca0 <fetchLTCData+0x588>)
 8006bd8:	a805      	add	r0, sp, #20
 8006bda:	f011 fa6b 	bl	80180b4 <siprintf>
		 ICHARGE_DAC = (float)(i2c_data * 100);
 8006bde:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8006be2:	2064      	movs	r0, #100	; 0x64
 8006be4:	fb03 f000 	mul.w	r0, r3, r0
 8006be8:	f7fa f8e0 	bl	8000dac <__aeabi_i2f>
 8006bec:	4b2d      	ldr	r3, [pc, #180]	; (8006ca4 <fetchLTCData+0x58c>)
 8006bee:	6018      	str	r0, [r3, #0]
 8006bf0:	e6ef      	b.n	80069d2 <fetchLTCData+0x2ba>
		 sprintf((char*)msg, "SYSTEM STATUS: %d\r\n", i2c_data);
 8006bf2:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006bf6:	492c      	ldr	r1, [pc, #176]	; (8006ca8 <fetchLTCData+0x590>)
 8006bf8:	a805      	add	r0, sp, #20
 8006bfa:	f011 fa5b 	bl	80180b4 <siprintf>
		 SYSTEM_STATUS = (uint16_t)(i2c_data * 100);
 8006bfe:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 8006c02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c06:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4a27      	ldr	r2, [pc, #156]	; (8006cac <fetchLTCData+0x594>)
 8006c0e:	8013      	strh	r3, [r2, #0]
 8006c10:	e6fd      	b.n	8006a0e <fetchLTCData+0x2f6>
		 sprintf((char*)msg, "CHARGER STATE: %d\r\n", i2c_data);
 8006c12:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006c16:	4926      	ldr	r1, [pc, #152]	; (8006cb0 <fetchLTCData+0x598>)
 8006c18:	a805      	add	r0, sp, #20
 8006c1a:	f011 fa4b 	bl	80180b4 <siprintf>
 8006c1e:	e714      	b.n	8006a4a <fetchLTCData+0x332>
		 sprintf((char*)msg, "CHARGER STATUS: %d\r\n", i2c_data);
 8006c20:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006c24:	4923      	ldr	r1, [pc, #140]	; (8006cb4 <fetchLTCData+0x59c>)
 8006c26:	a805      	add	r0, sp, #20
 8006c28:	f011 fa44 	bl	80180b4 <siprintf>
 8006c2c:	e72b      	b.n	8006a86 <fetchLTCData+0x36e>
		 sprintf((char*)msg, "LIMIT ALERT: %d\r\n", i2c_data);
 8006c2e:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006c32:	4921      	ldr	r1, [pc, #132]	; (8006cb8 <fetchLTCData+0x5a0>)
 8006c34:	a805      	add	r0, sp, #20
 8006c36:	f011 fa3d 	bl	80180b4 <siprintf>
 8006c3a:	e742      	b.n	8006ac2 <fetchLTCData+0x3aa>
		 sprintf((char*)msg, "CHARGER STATE ALERT: %d\r\n", i2c_data);
 8006c3c:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006c40:	491e      	ldr	r1, [pc, #120]	; (8006cbc <fetchLTCData+0x5a4>)
 8006c42:	a805      	add	r0, sp, #20
 8006c44:	f011 fa36 	bl	80180b4 <siprintf>
 8006c48:	e759      	b.n	8006afe <fetchLTCData+0x3e6>
		 sprintf((char*)msg, "CHARGER STATUS ALERT: %d\r\n", i2c_data);
 8006c4a:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006c4e:	491c      	ldr	r1, [pc, #112]	; (8006cc0 <fetchLTCData+0x5a8>)
 8006c50:	a805      	add	r0, sp, #20
 8006c52:	f011 fa2f 	bl	80180b4 <siprintf>
 8006c56:	e787      	b.n	8006b68 <fetchLTCData+0x450>
			 sprintf((char*)msg, "Error in read operation\r\n");
 8006c58:	ac05      	add	r4, sp, #20
 8006c5a:	4d1a      	ldr	r5, [pc, #104]	; (8006cc4 <fetchLTCData+0x5ac>)
 8006c5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006c64:	c403      	stmia	r4!, {r0, r1}
 8006c66:	8022      	strh	r2, [r4, #0]
			 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006c68:	a805      	add	r0, sp, #20
 8006c6a:	f7f9 fad9 	bl	8000220 <strlen>
 8006c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006c72:	b282      	uxth	r2, r0
 8006c74:	a905      	add	r1, sp, #20
 8006c76:	4804      	ldr	r0, [pc, #16]	; (8006c88 <fetchLTCData+0x570>)
 8006c78:	f005 fba7 	bl	800c3ca <HAL_UART_Transmit>
 8006c7c:	e039      	b.n	8006cf2 <fetchLTCData+0x5da>
 8006c7e:	bf00      	nop
 8006c80:	20000890 	.word	0x20000890
 8006c84:	0801d914 	.word	0x0801d914
 8006c88:	20000c60 	.word	0x20000c60
 8006c8c:	0801d6fc 	.word	0x0801d6fc
 8006c90:	0801d73c 	.word	0x0801d73c
 8006c94:	0801d774 	.word	0x0801d774
 8006c98:	0801d790 	.word	0x0801d790
 8006c9c:	0801d7b0 	.word	0x0801d7b0
 8006ca0:	0801d7d0 	.word	0x0801d7d0
 8006ca4:	20000ef8 	.word	0x20000ef8
 8006ca8:	0801d814 	.word	0x0801d814
 8006cac:	20000fc8 	.word	0x20000fc8
 8006cb0:	0801d84c 	.word	0x0801d84c
 8006cb4:	0801d884 	.word	0x0801d884
 8006cb8:	0801d8bc 	.word	0x0801d8bc
 8006cbc:	0801d8f8 	.word	0x0801d8f8
 8006cc0:	0801d940 	.word	0x0801d940
 8006cc4:	0801d988 	.word	0x0801d988
		 sprintf((char*)msg, "Error in write operation\r\n");
 8006cc8:	ac05      	add	r4, sp, #20
 8006cca:	4dc9      	ldr	r5, [pc, #804]	; (8006ff0 <fetchLTCData+0x8d8>)
 8006ccc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cd0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006cd4:	c403      	stmia	r4!, {r0, r1}
 8006cd6:	f824 2b02 	strh.w	r2, [r4], #2
 8006cda:	0c12      	lsrs	r2, r2, #16
 8006cdc:	7022      	strb	r2, [r4, #0]
		 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006cde:	a805      	add	r0, sp, #20
 8006ce0:	f7f9 fa9e 	bl	8000220 <strlen>
 8006ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ce8:	b282      	uxth	r2, r0
 8006cea:	a905      	add	r1, sp, #20
 8006cec:	48c1      	ldr	r0, [pc, #772]	; (8006ff4 <fetchLTCData+0x8dc>)
 8006cee:	f005 fb6c 	bl	800c3ca <HAL_UART_Transmit>
	 sprintf((char*)msg, "=====================================================\r\n");
 8006cf2:	ad05      	add	r5, sp, #20
 8006cf4:	4cc0      	ldr	r4, [pc, #768]	; (8006ff8 <fetchLTCData+0x8e0>)
 8006cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006d02:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006d06:	e885 0003 	stmia.w	r5, {r0, r1}
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006d0a:	a805      	add	r0, sp, #20
 8006d0c:	f7f9 fa88 	bl	8000220 <strlen>
 8006d10:	4db8      	ldr	r5, [pc, #736]	; (8006ff4 <fetchLTCData+0x8dc>)
 8006d12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d16:	b282      	uxth	r2, r0
 8006d18:	a905      	add	r1, sp, #20
 8006d1a:	4628      	mov	r0, r5
 8006d1c:	f005 fb55 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x44, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&b_i2c_data, 1, HAL_MAX_DELAY);
 8006d20:	4fb6      	ldr	r7, [pc, #728]	; (8006ffc <fetchLTCData+0x8e4>)
 8006d22:	f04f 38ff 	mov.w	r8, #4294967295
 8006d26:	f8cd 8008 	str.w	r8, [sp, #8]
 8006d2a:	2601      	movs	r6, #1
 8006d2c:	9601      	str	r6, [sp, #4]
 8006d2e:	f10d 0387 	add.w	r3, sp, #135	; 0x87
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4633      	mov	r3, r6
 8006d36:	2244      	movs	r2, #68	; 0x44
 8006d38:	21d0      	movs	r1, #208	; 0xd0
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	f002 fd38 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "ICHARGE_DAC RAW Value: %d\r\n", b_i2c_data);
 8006d40:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
 8006d44:	49ae      	ldr	r1, [pc, #696]	; (8007000 <fetchLTCData+0x8e8>)
 8006d46:	a805      	add	r0, sp, #20
 8006d48:	f011 f9b4 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006d4c:	a805      	add	r0, sp, #20
 8006d4e:	f7f9 fa67 	bl	8000220 <strlen>
 8006d52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d56:	b282      	uxth	r2, r0
 8006d58:	a905      	add	r1, sp, #20
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f005 fb35 	bl	800c3ca <HAL_UART_Transmit>
	 float calculated_value = (b_i2c_data + 1) * (0.001/0.004);
 8006d60:	f89d 0087 	ldrb.w	r0, [sp, #135]	; 0x87
 8006d64:	4430      	add	r0, r6
 8006d66:	f7f9 fbb5 	bl	80004d4 <__aeabi_i2d>
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	4ba5      	ldr	r3, [pc, #660]	; (8007004 <fetchLTCData+0x8ec>)
 8006d6e:	f7f9 fc1b 	bl	80005a8 <__aeabi_dmul>
 8006d72:	f7f9 ff11 	bl	8000b98 <__aeabi_d2f>
 8006d76:	4681      	mov	r9, r0
	 sprintf((char*)msg, "ICHARGE_DAC Converted Value: %f\r\n", calculated_value);
 8006d78:	f7f9 fbbe 	bl	80004f8 <__aeabi_f2d>
 8006d7c:	4602      	mov	r2, r0
 8006d7e:	460b      	mov	r3, r1
 8006d80:	49a1      	ldr	r1, [pc, #644]	; (8007008 <fetchLTCData+0x8f0>)
 8006d82:	a805      	add	r0, sp, #20
 8006d84:	f011 f996 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006d88:	a805      	add	r0, sp, #20
 8006d8a:	f7f9 fa49 	bl	8000220 <strlen>
 8006d8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d92:	b282      	uxth	r2, r0
 8006d94:	a905      	add	r1, sp, #20
 8006d96:	4628      	mov	r0, r5
 8006d98:	f005 fb17 	bl	800c3ca <HAL_UART_Transmit>
	 ICHARGE_DAC = (float)(calculated_value * 100);																		//ICHARGE DAC
 8006d9c:	499b      	ldr	r1, [pc, #620]	; (800700c <fetchLTCData+0x8f4>)
 8006d9e:	4648      	mov	r0, r9
 8006da0:	f7fa f858 	bl	8000e54 <__aeabi_fmul>
 8006da4:	4b9a      	ldr	r3, [pc, #616]	; (8007010 <fetchLTCData+0x8f8>)
 8006da6:	6018      	str	r0, [r3, #0]
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8006da8:	f8cd 8008 	str.w	r8, [sp, #8]
 8006dac:	f04f 0a02 	mov.w	sl, #2
 8006db0:	f8cd a004 	str.w	sl, [sp, #4]
 8006db4:	f10d 0984 	add.w	r9, sp, #132	; 0x84
 8006db8:	f8cd 9000 	str.w	r9, [sp]
 8006dbc:	4633      	mov	r3, r6
 8006dbe:	223a      	movs	r2, #58	; 0x3a
 8006dc0:	21d0      	movs	r1, #208	; 0xd0
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f002 fcf4 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "BATTERY RAW Value: %d\r\n", i2c_data);
 8006dc8:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006dcc:	4991      	ldr	r1, [pc, #580]	; (8007014 <fetchLTCData+0x8fc>)
 8006dce:	a805      	add	r0, sp, #20
 8006dd0:	f011 f970 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006dd4:	a805      	add	r0, sp, #20
 8006dd6:	f7f9 fa23 	bl	8000220 <strlen>
 8006dda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006dde:	b282      	uxth	r2, r0
 8006de0:	a905      	add	r1, sp, #20
 8006de2:	4628      	mov	r0, r5
 8006de4:	f005 faf1 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3A, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8006de8:	f8cd 8008 	str.w	r8, [sp, #8]
 8006dec:	f8cd a004 	str.w	sl, [sp, #4]
 8006df0:	f8cd 9000 	str.w	r9, [sp]
 8006df4:	4633      	mov	r3, r6
 8006df6:	223a      	movs	r2, #58	; 0x3a
 8006df8:	21d0      	movs	r1, #208	; 0xd0
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	f002 fcd8 	bl	80097b0 <HAL_I2C_Mem_Read>
	 float battery_voltage = i2c_data * 0.000192264 * 4;
 8006e00:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 8006e04:	f7f9 fb66 	bl	80004d4 <__aeabi_i2d>
 8006e08:	a373      	add	r3, pc, #460	; (adr r3, 8006fd8 <fetchLTCData+0x8c0>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fbcb 	bl	80005a8 <__aeabi_dmul>
 8006e12:	2200      	movs	r2, #0
 8006e14:	4b80      	ldr	r3, [pc, #512]	; (8007018 <fetchLTCData+0x900>)
 8006e16:	f7f9 fbc7 	bl	80005a8 <__aeabi_dmul>
 8006e1a:	f7f9 febd 	bl	8000b98 <__aeabi_d2f>
 8006e1e:	4683      	mov	fp, r0
	 sprintf((char*)msg, "Battery Voltage: %f V\r\n", battery_voltage);
 8006e20:	f7f9 fb6a 	bl	80004f8 <__aeabi_f2d>
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	497c      	ldr	r1, [pc, #496]	; (800701c <fetchLTCData+0x904>)
 8006e2a:	a805      	add	r0, sp, #20
 8006e2c:	f011 f942 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006e30:	a805      	add	r0, sp, #20
 8006e32:	f7f9 f9f5 	bl	8000220 <strlen>
 8006e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e3a:	b282      	uxth	r2, r0
 8006e3c:	a905      	add	r1, sp, #20
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f005 fac3 	bl	800c3ca <HAL_UART_Transmit>
	 VBAT = battery_voltage * 100;
 8006e44:	4971      	ldr	r1, [pc, #452]	; (800700c <fetchLTCData+0x8f4>)
 8006e46:	4658      	mov	r0, fp
 8006e48:	f7fa f804 	bl	8000e54 <__aeabi_fmul>
 8006e4c:	4b74      	ldr	r3, [pc, #464]	; (8007020 <fetchLTCData+0x908>)
 8006e4e:	6018      	str	r0, [r3, #0]
	 i2c_data = 0;
 8006e50:	2300      	movs	r3, #0
 8006e52:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3D, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8006e56:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e5a:	f8cd a004 	str.w	sl, [sp, #4]
 8006e5e:	f8cd 9000 	str.w	r9, [sp]
 8006e62:	4633      	mov	r3, r6
 8006e64:	223d      	movs	r2, #61	; 0x3d
 8006e66:	21d0      	movs	r1, #208	; 0xd0
 8006e68:	4638      	mov	r0, r7
 8006e6a:	f002 fca1 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "BATTERY Current Raw: %d\r\n", i2c_data);
 8006e6e:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006e72:	496c      	ldr	r1, [pc, #432]	; (8007024 <fetchLTCData+0x90c>)
 8006e74:	a805      	add	r0, sp, #20
 8006e76:	f011 f91d 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006e7a:	a805      	add	r0, sp, #20
 8006e7c:	f7f9 f9d0 	bl	8000220 <strlen>
 8006e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e84:	b282      	uxth	r2, r0
 8006e86:	a905      	add	r1, sp, #20
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f005 fa9e 	bl	800c3ca <HAL_UART_Transmit>
	 float calculated_battCur = i2c_data *( 0.00000146487 / 0.004);
 8006e8e:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 8006e92:	f7f9 fb1f 	bl	80004d4 <__aeabi_i2d>
 8006e96:	a352      	add	r3, pc, #328	; (adr r3, 8006fe0 <fetchLTCData+0x8c8>)
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f7f9 fb84 	bl	80005a8 <__aeabi_dmul>
 8006ea0:	f7f9 fe7a 	bl	8000b98 <__aeabi_d2f>
 8006ea4:	4683      	mov	fp, r0
	 sprintf((char*)msg, "BATTERY Current Converted: %f\r\n\r\n", calculated_battCur);
 8006ea6:	f7f9 fb27 	bl	80004f8 <__aeabi_f2d>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	460b      	mov	r3, r1
 8006eae:	495e      	ldr	r1, [pc, #376]	; (8007028 <fetchLTCData+0x910>)
 8006eb0:	a805      	add	r0, sp, #20
 8006eb2:	f011 f8ff 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006eb6:	a805      	add	r0, sp, #20
 8006eb8:	f7f9 f9b2 	bl	8000220 <strlen>
 8006ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ec0:	b282      	uxth	r2, r0
 8006ec2:	a905      	add	r1, sp, #20
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f005 fa80 	bl	800c3ca <HAL_UART_Transmit>
	 IBAT = calculated_battCur * 100;																			//IBAT
 8006eca:	4950      	ldr	r1, [pc, #320]	; (800700c <fetchLTCData+0x8f4>)
 8006ecc:	4658      	mov	r0, fp
 8006ece:	f7f9 ffc1 	bl	8000e54 <__aeabi_fmul>
 8006ed2:	4b56      	ldr	r3, [pc, #344]	; (800702c <fetchLTCData+0x914>)
 8006ed4:	6018      	str	r0, [r3, #0]
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3B, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8006ed6:	f8cd 8008 	str.w	r8, [sp, #8]
 8006eda:	f8cd a004 	str.w	sl, [sp, #4]
 8006ede:	f8cd 9000 	str.w	r9, [sp]
 8006ee2:	4633      	mov	r3, r6
 8006ee4:	223b      	movs	r2, #59	; 0x3b
 8006ee6:	21d0      	movs	r1, #208	; 0xd0
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f002 fc61 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "VOLTAGE IN RAW: %d\r\n", i2c_data);
 8006eee:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006ef2:	494f      	ldr	r1, [pc, #316]	; (8007030 <fetchLTCData+0x918>)
 8006ef4:	a805      	add	r0, sp, #20
 8006ef6:	f011 f8dd 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006efa:	a805      	add	r0, sp, #20
 8006efc:	f7f9 f990 	bl	8000220 <strlen>
 8006f00:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f04:	b282      	uxth	r2, r0
 8006f06:	a905      	add	r1, sp, #20
 8006f08:	4628      	mov	r0, r5
 8006f0a:	f005 fa5e 	bl	800c3ca <HAL_UART_Transmit>
	 float calculated_vin = i2c_data * 0.001648;
 8006f0e:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 8006f12:	f7f9 fadf 	bl	80004d4 <__aeabi_i2d>
 8006f16:	a334      	add	r3, pc, #208	; (adr r3, 8006fe8 <fetchLTCData+0x8d0>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 fb44 	bl	80005a8 <__aeabi_dmul>
 8006f20:	f7f9 fe3a 	bl	8000b98 <__aeabi_d2f>
 8006f24:	4683      	mov	fp, r0
	 sprintf((char*)msg, "VOLTAGE IN CALCULATED: %f\r\n", calculated_vin);
 8006f26:	f7f9 fae7 	bl	80004f8 <__aeabi_f2d>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4941      	ldr	r1, [pc, #260]	; (8007034 <fetchLTCData+0x91c>)
 8006f30:	a805      	add	r0, sp, #20
 8006f32:	f011 f8bf 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006f36:	a805      	add	r0, sp, #20
 8006f38:	f7f9 f972 	bl	8000220 <strlen>
 8006f3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f40:	b282      	uxth	r2, r0
 8006f42:	a905      	add	r1, sp, #20
 8006f44:	4628      	mov	r0, r5
 8006f46:	f005 fa40 	bl	800c3ca <HAL_UART_Transmit>
	 VIN = calculated_vin * 100;
 8006f4a:	4930      	ldr	r1, [pc, #192]	; (800700c <fetchLTCData+0x8f4>)
 8006f4c:	4658      	mov	r0, fp
 8006f4e:	f7f9 ff81 	bl	8000e54 <__aeabi_fmul>
 8006f52:	4b39      	ldr	r3, [pc, #228]	; (8007038 <fetchLTCData+0x920>)
 8006f54:	6018      	str	r0, [r3, #0]
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3C, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8006f56:	f8cd 8008 	str.w	r8, [sp, #8]
 8006f5a:	f8cd a004 	str.w	sl, [sp, #4]
 8006f5e:	f8cd 9000 	str.w	r9, [sp]
 8006f62:	4633      	mov	r3, r6
 8006f64:	223c      	movs	r2, #60	; 0x3c
 8006f66:	21d0      	movs	r1, #208	; 0xd0
 8006f68:	4638      	mov	r0, r7
 8006f6a:	f002 fc21 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "SYSTEM VOLTAGE RAW: %d\r\n", i2c_data);
 8006f6e:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8006f72:	4932      	ldr	r1, [pc, #200]	; (800703c <fetchLTCData+0x924>)
 8006f74:	a805      	add	r0, sp, #20
 8006f76:	f011 f89d 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006f7a:	a805      	add	r0, sp, #20
 8006f7c:	f7f9 f950 	bl	8000220 <strlen>
 8006f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006f84:	b282      	uxth	r2, r0
 8006f86:	a905      	add	r1, sp, #20
 8006f88:	4628      	mov	r0, r5
 8006f8a:	f005 fa1e 	bl	800c3ca <HAL_UART_Transmit>
	 float calculated_vsys = i2c_data * 0.001648;
 8006f8e:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 8006f92:	f7f9 fa9f 	bl	80004d4 <__aeabi_i2d>
 8006f96:	a314      	add	r3, pc, #80	; (adr r3, 8006fe8 <fetchLTCData+0x8d0>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fb04 	bl	80005a8 <__aeabi_dmul>
 8006fa0:	f7f9 fdfa 	bl	8000b98 <__aeabi_d2f>
 8006fa4:	4683      	mov	fp, r0
	 sprintf((char*)msg, "SYSTEM VOLTAGE CALCULATED: %f\r\n", calculated_vsys);
 8006fa6:	f7f9 faa7 	bl	80004f8 <__aeabi_f2d>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4924      	ldr	r1, [pc, #144]	; (8007040 <fetchLTCData+0x928>)
 8006fb0:	a805      	add	r0, sp, #20
 8006fb2:	f011 f87f 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8006fb6:	a805      	add	r0, sp, #20
 8006fb8:	f7f9 f932 	bl	8000220 <strlen>
 8006fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006fc0:	b282      	uxth	r2, r0
 8006fc2:	a905      	add	r1, sp, #20
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f005 fa00 	bl	800c3ca <HAL_UART_Transmit>
	 VSYS = calculated_vsys * 100;
 8006fca:	4910      	ldr	r1, [pc, #64]	; (800700c <fetchLTCData+0x8f4>)
 8006fcc:	4658      	mov	r0, fp
 8006fce:	f7f9 ff41 	bl	8000e54 <__aeabi_fmul>
 8006fd2:	4b1c      	ldr	r3, [pc, #112]	; (8007044 <fetchLTCData+0x92c>)
 8006fd4:	6018      	str	r0, [r3, #0]
 8006fd6:	e037      	b.n	8007048 <fetchLTCData+0x930>
 8006fd8:	2f34985a 	.word	0x2f34985a
 8006fdc:	3f29334f 	.word	0x3f29334f
 8006fe0:	2f8b88df 	.word	0x2f8b88df
 8006fe4:	3f38001c 	.word	0x3f38001c
 8006fe8:	86a4ca4f 	.word	0x86a4ca4f
 8006fec:	3f5b0036 	.word	0x3f5b0036
 8006ff0:	0801d9a4 	.word	0x0801d9a4
 8006ff4:	20000c60 	.word	0x20000c60
 8006ff8:	0801d6a4 	.word	0x0801d6a4
 8006ffc:	20000890 	.word	0x20000890
 8007000:	0801d9c0 	.word	0x0801d9c0
 8007004:	3fd00000 	.word	0x3fd00000
 8007008:	0801d9dc 	.word	0x0801d9dc
 800700c:	42c80000 	.word	0x42c80000
 8007010:	20000ef8 	.word	0x20000ef8
 8007014:	0801da00 	.word	0x0801da00
 8007018:	40100000 	.word	0x40100000
 800701c:	0801da18 	.word	0x0801da18
 8007020:	20001014 	.word	0x20001014
 8007024:	0801da30 	.word	0x0801da30
 8007028:	0801da4c 	.word	0x0801da4c
 800702c:	20000ef4 	.word	0x20000ef4
 8007030:	0801da70 	.word	0x0801da70
 8007034:	0801da88 	.word	0x0801da88
 8007038:	20001018 	.word	0x20001018
 800703c:	0801daa4 	.word	0x0801daa4
 8007040:	0801dac0 	.word	0x0801dac0
 8007044:	2000101c 	.word	0x2000101c
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x3E, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8007048:	f8cd 8008 	str.w	r8, [sp, #8]
 800704c:	f8cd a004 	str.w	sl, [sp, #4]
 8007050:	f8cd 9000 	str.w	r9, [sp]
 8007054:	4633      	mov	r3, r6
 8007056:	223e      	movs	r2, #62	; 0x3e
 8007058:	21d0      	movs	r1, #208	; 0xd0
 800705a:	4638      	mov	r0, r7
 800705c:	f002 fba8 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "INPUT CURRENT RAW: %d\r\n", i2c_data);
 8007060:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8007064:	4964      	ldr	r1, [pc, #400]	; (80071f8 <fetchLTCData+0xae0>)
 8007066:	a805      	add	r0, sp, #20
 8007068:	f011 f824 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 800706c:	a805      	add	r0, sp, #20
 800706e:	f7f9 f8d7 	bl	8000220 <strlen>
 8007072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007076:	b282      	uxth	r2, r0
 8007078:	a905      	add	r1, sp, #20
 800707a:	4628      	mov	r0, r5
 800707c:	f005 f9a5 	bl	800c3ca <HAL_UART_Transmit>
	 float calculated_iin = (i2c_data * ( 0.00000146487 / 0.003));
 8007080:	f8bd 0084 	ldrh.w	r0, [sp, #132]	; 0x84
 8007084:	f7f9 fa26 	bl	80004d4 <__aeabi_i2d>
 8007088:	a359      	add	r3, pc, #356	; (adr r3, 80071f0 <fetchLTCData+0xad8>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f7f9 fa8b 	bl	80005a8 <__aeabi_dmul>
 8007092:	f7f9 fd81 	bl	8000b98 <__aeabi_d2f>
 8007096:	4683      	mov	fp, r0
	 sprintf((char*)msg, "INPUT CURRENT CALCULATED: %f\r\n", calculated_iin);
 8007098:	f7f9 fa2e 	bl	80004f8 <__aeabi_f2d>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4956      	ldr	r1, [pc, #344]	; (80071fc <fetchLTCData+0xae4>)
 80070a2:	a805      	add	r0, sp, #20
 80070a4:	f011 f806 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80070a8:	a805      	add	r0, sp, #20
 80070aa:	f7f9 f8b9 	bl	8000220 <strlen>
 80070ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070b2:	b282      	uxth	r2, r0
 80070b4:	a905      	add	r1, sp, #20
 80070b6:	4628      	mov	r0, r5
 80070b8:	f005 f987 	bl	800c3ca <HAL_UART_Transmit>
	 IIN = calculated_iin * 100;
 80070bc:	4950      	ldr	r1, [pc, #320]	; (8007200 <fetchLTCData+0xae8>)
 80070be:	4658      	mov	r0, fp
 80070c0:	f7f9 fec8 	bl	8000e54 <__aeabi_fmul>
 80070c4:	4b4f      	ldr	r3, [pc, #316]	; (8007204 <fetchLTCData+0xaec>)
 80070c6:	6018      	str	r0, [r3, #0]
	 sprintf((char*)msg, "=====================================================\r\n");
 80070c8:	f10d 0c14 	add.w	ip, sp, #20
 80070cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80070d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80070d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80070d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80070dc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80070e0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80070e4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80070e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070ec:	e88c 0003 	stmia.w	ip, {r0, r1}
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80070f0:	a805      	add	r0, sp, #20
 80070f2:	f7f9 f895 	bl	8000220 <strlen>
 80070f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80070fa:	b282      	uxth	r2, r0
 80070fc:	a905      	add	r1, sp, #20
 80070fe:	4628      	mov	r0, r5
 8007100:	f005 f963 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x36, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8007104:	f8cd 8008 	str.w	r8, [sp, #8]
 8007108:	f8cd a004 	str.w	sl, [sp, #4]
 800710c:	f8cd 9000 	str.w	r9, [sp]
 8007110:	4633      	mov	r3, r6
 8007112:	2236      	movs	r2, #54	; 0x36
 8007114:	21d0      	movs	r1, #208	; 0xd0
 8007116:	4638      	mov	r0, r7
 8007118:	f002 fb4a 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "LIMIT ALERTS: %d\r\n", i2c_data);
 800711c:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8007120:	4939      	ldr	r1, [pc, #228]	; (8007208 <fetchLTCData+0xaf0>)
 8007122:	a805      	add	r0, sp, #20
 8007124:	f010 ffc6 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8007128:	a805      	add	r0, sp, #20
 800712a:	f7f9 f879 	bl	8000220 <strlen>
 800712e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007132:	b282      	uxth	r2, r0
 8007134:	a905      	add	r1, sp, #20
 8007136:	4628      	mov	r0, r5
 8007138:	f005 f947 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x37, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 800713c:	f8cd 8008 	str.w	r8, [sp, #8]
 8007140:	f8cd a004 	str.w	sl, [sp, #4]
 8007144:	f8cd 9000 	str.w	r9, [sp]
 8007148:	4633      	mov	r3, r6
 800714a:	2237      	movs	r2, #55	; 0x37
 800714c:	21d0      	movs	r1, #208	; 0xd0
 800714e:	4638      	mov	r0, r7
 8007150:	f002 fb2e 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "CHARGER STATE ALERTS: %d\r\n", i2c_data);
 8007154:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8007158:	492c      	ldr	r1, [pc, #176]	; (800720c <fetchLTCData+0xaf4>)
 800715a:	a805      	add	r0, sp, #20
 800715c:	f010 ffaa 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8007160:	a805      	add	r0, sp, #20
 8007162:	f7f9 f85d 	bl	8000220 <strlen>
 8007166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800716a:	b282      	uxth	r2, r0
 800716c:	a905      	add	r1, sp, #20
 800716e:	4628      	mov	r0, r5
 8007170:	f005 f92b 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_I2C_Mem_Read(&hi2c1, 0x68 << 1, 0x39, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&i2c_data, 2, HAL_MAX_DELAY);
 8007174:	f8cd 8008 	str.w	r8, [sp, #8]
 8007178:	f8cd a004 	str.w	sl, [sp, #4]
 800717c:	f8cd 9000 	str.w	r9, [sp]
 8007180:	4633      	mov	r3, r6
 8007182:	2239      	movs	r2, #57	; 0x39
 8007184:	21d0      	movs	r1, #208	; 0xd0
 8007186:	4638      	mov	r0, r7
 8007188:	f002 fb12 	bl	80097b0 <HAL_I2C_Mem_Read>
	 sprintf((char*)msg, "SYSTEM STATUS ALERTS: %d\r\n", i2c_data);
 800718c:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 8007190:	491f      	ldr	r1, [pc, #124]	; (8007210 <fetchLTCData+0xaf8>)
 8007192:	a805      	add	r0, sp, #20
 8007194:	f010 ff8e 	bl	80180b4 <siprintf>
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8007198:	a805      	add	r0, sp, #20
 800719a:	f7f9 f841 	bl	8000220 <strlen>
 800719e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071a2:	b282      	uxth	r2, r0
 80071a4:	a905      	add	r1, sp, #20
 80071a6:	4628      	mov	r0, r5
 80071a8:	f005 f90f 	bl	800c3ca <HAL_UART_Transmit>
	 SYSTEM_STATUS = (uint16_t) i2c_data;
 80071ac:	4b19      	ldr	r3, [pc, #100]	; (8007214 <fetchLTCData+0xafc>)
 80071ae:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 80071b2:	801a      	strh	r2, [r3, #0]
	 sprintf((char*)msg, "=====================================================\r\n");
 80071b4:	af05      	add	r7, sp, #20
 80071b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80071ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80071bc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80071be:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80071c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80071c2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80071c4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80071c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80071ca:	e887 0003 	stmia.w	r7, {r0, r1}
	 HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 80071ce:	a805      	add	r0, sp, #20
 80071d0:	f7f9 f826 	bl	8000220 <strlen>
 80071d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071d8:	b282      	uxth	r2, r0
 80071da:	a905      	add	r1, sp, #20
 80071dc:	4628      	mov	r0, r5
 80071de:	f005 f8f4 	bl	800c3ca <HAL_UART_Transmit>
	 HAL_Delay(2000);
 80071e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80071e6:	f7fb fb7b 	bl	80028e0 <HAL_Delay>
}
 80071ea:	b023      	add	sp, #140	; 0x8c
 80071ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f0:	ca5d05ea 	.word	0xca5d05ea
 80071f4:	3f400012 	.word	0x3f400012
 80071f8:	0801dae0 	.word	0x0801dae0
 80071fc:	0801daf8 	.word	0x0801daf8
 8007200:	42c80000 	.word	0x42c80000
 8007204:	20000efc 	.word	0x20000efc
 8007208:	0801db18 	.word	0x0801db18
 800720c:	0801db2c 	.word	0x0801db2c
 8007210:	0801db48 	.word	0x0801db48
 8007214:	20000fc8 	.word	0x20000fc8

08007218 <SendTxData>:
{
 8007218:	b530      	push	{r4, r5, lr}
 800721a:	b09d      	sub	sp, #116	; 0x74
	uint8_t currentDR = 0;
 800721c:	2300      	movs	r3, #0
 800721e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
	currentTime = HAL_GetTick();
 8007222:	f7fb fb51 	bl	80028c8 <HAL_GetTick>
 8007226:	4b4a      	ldr	r3, [pc, #296]	; (8007350 <SendTxData+0x138>)
 8007228:	6018      	str	r0, [r3, #0]
	if ((currentTime - lastSampleTime) >= SAMPLE_INTERVAL_MS) {
 800722a:	4b4a      	ldr	r3, [pc, #296]	; (8007354 <SendTxData+0x13c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	1ac0      	subs	r0, r0, r3
 8007230:	4b49      	ldr	r3, [pc, #292]	; (8007358 <SendTxData+0x140>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4298      	cmp	r0, r3
 8007236:	d21a      	bcs.n	800726e <SendTxData+0x56>
	if (!skipScheduledTransmission){
 8007238:	4b48      	ldr	r3, [pc, #288]	; (800735c <SendTxData+0x144>)
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 8272 	bne.w	8007726 <SendTxData+0x50e>
		if (sampleIndex >= MAX_WATER_LEVEL_SAMPLES || hasJoined == false) {
 8007242:	4b47      	ldr	r3, [pc, #284]	; (8007360 <SendTxData+0x148>)
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b47      	ldr	r3, [pc, #284]	; (8007364 <SendTxData+0x14c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	429a      	cmp	r2, r3
 800724c:	da04      	bge.n	8007258 <SendTxData+0x40>
 800724e:	4b46      	ldr	r3, [pc, #280]	; (8007368 <SendTxData+0x150>)
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	f040 8267 	bne.w	8007726 <SendTxData+0x50e>
			  if (LmHandlerIsBusy() == false)
 8007258:	f005 fcfa 	bl	800cc50 <LmHandlerIsBusy>
 800725c:	b358      	cbz	r0, 80072b6 <SendTxData+0x9e>
			lastTransmitTime = currentTime;
 800725e:	4b3c      	ldr	r3, [pc, #240]	; (8007350 <SendTxData+0x138>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	4b42      	ldr	r3, [pc, #264]	; (800736c <SendTxData+0x154>)
 8007264:	601a      	str	r2, [r3, #0]
			sampleIndex = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	4a3d      	ldr	r2, [pc, #244]	; (8007360 <SendTxData+0x148>)
 800726a:	6013      	str	r3, [r2, #0]
			for(int i = 0; i < MAX_WATER_LEVEL_SAMPLES; i++){
 800726c:	e250      	b.n	8007710 <SendTxData+0x4f8>
		APP_LOG(TS_OFF, VLEVEL_M, "============================================= \r\n");
 800726e:	4c40      	ldr	r4, [pc, #256]	; (8007370 <SendTxData+0x158>)
 8007270:	4623      	mov	r3, r4
 8007272:	2200      	movs	r2, #0
 8007274:	4611      	mov	r1, r2
 8007276:	2002      	movs	r0, #2
 8007278:	f00f f984 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_M, "            DATA SAMPLING: %d           \r\n", sampleIndex+1);
 800727c:	4b38      	ldr	r3, [pc, #224]	; (8007360 <SendTxData+0x148>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4b3b      	ldr	r3, [pc, #236]	; (8007374 <SendTxData+0x15c>)
 8007286:	2200      	movs	r2, #0
 8007288:	4611      	mov	r1, r2
 800728a:	2002      	movs	r0, #2
 800728c:	f00f f97a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		APP_LOG(TS_OFF, VLEVEL_M, "============================================= \r\n");
 8007290:	4623      	mov	r3, r4
 8007292:	2200      	movs	r2, #0
 8007294:	4611      	mov	r1, r2
 8007296:	2002      	movs	r0, #2
 8007298:	f00f f974 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		if(measurementMethod == 0){
 800729c:	4b36      	ldr	r3, [pc, #216]	; (8007378 <SendTxData+0x160>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	b933      	cbnz	r3, 80072b0 <SendTxData+0x98>
			fetchSensorData();
 80072a2:	f7fe fea9 	bl	8005ff8 <fetchSensorData>
		lastSampleTime = currentTime;
 80072a6:	4b2a      	ldr	r3, [pc, #168]	; (8007350 <SendTxData+0x138>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b2a      	ldr	r3, [pc, #168]	; (8007354 <SendTxData+0x13c>)
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e7c3      	b.n	8007238 <SendTxData+0x20>
			fetchSensorDataDifferential();
 80072b0:	f7fe fd10 	bl	8005cd4 <fetchSensorDataDifferential>
 80072b4:	e7f7      	b.n	80072a6 <SendTxData+0x8e>
				APP_LOG(TS_OFF, VLEVEL_M, "============================================= \r\n");
 80072b6:	4c2e      	ldr	r4, [pc, #184]	; (8007370 <SendTxData+0x158>)
 80072b8:	4623      	mov	r3, r4
 80072ba:	2200      	movs	r2, #0
 80072bc:	4611      	mov	r1, r2
 80072be:	2002      	movs	r0, #2
 80072c0:	f00f f960 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "            SCHEDULED TRANSMISSION            \r\n");
 80072c4:	4b2d      	ldr	r3, [pc, #180]	; (800737c <SendTxData+0x164>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	4611      	mov	r1, r2
 80072ca:	2002      	movs	r0, #2
 80072cc:	f00f f95a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_OFF, VLEVEL_M, "============================================= \r\n");
 80072d0:	4623      	mov	r3, r4
 80072d2:	2200      	movs	r2, #0
 80072d4:	4611      	mov	r1, r2
 80072d6:	2002      	movs	r0, #2
 80072d8:	f00f f954 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
				if(LmHandlerGetTxDatarate(&currentDR) == LORAMAC_HANDLER_SUCCESS){
 80072dc:	f10d 006f 	add.w	r0, sp, #111	; 0x6f
 80072e0:	f005 fe2c 	bl	800cf3c <LmHandlerGetTxDatarate>
 80072e4:	b1a8      	cbz	r0, 8007312 <SendTxData+0xfa>
			    AppData.Port = LORAWAN_USER_APP_PORT;
 80072e6:	4b26      	ldr	r3, [pc, #152]	; (8007380 <SendTxData+0x168>)
 80072e8:	2202      	movs	r2, #2
 80072ea:	701a      	strb	r2, [r3, #0]
			    _doneScanning = false;
 80072ec:	4b25      	ldr	r3, [pc, #148]	; (8007384 <SendTxData+0x16c>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	701a      	strb	r2, [r3, #0]
			    if(hasJoined == false){
 80072f2:	4b1d      	ldr	r3, [pc, #116]	; (8007368 <SendTxData+0x150>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	b1b3      	cbz	r3, 8007326 <SendTxData+0x10e>
			    _doneScanning = true;
 80072f8:	4b22      	ldr	r3, [pc, #136]	; (8007384 <SendTxData+0x16c>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]
			    HAL_Delay(200);
 80072fe:	20c8      	movs	r0, #200	; 0xc8
 8007300:	f7fb faee 	bl	80028e0 <HAL_Delay>
			    fetchLTCData();							//READ LTC DATA
 8007304:	f7ff fa08 	bl	8006718 <fetchLTCData>
			    HAL_Delay(50);
 8007308:	2032      	movs	r0, #50	; 0x32
 800730a:	f7fb fae9 	bl	80028e0 <HAL_Delay>
			    for(int x = 0; x < AppData.BufferSize; x++){
 800730e:	2300      	movs	r3, #0
 8007310:	e045      	b.n	800739e <SendTxData+0x186>
					APP_LOG(TS_OFF, VLEVEL_M, "Current Data Rate: %d           \r\n", currentDR);
 8007312:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4b1b      	ldr	r3, [pc, #108]	; (8007388 <SendTxData+0x170>)
 800731a:	2200      	movs	r2, #0
 800731c:	4611      	mov	r1, r2
 800731e:	2002      	movs	r0, #2
 8007320:	f00f f930 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8007324:	e7df      	b.n	80072e6 <SendTxData+0xce>
			    	APP_LOG(TS_OFF, VLEVEL_M, "--------------------------------\r\n");
 8007326:	4c19      	ldr	r4, [pc, #100]	; (800738c <SendTxData+0x174>)
 8007328:	4623      	mov	r3, r4
 800732a:	4611      	mov	r1, r2
 800732c:	2002      	movs	r0, #2
 800732e:	f00f f929 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			    	APP_LOG(TS_OFF, VLEVEL_M, "     INITIAL DATA FETCH \r\n");
 8007332:	4b17      	ldr	r3, [pc, #92]	; (8007390 <SendTxData+0x178>)
 8007334:	2200      	movs	r2, #0
 8007336:	4611      	mov	r1, r2
 8007338:	2002      	movs	r0, #2
 800733a:	f00f f923 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			    	APP_LOG(TS_OFF, VLEVEL_M, "--------------------------------\r\n");
 800733e:	4623      	mov	r3, r4
 8007340:	2200      	movs	r2, #0
 8007342:	4611      	mov	r1, r2
 8007344:	2002      	movs	r0, #2
 8007346:	f00f f91d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			    	fetchSensorDataOnce();
 800734a:	f7fe fba7 	bl	8005a9c <fetchSensorDataOnce>
 800734e:	e7d3      	b.n	80072f8 <SendTxData+0xe0>
 8007350:	2000102c 	.word	0x2000102c
 8007354:	20001038 	.word	0x20001038
 8007358:	20000048 	.word	0x20000048
 800735c:	20001049 	.word	0x20001049
 8007360:	20001044 	.word	0x20001044
 8007364:	20000044 	.word	0x20000044
 8007368:	20001034 	.word	0x20001034
 800736c:	2000103c 	.word	0x2000103c
 8007370:	0801d5d0 	.word	0x0801d5d0
 8007374:	0801db64 	.word	0x0801db64
 8007378:	200009e4 	.word	0x200009e4
 800737c:	0801db90 	.word	0x0801db90
 8007380:	2000005c 	.word	0x2000005c
 8007384:	20001020 	.word	0x20001020
 8007388:	0801dbc4 	.word	0x0801dbc4
 800738c:	0801dbe8 	.word	0x0801dbe8
 8007390:	0801dc0c 	.word	0x0801dc0c
			    		AppData.Buffer[x] = 0;
 8007394:	4aac      	ldr	r2, [pc, #688]	; (8007648 <SendTxData+0x430>)
 8007396:	6852      	ldr	r2, [r2, #4]
 8007398:	2100      	movs	r1, #0
 800739a:	54d1      	strb	r1, [r2, r3]
			    for(int x = 0; x < AppData.BufferSize; x++){
 800739c:	3301      	adds	r3, #1
 800739e:	4aaa      	ldr	r2, [pc, #680]	; (8007648 <SendTxData+0x430>)
 80073a0:	7852      	ldrb	r2, [r2, #1]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	dcf6      	bgt.n	8007394 <SendTxData+0x17c>
			    waterLevelLatest 	= waterLevelLatest * 100;
 80073a6:	4ca9      	ldr	r4, [pc, #676]	; (800764c <SendTxData+0x434>)
 80073a8:	49a9      	ldr	r1, [pc, #676]	; (8007650 <SendTxData+0x438>)
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	f7f9 fd52 	bl	8000e54 <__aeabi_fmul>
 80073b0:	6020      	str	r0, [r4, #0]
			    waterLevel 		 	= waterLevel * 100;
 80073b2:	4ca8      	ldr	r4, [pc, #672]	; (8007654 <SendTxData+0x43c>)
 80073b4:	49a6      	ldr	r1, [pc, #664]	; (8007650 <SendTxData+0x438>)
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	f7f9 fd4c 	bl	8000e54 <__aeabi_fmul>
 80073bc:	6020      	str	r0, [r4, #0]
			    waterLevelMin	 	= waterLevelMin * 100;
 80073be:	4ca6      	ldr	r4, [pc, #664]	; (8007658 <SendTxData+0x440>)
 80073c0:	49a3      	ldr	r1, [pc, #652]	; (8007650 <SendTxData+0x438>)
 80073c2:	6820      	ldr	r0, [r4, #0]
 80073c4:	f7f9 fd46 	bl	8000e54 <__aeabi_fmul>
 80073c8:	6020      	str	r0, [r4, #0]
			    waterLevelMax	 	= waterLevelMax * 100;
 80073ca:	4ca4      	ldr	r4, [pc, #656]	; (800765c <SendTxData+0x444>)
 80073cc:	49a0      	ldr	r1, [pc, #640]	; (8007650 <SendTxData+0x438>)
 80073ce:	6820      	ldr	r0, [r4, #0]
 80073d0:	f7f9 fd40 	bl	8000e54 <__aeabi_fmul>
 80073d4:	6020      	str	r0, [r4, #0]
				if(sendSystemDiagnostic == true){
 80073d6:	4ba2      	ldr	r3, [pc, #648]	; (8007660 <SendTxData+0x448>)
 80073d8:	781b      	ldrb	r3, [r3, #0]
 80073da:	b1f3      	cbz	r3, 800741a <SendTxData+0x202>
					transmissionType = 2;
 80073dc:	4ba1      	ldr	r3, [pc, #644]	; (8007664 <SendTxData+0x44c>)
 80073de:	2202      	movs	r2, #2
 80073e0:	601a      	str	r2, [r3, #0]
					int measureMeth  = measurementMethod == 0 ? 0 : 1;
 80073e2:	4ba1      	ldr	r3, [pc, #644]	; (8007668 <SendTxData+0x450>)
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	3a00      	subs	r2, #0
 80073e8:	bf18      	it	ne
 80073ea:	2201      	movne	r2, #1
					int samplingMeth = samplingMethod == 0 ? 0 : 1;
 80073ec:	4b9f      	ldr	r3, [pc, #636]	; (800766c <SendTxData+0x454>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3b00      	subs	r3, #0
 80073f2:	bf18      	it	ne
 80073f4:	2301      	movne	r3, #1
					int threshMeth	 = continuousMode == true ? 1 : 0;
 80073f6:	499e      	ldr	r1, [pc, #632]	; (8007670 <SendTxData+0x458>)
 80073f8:	780c      	ldrb	r4, [r1, #0]
					int modbusError  = isModbusUnresponsive == true ? 1 : 0;
 80073fa:	499e      	ldr	r1, [pc, #632]	; (8007674 <SendTxData+0x45c>)
 80073fc:	7808      	ldrb	r0, [r1, #0]
					int levelBreach  = isLevelBreached == true ? 1 : 0;
 80073fe:	499e      	ldr	r1, [pc, #632]	; (8007678 <SendTxData+0x460>)
 8007400:	7809      	ldrb	r1, [r1, #0]
									   (samplingMeth << 3) |
 8007402:	00db      	lsls	r3, r3, #3
									   (measureMeth << 4) |
 8007404:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
									   (samplingMeth << 3) |
 8007408:	ea43 0384 	orr.w	r3, r3, r4, lsl #2
 800740c:	b25b      	sxtb	r3, r3
									   (threshMeth  << 2) |
 800740e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8007412:	b25b      	sxtb	r3, r3
									   (modbusError << 1) |
 8007414:	430b      	orrs	r3, r1
					systemDiagnostic = (isZeroCalib << 5) |
 8007416:	4a99      	ldr	r2, [pc, #612]	; (800767c <SendTxData+0x464>)
 8007418:	7013      	strb	r3, [r2, #0]
				AppData.Buffer[i++] = (uint8_t)transmissionType;
 800741a:	4c8b      	ldr	r4, [pc, #556]	; (8007648 <SendTxData+0x430>)
 800741c:	6863      	ldr	r3, [r4, #4]
 800741e:	4a91      	ldr	r2, [pc, #580]	; (8007664 <SendTxData+0x44c>)
 8007420:	7812      	ldrb	r2, [r2, #0]
 8007422:	701a      	strb	r2, [r3, #0]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelLatest >> 8);
 8007424:	4d89      	ldr	r5, [pc, #548]	; (800764c <SendTxData+0x434>)
 8007426:	6828      	ldr	r0, [r5, #0]
 8007428:	f7f9 ff00 	bl	800122c <__aeabi_f2uiz>
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8007432:	7058      	strb	r0, [r3, #1]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelLatest & 0xFF);
 8007434:	6828      	ldr	r0, [r5, #0]
 8007436:	f7f9 fef9 	bl	800122c <__aeabi_f2uiz>
 800743a:	6863      	ldr	r3, [r4, #4]
 800743c:	7098      	strb	r0, [r3, #2]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevel >> 8);
 800743e:	4d85      	ldr	r5, [pc, #532]	; (8007654 <SendTxData+0x43c>)
 8007440:	6828      	ldr	r0, [r5, #0]
 8007442:	f7f9 fef3 	bl	800122c <__aeabi_f2uiz>
 8007446:	6863      	ldr	r3, [r4, #4]
 8007448:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800744c:	70d8      	strb	r0, [r3, #3]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevel & 0xFF);
 800744e:	6828      	ldr	r0, [r5, #0]
 8007450:	f7f9 feec 	bl	800122c <__aeabi_f2uiz>
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	7118      	strb	r0, [r3, #4]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMin >> 8);
 8007458:	4b7f      	ldr	r3, [pc, #508]	; (8007658 <SendTxData+0x440>)
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	f7f9 fee6 	bl	800122c <__aeabi_f2uiz>
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8007466:	715a      	strb	r2, [r3, #5]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMin & 0xFF);
 8007468:	6863      	ldr	r3, [r4, #4]
 800746a:	7198      	strb	r0, [r3, #6]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMax >> 8);
 800746c:	4b7b      	ldr	r3, [pc, #492]	; (800765c <SendTxData+0x444>)
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	f7f9 fedc 	bl	800122c <__aeabi_f2uiz>
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800747a:	71da      	strb	r2, [r3, #7]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)waterLevelMax & 0xFF);
 800747c:	6864      	ldr	r4, [r4, #4]
 800747e:	7220      	strb	r0, [r4, #8]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)VBAT >> 8);
 8007480:	4b7f      	ldr	r3, [pc, #508]	; (8007680 <SendTxData+0x468>)
 8007482:	6818      	ldr	r0, [r3, #0]
 8007484:	f7f9 fed2 	bl	800122c <__aeabi_f2uiz>
 8007488:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800748c:	7263      	strb	r3, [r4, #9]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)VBAT & 0xFF);
 800748e:	72a0      	strb	r0, [r4, #10]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)VIN >> 8);
 8007490:	4b7c      	ldr	r3, [pc, #496]	; (8007684 <SendTxData+0x46c>)
 8007492:	6818      	ldr	r0, [r3, #0]
 8007494:	f7f9 feca 	bl	800122c <__aeabi_f2uiz>
 8007498:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800749c:	72e3      	strb	r3, [r4, #11]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)VIN & 0xFF);
 800749e:	7320      	strb	r0, [r4, #12]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)VSYS >> 8);
 80074a0:	4b79      	ldr	r3, [pc, #484]	; (8007688 <SendTxData+0x470>)
 80074a2:	6818      	ldr	r0, [r3, #0]
 80074a4:	f7f9 fec2 	bl	800122c <__aeabi_f2uiz>
 80074a8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80074ac:	7363      	strb	r3, [r4, #13]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)VSYS & 0xFF);
 80074ae:	73a0      	strb	r0, [r4, #14]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)IBAT >> 8);
 80074b0:	4b76      	ldr	r3, [pc, #472]	; (800768c <SendTxData+0x474>)
 80074b2:	6818      	ldr	r0, [r3, #0]
 80074b4:	f7f9 feba 	bl	800122c <__aeabi_f2uiz>
 80074b8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80074bc:	73e3      	strb	r3, [r4, #15]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)IBAT & 0xFF);
 80074be:	7420      	strb	r0, [r4, #16]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)IIN >> 8);
 80074c0:	4b73      	ldr	r3, [pc, #460]	; (8007690 <SendTxData+0x478>)
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	f7f9 feb2 	bl	800122c <__aeabi_f2uiz>
 80074c8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80074cc:	7463      	strb	r3, [r4, #17]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)IIN & 0xFF);
 80074ce:	74a0      	strb	r0, [r4, #18]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)ICHARGE_DAC >> 8);
 80074d0:	4b70      	ldr	r3, [pc, #448]	; (8007694 <SendTxData+0x47c>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	f7f9 feaa 	bl	800122c <__aeabi_f2uiz>
 80074d8:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80074dc:	74e3      	strb	r3, [r4, #19]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)ICHARGE_DAC & 0xFF);
 80074de:	7520      	strb	r0, [r4, #20]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)SYSTEM_STATUS >> 8);
 80074e0:	4b6d      	ldr	r3, [pc, #436]	; (8007698 <SendTxData+0x480>)
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	0a1a      	lsrs	r2, r3, #8
 80074e6:	7562      	strb	r2, [r4, #21]
				AppData.Buffer[i++] = (uint8_t)((uint16_t)SYSTEM_STATUS & 0xFF);
 80074e8:	75a3      	strb	r3, [r4, #22]
				if(sendSystemDiagnostic == true){
 80074ea:	4b5d      	ldr	r3, [pc, #372]	; (8007660 <SendTxData+0x448>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d06a      	beq.n	80075c8 <SendTxData+0x3b0>
					AppData.Buffer[i++] = (uint8_t)systemDiagnostic;
 80074f2:	4b62      	ldr	r3, [pc, #392]	; (800767c <SendTxData+0x464>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	75e3      	strb	r3, [r4, #23]
					sendSystemDiagnostic = false;
 80074f8:	4b59      	ldr	r3, [pc, #356]	; (8007660 <SendTxData+0x448>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
					AppData.Buffer[i++] = (uint8_t)systemDiagnostic;
 80074fe:	2218      	movs	r2, #24
				AppData.BufferSize = i;
 8007500:	4b51      	ldr	r3, [pc, #324]	; (8007648 <SendTxData+0x430>)
 8007502:	705a      	strb	r2, [r3, #1]
				sprintf((char*)msg, "Payload Buffer Size: %u\r\n\r\n", AppData.BufferSize);
 8007504:	4965      	ldr	r1, [pc, #404]	; (800769c <SendTxData+0x484>)
 8007506:	a802      	add	r0, sp, #8
 8007508:	f010 fdd4 	bl	80180b4 <siprintf>
				HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 800750c:	a802      	add	r0, sp, #8
 800750e:	f7f8 fe87 	bl	8000220 <strlen>
 8007512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007516:	b282      	uxth	r2, r0
 8007518:	a902      	add	r1, sp, #8
 800751a:	4861      	ldr	r0, [pc, #388]	; (80076a0 <SendTxData+0x488>)
 800751c:	f004 ff55 	bl	800c3ca <HAL_UART_Transmit>
			    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8007520:	4b60      	ldr	r3, [pc, #384]	; (80076a4 <SendTxData+0x48c>)
 8007522:	7a5b      	ldrb	r3, [r3, #9]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d151      	bne.n	80075cc <SendTxData+0x3b4>
				if(confUplinkCounter >= MAX_UPLINK_BEFORE_CONFIRMED){
 8007528:	4b5f      	ldr	r3, [pc, #380]	; (80076a8 <SendTxData+0x490>)
 800752a:	881a      	ldrh	r2, [r3, #0]
 800752c:	4b5f      	ldr	r3, [pc, #380]	; (80076ac <SendTxData+0x494>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	429a      	cmp	r2, r3
 8007532:	db59      	blt.n	80075e8 <SendTxData+0x3d0>
					APP_LOG(TS_ON, VLEVEL_L, "### SENDING CONFIRMED UPLINK \r\n");
 8007534:	4b5e      	ldr	r3, [pc, #376]	; (80076b0 <SendTxData+0x498>)
 8007536:	2201      	movs	r2, #1
 8007538:	2100      	movs	r1, #0
 800753a:	4610      	mov	r0, r2
 800753c:	f00f f822 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_ON, VLEVEL_L, "% Uplink Counter %u \r\n", confUplinkCounter);
 8007540:	4c59      	ldr	r4, [pc, #356]	; (80076a8 <SendTxData+0x490>)
 8007542:	8823      	ldrh	r3, [r4, #0]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	4b5b      	ldr	r3, [pc, #364]	; (80076b4 <SendTxData+0x49c>)
 8007548:	2201      	movs	r2, #1
 800754a:	2100      	movs	r1, #0
 800754c:	4610      	mov	r0, r2
 800754e:	f00f f819 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					confUplinkCounter += 1;
 8007552:	8823      	ldrh	r3, [r4, #0]
 8007554:	3301      	adds	r3, #1
 8007556:	8023      	strh	r3, [r4, #0]
					status = LmHandlerSend(&AppData, LmHandlerParamsConfirmed.IsTxConfirmed, false);
 8007558:	2200      	movs	r2, #0
 800755a:	2101      	movs	r1, #1
 800755c:	483a      	ldr	r0, [pc, #232]	; (8007648 <SendTxData+0x430>)
 800755e:	f005 fb8d 	bl	800cc7c <LmHandlerSend>
 8007562:	4604      	mov	r4, r0
				if(status == 0){
 8007564:	2c00      	cmp	r4, #0
 8007566:	d056      	beq.n	8007616 <SendTxData+0x3fe>
				if((confUplinkCounter - MAX_UPLINK_BEFORE_CONFIRMED) > 10){
 8007568:	4b4f      	ldr	r3, [pc, #316]	; (80076a8 <SendTxData+0x490>)
 800756a:	881b      	ldrh	r3, [r3, #0]
 800756c:	4a4f      	ldr	r2, [pc, #316]	; (80076ac <SendTxData+0x494>)
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	2b0a      	cmp	r3, #10
 8007574:	f300 80b0 	bgt.w	80076d8 <SendTxData+0x4c0>
			    if (LORAMAC_HANDLER_SUCCESS == status)
 8007578:	2c00      	cmp	r4, #0
 800757a:	f000 80bc 	beq.w	80076f6 <SendTxData+0x4de>
			    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 800757e:	f114 0f06 	cmn.w	r4, #6
 8007582:	f47f ae6c 	bne.w	800725e <SendTxData+0x46>
			      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8007586:	f005 fb4b 	bl	800cc20 <LmHandlerGetDutyCycleWaitTime>
			      if (nextTxIn > 0)
 800758a:	4604      	mov	r4, r0
 800758c:	2800      	cmp	r0, #0
 800758e:	f43f ae66 	beq.w	800725e <SendTxData+0x46>
			        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8007592:	4b49      	ldr	r3, [pc, #292]	; (80076b8 <SendTxData+0x4a0>)
 8007594:	fba3 2300 	umull	r2, r3, r3, r0
 8007598:	099b      	lsrs	r3, r3, #6
 800759a:	9300      	str	r3, [sp, #0]
 800759c:	4b47      	ldr	r3, [pc, #284]	; (80076bc <SendTxData+0x4a4>)
 800759e:	2201      	movs	r2, #1
 80075a0:	2100      	movs	r1, #0
 80075a2:	4610      	mov	r0, r2
 80075a4:	f00e ffee 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
			        UTIL_TIMER_Stop(&TxTimer);
 80075a8:	4d45      	ldr	r5, [pc, #276]	; (80076c0 <SendTxData+0x4a8>)
 80075aa:	4628      	mov	r0, r5
 80075ac:	f00f fb3c 	bl	8016c28 <UTIL_TIMER_Stop>
			        UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 80075b0:	4b44      	ldr	r3, [pc, #272]	; (80076c4 <SendTxData+0x4ac>)
 80075b2:	6819      	ldr	r1, [r3, #0]
 80075b4:	42a1      	cmp	r1, r4
 80075b6:	bf38      	it	cc
 80075b8:	4621      	movcc	r1, r4
 80075ba:	4628      	mov	r0, r5
 80075bc:	f00f fbd4 	bl	8016d68 <UTIL_TIMER_SetPeriod>
			        UTIL_TIMER_Start(&TxTimer);
 80075c0:	4628      	mov	r0, r5
 80075c2:	f00f fb8b 	bl	8016cdc <UTIL_TIMER_Start>
 80075c6:	e64a      	b.n	800725e <SendTxData+0x46>
				AppData.Buffer[i++] = (uint8_t)((uint16_t)SYSTEM_STATUS & 0xFF);
 80075c8:	2217      	movs	r2, #23
 80075ca:	e799      	b.n	8007500 <SendTxData+0x2e8>
			    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80075cc:	f005 fb2e 	bl	800cc2c <LmHandlerJoinStatus>
 80075d0:	2801      	cmp	r0, #1
 80075d2:	d1a9      	bne.n	8007528 <SendTxData+0x310>
			      UTIL_TIMER_Stop(&JoinLedTimer);
 80075d4:	4833      	ldr	r0, [pc, #204]	; (80076a4 <SendTxData+0x48c>)
 80075d6:	f00f fb27 	bl	8016c28 <UTIL_TIMER_Stop>
			      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80075da:	2200      	movs	r2, #0
 80075dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80075e0:	4839      	ldr	r0, [pc, #228]	; (80076c8 <SendTxData+0x4b0>)
 80075e2:	f001 fde7 	bl	80091b4 <HAL_GPIO_WritePin>
 80075e6:	e79f      	b.n	8007528 <SendTxData+0x310>
					status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80075e8:	2200      	movs	r2, #0
 80075ea:	4b38      	ldr	r3, [pc, #224]	; (80076cc <SendTxData+0x4b4>)
 80075ec:	78d9      	ldrb	r1, [r3, #3]
 80075ee:	4816      	ldr	r0, [pc, #88]	; (8007648 <SendTxData+0x430>)
 80075f0:	f005 fb44 	bl	800cc7c <LmHandlerSend>
 80075f4:	4604      	mov	r4, r0
					APP_LOG(TS_ON, VLEVEL_L, "%u Remaining Uplink/s before sending Confirmed Uplink \r\n", (MAX_UPLINK_BEFORE_CONFIRMED-confUplinkCounter));
 80075f6:	4d2c      	ldr	r5, [pc, #176]	; (80076a8 <SendTxData+0x490>)
 80075f8:	882a      	ldrh	r2, [r5, #0]
 80075fa:	4b2c      	ldr	r3, [pc, #176]	; (80076ac <SendTxData+0x494>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	9300      	str	r3, [sp, #0]
 8007602:	4b33      	ldr	r3, [pc, #204]	; (80076d0 <SendTxData+0x4b8>)
 8007604:	2201      	movs	r2, #1
 8007606:	2100      	movs	r1, #0
 8007608:	4610      	mov	r0, r2
 800760a:	f00e ffbb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					confUplinkCounter += 1;
 800760e:	882b      	ldrh	r3, [r5, #0]
 8007610:	3301      	adds	r3, #1
 8007612:	802b      	strh	r3, [r5, #0]
 8007614:	e7a6      	b.n	8007564 <SendTxData+0x34c>
					APP_LOG(TS_ON, VLEVEL_L, "### Resetting Watchdog Timer! \r\n");
 8007616:	4b2f      	ldr	r3, [pc, #188]	; (80076d4 <SendTxData+0x4bc>)
 8007618:	2201      	movs	r2, #1
 800761a:	2100      	movs	r1, #0
 800761c:	4610      	mov	r0, r2
 800761e:	f00e ffb1 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8007622:	2201      	movs	r2, #1
 8007624:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800762c:	f001 fdc2 	bl	80091b4 <HAL_GPIO_WritePin>
					HAL_Delay(50);
 8007630:	2032      	movs	r0, #50	; 0x32
 8007632:	f7fb f955 	bl	80028e0 <HAL_Delay>
					HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8007636:	2200      	movs	r2, #0
 8007638:	f44f 7180 	mov.w	r1, #256	; 0x100
 800763c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007640:	f001 fdb8 	bl	80091b4 <HAL_GPIO_WritePin>
 8007644:	e790      	b.n	8007568 <SendTxData+0x350>
 8007646:	bf00      	nop
 8007648:	2000005c 	.word	0x2000005c
 800764c:	20001054 	.word	0x20001054
 8007650:	42c80000 	.word	0x42c80000
 8007654:	20001050 	.word	0x20001050
 8007658:	2000105c 	.word	0x2000105c
 800765c:	20001058 	.word	0x20001058
 8007660:	20001048 	.word	0x20001048
 8007664:	2000104c 	.word	0x2000104c
 8007668:	200009e4 	.word	0x200009e4
 800766c:	20000b14 	.word	0x20000b14
 8007670:	20001028 	.word	0x20001028
 8007674:	20001036 	.word	0x20001036
 8007678:	20001035 	.word	0x20001035
 800767c:	2000104a 	.word	0x2000104a
 8007680:	20001014 	.word	0x20001014
 8007684:	20001018 	.word	0x20001018
 8007688:	2000101c 	.word	0x2000101c
 800768c:	20000ef4 	.word	0x20000ef4
 8007690:	20000efc 	.word	0x20000efc
 8007694:	20000ef8 	.word	0x20000ef8
 8007698:	20000fc8 	.word	0x20000fc8
 800769c:	0801d638 	.word	0x0801d638
 80076a0:	20000c60 	.word	0x20000c60
 80076a4:	20000f00 	.word	0x20000f00
 80076a8:	200009e0 	.word	0x200009e0
 80076ac:	20000040 	.word	0x20000040
 80076b0:	0801dc28 	.word	0x0801dc28
 80076b4:	0801dc48 	.word	0x0801dc48
 80076b8:	10624dd3 	.word	0x10624dd3
 80076bc:	0801dcec 	.word	0x0801dcec
 80076c0:	20000ffc 	.word	0x20000ffc
 80076c4:	200000c8 	.word	0x200000c8
 80076c8:	48000400 	.word	0x48000400
 80076cc:	200000b0 	.word	0x200000b0
 80076d0:	0801dc60 	.word	0x0801dc60
 80076d4:	0801d654 	.word	0x0801d654
					APP_LOG(TS_ON, VLEVEL_L, "### Confirmed Uplinks Failed! \r\n");
 80076d8:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <SendTxData+0x538>)
 80076da:	2201      	movs	r2, #1
 80076dc:	2100      	movs	r1, #0
 80076de:	4610      	mov	r0, r2
 80076e0:	f00e ff50 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					APP_LOG(TS_ON, VLEVEL_L, "### Resetting Device! \r\n");
 80076e4:	4b1b      	ldr	r3, [pc, #108]	; (8007754 <SendTxData+0x53c>)
 80076e6:	2201      	movs	r2, #1
 80076e8:	2100      	movs	r1, #0
 80076ea:	4610      	mov	r0, r2
 80076ec:	f00e ff4a 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
					panicMode();
 80076f0:	f7fe f922 	bl	8005938 <panicMode>
 80076f4:	e740      	b.n	8007578 <SendTxData+0x360>
			      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 80076f6:	4b18      	ldr	r3, [pc, #96]	; (8007758 <SendTxData+0x540>)
 80076f8:	2201      	movs	r2, #1
 80076fa:	2100      	movs	r1, #0
 80076fc:	4610      	mov	r0, r2
 80076fe:	f00e ff41 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8007702:	e5ac      	b.n	800725e <SendTxData+0x46>
				waterLevelSamples[i] = 0;
 8007704:	4a15      	ldr	r2, [pc, #84]	; (800775c <SendTxData+0x544>)
 8007706:	6812      	ldr	r2, [r2, #0]
 8007708:	2100      	movs	r1, #0
 800770a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i < MAX_WATER_LEVEL_SAMPLES; i++){
 800770e:	3301      	adds	r3, #1
 8007710:	4a13      	ldr	r2, [pc, #76]	; (8007760 <SendTxData+0x548>)
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	dcf5      	bgt.n	8007704 <SendTxData+0x4ec>
			waterLevelMin    = 0;
 8007718:	2300      	movs	r3, #0
 800771a:	4a12      	ldr	r2, [pc, #72]	; (8007764 <SendTxData+0x54c>)
 800771c:	6013      	str	r3, [r2, #0]
			waterLevelMax    = 0;
 800771e:	4a12      	ldr	r2, [pc, #72]	; (8007768 <SendTxData+0x550>)
 8007720:	6013      	str	r3, [r2, #0]
			waterLevelLatest = 0;
 8007722:	4a12      	ldr	r2, [pc, #72]	; (800776c <SendTxData+0x554>)
 8007724:	6013      	str	r3, [r2, #0]
	APP_LOG(TS_ON, VLEVEL_L, "Next Scan in  : ~%d second(s)\r\n", ((SAMPLE_INTERVAL_MS - (currentTime - lastSampleTime)) / 1000));
 8007726:	4b12      	ldr	r3, [pc, #72]	; (8007770 <SendTxData+0x558>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a12      	ldr	r2, [pc, #72]	; (8007774 <SendTxData+0x55c>)
 800772c:	6812      	ldr	r2, [r2, #0]
 800772e:	1a9b      	subs	r3, r3, r2
 8007730:	4a11      	ldr	r2, [pc, #68]	; (8007778 <SendTxData+0x560>)
 8007732:	6812      	ldr	r2, [r2, #0]
 8007734:	4413      	add	r3, r2
 8007736:	4a11      	ldr	r2, [pc, #68]	; (800777c <SendTxData+0x564>)
 8007738:	fba2 2303 	umull	r2, r3, r2, r3
 800773c:	099b      	lsrs	r3, r3, #6
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	4b0f      	ldr	r3, [pc, #60]	; (8007780 <SendTxData+0x568>)
 8007742:	2201      	movs	r2, #1
 8007744:	2100      	movs	r1, #0
 8007746:	4610      	mov	r0, r2
 8007748:	f00e ff1c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800774c:	b01d      	add	sp, #116	; 0x74
 800774e:	bd30      	pop	{r4, r5, pc}
 8007750:	0801dc9c 	.word	0x0801dc9c
 8007754:	0801dcc0 	.word	0x0801dcc0
 8007758:	0801dcdc 	.word	0x0801dcdc
 800775c:	20001060 	.word	0x20001060
 8007760:	20000044 	.word	0x20000044
 8007764:	2000105c 	.word	0x2000105c
 8007768:	20001058 	.word	0x20001058
 800776c:	20001054 	.word	0x20001054
 8007770:	20001038 	.word	0x20001038
 8007774:	2000102c 	.word	0x2000102c
 8007778:	20000048 	.word	0x20000048
 800777c:	10624dd3 	.word	0x10624dd3
 8007780:	0801dd0c 	.word	0x0801dd0c

08007784 <LoRaWAN_Init>:
{
 8007784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007786:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8007788:	2400      	movs	r4, #0
 800778a:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 800778c:	4d70      	ldr	r5, [pc, #448]	; (8007950 <LoRaWAN_Init+0x1cc>)
 800778e:	462b      	mov	r3, r5
 8007790:	4622      	mov	r2, r4
 8007792:	4621      	mov	r1, r4
 8007794:	2002      	movs	r0, #2
 8007796:	f00e fef5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "  ____            _        _                             ___               \r\n");
 800779a:	4b6e      	ldr	r3, [pc, #440]	; (8007954 <LoRaWAN_Init+0x1d0>)
 800779c:	4622      	mov	r2, r4
 800779e:	4621      	mov	r1, r4
 80077a0:	2002      	movs	r0, #2
 80077a2:	f00e feef 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, " |  _ \\ __ _  ___| | _____| |___      _____  _ ____  __ |_ _|_ __   ___    \r\n");
 80077a6:	4b6c      	ldr	r3, [pc, #432]	; (8007958 <LoRaWAN_Init+0x1d4>)
 80077a8:	4622      	mov	r2, r4
 80077aa:	4621      	mov	r1, r4
 80077ac:	2002      	movs	r0, #2
 80077ae:	f00e fee9 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, " | |_) / _` |/ __| |/ / _ \\ __\\ \\ /\\ / / _ \\| '__\\ \\/ /  | || '_ \\ / __|   \r\n");
 80077b2:	4b6a      	ldr	r3, [pc, #424]	; (800795c <LoRaWAN_Init+0x1d8>)
 80077b4:	4622      	mov	r2, r4
 80077b6:	4621      	mov	r1, r4
 80077b8:	2002      	movs	r0, #2
 80077ba:	f00e fee3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, " |  __/ (_| | (__|   <  __/ |_ \\ V  V / (_) | |   >  <   | || | | | (__ _  \r\n");
 80077be:	4b68      	ldr	r3, [pc, #416]	; (8007960 <LoRaWAN_Init+0x1dc>)
 80077c0:	4622      	mov	r2, r4
 80077c2:	4621      	mov	r1, r4
 80077c4:	2002      	movs	r0, #2
 80077c6:	f00e fedd 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, " |_|   \\__,_|\\___|_|\\_\\___|\\__| \\_/\\_/ \\___/|_|  /_/\\_\\ |___|_| |_|\\___(_) \r\n");
 80077ca:	4b66      	ldr	r3, [pc, #408]	; (8007964 <LoRaWAN_Init+0x1e0>)
 80077cc:	4622      	mov	r2, r4
 80077ce:	4621      	mov	r1, r4
 80077d0:	2002      	movs	r0, #2
 80077d2:	f00e fed7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 80077d6:	462b      	mov	r3, r5
 80077d8:	4622      	mov	r2, r4
 80077da:	4621      	mov	r1, r4
 80077dc:	2002      	movs	r0, #2
 80077de:	f00e fed1 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, " Firmware: Water Level 20M 	Ver.: 1.1.1		Rev. Date: 8-6-24\r\n");
 80077e2:	4b61      	ldr	r3, [pc, #388]	; (8007968 <LoRaWAN_Init+0x1e4>)
 80077e4:	4622      	mov	r2, r4
 80077e6:	4621      	mov	r1, r4
 80077e8:	2002      	movs	r0, #2
 80077ea:	f00e fecb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "\r\n");
 80077ee:	462b      	mov	r3, r5
 80077f0:	4622      	mov	r2, r4
 80077f2:	4621      	mov	r1, r4
 80077f4:	2002      	movs	r0, #2
 80077f6:	f00e fec5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  waterLevelSamples = (float*)malloc(sizeof(int)*MAX_WATER_LEVEL_SAMPLES);
 80077fa:	4b5c      	ldr	r3, [pc, #368]	; (800796c <LoRaWAN_Init+0x1e8>)
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	0080      	lsls	r0, r0, #2
 8007800:	f00f fc74 	bl	80170ec <malloc>
 8007804:	4b5a      	ldr	r3, [pc, #360]	; (8007970 <LoRaWAN_Init+0x1ec>)
 8007806:	6018      	str	r0, [r3, #0]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8007808:	9402      	str	r4, [sp, #8]
 800780a:	2703      	movs	r7, #3
 800780c:	9701      	str	r7, [sp, #4]
 800780e:	2601      	movs	r6, #1
 8007810:	9600      	str	r6, [sp, #0]
 8007812:	4b58      	ldr	r3, [pc, #352]	; (8007974 <LoRaWAN_Init+0x1f0>)
 8007814:	4622      	mov	r2, r4
 8007816:	4621      	mov	r1, r4
 8007818:	2002      	movs	r0, #2
 800781a:	f00e feb3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 800781e:	9402      	str	r4, [sp, #8]
 8007820:	2305      	movs	r3, #5
 8007822:	9301      	str	r3, [sp, #4]
 8007824:	2502      	movs	r5, #2
 8007826:	9500      	str	r5, [sp, #0]
 8007828:	4b53      	ldr	r3, [pc, #332]	; (8007978 <LoRaWAN_Init+0x1f4>)
 800782a:	4622      	mov	r2, r4
 800782c:	4621      	mov	r1, r4
 800782e:	4628      	mov	r0, r5
 8007830:	f00e fea8 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8007834:	9402      	str	r4, [sp, #8]
 8007836:	9701      	str	r7, [sp, #4]
 8007838:	9600      	str	r6, [sp, #0]
 800783a:	4b50      	ldr	r3, [pc, #320]	; (800797c <LoRaWAN_Init+0x1f8>)
 800783c:	4622      	mov	r2, r4
 800783e:	4621      	mov	r1, r4
 8007840:	4628      	mov	r0, r5
 8007842:	f00e fe9f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8007846:	a905      	add	r1, sp, #20
 8007848:	4620      	mov	r0, r4
 800784a:	f005 fd13 	bl	800d274 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 800784e:	9b05      	ldr	r3, [sp, #20]
 8007850:	0e1a      	lsrs	r2, r3, #24
 8007852:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8007856:	9102      	str	r1, [sp, #8]
 8007858:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	9200      	str	r2, [sp, #0]
 8007860:	4b47      	ldr	r3, [pc, #284]	; (8007980 <LoRaWAN_Init+0x1fc>)
 8007862:	4622      	mov	r2, r4
 8007864:	4621      	mov	r1, r4
 8007866:	4628      	mov	r0, r5
 8007868:	f00e fe8c 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 800786c:	a905      	add	r1, sp, #20
 800786e:	4630      	mov	r0, r6
 8007870:	f005 fd00 	bl	800d274 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8007874:	9b05      	ldr	r3, [sp, #20]
 8007876:	0e1a      	lsrs	r2, r3, #24
 8007878:	b2d9      	uxtb	r1, r3
 800787a:	9103      	str	r1, [sp, #12]
 800787c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8007880:	9102      	str	r1, [sp, #8]
 8007882:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	9200      	str	r2, [sp, #0]
 800788a:	4b3e      	ldr	r3, [pc, #248]	; (8007984 <LoRaWAN_Init+0x200>)
 800788c:	4622      	mov	r2, r4
 800788e:	4621      	mov	r1, r4
 8007890:	4628      	mov	r0, r5
 8007892:	f00e fe77 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8007896:	9400      	str	r4, [sp, #0]
 8007898:	4b3b      	ldr	r3, [pc, #236]	; (8007988 <LoRaWAN_Init+0x204>)
 800789a:	4622      	mov	r2, r4
 800789c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80078a0:	483a      	ldr	r0, [pc, #232]	; (800798c <LoRaWAN_Init+0x208>)
 80078a2:	f00f f963 	bl	8016b6c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 80078a6:	9400      	str	r4, [sp, #0]
 80078a8:	4b39      	ldr	r3, [pc, #228]	; (8007990 <LoRaWAN_Init+0x20c>)
 80078aa:	4622      	mov	r2, r4
 80078ac:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80078b0:	4838      	ldr	r0, [pc, #224]	; (8007994 <LoRaWAN_Init+0x210>)
 80078b2:	f00f f95b 	bl	8016b6c <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 80078b6:	9400      	str	r4, [sp, #0]
 80078b8:	4b37      	ldr	r3, [pc, #220]	; (8007998 <LoRaWAN_Init+0x214>)
 80078ba:	4632      	mov	r2, r6
 80078bc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80078c0:	4836      	ldr	r0, [pc, #216]	; (800799c <LoRaWAN_Init+0x218>)
 80078c2:	f00f f953 	bl	8016b6c <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7fa fbf2 	bl	80020b0 <FLASH_IF_Init>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	d13b      	bne.n	8007948 <LoRaWAN_Init+0x1c4>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 80078d0:	2400      	movs	r4, #0
 80078d2:	9400      	str	r4, [sp, #0]
 80078d4:	4b32      	ldr	r3, [pc, #200]	; (80079a0 <LoRaWAN_Init+0x21c>)
 80078d6:	4622      	mov	r2, r4
 80078d8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80078dc:	4831      	ldr	r0, [pc, #196]	; (80079a4 <LoRaWAN_Init+0x220>)
 80078de:	f00f f945 	bl	8016b6c <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80078e2:	4a31      	ldr	r2, [pc, #196]	; (80079a8 <LoRaWAN_Init+0x224>)
 80078e4:	4621      	mov	r1, r4
 80078e6:	2001      	movs	r0, #1
 80078e8:	f00f f840 	bl	801696c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80078ec:	4a2f      	ldr	r2, [pc, #188]	; (80079ac <LoRaWAN_Init+0x228>)
 80078ee:	4621      	mov	r1, r4
 80078f0:	2002      	movs	r0, #2
 80078f2:	f00f f83b 	bl	801696c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 80078f6:	4a2e      	ldr	r2, [pc, #184]	; (80079b0 <LoRaWAN_Init+0x22c>)
 80078f8:	4621      	mov	r1, r4
 80078fa:	2004      	movs	r0, #4
 80078fc:	f00f f836 	bl	801696c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8007900:	4a2c      	ldr	r2, [pc, #176]	; (80079b4 <LoRaWAN_Init+0x230>)
 8007902:	4621      	mov	r1, r4
 8007904:	2008      	movs	r0, #8
 8007906:	f00f f831 	bl	801696c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 800790a:	f000 f89f 	bl	8007a4c <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 800790e:	492a      	ldr	r1, [pc, #168]	; (80079b8 <LoRaWAN_Init+0x234>)
 8007910:	482a      	ldr	r0, [pc, #168]	; (80079bc <LoRaWAN_Init+0x238>)
 8007912:	f005 fc63 	bl	800d1dc <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8007916:	482a      	ldr	r0, [pc, #168]	; (80079c0 <LoRaWAN_Init+0x23c>)
 8007918:	f005 fb3a 	bl	800cf90 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 800791c:	481f      	ldr	r0, [pc, #124]	; (800799c <LoRaWAN_Init+0x218>)
 800791e:	f00f f9dd 	bl	8016cdc <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8007922:	4621      	mov	r1, r4
 8007924:	4b27      	ldr	r3, [pc, #156]	; (80079c4 <LoRaWAN_Init+0x240>)
 8007926:	7818      	ldrb	r0, [r3, #0]
 8007928:	f005 f8ee 	bl	800cb08 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 800792c:	4d26      	ldr	r5, [pc, #152]	; (80079c8 <LoRaWAN_Init+0x244>)
 800792e:	9400      	str	r4, [sp, #0]
 8007930:	4b26      	ldr	r3, [pc, #152]	; (80079cc <LoRaWAN_Init+0x248>)
 8007932:	4622      	mov	r2, r4
 8007934:	4926      	ldr	r1, [pc, #152]	; (80079d0 <LoRaWAN_Init+0x24c>)
 8007936:	6809      	ldr	r1, [r1, #0]
 8007938:	4628      	mov	r0, r5
 800793a:	f00f f917 	bl	8016b6c <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 800793e:	4628      	mov	r0, r5
 8007940:	f00f f9cc 	bl	8016cdc <UTIL_TIMER_Start>
}
 8007944:	b007      	add	sp, #28
 8007946:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8007948:	f7fa fd20 	bl	800238c <Error_Handler>
 800794c:	e7c0      	b.n	80078d0 <LoRaWAN_Init+0x14c>
 800794e:	bf00      	nop
 8007950:	0801d0b4 	.word	0x0801d0b4
 8007954:	0801dd2c 	.word	0x0801dd2c
 8007958:	0801dd7c 	.word	0x0801dd7c
 800795c:	0801ddcc 	.word	0x0801ddcc
 8007960:	0801de1c 	.word	0x0801de1c
 8007964:	0801de6c 	.word	0x0801de6c
 8007968:	0801debc 	.word	0x0801debc
 800796c:	20000044 	.word	0x20000044
 8007970:	20001060 	.word	0x20001060
 8007974:	0801defc 	.word	0x0801defc
 8007978:	0801df20 	.word	0x0801df20
 800797c:	0801df44 	.word	0x0801df44
 8007980:	0801df68 	.word	0x0801df68
 8007984:	0801df8c 	.word	0x0801df8c
 8007988:	080047bd 	.word	0x080047bd
 800798c:	20000fe4 	.word	0x20000fe4
 8007990:	080047a9 	.word	0x080047a9
 8007994:	20000fb0 	.word	0x20000fb0
 8007998:	08005689 	.word	0x08005689
 800799c:	20000f00 	.word	0x20000f00
 80079a0:	080048b1 	.word	0x080048b1
 80079a4:	20000fcc 	.word	0x20000fcc
 80079a8:	0800cd89 	.word	0x0800cd89
 80079ac:	08007219 	.word	0x08007219
 80079b0:	08005651 	.word	0x08005651
 80079b4:	080055b5 	.word	0x080055b5
 80079b8:	01030000 	.word	0x01030000
 80079bc:	20000064 	.word	0x20000064
 80079c0:	200000b0 	.word	0x200000b0
 80079c4:	20000058 	.word	0x20000058
 80079c8:	20000ffc 	.word	0x20000ffc
 80079cc:	0800488d 	.word	0x0800488d
 80079d0:	200000c8 	.word	0x200000c8

080079d4 <HAL_GPIO_EXTI_Callback>:
{
 80079d4:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 80079d6:	2802      	cmp	r0, #2
 80079d8:	d002      	beq.n	80079e0 <HAL_GPIO_EXTI_Callback+0xc>
 80079da:	2840      	cmp	r0, #64	; 0x40
 80079dc:	d021      	beq.n	8007a22 <HAL_GPIO_EXTI_Callback+0x4e>
}
 80079de:	bd10      	pop	{r4, pc}
		  APP_LOG(TS_OFF, VLEVEL_M, "+============================================+\r\n");
 80079e0:	4c17      	ldr	r4, [pc, #92]	; (8007a40 <HAL_GPIO_EXTI_Callback+0x6c>)
 80079e2:	4623      	mov	r3, r4
 80079e4:	2200      	movs	r2, #0
 80079e6:	4611      	mov	r1, r2
 80079e8:	2002      	movs	r0, #2
 80079ea:	f00e fdcb 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		  APP_LOG(TS_OFF, VLEVEL_M, "|	    EXTI EVENT! EXTI EVENT! EXTI EVENT!   |\r\n");
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <HAL_GPIO_EXTI_Callback+0x70>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	4611      	mov	r1, r2
 80079f4:	2002      	movs	r0, #2
 80079f6:	f00e fdc5 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		  APP_LOG(TS_OFF, VLEVEL_M, "+============================================+\r\n");
 80079fa:	4623      	mov	r3, r4
 80079fc:	2200      	movs	r2, #0
 80079fe:	4611      	mov	r1, r2
 8007a00:	2002      	movs	r0, #2
 8007a02:	f00e fdbf 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 8007a06:	4c10      	ldr	r4, [pc, #64]	; (8007a48 <HAL_GPIO_EXTI_Callback+0x74>)
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a0e:	4620      	mov	r0, r4
 8007a10:	f001 fbd0 	bl	80091b4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8007a14:	2200      	movs	r2, #0
 8007a16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a1a:	4620      	mov	r0, r4
 8007a1c:	f001 fbca 	bl	80091b4 <HAL_GPIO_WritePin>
      break;
 8007a20:	e7dd      	b.n	80079de <HAL_GPIO_EXTI_Callback+0xa>
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8007a22:	4c09      	ldr	r4, [pc, #36]	; (8007a48 <HAL_GPIO_EXTI_Callback+0x74>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a2a:	4620      	mov	r0, r4
 8007a2c:	f001 fbc2 	bl	80091b4 <HAL_GPIO_WritePin>
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8007a30:	2201      	movs	r2, #1
 8007a32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a36:	4620      	mov	r0, r4
 8007a38:	f001 fbbc 	bl	80091b4 <HAL_GPIO_WritePin>
}
 8007a3c:	e7cf      	b.n	80079de <HAL_GPIO_EXTI_Callback+0xa>
 8007a3e:	bf00      	nop
 8007a40:	0801dfb0 	.word	0x0801dfb0
 8007a44:	0801dfe4 	.word	0x0801dfe4
 8007a48:	48000400 	.word	0x48000400

08007a4c <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8007a4c:	4b04      	ldr	r3, [pc, #16]	; (8007a60 <LoraInfo_Init+0x14>)
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8007a52:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8007a54:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8007a56:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN LoraInfo_Init_1 */

  /* USER CODE END LoraInfo_Init_1 */

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923);
 8007a58:	2201      	movs	r2, #1
 8007a5a:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8007a5c:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8007a5e:	4770      	bx	lr
 8007a60:	20001064 	.word	0x20001064

08007a64 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8007a64:	4800      	ldr	r0, [pc, #0]	; (8007a68 <LoraInfo_GetPtr+0x4>)
 8007a66:	4770      	bx	lr
 8007a68:	20001064 	.word	0x20001064

08007a6c <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8007a6c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8007a6e:	f000 f83f 	bl	8007af0 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8007a72:	bd08      	pop	{r3, pc}

08007a74 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8007a74:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8007a76:	f000 f87d 	bl	8007b74 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8007a7a:	bd08      	pop	{r3, pc}

08007a7c <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8007a7c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8007a7e:	f000 f8c7 	bl	8007c10 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8007a82:	bd08      	pop	{r3, pc}

08007a84 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8007a84:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8007a86:	f000 f8c5 	bl	8007c14 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8007a8a:	bd08      	pop	{r3, pc}

08007a8c <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8007a8c:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8007a8e:	f000 f8c3 	bl	8007c18 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8007a92:	bd08      	pop	{r3, pc}

08007a94 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8007a94:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8007a96:	f000 f8c1 	bl	8007c1c <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8007a9a:	bd08      	pop	{r3, pc}

08007a9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007a9c:	480d      	ldr	r0, [pc, #52]	; (8007ad4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8007a9e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007aa0:	f000 f8c1 	bl	8007c26 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007aa4:	480c      	ldr	r0, [pc, #48]	; (8007ad8 <LoopForever+0x6>)
  ldr r1, =_edata
 8007aa6:	490d      	ldr	r1, [pc, #52]	; (8007adc <LoopForever+0xa>)
  ldr r2, =_sidata
 8007aa8:	4a0d      	ldr	r2, [pc, #52]	; (8007ae0 <LoopForever+0xe>)
  movs r3, #0
 8007aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007aac:	e002      	b.n	8007ab4 <LoopCopyDataInit>

08007aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007ab2:	3304      	adds	r3, #4

08007ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007ab8:	d3f9      	bcc.n	8007aae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007aba:	4a0a      	ldr	r2, [pc, #40]	; (8007ae4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007abc:	4c0a      	ldr	r4, [pc, #40]	; (8007ae8 <LoopForever+0x16>)
  movs r3, #0
 8007abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007ac0:	e001      	b.n	8007ac6 <LoopFillZerobss>

08007ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007ac4:	3204      	adds	r2, #4

08007ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007ac8:	d3fb      	bcc.n	8007ac2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007aca:	f010 fc91 	bl	80183f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007ace:	f7fa fca7 	bl	8002420 <main>

08007ad2 <LoopForever>:

LoopForever:
    b LoopForever
 8007ad2:	e7fe      	b.n	8007ad2 <LoopForever>
  ldr   r0, =_estack
 8007ad4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8007ad8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007adc:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8007ae0:	0801efc8 	.word	0x0801efc8
  ldr r2, =_sbss
 8007ae4:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8007ae8:	200023a0 	.word	0x200023a0

08007aec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007aec:	e7fe      	b.n	8007aec <ADC_IRQHandler>
	...

08007af0 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8007af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af4:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8007af6:	2400      	movs	r4, #0
 8007af8:	9401      	str	r4, [sp, #4]
 8007afa:	9402      	str	r4, [sp, #8]
 8007afc:	9403      	str	r4, [sp, #12]
 8007afe:	9404      	str	r4, [sp, #16]
 8007b00:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b08:	f042 0204 	orr.w	r2, r2, #4
 8007b0c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b10:	f003 0304 	and.w	r3, r3, #4
 8007b14:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8007b16:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8007b18:	2710      	movs	r7, #16
 8007b1a:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b20:	2303      	movs	r3, #3
 8007b22:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8007b24:	4d12      	ldr	r5, [pc, #72]	; (8007b70 <BSP_RADIO_Init+0x80>)
 8007b26:	a901      	add	r1, sp, #4
 8007b28:	4628      	mov	r0, r5
 8007b2a:	f001 f9f3 	bl	8008f14 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8007b2e:	f04f 0820 	mov.w	r8, #32
 8007b32:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8007b36:	a901      	add	r1, sp, #4
 8007b38:	4628      	mov	r0, r5
 8007b3a:	f001 f9eb 	bl	8008f14 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8007b3e:	2608      	movs	r6, #8
 8007b40:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8007b42:	a901      	add	r1, sp, #4
 8007b44:	4628      	mov	r0, r5
 8007b46:	f001 f9e5 	bl	8008f14 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8007b4a:	4622      	mov	r2, r4
 8007b4c:	4641      	mov	r1, r8
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f001 fb30 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8007b54:	4622      	mov	r2, r4
 8007b56:	4639      	mov	r1, r7
 8007b58:	4628      	mov	r0, r5
 8007b5a:	f001 fb2b 	bl	80091b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8007b5e:	4622      	mov	r2, r4
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	f001 fb26 	bl	80091b4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8007b68:	4620      	mov	r0, r4
 8007b6a:	b006      	add	sp, #24
 8007b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b70:	48000800 	.word	0x48000800

08007b74 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8007b74:	b510      	push	{r4, lr}
  switch (Config)
 8007b76:	2803      	cmp	r0, #3
 8007b78:	d813      	bhi.n	8007ba2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8007b7a:	e8df f000 	tbb	[pc, r0]
 8007b7e:	1402      	.short	0x1402
 8007b80:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8007b82:	4c22      	ldr	r4, [pc, #136]	; (8007c0c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	2108      	movs	r1, #8
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f001 fb13 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2110      	movs	r1, #16
 8007b92:	4620      	mov	r0, r4
 8007b94:	f001 fb0e 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2120      	movs	r1, #32
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f001 fb09 	bl	80091b4 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8007ba6:	4c19      	ldr	r4, [pc, #100]	; (8007c0c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8007ba8:	2201      	movs	r2, #1
 8007baa:	2108      	movs	r1, #8
 8007bac:	4620      	mov	r0, r4
 8007bae:	f001 fb01 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	2110      	movs	r1, #16
 8007bb6:	4620      	mov	r0, r4
 8007bb8:	f001 fafc 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	2120      	movs	r1, #32
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	f001 faf7 	bl	80091b4 <HAL_GPIO_WritePin>
      break;
 8007bc6:	e7ec      	b.n	8007ba2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8007bc8:	4c10      	ldr	r4, [pc, #64]	; (8007c0c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	2108      	movs	r1, #8
 8007bce:	4620      	mov	r0, r4
 8007bd0:	f001 faf0 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8007bd4:	2201      	movs	r2, #1
 8007bd6:	2110      	movs	r1, #16
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f001 faeb 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8007bde:	2201      	movs	r2, #1
 8007be0:	2120      	movs	r1, #32
 8007be2:	4620      	mov	r0, r4
 8007be4:	f001 fae6 	bl	80091b4 <HAL_GPIO_WritePin>
      break;
 8007be8:	e7db      	b.n	8007ba2 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8007bea:	4c08      	ldr	r4, [pc, #32]	; (8007c0c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8007bec:	2201      	movs	r2, #1
 8007bee:	2108      	movs	r1, #8
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f001 fadf 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2110      	movs	r1, #16
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f001 fada 	bl	80091b4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8007c00:	2201      	movs	r2, #1
 8007c02:	2120      	movs	r1, #32
 8007c04:	4620      	mov	r0, r4
 8007c06:	f001 fad5 	bl	80091b4 <HAL_GPIO_WritePin>
      break;
 8007c0a:	e7ca      	b.n	8007ba2 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8007c0c:	48000800 	.word	0x48000800

08007c10 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8007c10:	2000      	movs	r0, #0
 8007c12:	4770      	bx	lr

08007c14 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8007c14:	2001      	movs	r0, #1
 8007c16:	4770      	bx	lr

08007c18 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8007c18:	2001      	movs	r0, #1
 8007c1a:	4770      	bx	lr

08007c1c <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8007c1c:	b908      	cbnz	r0, 8007c22 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8007c1e:	200f      	movs	r0, #15
 8007c20:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8007c22:	2016      	movs	r0, #22
  }

  return ret;
}
 8007c24:	4770      	bx	lr

08007c26 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8007c26:	4770      	bx	lr

08007c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c28:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c2a:	2003      	movs	r0, #3
 8007c2c:	f000 fd22 	bl	8008674 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007c30:	f002 f87a 	bl	8009d28 <HAL_RCC_GetHCLKFreq>
 8007c34:	4b06      	ldr	r3, [pc, #24]	; (8007c50 <HAL_Init+0x28>)
 8007c36:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c38:	200f      	movs	r0, #15
 8007c3a:	f7fa fe43 	bl	80028c4 <HAL_InitTick>
 8007c3e:	b110      	cbz	r0, 8007c46 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8007c40:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 8007c42:	4620      	mov	r0, r4
 8007c44:	bd10      	pop	{r4, pc}
 8007c46:	4604      	mov	r4, r0
    HAL_MspInit();
 8007c48:	f7fa fcf4 	bl	8002634 <HAL_MspInit>
 8007c4c:	e7f9      	b.n	8007c42 <HAL_Init+0x1a>
 8007c4e:	bf00      	nop
 8007c50:	200000d4 	.word	0x200000d4

08007c54 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8007c54:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007c58:	6913      	ldr	r3, [r2, #16]
 8007c5a:	f023 0302 	bic.w	r3, r3, #2
 8007c5e:	6113      	str	r3, [r2, #16]
}
 8007c60:	4770      	bx	lr

08007c62 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8007c62:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8007c66:	6913      	ldr	r3, [r2, #16]
 8007c68:	f043 0302 	orr.w	r3, r3, #2
 8007c6c:	6113      	str	r3, [r2, #16]
}
 8007c6e:	4770      	bx	lr

08007c70 <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 8007c70:	4b01      	ldr	r3, [pc, #4]	; (8007c78 <HAL_GetUIDw0+0x8>)
 8007c72:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8007c76:	4770      	bx	lr
 8007c78:	1fff7000 	.word	0x1fff7000

08007c7c <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8007c7c:	4b01      	ldr	r3, [pc, #4]	; (8007c84 <HAL_GetUIDw1+0x8>)
 8007c7e:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 8007c82:	4770      	bx	lr
 8007c84:	1fff7000 	.word	0x1fff7000

08007c88 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8007c88:	4b01      	ldr	r3, [pc, #4]	; (8007c90 <HAL_GetUIDw2+0x8>)
 8007c8a:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 8007c8e:	4770      	bx	lr
 8007c90:	1fff7000 	.word	0x1fff7000

08007c94 <HAL_DBGMCU_EnableDBGSleepMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007c94:	4a02      	ldr	r2, [pc, #8]	; (8007ca0 <HAL_DBGMCU_EnableDBGSleepMode+0xc>)
 8007c96:	6853      	ldr	r3, [r2, #4]
 8007c98:	f043 0301 	orr.w	r3, r3, #1
 8007c9c:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
  LL_DBGMCU_EnableDBGSleepMode();
}
 8007c9e:	4770      	bx	lr
 8007ca0:	e0042000 	.word	0xe0042000

08007ca4 <HAL_DBGMCU_EnableDBGStopMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007ca4:	4a02      	ldr	r2, [pc, #8]	; (8007cb0 <HAL_DBGMCU_EnableDBGStopMode+0xc>)
 8007ca6:	6853      	ldr	r3, [r2, #4]
 8007ca8:	f043 0302 	orr.w	r3, r3, #2
 8007cac:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
  LL_DBGMCU_EnableDBGStopMode();
}
 8007cae:	4770      	bx	lr
 8007cb0:	e0042000 	.word	0xe0042000

08007cb4 <HAL_DBGMCU_EnableDBGStandbyMode>:
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8007cb4:	4a02      	ldr	r2, [pc, #8]	; (8007cc0 <HAL_DBGMCU_EnableDBGStandbyMode+0xc>)
 8007cb6:	6853      	ldr	r3, [r2, #4]
 8007cb8:	f043 0304 	orr.w	r3, r3, #4
 8007cbc:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
  LL_DBGMCU_EnableDBGStandbyMode();
}
 8007cbe:	4770      	bx	lr
 8007cc0:	e0042000 	.word	0xe0042000

08007cc4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007cc4:	b530      	push	{r4, r5, lr}
 8007cc6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	f000 8106 	beq.w	8007ede <HAL_ADC_Init+0x21a>
 8007cd2:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007cd4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007cd6:	b1bb      	cbz	r3, 8007d08 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007cd8:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007cda:	6893      	ldr	r3, [r2, #8]
 8007cdc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007ce0:	d11f      	bne.n	8007d22 <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 8007ce2:	6893      	ldr	r3, [r2, #8]
 8007ce4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007ce8:	f023 0317 	bic.w	r3, r3, #23
 8007cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cf0:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007cf2:	4b7c      	ldr	r3, [pc, #496]	; (8007ee4 <HAL_ADC_Init+0x220>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	099b      	lsrs	r3, r3, #6
 8007cf8:	4a7b      	ldr	r2, [pc, #492]	; (8007ee8 <HAL_ADC_Init+0x224>)
 8007cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfe:	099b      	lsrs	r3, r3, #6
 8007d00:	3301      	adds	r3, #1
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007d06:	e009      	b.n	8007d1c <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 8007d08:	f7f9 ff84 	bl	8001c14 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8007d10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8007d14:	e7e0      	b.n	8007cd8 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8007d16:	9b01      	ldr	r3, [sp, #4]
 8007d18:	3b01      	subs	r3, #1
 8007d1a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007d1c:	9b01      	ldr	r3, [sp, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1f9      	bne.n	8007d16 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d22:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007d24:	6893      	ldr	r3, [r2, #8]
 8007d26:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8007d2a:	f040 809a 	bne.w	8007e62 <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d30:	f043 0310 	orr.w	r3, r3, #16
 8007d34:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d36:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007d38:	f043 0301 	orr.w	r3, r3, #1
 8007d3c:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007d3e:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007d40:	6893      	ldr	r3, [r2, #8]
 8007d42:	f013 0304 	ands.w	r3, r3, #4
 8007d46:	d000      	beq.n	8007d4a <HAL_ADC_Init+0x86>
 8007d48:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d4a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007d4c:	f011 0f10 	tst.w	r1, #16
 8007d50:	f040 80be 	bne.w	8007ed0 <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f040 80bb 	bne.w	8007ed0 <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007d5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007d5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007d60:	f043 0302 	orr.w	r3, r3, #2
 8007d64:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007d66:	6893      	ldr	r3, [r2, #8]
 8007d68:	f013 0f01 	tst.w	r3, #1
 8007d6c:	d14f      	bne.n	8007e0e <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8007d6e:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007d70:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8007d72:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007d76:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8007d78:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007d7c:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8007d7e:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007d82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007d84:	b109      	cbz	r1, 8007d8a <HAL_ADC_Init+0xc6>
 8007d86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8007d8a:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8007d8c:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8007d8e:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007d90:	6921      	ldr	r1, [r4, #16]
 8007d92:	2900      	cmp	r1, #0
 8007d94:	db67      	blt.n	8007e66 <HAL_ADC_Init+0x1a2>
 8007d96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8007d9a:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007d9c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007da0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007da4:	f894 1020 	ldrb.w	r1, [r4, #32]
 8007da8:	2901      	cmp	r1, #1
 8007daa:	d05f      	beq.n	8007e6c <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007dae:	b121      	cbz	r1, 8007dba <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007db0:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8007db4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8007db6:	4329      	orrs	r1, r5
 8007db8:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8007dba:	68d1      	ldr	r1, [r2, #12]
 8007dbc:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 8007dc0:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8007dc4:	4319      	orrs	r1, r3
 8007dc6:	60d1      	str	r1, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007dc8:	6863      	ldr	r3, [r4, #4]
 8007dca:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8007dce:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007dd0:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8007dd2:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8007dd6:	2901      	cmp	r1, #1
 8007dd8:	d055      	beq.n	8007e86 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8007dda:	6821      	ldr	r1, [r4, #0]
 8007ddc:	690d      	ldr	r5, [r1, #16]
 8007dde:	4b43      	ldr	r3, [pc, #268]	; (8007eec <HAL_ADC_Init+0x228>)
 8007de0:	402b      	ands	r3, r5
 8007de2:	4313      	orrs	r3, r2
 8007de4:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8007de6:	6863      	ldr	r3, [r4, #4]
 8007de8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007dec:	d00f      	beq.n	8007e0e <HAL_ADC_Init+0x14a>
 8007dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df2:	d00c      	beq.n	8007e0e <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8007df4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007df8:	d009      	beq.n	8007e0e <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8007dfa:	493d      	ldr	r1, [pc, #244]	; (8007ef0 <HAL_ADC_Init+0x22c>)
 8007dfc:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 8007e00:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 8007e04:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8007e0e:	6821      	ldr	r1, [r4, #0]
 8007e10:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 8007e12:	694a      	ldr	r2, [r1, #20]
 8007e14:	f022 0207 	bic.w	r2, r2, #7
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8007e1c:	6822      	ldr	r2, [r4, #0]
 8007e1e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e20:	6953      	ldr	r3, [r2, #20]
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007e2a:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8007e2c:	6923      	ldr	r3, [r4, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d133      	bne.n	8007e9a <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8007e32:	6822      	ldr	r2, [r4, #0]
 8007e34:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8007e36:	f063 030f 	orn	r3, r3, #15
 8007e3a:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007e3c:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8007e3e:	695b      	ldr	r3, [r3, #20]
 8007e40:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 8007e44:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d039      	beq.n	8007ebe <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8007e4a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e4c:	f023 0312 	bic.w	r3, r3, #18
 8007e50:	f043 0310 	orr.w	r3, r3, #16
 8007e54:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e56:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8007e5e:	2001      	movs	r0, #1
 8007e60:	e03b      	b.n	8007eda <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007e62:	2000      	movs	r0, #0
 8007e64:	e76c      	b.n	8007d40 <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8007e66:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007e6a:	e796      	b.n	8007d9a <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8007e6c:	b915      	cbnz	r5, 8007e74 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8007e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e72:	e79b      	b.n	8007dac <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007e74:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e76:	f041 0120 	orr.w	r1, r1, #32
 8007e7a:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007e7c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e7e:	f041 0101 	orr.w	r1, r1, #1
 8007e82:	65e1      	str	r1, [r4, #92]	; 0x5c
 8007e84:	e792      	b.n	8007dac <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8007e86:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8007e88:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8007e8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8007e8c:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 8007e8e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8007e90:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8007e92:	431a      	orrs	r2, r3
 8007e94:	f042 0201 	orr.w	r2, r2, #1
 8007e98:	e79f      	b.n	8007dda <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007e9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e9e:	d1cd      	bne.n	8007e3c <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 8007ea0:	6821      	ldr	r1, [r4, #0]
 8007ea2:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007ea4:	69e3      	ldr	r3, [r4, #28]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	009b      	lsls	r3, r3, #2
 8007eaa:	f003 031c 	and.w	r3, r3, #28
 8007eae:	f06f 020f 	mvn.w	r2, #15
 8007eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb6:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	628b      	str	r3, [r1, #40]	; 0x28
 8007ebc:	e7be      	b.n	8007e3c <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8007ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ec4:	f023 0303 	bic.w	r3, r3, #3
 8007ec8:	f043 0301 	orr.w	r3, r3, #1
 8007ecc:	65a3      	str	r3, [r4, #88]	; 0x58
 8007ece:	e004      	b.n	8007eda <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ed0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ed2:	f043 0310 	orr.w	r3, r3, #16
 8007ed6:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007ed8:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8007eda:	b003      	add	sp, #12
 8007edc:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007ede:	2001      	movs	r0, #1
 8007ee0:	e7fb      	b.n	8007eda <HAL_ADC_Init+0x216>
 8007ee2:	bf00      	nop
 8007ee4:	200000d4 	.word	0x200000d4
 8007ee8:	053e2d63 	.word	0x053e2d63
 8007eec:	1ffffc02 	.word	0x1ffffc02
 8007ef0:	40012000 	.word	0x40012000

08007ef4 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8007ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8007efa:	6946      	ldr	r6, [r0, #20]
 8007efc:	2e08      	cmp	r6, #8
 8007efe:	d005      	beq.n	8007f0c <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8007f00:	6803      	ldr	r3, [r0, #0]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f013 0f01 	tst.w	r3, #1
 8007f08:	d11e      	bne.n	8007f48 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8007f0a:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8007f0c:	f7fa fcdc 	bl	80028c8 <HAL_GetTick>
 8007f10:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8007f12:	6823      	ldr	r3, [r4, #0]
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	4232      	tst	r2, r6
 8007f18:	d11c      	bne.n	8007f54 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8007f1a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007f1e:	d0f8      	beq.n	8007f12 <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8007f20:	f7fa fcd2 	bl	80028c8 <HAL_GetTick>
 8007f24:	1bc3      	subs	r3, r0, r7
 8007f26:	42ab      	cmp	r3, r5
 8007f28:	d801      	bhi.n	8007f2e <HAL_ADC_PollForConversion+0x3a>
 8007f2a:	2d00      	cmp	r5, #0
 8007f2c:	d1f1      	bne.n	8007f12 <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4233      	tst	r3, r6
 8007f34:	d1ed      	bne.n	8007f12 <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f38:	f043 0304 	orr.w	r3, r3, #4
 8007f3c:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8007f3e:	2300      	movs	r3, #0
 8007f40:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 8007f44:	2003      	movs	r0, #3
 8007f46:	e028      	b.n	8007f9a <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f48:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8007f4a:	f043 0320 	orr.w	r3, r3, #32
 8007f4e:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 8007f50:	2001      	movs	r0, #1
 8007f52:	e022      	b.n	8007f9a <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f54:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8007f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f5a:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8007f62:	d115      	bne.n	8007f90 <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8007f64:	7ea2      	ldrb	r2, [r4, #26]
 8007f66:	b99a      	cbnz	r2, 8007f90 <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	f012 0f08 	tst.w	r2, #8
 8007f6e:	d00f      	beq.n	8007f90 <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	f012 0f04 	tst.w	r2, #4
 8007f76:	d111      	bne.n	8007f9c <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	f022 020c 	bic.w	r2, r2, #12
 8007f7e:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8007f80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f86:	f023 0301 	bic.w	r3, r3, #1
 8007f8a:	f043 0301 	orr.w	r3, r3, #1
 8007f8e:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8007f90:	7e20      	ldrb	r0, [r4, #24]
 8007f92:	b960      	cbnz	r0, 8007fae <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	220c      	movs	r2, #12
 8007f98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8007f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007f9e:	f043 0320 	orr.w	r3, r3, #32
 8007fa2:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007fa4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	65e3      	str	r3, [r4, #92]	; 0x5c
 8007fac:	e7f0      	b.n	8007f90 <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 8007fae:	2000      	movs	r0, #0
 8007fb0:	e7f3      	b.n	8007f9a <HAL_ADC_PollForConversion+0xa6>

08007fb2 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8007fb2:	6803      	ldr	r3, [r0, #0]
 8007fb4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8007fb8:	b470      	push	{r4, r5, r6}
 8007fba:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007fc0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8007fc2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 8007fc6:	2a01      	cmp	r2, #1
 8007fc8:	f000 8103 	beq.w	80081d2 <HAL_ADC_ConfigChannel+0x21a>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007fd4:	6802      	ldr	r2, [r0, #0]
 8007fd6:	6890      	ldr	r0, [r2, #8]
 8007fd8:	f010 0f04 	tst.w	r0, #4
 8007fdc:	d00a      	beq.n	8007ff4 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007fe0:	f042 0220 	orr.w	r2, r2, #32
 8007fe4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8007fe6:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8007fe8:	2200      	movs	r2, #0
 8007fea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 8007fee:	b003      	add	sp, #12
 8007ff0:	bc70      	pop	{r4, r5, r6}
 8007ff2:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8007ff4:	6848      	ldr	r0, [r1, #4]
 8007ff6:	2802      	cmp	r0, #2
 8007ff8:	f000 809c 	beq.w	8008134 <HAL_ADC_ConfigChannel+0x17c>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8007ffc:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8008000:	d027      	beq.n	8008052 <HAL_ADC_ConfigChannel+0x9a>
 8008002:	4d75      	ldr	r5, [pc, #468]	; (80081d8 <HAL_ADC_ConfigChannel+0x220>)
 8008004:	42ac      	cmp	r4, r5
 8008006:	d024      	beq.n	8008052 <HAL_ADC_ConfigChannel+0x9a>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8008008:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800800a:	f000 001f 	and.w	r0, r0, #31
 800800e:	250f      	movs	r5, #15
 8008010:	4085      	lsls	r5, r0
 8008012:	ea24 0505 	bic.w	r5, r4, r5
 8008016:	680c      	ldr	r4, [r1, #0]
 8008018:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800801c:	2e00      	cmp	r6, #0
 800801e:	d131      	bne.n	8008084 <HAL_ADC_ConfigChannel+0xcc>
 8008020:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8008024:	4084      	lsls	r4, r0
 8008026:	432c      	orrs	r4, r5
 8008028:	661c      	str	r4, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800802a:	684c      	ldr	r4, [r1, #4]
 800802c:	08a0      	lsrs	r0, r4, #2
 800802e:	3001      	adds	r0, #1
 8008030:	69dd      	ldr	r5, [r3, #28]
 8008032:	42a8      	cmp	r0, r5
 8008034:	d813      	bhi.n	800805e <HAL_ADC_ConfigChannel+0xa6>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8008036:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 8008038:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800803a:	f004 041f 	and.w	r4, r4, #31
 800803e:	260f      	movs	r6, #15
 8008040:	40a6      	lsls	r6, r4
 8008042:	ea20 0006 	bic.w	r0, r0, r6
 8008046:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800804a:	40a5      	lsls	r5, r4
 800804c:	4328      	orrs	r0, r5
 800804e:	6290      	str	r0, [r2, #40]	; 0x28
}
 8008050:	e005      	b.n	800805e <HAL_ADC_ConfigChannel+0xa6>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8008052:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008054:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8008056:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800805a:	4320      	orrs	r0, r4
 800805c:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800805e:	681c      	ldr	r4, [r3, #0]
 8008060:	680d      	ldr	r5, [r1, #0]
 8008062:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8008064:	6960      	ldr	r0, [r4, #20]
 8008066:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800806a:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 800806e:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8008072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008076:	4302      	orrs	r2, r0
 8008078:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800807a:	680a      	ldr	r2, [r1, #0]
 800807c:	2a00      	cmp	r2, #0
 800807e:	db09      	blt.n	8008094 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008080:	2000      	movs	r0, #0
 8008082:	e7b1      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008084:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8008088:	b114      	cbz	r4, 8008090 <HAL_ADC_ConfigChannel+0xd8>
  {
    return 32U;
  }
  return __builtin_clz(value);
 800808a:	fab4 f484 	clz	r4, r4
 800808e:	e7c9      	b.n	8008024 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 8008090:	2420      	movs	r4, #32
 8008092:	e7c7      	b.n	8008024 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008094:	4951      	ldr	r1, [pc, #324]	; (80081dc <HAL_ADC_ConfigChannel+0x224>)
 8008096:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 800809a:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800809e:	4c50      	ldr	r4, [pc, #320]	; (80081e0 <HAL_ADC_ConfigChannel+0x228>)
 80080a0:	42a2      	cmp	r2, r4
 80080a2:	d007      	beq.n	80080b4 <HAL_ADC_ConfigChannel+0xfc>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80080a4:	4c4f      	ldr	r4, [pc, #316]	; (80081e4 <HAL_ADC_ConfigChannel+0x22c>)
 80080a6:	42a2      	cmp	r2, r4
 80080a8:	d026      	beq.n	80080f8 <HAL_ADC_ConfigChannel+0x140>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80080aa:	4c4f      	ldr	r4, [pc, #316]	; (80081e8 <HAL_ADC_ConfigChannel+0x230>)
 80080ac:	42a2      	cmp	r2, r4
 80080ae:	d032      	beq.n	8008116 <HAL_ADC_ConfigChannel+0x15e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080b0:	2000      	movs	r0, #0
 80080b2:	e799      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80080b4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80080b8:	d1f4      	bne.n	80080a4 <HAL_ADC_ConfigChannel+0xec>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80080ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80080be:	4847      	ldr	r0, [pc, #284]	; (80081dc <HAL_ADC_ConfigChannel+0x224>)
 80080c0:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80080c4:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80080c8:	4311      	orrs	r1, r2
 80080ca:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80080ce:	4a47      	ldr	r2, [pc, #284]	; (80081ec <HAL_ADC_ConfigChannel+0x234>)
 80080d0:	6812      	ldr	r2, [r2, #0]
 80080d2:	0992      	lsrs	r2, r2, #6
 80080d4:	4946      	ldr	r1, [pc, #280]	; (80081f0 <HAL_ADC_ConfigChannel+0x238>)
 80080d6:	fba1 1202 	umull	r1, r2, r1, r2
 80080da:	0992      	lsrs	r2, r2, #6
 80080dc:	3201      	adds	r2, #1
 80080de:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80080e2:	0092      	lsls	r2, r2, #2
 80080e4:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80080e6:	e002      	b.n	80080ee <HAL_ADC_ConfigChannel+0x136>
            wait_loop_index--;
 80080e8:	9a01      	ldr	r2, [sp, #4]
 80080ea:	3a01      	subs	r2, #1
 80080ec:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 80080ee:	9a01      	ldr	r2, [sp, #4]
 80080f0:	2a00      	cmp	r2, #0
 80080f2:	d1f9      	bne.n	80080e8 <HAL_ADC_ConfigChannel+0x130>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080f4:	2000      	movs	r0, #0
 80080f6:	e777      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80080f8:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 80080fc:	d1d5      	bne.n	80080aa <HAL_ADC_ConfigChannel+0xf2>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80080fe:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8008102:	4836      	ldr	r0, [pc, #216]	; (80081dc <HAL_ADC_ConfigChannel+0x224>)
 8008104:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8008108:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800810c:	4311      	orrs	r1, r2
 800810e:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008112:	2000      	movs	r0, #0
}
 8008114:	e768      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8008116:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800811a:	d158      	bne.n	80081ce <HAL_ADC_ConfigChannel+0x216>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800811c:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008120:	482e      	ldr	r0, [pc, #184]	; (80081dc <HAL_ADC_ConfigChannel+0x224>)
 8008122:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 8008126:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800812a:	430a      	orrs	r2, r1
 800812c:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008130:	2000      	movs	r0, #0
}
 8008132:	e759      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8008134:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8008138:	d002      	beq.n	8008140 <HAL_ADC_ConfigChannel+0x188>
 800813a:	4827      	ldr	r0, [pc, #156]	; (80081d8 <HAL_ADC_ConfigChannel+0x220>)
 800813c:	4284      	cmp	r4, r0
 800813e:	d106      	bne.n	800814e <HAL_ADC_ConfigChannel+0x196>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8008140:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8008142:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8008144:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8008148:	ea20 0004 	bic.w	r0, r0, r4
 800814c:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800814e:	680a      	ldr	r2, [r1, #0]
 8008150:	2a00      	cmp	r2, #0
 8008152:	db01      	blt.n	8008158 <HAL_ADC_ConfigChannel+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008154:	2000      	movs	r0, #0
 8008156:	e747      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008158:	4920      	ldr	r1, [pc, #128]	; (80081dc <HAL_ADC_ConfigChannel+0x224>)
 800815a:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800815e:	4820      	ldr	r0, [pc, #128]	; (80081e0 <HAL_ADC_ConfigChannel+0x228>)
 8008160:	4282      	cmp	r2, r0
 8008162:	d007      	beq.n	8008174 <HAL_ADC_ConfigChannel+0x1bc>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8008164:	481f      	ldr	r0, [pc, #124]	; (80081e4 <HAL_ADC_ConfigChannel+0x22c>)
 8008166:	4282      	cmp	r2, r0
 8008168:	d013      	beq.n	8008192 <HAL_ADC_ConfigChannel+0x1da>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800816a:	481f      	ldr	r0, [pc, #124]	; (80081e8 <HAL_ADC_ConfigChannel+0x230>)
 800816c:	4282      	cmp	r2, r0
 800816e:	d01f      	beq.n	80081b0 <HAL_ADC_ConfigChannel+0x1f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008170:	2000      	movs	r0, #0
 8008172:	e739      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008174:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008178:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 800817c:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 8008180:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 8008184:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8008188:	4311      	orrs	r1, r2
 800818a:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800818e:	2000      	movs	r0, #0
}
 8008190:	e72a      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008192:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008196:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 800819a:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 800819e:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80081a2:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80081a6:	430a      	orrs	r2, r1
 80081a8:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081ac:	2000      	movs	r0, #0
}
 80081ae:	e71b      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80081b0:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80081b4:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80081b8:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80081bc:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80081c0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80081c4:	430a      	orrs	r2, r1
 80081c6:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80081ca:	2000      	movs	r0, #0
}
 80081cc:	e70c      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
 80081ce:	2000      	movs	r0, #0
 80081d0:	e70a      	b.n	8007fe8 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80081d2:	2002      	movs	r0, #2
 80081d4:	e70b      	b.n	8007fee <HAL_ADC_ConfigChannel+0x36>
 80081d6:	bf00      	nop
 80081d8:	80000004 	.word	0x80000004
 80081dc:	40012000 	.word	0x40012000
 80081e0:	b0001000 	.word	0xb0001000
 80081e4:	b8004000 	.word	0xb8004000
 80081e8:	b4002000 	.word	0xb4002000
 80081ec:	200000d4 	.word	0x200000d4
 80081f0:	053e2d63 	.word	0x053e2d63

080081f4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 80081f4:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80081f6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80081f8:	689a      	ldr	r2, [r3, #8]
 80081fa:	f012 0f04 	tst.w	r2, #4
 80081fe:	d02a      	beq.n	8008256 <ADC_ConversionStop+0x62>
 8008200:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008202:	689a      	ldr	r2, [r3, #8]
 8008204:	f012 0f02 	tst.w	r2, #2
 8008208:	d107      	bne.n	800821a <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800820a:	689a      	ldr	r2, [r3, #8]
 800820c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8008210:	f022 0217 	bic.w	r2, r2, #23
 8008214:	f042 0210 	orr.w	r2, r2, #16
 8008218:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800821a:	f7fa fb55 	bl	80028c8 <HAL_GetTick>
 800821e:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f013 0f04 	tst.w	r3, #4
 8008228:	d013      	beq.n	8008252 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800822a:	f7fa fb4d 	bl	80028c8 <HAL_GetTick>
 800822e:	1b43      	subs	r3, r0, r5
 8008230:	2b02      	cmp	r3, #2
 8008232:	d9f5      	bls.n	8008220 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f013 0f04 	tst.w	r3, #4
 800823c:	d0f0      	beq.n	8008220 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800823e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008240:	f043 0310 	orr.w	r3, r3, #16
 8008244:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008246:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008248:	f043 0301 	orr.w	r3, r3, #1
 800824c:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 800824e:	2001      	movs	r0, #1
 8008250:	e002      	b.n	8008258 <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8008252:	2000      	movs	r0, #0
 8008254:	e000      	b.n	8008258 <ADC_ConversionStop+0x64>
 8008256:	2000      	movs	r0, #0
}
 8008258:	bd38      	pop	{r3, r4, r5, pc}
	...

0800825c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800825c:	b530      	push	{r4, r5, lr}
 800825e:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8008260:	2300      	movs	r3, #0
 8008262:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008264:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	f012 0f01 	tst.w	r2, #1
 800826c:	d15b      	bne.n	8008326 <ADC_Enable+0xca>
 800826e:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8008270:	6899      	ldr	r1, [r3, #8]
 8008272:	4a2e      	ldr	r2, [pc, #184]	; (800832c <ADC_Enable+0xd0>)
 8008274:	4211      	tst	r1, r2
 8008276:	d117      	bne.n	80082a8 <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 8008278:	689a      	ldr	r2, [r3, #8]
 800827a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800827e:	f022 0217 	bic.w	r2, r2, #23
 8008282:	f042 0201 	orr.w	r2, r2, #1
 8008286:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008288:	4b29      	ldr	r3, [pc, #164]	; (8008330 <ADC_Enable+0xd4>)
 800828a:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 800828e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8008292:	d019      	beq.n	80082c8 <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008294:	4b27      	ldr	r3, [pc, #156]	; (8008334 <ADC_Enable+0xd8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	099b      	lsrs	r3, r3, #6
 800829a:	4a27      	ldr	r2, [pc, #156]	; (8008338 <ADC_Enable+0xdc>)
 800829c:	fba2 2303 	umull	r2, r3, r2, r3
 80082a0:	099b      	lsrs	r3, r3, #6
 80082a2:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80082a4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80082a6:	e00c      	b.n	80082c2 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082a8:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80082aa:	f043 0310 	orr.w	r3, r3, #16
 80082ae:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082b0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80082b2:	f043 0301 	orr.w	r3, r3, #1
 80082b6:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80082b8:	2001      	movs	r0, #1
 80082ba:	e035      	b.n	8008328 <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80082bc:	9b01      	ldr	r3, [sp, #4]
 80082be:	3b01      	subs	r3, #1
 80082c0:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80082c2:	9b01      	ldr	r3, [sp, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f9      	bne.n	80082bc <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80082c8:	7e63      	ldrb	r3, [r4, #25]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d101      	bne.n	80082d2 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80082ce:	2000      	movs	r0, #0
 80082d0:	e02a      	b.n	8008328 <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80082d2:	f7fa faf9 	bl	80028c8 <HAL_GetTick>
 80082d6:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80082d8:	6823      	ldr	r3, [r4, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	f012 0f01 	tst.w	r2, #1
 80082e0:	d11f      	bne.n	8008322 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80082e2:	689a      	ldr	r2, [r3, #8]
 80082e4:	f012 0f01 	tst.w	r2, #1
 80082e8:	d107      	bne.n	80082fa <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 80082ea:	689a      	ldr	r2, [r3, #8]
 80082ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80082f0:	f022 0217 	bic.w	r2, r2, #23
 80082f4:	f042 0201 	orr.w	r2, r2, #1
 80082f8:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80082fa:	f7fa fae5 	bl	80028c8 <HAL_GetTick>
 80082fe:	1b40      	subs	r0, r0, r5
 8008300:	2802      	cmp	r0, #2
 8008302:	d9e9      	bls.n	80082d8 <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f013 0f01 	tst.w	r3, #1
 800830c:	d1e4      	bne.n	80082d8 <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800830e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008310:	f043 0310 	orr.w	r3, r3, #16
 8008314:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008316:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 800831e:	2001      	movs	r0, #1
 8008320:	e002      	b.n	8008328 <ADC_Enable+0xcc>
  return HAL_OK;
 8008322:	2000      	movs	r0, #0
 8008324:	e000      	b.n	8008328 <ADC_Enable+0xcc>
 8008326:	2000      	movs	r0, #0
}
 8008328:	b003      	add	sp, #12
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	80000017 	.word	0x80000017
 8008330:	40012000 	.word	0x40012000
 8008334:	200000d4 	.word	0x200000d4
 8008338:	053e2d63 	.word	0x053e2d63

0800833c <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800833c:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	f013 0f04 	tst.w	r3, #4
 8008344:	d128      	bne.n	8008398 <HAL_ADC_Start+0x5c>
{
 8008346:	b510      	push	{r4, lr}
 8008348:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800834a:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800834e:	2b01      	cmp	r3, #1
 8008350:	d024      	beq.n	800839c <HAL_ADC_Start+0x60>
 8008352:	2301      	movs	r3, #1
 8008354:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 8008358:	f7ff ff80 	bl	800825c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 800835c:	b9c0      	cbnz	r0, 8008390 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 800835e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008360:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008364:	f023 0301 	bic.w	r3, r3, #1
 8008368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800836c:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 800836e:	2300      	movs	r3, #0
 8008370:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	211c      	movs	r1, #28
 8008376:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8008378:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 800837c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800837e:	6893      	ldr	r3, [r2, #8]
 8008380:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008384:	f023 0317 	bic.w	r3, r3, #23
 8008388:	f043 0304 	orr.w	r3, r3, #4
 800838c:	6093      	str	r3, [r2, #8]
}
 800838e:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 8008390:	2300      	movs	r3, #0
 8008392:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8008396:	e7fa      	b.n	800838e <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 8008398:	2002      	movs	r0, #2
}
 800839a:	4770      	bx	lr
    __HAL_LOCK(hadc);
 800839c:	2002      	movs	r0, #2
 800839e:	e7f6      	b.n	800838e <HAL_ADC_Start+0x52>

080083a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80083a4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80083a6:	6893      	ldr	r3, [r2, #8]
 80083a8:	f013 0302 	ands.w	r3, r3, #2
 80083ac:	d000      	beq.n	80083b0 <ADC_Disable+0x10>
 80083ae:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80083b0:	6891      	ldr	r1, [r2, #8]
 80083b2:	f011 0f01 	tst.w	r1, #1
 80083b6:	d039      	beq.n	800842c <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d139      	bne.n	8008430 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80083bc:	6893      	ldr	r3, [r2, #8]
 80083be:	f003 0305 	and.w	r3, r3, #5
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d009      	beq.n	80083da <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80083c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083c8:	f043 0310 	orr.w	r3, r3, #16
 80083cc:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80083ce:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80083d0:	f043 0301 	orr.w	r3, r3, #1
 80083d4:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80083d6:	2001      	movs	r0, #1
 80083d8:	e029      	b.n	800842e <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80083da:	6893      	ldr	r3, [r2, #8]
 80083dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80083e0:	f023 0317 	bic.w	r3, r3, #23
 80083e4:	f043 0302 	orr.w	r3, r3, #2
 80083e8:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80083ea:	6823      	ldr	r3, [r4, #0]
 80083ec:	2203      	movs	r2, #3
 80083ee:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80083f0:	f7fa fa6a 	bl	80028c8 <HAL_GetTick>
 80083f4:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	f013 0f01 	tst.w	r3, #1
 80083fe:	d013      	beq.n	8008428 <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008400:	f7fa fa62 	bl	80028c8 <HAL_GetTick>
 8008404:	1b40      	subs	r0, r0, r5
 8008406:	2802      	cmp	r0, #2
 8008408:	d9f5      	bls.n	80083f6 <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	f013 0f01 	tst.w	r3, #1
 8008412:	d0f0      	beq.n	80083f6 <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008414:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008416:	f043 0310 	orr.w	r3, r3, #16
 800841a:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800841c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800841e:	f043 0301 	orr.w	r3, r3, #1
 8008422:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8008424:	2001      	movs	r0, #1
 8008426:	e002      	b.n	800842e <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008428:	2000      	movs	r0, #0
 800842a:	e000      	b.n	800842e <ADC_Disable+0x8e>
 800842c:	2000      	movs	r0, #0
}
 800842e:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8008430:	2000      	movs	r0, #0
 8008432:	e7fc      	b.n	800842e <ADC_Disable+0x8e>

08008434 <HAL_ADC_DeInit>:
{
 8008434:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 8008436:	2800      	cmp	r0, #0
 8008438:	d056      	beq.n	80084e8 <HAL_ADC_DeInit+0xb4>
 800843a:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800843c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800843e:	f043 0302 	orr.w	r3, r3, #2
 8008442:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8008444:	f7ff fed6 	bl	80081f4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8008448:	4606      	mov	r6, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d03d      	beq.n	80084ca <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 800844e:	6822      	ldr	r2, [r4, #0]
 8008450:	6853      	ldr	r3, [r2, #4]
 8008452:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 8008456:	f023 0303 	bic.w	r3, r3, #3
 800845a:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	f240 329f 	movw	r2, #927	; 0x39f
 8008462:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	68d1      	ldr	r1, [r2, #12]
 8008468:	4b20      	ldr	r3, [pc, #128]	; (80084ec <HAL_ADC_DeInit+0xb8>)
 800846a:	400b      	ands	r3, r1
 800846c:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	6913      	ldr	r3, [r2, #16]
 8008472:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008476:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 8008478:	6822      	ldr	r2, [r4, #0]
 800847a:	6953      	ldr	r3, [r2, #20]
 800847c:	f023 0307 	bic.w	r3, r3, #7
 8008480:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	6a13      	ldr	r3, [r2, #32]
 8008486:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800848a:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 800848c:	6822      	ldr	r2, [r4, #0]
 800848e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8008490:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 8008494:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 8008496:	6822      	ldr	r2, [r4, #0]
 8008498:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800849a:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 800849e:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084a4:	2500      	movs	r5, #0
 80084a6:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80084a8:	4a11      	ldr	r2, [pc, #68]	; (80084f0 <HAL_ADC_DeInit+0xbc>)
 80084aa:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80084ae:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80084b2:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7f9 fbc2 	bl	8001c40 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80084bc:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80084be:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80084c0:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80084c2:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80084c6:	4630      	mov	r0, r6
 80084c8:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80084ca:	4620      	mov	r0, r4
 80084cc:	f7ff ff68 	bl	80083a0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80084d0:	4606      	mov	r6, r0
 80084d2:	b908      	cbnz	r0, 80084d8 <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80084d4:	2301      	movs	r3, #1
 80084d6:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80084d8:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80084da:	6893      	ldr	r3, [r2, #8]
 80084dc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80084e0:	f023 0317 	bic.w	r3, r3, #23
 80084e4:	6093      	str	r3, [r2, #8]
}
 80084e6:	e7b2      	b.n	800844e <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 80084e8:	2601      	movs	r6, #1
 80084ea:	e7ec      	b.n	80084c6 <HAL_ADC_DeInit+0x92>
 80084ec:	833e0200 	.word	0x833e0200
 80084f0:	40012000 	.word	0x40012000

080084f4 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80084f4:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d019      	beq.n	8008530 <HAL_ADC_Stop+0x3c>
{
 80084fc:	b510      	push	{r4, lr}
 80084fe:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8008500:	2301      	movs	r3, #1
 8008502:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8008506:	f7ff fe75 	bl	80081f4 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800850a:	b118      	cbz	r0, 8008514 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 800850c:	2300      	movs	r3, #0
 800850e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8008512:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8008514:	4620      	mov	r0, r4
 8008516:	f7ff ff43 	bl	80083a0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800851a:	2800      	cmp	r0, #0
 800851c:	d1f6      	bne.n	800850c <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 800851e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008524:	f023 0301 	bic.w	r3, r3, #1
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	65a3      	str	r3, [r4, #88]	; 0x58
 800852e:	e7ed      	b.n	800850c <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8008530:	2002      	movs	r0, #2
}
 8008532:	4770      	bx	lr

08008534 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8008534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008536:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008538:	2300      	movs	r3, #0
 800853a:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800853c:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8008540:	2b01      	cmp	r3, #1
 8008542:	f000 8094 	beq.w	800866e <HAL_ADCEx_Calibration_Start+0x13a>
 8008546:	4604      	mov	r4, r0
 8008548:	2301      	movs	r3, #1
 800854a:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800854e:	f7ff ff27 	bl	80083a0 <ADC_Disable>
 8008552:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008554:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	f012 0201 	ands.w	r2, r2, #1
 800855c:	d009      	beq.n	8008572 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800855e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008560:	f043 0310 	orr.w	r3, r3, #16
 8008564:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8008566:	2300      	movs	r3, #0
 8008568:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 800856c:	4628      	mov	r0, r5
 800856e:	b003      	add	sp, #12
 8008570:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8008572:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008574:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8008578:	f041 0102 	orr.w	r1, r1, #2
 800857c:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800857e:	68de      	ldr	r6, [r3, #12]
 8008580:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8008584:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8008588:	0436      	lsls	r6, r6, #16
 800858a:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 800858c:	68d9      	ldr	r1, [r3, #12]
 800858e:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8008592:	f021 0103 	bic.w	r1, r1, #3
 8008596:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8008598:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 800859a:	e005      	b.n	80085a8 <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800859c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 80085a4:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80085a6:	3201      	adds	r2, #1
 80085a8:	2a07      	cmp	r2, #7
 80085aa:	d81e      	bhi.n	80085ea <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 80085ac:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80085ae:	688b      	ldr	r3, [r1, #8]
 80085b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085b4:	f023 0317 	bic.w	r3, r3, #23
 80085b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80085bc:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80085be:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80085c0:	6899      	ldr	r1, [r3, #8]
 80085c2:	2900      	cmp	r1, #0
 80085c4:	daea      	bge.n	800859c <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	3301      	adds	r3, #1
 80085ca:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80085cc:	9b01      	ldr	r3, [sp, #4]
 80085ce:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 80085d2:	d3f4      	bcc.n	80085be <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 80085d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80085d6:	f023 0312 	bic.w	r3, r3, #18
 80085da:	f043 0310 	orr.w	r3, r3, #16
 80085de:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 80085e0:	2300      	movs	r3, #0
 80085e2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 80085e6:	2501      	movs	r5, #1
 80085e8:	e7c0      	b.n	800856c <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 80085ea:	fbb0 f0f2 	udiv	r0, r0, r2
    LL_ADC_Enable(hadc->Instance);
 80085ee:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80085f0:	6893      	ldr	r3, [r2, #8]
 80085f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085f6:	f023 0317 	bic.w	r3, r3, #23
 80085fa:	f043 0301 	orr.w	r3, r3, #1
 80085fe:	6093      	str	r3, [r2, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8008600:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8008602:	f8d2 30b4 	ldr.w	r3, [r2, #180]	; 0xb4
 8008606:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800860a:	4318      	orrs	r0, r3
 800860c:	f8c2 00b4 	str.w	r0, [r2, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8008610:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8008612:	6893      	ldr	r3, [r2, #8]
 8008614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008618:	f023 0317 	bic.w	r3, r3, #23
 800861c:	f043 0302 	orr.w	r3, r3, #2
 8008620:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8008622:	f7fa f951 	bl	80028c8 <HAL_GetTick>
 8008626:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008628:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	f012 0f01 	tst.w	r2, #1
 8008630:	d109      	bne.n	8008646 <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8008632:	68da      	ldr	r2, [r3, #12]
 8008634:	4332      	orrs	r2, r6
 8008636:	60da      	str	r2, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8008638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800863a:	f023 0303 	bic.w	r3, r3, #3
 800863e:	f043 0301 	orr.w	r3, r3, #1
 8008642:	65a3      	str	r3, [r4, #88]	; 0x58
 8008644:	e78f      	b.n	8008566 <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8008646:	f7fa f93f 	bl	80028c8 <HAL_GetTick>
 800864a:	1bc3      	subs	r3, r0, r7
 800864c:	2b02      	cmp	r3, #2
 800864e:	d9eb      	bls.n	8008628 <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f013 0f01 	tst.w	r3, #1
 8008658:	d0e6      	beq.n	8008628 <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800865a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800865c:	f043 0310 	orr.w	r3, r3, #16
 8008660:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008662:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008664:	f043 0301 	orr.w	r3, r3, #1
 8008668:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 800866a:	2501      	movs	r5, #1
 800866c:	e77e      	b.n	800856c <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 800866e:	2502      	movs	r5, #2
 8008670:	e77c      	b.n	800856c <HAL_ADCEx_Calibration_Start+0x38>
	...

08008674 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008674:	4a07      	ldr	r2, [pc, #28]	; (8008694 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008676:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008678:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800867c:	041b      	lsls	r3, r3, #16
 800867e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008680:	0200      	lsls	r0, r0, #8
 8008682:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008686:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8008688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800868c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8008690:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8008692:	4770      	bx	lr
 8008694:	e000ed00 	.word	0xe000ed00

08008698 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008698:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800869a:	4b19      	ldr	r3, [pc, #100]	; (8008700 <HAL_NVIC_SetPriority+0x68>)
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80086a2:	f1c3 0c07 	rsb	ip, r3, #7
 80086a6:	f1bc 0f04 	cmp.w	ip, #4
 80086aa:	bf28      	it	cs
 80086ac:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086b0:	f103 0e04 	add.w	lr, r3, #4
 80086b4:	f1be 0f06 	cmp.w	lr, #6
 80086b8:	d918      	bls.n	80086ec <HAL_NVIC_SetPriority+0x54>
 80086ba:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086bc:	f04f 3eff 	mov.w	lr, #4294967295
 80086c0:	fa0e fc0c 	lsl.w	ip, lr, ip
 80086c4:	ea21 010c 	bic.w	r1, r1, ip
 80086c8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086ca:	fa0e fe03 	lsl.w	lr, lr, r3
 80086ce:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086d2:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80086d4:	2800      	cmp	r0, #0
 80086d6:	db0b      	blt.n	80086f0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086d8:	0112      	lsls	r2, r2, #4
 80086da:	b2d2      	uxtb	r2, r2
 80086dc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80086e0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80086e4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80086e8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80086ec:	2300      	movs	r3, #0
 80086ee:	e7e5      	b.n	80086bc <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086f0:	f000 000f 	and.w	r0, r0, #15
 80086f4:	0112      	lsls	r2, r2, #4
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	4b02      	ldr	r3, [pc, #8]	; (8008704 <HAL_NVIC_SetPriority+0x6c>)
 80086fa:	541a      	strb	r2, [r3, r0]
 80086fc:	e7f4      	b.n	80086e8 <HAL_NVIC_SetPriority+0x50>
 80086fe:	bf00      	nop
 8008700:	e000ed00 	.word	0xe000ed00
 8008704:	e000ed14 	.word	0xe000ed14

08008708 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008708:	2800      	cmp	r0, #0
 800870a:	db07      	blt.n	800871c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800870c:	f000 021f 	and.w	r2, r0, #31
 8008710:	0940      	lsrs	r0, r0, #5
 8008712:	2301      	movs	r3, #1
 8008714:	4093      	lsls	r3, r2
 8008716:	4a02      	ldr	r2, [pc, #8]	; (8008720 <HAL_NVIC_EnableIRQ+0x18>)
 8008718:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	e000e100 	.word	0xe000e100

08008724 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8008724:	2800      	cmp	r0, #0
 8008726:	db0c      	blt.n	8008742 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008728:	f000 021f 	and.w	r2, r0, #31
 800872c:	0940      	lsrs	r0, r0, #5
 800872e:	2301      	movs	r3, #1
 8008730:	4093      	lsls	r3, r2
 8008732:	3020      	adds	r0, #32
 8008734:	4a03      	ldr	r2, [pc, #12]	; (8008744 <HAL_NVIC_DisableIRQ+0x20>)
 8008736:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800873a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800873e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8008742:	4770      	bx	lr
 8008744:	e000e100 	.word	0xe000e100

08008748 <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8008748:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800874c:	4905      	ldr	r1, [pc, #20]	; (8008764 <HAL_NVIC_SystemReset+0x1c>)
 800874e:	68ca      	ldr	r2, [r1, #12]
 8008750:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8008754:	4b04      	ldr	r3, [pc, #16]	; (8008768 <HAL_NVIC_SystemReset+0x20>)
 8008756:	4313      	orrs	r3, r2
 8008758:	60cb      	str	r3, [r1, #12]
 800875a:	f3bf 8f4f 	dsb	sy
    __NOP();
 800875e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8008760:	e7fd      	b.n	800875e <HAL_NVIC_SystemReset+0x16>
 8008762:	bf00      	nop
 8008764:	e000ed00 	.word	0xe000ed00
 8008768:	05fa0004 	.word	0x05fa0004

0800876c <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800876c:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800876e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8008770:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8008774:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8008778:	6d44      	ldr	r4, [r0, #84]	; 0x54
 800877a:	b124      	cbz	r4, 8008786 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800877c:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800877e:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 8008782:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008786:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8008788:	f004 0c1c 	and.w	ip, r4, #28
 800878c:	2401      	movs	r4, #1
 800878e:	fa04 f40c 	lsl.w	r4, r4, ip
 8008792:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 8008796:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800879a:	6804      	ldr	r4, [r0, #0]
 800879c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800879e:	6883      	ldr	r3, [r0, #8]
 80087a0:	2b10      	cmp	r3, #16
 80087a2:	d005      	beq.n	80087b0 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80087a4:	6803      	ldr	r3, [r0, #0]
 80087a6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80087a8:	6803      	ldr	r3, [r0, #0]
 80087aa:	60da      	str	r2, [r3, #12]
  }
}
 80087ac:	bc10      	pop	{r4}
 80087ae:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80087b0:	6803      	ldr	r3, [r0, #0]
 80087b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80087b4:	6803      	ldr	r3, [r0, #0]
 80087b6:	60d9      	str	r1, [r3, #12]
 80087b8:	e7f8      	b.n	80087ac <DMA_SetConfig+0x40>
	...

080087bc <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80087bc:	6803      	ldr	r3, [r0, #0]
 80087be:	4a14      	ldr	r2, [pc, #80]	; (8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d816      	bhi.n	80087f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80087c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087c6:	f022 0203 	bic.w	r2, r2, #3
 80087ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80087ce:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80087d2:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	3b08      	subs	r3, #8
 80087d8:	4a0e      	ldr	r2, [pc, #56]	; (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80087da:	fba2 2303 	umull	r2, r3, r2, r3
 80087de:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087e0:	4a0d      	ldr	r2, [pc, #52]	; (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80087e2:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80087e4:	f003 031f 	and.w	r3, r3, #31
 80087e8:	2201      	movs	r2, #1
 80087ea:	fa02 f303 	lsl.w	r3, r2, r3
 80087ee:	6503      	str	r3, [r0, #80]	; 0x50
}
 80087f0:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80087f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80087f4:	f022 0103 	bic.w	r1, r2, #3
 80087f8:	4a08      	ldr	r2, [pc, #32]	; (800881c <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 80087fa:	440a      	add	r2, r1
 80087fc:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	3b08      	subs	r3, #8
 8008802:	4a04      	ldr	r2, [pc, #16]	; (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8008804:	fba2 2303 	umull	r2, r3, r2, r3
 8008808:	091b      	lsrs	r3, r3, #4
 800880a:	3307      	adds	r3, #7
 800880c:	e7e8      	b.n	80087e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800880e:	bf00      	nop
 8008810:	40020407 	.word	0x40020407
 8008814:	cccccccd 	.word	0xcccccccd
 8008818:	40020880 	.word	0x40020880
 800881c:	4002081c 	.word	0x4002081c

08008820 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008820:	6843      	ldr	r3, [r0, #4]
 8008822:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008826:	4a07      	ldr	r2, [pc, #28]	; (8008844 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8008828:	441a      	add	r2, r3
 800882a:	0092      	lsls	r2, r2, #2
 800882c:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800882e:	4a06      	ldr	r2, [pc, #24]	; (8008848 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 8008830:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008832:	3b01      	subs	r3, #1
 8008834:	f003 0303 	and.w	r3, r3, #3
 8008838:	2201      	movs	r2, #1
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	1000823f 	.word	0x1000823f
 8008848:	40020940 	.word	0x40020940

0800884c <HAL_DMA_Init>:
  if (hdma == NULL)
 800884c:	2800      	cmp	r0, #0
 800884e:	d060      	beq.n	8008912 <HAL_DMA_Init+0xc6>
{
 8008850:	b510      	push	{r4, lr}
 8008852:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008854:	6802      	ldr	r2, [r0, #0]
 8008856:	4b30      	ldr	r3, [pc, #192]	; (8008918 <HAL_DMA_Init+0xcc>)
 8008858:	429a      	cmp	r2, r3
 800885a:	d842      	bhi.n	80088e2 <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800885c:	4b2f      	ldr	r3, [pc, #188]	; (800891c <HAL_DMA_Init+0xd0>)
 800885e:	4413      	add	r3, r2
 8008860:	492f      	ldr	r1, [pc, #188]	; (8008920 <HAL_DMA_Init+0xd4>)
 8008862:	fba1 1303 	umull	r1, r3, r1, r3
 8008866:	091b      	lsrs	r3, r3, #4
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800886c:	4b2d      	ldr	r3, [pc, #180]	; (8008924 <HAL_DMA_Init+0xd8>)
 800886e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8008870:	2302      	movs	r3, #2
 8008872:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8008876:	6813      	ldr	r3, [r2, #0]
 8008878:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800887c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008880:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8008882:	6821      	ldr	r1, [r4, #0]
 8008884:	680a      	ldr	r2, [r1, #0]
 8008886:	68a3      	ldr	r3, [r4, #8]
 8008888:	68e0      	ldr	r0, [r4, #12]
 800888a:	4303      	orrs	r3, r0
 800888c:	6920      	ldr	r0, [r4, #16]
 800888e:	4303      	orrs	r3, r0
 8008890:	6960      	ldr	r0, [r4, #20]
 8008892:	4303      	orrs	r3, r0
 8008894:	69a0      	ldr	r0, [r4, #24]
 8008896:	4303      	orrs	r3, r0
 8008898:	69e0      	ldr	r0, [r4, #28]
 800889a:	4303      	orrs	r3, r0
 800889c:	6a20      	ldr	r0, [r4, #32]
 800889e:	4303      	orrs	r3, r0
 80088a0:	4313      	orrs	r3, r2
 80088a2:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80088a4:	4620      	mov	r0, r4
 80088a6:	f7ff ff89 	bl	80087bc <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80088aa:	68a3      	ldr	r3, [r4, #8]
 80088ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80088b0:	d022      	beq.n	80088f8 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80088b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ba:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80088be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80088c0:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80088c2:	6863      	ldr	r3, [r4, #4]
 80088c4:	3b01      	subs	r3, #1
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d919      	bls.n	80088fe <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80088ce:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80088d0:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088d2:	2000      	movs	r0, #0
 80088d4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80088dc:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80088e0:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80088e2:	4b11      	ldr	r3, [pc, #68]	; (8008928 <HAL_DMA_Init+0xdc>)
 80088e4:	4413      	add	r3, r2
 80088e6:	490e      	ldr	r1, [pc, #56]	; (8008920 <HAL_DMA_Init+0xd4>)
 80088e8:	fba1 1303 	umull	r1, r3, r1, r3
 80088ec:	091b      	lsrs	r3, r3, #4
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80088f2:	4b0e      	ldr	r3, [pc, #56]	; (800892c <HAL_DMA_Init+0xe0>)
 80088f4:	6403      	str	r3, [r0, #64]	; 0x40
 80088f6:	e7bb      	b.n	8008870 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80088f8:	2300      	movs	r3, #0
 80088fa:	6063      	str	r3, [r4, #4]
 80088fc:	e7d9      	b.n	80088b2 <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80088fe:	4620      	mov	r0, r4
 8008900:	f7ff ff8e 	bl	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008904:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800890a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800890c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800890e:	605a      	str	r2, [r3, #4]
 8008910:	e7df      	b.n	80088d2 <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 8008912:	2001      	movs	r0, #1
}
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	40020407 	.word	0x40020407
 800891c:	bffdfff8 	.word	0xbffdfff8
 8008920:	cccccccd 	.word	0xcccccccd
 8008924:	40020000 	.word	0x40020000
 8008928:	bffdfbf8 	.word	0xbffdfbf8
 800892c:	40020400 	.word	0x40020400

08008930 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8008930:	2800      	cmp	r0, #0
 8008932:	d04b      	beq.n	80089cc <HAL_DMA_DeInit+0x9c>
{
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8008938:	6802      	ldr	r2, [r0, #0]
 800893a:	6813      	ldr	r3, [r2, #0]
 800893c:	f023 0301 	bic.w	r3, r3, #1
 8008940:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008942:	6802      	ldr	r2, [r0, #0]
 8008944:	4b22      	ldr	r3, [pc, #136]	; (80089d0 <HAL_DMA_DeInit+0xa0>)
 8008946:	429a      	cmp	r2, r3
 8008948:	d82c      	bhi.n	80089a4 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800894a:	4b22      	ldr	r3, [pc, #136]	; (80089d4 <HAL_DMA_DeInit+0xa4>)
 800894c:	4413      	add	r3, r2
 800894e:	4922      	ldr	r1, [pc, #136]	; (80089d8 <HAL_DMA_DeInit+0xa8>)
 8008950:	fba1 1303 	umull	r1, r3, r1, r3
 8008954:	091b      	lsrs	r3, r3, #4
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800895a:	4b20      	ldr	r3, [pc, #128]	; (80089dc <HAL_DMA_DeInit+0xac>)
 800895c:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 800895e:	2500      	movs	r5, #0
 8008960:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008962:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008964:	f003 021c 	and.w	r2, r3, #28
 8008968:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800896a:	2301      	movs	r3, #1
 800896c:	4093      	lsls	r3, r2
 800896e:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff ff23 	bl	80087bc <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8008976:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008978:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800897a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800897c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800897e:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008980:	6863      	ldr	r3, [r4, #4]
 8008982:	3b01      	subs	r3, #1
 8008984:	2b03      	cmp	r3, #3
 8008986:	d918      	bls.n	80089ba <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8008988:	2000      	movs	r0, #0
 800898a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 800898c:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800898e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8008990:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8008992:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8008994:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8008996:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008998:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 800899a:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 800899e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80089a2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80089a4:	4b0e      	ldr	r3, [pc, #56]	; (80089e0 <HAL_DMA_DeInit+0xb0>)
 80089a6:	4413      	add	r3, r2
 80089a8:	490b      	ldr	r1, [pc, #44]	; (80089d8 <HAL_DMA_DeInit+0xa8>)
 80089aa:	fba1 1303 	umull	r1, r3, r1, r3
 80089ae:	091b      	lsrs	r3, r3, #4
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80089b4:	4b0b      	ldr	r3, [pc, #44]	; (80089e4 <HAL_DMA_DeInit+0xb4>)
 80089b6:	6403      	str	r3, [r0, #64]	; 0x40
 80089b8:	e7d1      	b.n	800895e <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80089ba:	4620      	mov	r0, r4
 80089bc:	f7ff ff30 	bl	8008820 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80089c0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80089c2:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089c6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80089c8:	605a      	str	r2, [r3, #4]
 80089ca:	e7dd      	b.n	8008988 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80089cc:	2001      	movs	r0, #1
}
 80089ce:	4770      	bx	lr
 80089d0:	40020407 	.word	0x40020407
 80089d4:	bffdfff8 	.word	0xbffdfff8
 80089d8:	cccccccd 	.word	0xcccccccd
 80089dc:	40020000 	.word	0x40020000
 80089e0:	bffdfbf8 	.word	0xbffdfbf8
 80089e4:	40020400 	.word	0x40020400

080089e8 <HAL_DMA_Start_IT>:
{
 80089e8:	b538      	push	{r3, r4, r5, lr}
 80089ea:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 80089ec:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 80089f0:	2801      	cmp	r0, #1
 80089f2:	d043      	beq.n	8008a7c <HAL_DMA_Start_IT+0x94>
 80089f4:	2001      	movs	r0, #1
 80089f6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 80089fa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 80089fe:	b2c0      	uxtb	r0, r0
 8008a00:	2801      	cmp	r0, #1
 8008a02:	d006      	beq.n	8008a12 <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8008a04:	2380      	movs	r3, #128	; 0x80
 8008a06:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8008a0e:	2001      	movs	r0, #1
}
 8008a10:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8008a12:	2002      	movs	r0, #2
 8008a14:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008a18:	2000      	movs	r0, #0
 8008a1a:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8008a1c:	6825      	ldr	r5, [r4, #0]
 8008a1e:	6828      	ldr	r0, [r5, #0]
 8008a20:	f020 0001 	bic.w	r0, r0, #1
 8008a24:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008a26:	4620      	mov	r0, r4
 8008a28:	f7ff fea0 	bl	800876c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8008a2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008a2e:	b1d3      	cbz	r3, 8008a66 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a30:	6822      	ldr	r2, [r4, #0]
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	f043 030e 	orr.w	r3, r3, #14
 8008a38:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008a3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8008a42:	d003      	beq.n	8008a4c <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008a44:	681a      	ldr	r2, [r3, #0]
 8008a46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a4a:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8008a4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a4e:	b11b      	cbz	r3, 8008a58 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008a50:	681a      	ldr	r2, [r3, #0]
 8008a52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a56:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8008a58:	6822      	ldr	r2, [r4, #0]
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	f043 0301 	orr.w	r3, r3, #1
 8008a60:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a62:	2000      	movs	r0, #0
 8008a64:	e7d4      	b.n	8008a10 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008a66:	6822      	ldr	r2, [r4, #0]
 8008a68:	6813      	ldr	r3, [r2, #0]
 8008a6a:	f023 0304 	bic.w	r3, r3, #4
 8008a6e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008a70:	6822      	ldr	r2, [r4, #0]
 8008a72:	6813      	ldr	r3, [r2, #0]
 8008a74:	f043 030a 	orr.w	r3, r3, #10
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e7de      	b.n	8008a3a <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8008a7c:	2002      	movs	r0, #2
 8008a7e:	e7c7      	b.n	8008a10 <HAL_DMA_Start_IT+0x28>

08008a80 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8008a80:	4603      	mov	r3, r0
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d034      	beq.n	8008af0 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008a86:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8008a8a:	b2d2      	uxtb	r2, r2
 8008a8c:	2a02      	cmp	r2, #2
 8008a8e:	d006      	beq.n	8008a9e <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008a90:	2204      	movs	r2, #4
 8008a92:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8008a94:	2200      	movs	r2, #0
 8008a96:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a9e:	6801      	ldr	r1, [r0, #0]
 8008aa0:	680a      	ldr	r2, [r1, #0]
 8008aa2:	f022 020e 	bic.w	r2, r2, #14
 8008aa6:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008aa8:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8008aaa:	680a      	ldr	r2, [r1, #0]
 8008aac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ab0:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8008ab2:	6801      	ldr	r1, [r0, #0]
 8008ab4:	680a      	ldr	r2, [r1, #0]
 8008ab6:	f022 0201 	bic.w	r2, r2, #1
 8008aba:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008abc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008abe:	f002 011c 	and.w	r1, r2, #28
 8008ac2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	408a      	lsls	r2, r1
 8008ac8:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008aca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008acc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ace:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8008ad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ad2:	b132      	cbz	r2, 8008ae2 <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008ad4:	6811      	ldr	r1, [r2, #0]
 8008ad6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008ada:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008adc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ade:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8008ae0:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008ae8:	2000      	movs	r0, #0
 8008aea:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8008aee:	4770      	bx	lr
    return HAL_ERROR;
 8008af0:	2001      	movs	r0, #1
}
 8008af2:	4770      	bx	lr

08008af4 <HAL_DMA_Abort_IT>:
{
 8008af4:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008af6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d003      	beq.n	8008b08 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b00:	2304      	movs	r3, #4
 8008b02:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8008b04:	2001      	movs	r0, #1
}
 8008b06:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008b08:	6802      	ldr	r2, [r0, #0]
 8008b0a:	6813      	ldr	r3, [r2, #0]
 8008b0c:	f023 030e 	bic.w	r3, r3, #14
 8008b10:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8008b12:	6802      	ldr	r2, [r0, #0]
 8008b14:	6813      	ldr	r3, [r2, #0]
 8008b16:	f023 0301 	bic.w	r3, r3, #1
 8008b1a:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b1c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8008b1e:	6813      	ldr	r3, [r2, #0]
 8008b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b24:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008b26:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008b28:	f003 021c 	and.w	r2, r3, #28
 8008b2c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008b2e:	2301      	movs	r3, #1
 8008b30:	4093      	lsls	r3, r2
 8008b32:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b34:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008b36:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8008b38:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8008b3a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8008b3c:	b133      	cbz	r3, 8008b4c <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b44:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b46:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008b48:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8008b4a:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008b52:	2300      	movs	r3, #0
 8008b54:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8008b58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8008b5a:	b113      	cbz	r3, 8008b62 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8008b5c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8008b5e:	2000      	movs	r0, #0
 8008b60:	e7d1      	b.n	8008b06 <HAL_DMA_Abort_IT+0x12>
 8008b62:	2000      	movs	r0, #0
 8008b64:	e7cf      	b.n	8008b06 <HAL_DMA_Abort_IT+0x12>
	...

08008b68 <HAL_DMA_IRQHandler>:
{
 8008b68:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008b6a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008b6c:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8008b6e:	6804      	ldr	r4, [r0, #0]
 8008b70:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8008b72:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008b74:	f003 031c 	and.w	r3, r3, #28
 8008b78:	2204      	movs	r2, #4
 8008b7a:	409a      	lsls	r2, r3
 8008b7c:	420a      	tst	r2, r1
 8008b7e:	d015      	beq.n	8008bac <HAL_DMA_IRQHandler+0x44>
 8008b80:	f015 0f04 	tst.w	r5, #4
 8008b84:	d012      	beq.n	8008bac <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008b86:	6823      	ldr	r3, [r4, #0]
 8008b88:	f013 0f20 	tst.w	r3, #32
 8008b8c:	d103      	bne.n	8008b96 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	f023 0304 	bic.w	r3, r3, #4
 8008b94:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008b96:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008b98:	f003 021c 	and.w	r2, r3, #28
 8008b9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008b9e:	2304      	movs	r3, #4
 8008ba0:	4093      	lsls	r3, r2
 8008ba2:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8008ba4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8008ba6:	b103      	cbz	r3, 8008baa <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8008ba8:	4798      	blx	r3
}
 8008baa:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8008bac:	2202      	movs	r2, #2
 8008bae:	409a      	lsls	r2, r3
 8008bb0:	420a      	tst	r2, r1
 8008bb2:	d028      	beq.n	8008c06 <HAL_DMA_IRQHandler+0x9e>
 8008bb4:	f015 0f02 	tst.w	r5, #2
 8008bb8:	d025      	beq.n	8008c06 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	f013 0f20 	tst.w	r3, #32
 8008bc0:	d106      	bne.n	8008bd0 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008bc2:	6823      	ldr	r3, [r4, #0]
 8008bc4:	f023 030a 	bic.w	r3, r3, #10
 8008bc8:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8008bd0:	6802      	ldr	r2, [r0, #0]
 8008bd2:	4b1c      	ldr	r3, [pc, #112]	; (8008c44 <HAL_DMA_IRQHandler+0xdc>)
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d90e      	bls.n	8008bf6 <HAL_DMA_IRQHandler+0x8e>
 8008bd8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008bda:	f003 021c 	and.w	r2, r3, #28
 8008bde:	2302      	movs	r3, #2
 8008be0:	4093      	lsls	r3, r2
 8008be2:	4a19      	ldr	r2, [pc, #100]	; (8008c48 <HAL_DMA_IRQHandler+0xe0>)
 8008be4:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8008be6:	2300      	movs	r3, #0
 8008be8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8008bec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d0db      	beq.n	8008baa <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8008bf2:	4798      	blx	r3
 8008bf4:	e7d9      	b.n	8008baa <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8008bf6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008bf8:	f003 021c 	and.w	r2, r3, #28
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	4093      	lsls	r3, r2
 8008c00:	4a12      	ldr	r2, [pc, #72]	; (8008c4c <HAL_DMA_IRQHandler+0xe4>)
 8008c02:	6053      	str	r3, [r2, #4]
 8008c04:	e7ef      	b.n	8008be6 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008c06:	2208      	movs	r2, #8
 8008c08:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0c:	420b      	tst	r3, r1
 8008c0e:	d0cc      	beq.n	8008baa <HAL_DMA_IRQHandler+0x42>
 8008c10:	f015 0f08 	tst.w	r5, #8
 8008c14:	d0c9      	beq.n	8008baa <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008c16:	6823      	ldr	r3, [r4, #0]
 8008c18:	f023 030e 	bic.w	r3, r3, #14
 8008c1c:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008c1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008c20:	f003 031c 	and.w	r3, r3, #28
 8008c24:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8008c26:	2201      	movs	r2, #1
 8008c28:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2c:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008c2e:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8008c30:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8008c34:	2300      	movs	r3, #0
 8008c36:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8008c3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d0b4      	beq.n	8008baa <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8008c40:	4798      	blx	r3
  return;
 8008c42:	e7b2      	b.n	8008baa <HAL_DMA_IRQHandler+0x42>
 8008c44:	40020080 	.word	0x40020080
 8008c48:	40020400 	.word	0x40020400
 8008c4c:	40020000 	.word	0x40020000

08008c50 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8008c50:	b178      	cbz	r0, 8008c72 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8008c52:	6803      	ldr	r3, [r0, #0]
 8008c54:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8008c56:	f011 0f10 	tst.w	r1, #16
 8008c5a:	d004      	beq.n	8008c66 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8008c5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008c60:	d004      	beq.n	8008c6c <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8008c62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8008c66:	601a      	str	r2, [r3, #0]
  return status;
 8008c68:	2000      	movs	r0, #0
 8008c6a:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8008c6c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8008c70:	e7f9      	b.n	8008c66 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8008c72:	2001      	movs	r0, #1
}
 8008c74:	4770      	bx	lr
	...

08008c78 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008c78:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008c7a:	4c05      	ldr	r4, [pc, #20]	; (8008c90 <FLASH_Program_DoubleWord+0x18>)
 8008c7c:	6961      	ldr	r1, [r4, #20]
 8008c7e:	f041 0101 	orr.w	r1, r1, #1
 8008c82:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008c84:	6002      	str	r2, [r0, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008c86:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008c8a:	6043      	str	r3, [r0, #4]
}
 8008c8c:	bc10      	pop	{r4}
 8008c8e:	4770      	bx	lr
 8008c90:	58004000 	.word	0x58004000

08008c94 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8008c94:	4a0c      	ldr	r2, [pc, #48]	; (8008cc8 <FLASH_Program_Fast+0x34>)
 8008c96:	6953      	ldr	r3, [r2, #20]
 8008c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c9c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c9e:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008ca2:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8008ca4:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8008ca6:	f851 2b04 	ldr.w	r2, [r1], #4
 8008caa:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 8008cae:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 8008cb0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8008cb4:	d1f7      	bne.n	8008ca6 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8008cb6:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <FLASH_Program_Fast+0x34>)
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008cbe:	d1fa      	bne.n	8008cb6 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cc0:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008cc4:	4770      	bx	lr
 8008cc6:	bf00      	nop
 8008cc8:	58004000 	.word	0x58004000

08008ccc <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008ccc:	4b09      	ldr	r3, [pc, #36]	; (8008cf4 <HAL_FLASH_Unlock+0x28>)
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	db01      	blt.n	8008cd8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 8008cd4:	2000      	movs	r0, #0
 8008cd6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008cd8:	4b06      	ldr	r3, [pc, #24]	; (8008cf4 <HAL_FLASH_Unlock+0x28>)
 8008cda:	4a07      	ldr	r2, [pc, #28]	; (8008cf8 <HAL_FLASH_Unlock+0x2c>)
 8008cdc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008cde:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8008ce2:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	db01      	blt.n	8008cee <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 8008cea:	2000      	movs	r0, #0
 8008cec:	4770      	bx	lr
      status = HAL_ERROR;
 8008cee:	2001      	movs	r0, #1
}
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	58004000 	.word	0x58004000
 8008cf8:	45670123 	.word	0x45670123

08008cfc <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8008cfc:	4b05      	ldr	r3, [pc, #20]	; (8008d14 <HAL_FLASH_Lock+0x18>)
 8008cfe:	695a      	ldr	r2, [r3, #20]
 8008d00:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008d04:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	db01      	blt.n	8008d10 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 8008d0c:	2001      	movs	r0, #1
}
 8008d0e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8008d10:	2000      	movs	r0, #0
 8008d12:	4770      	bx	lr
 8008d14:	58004000 	.word	0x58004000

08008d18 <FLASH_WaitForLastOperation>:
{
 8008d18:	b538      	push	{r3, r4, r5, lr}
 8008d1a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8008d1c:	f7f9 fdd4 	bl	80028c8 <HAL_GetTick>
 8008d20:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008d22:	4b16      	ldr	r3, [pc, #88]	; (8008d7c <FLASH_WaitForLastOperation+0x64>)
 8008d24:	691b      	ldr	r3, [r3, #16]
 8008d26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8008d2a:	d006      	beq.n	8008d3a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8008d2c:	f7f9 fdcc 	bl	80028c8 <HAL_GetTick>
 8008d30:	1b00      	subs	r0, r0, r4
 8008d32:	42a8      	cmp	r0, r5
 8008d34:	d3f5      	bcc.n	8008d22 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8008d36:	2003      	movs	r0, #3
}
 8008d38:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 8008d3a:	4b10      	ldr	r3, [pc, #64]	; (8008d7c <FLASH_WaitForLastOperation+0x64>)
 8008d3c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 8008d3e:	f013 0f01 	tst.w	r3, #1
 8008d42:	d002      	beq.n	8008d4a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008d44:	4a0d      	ldr	r2, [pc, #52]	; (8008d7c <FLASH_WaitForLastOperation+0x64>)
 8008d46:	2101      	movs	r1, #1
 8008d48:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 8008d4a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 8008d4e:	4013      	ands	r3, r2
 8008d50:	d001      	beq.n	8008d56 <FLASH_WaitForLastOperation+0x3e>
 8008d52:	4a0a      	ldr	r2, [pc, #40]	; (8008d7c <FLASH_WaitForLastOperation+0x64>)
 8008d54:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8008d56:	b95b      	cbnz	r3, 8008d70 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <FLASH_WaitForLastOperation+0x64>)
 8008d5a:	691b      	ldr	r3, [r3, #16]
 8008d5c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8008d60:	d00a      	beq.n	8008d78 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8008d62:	f7f9 fdb1 	bl	80028c8 <HAL_GetTick>
 8008d66:	1b00      	subs	r0, r0, r4
 8008d68:	42a8      	cmp	r0, r5
 8008d6a:	d3f5      	bcc.n	8008d58 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 8008d6c:	2003      	movs	r0, #3
 8008d6e:	e7e3      	b.n	8008d38 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8008d70:	4a03      	ldr	r2, [pc, #12]	; (8008d80 <FLASH_WaitForLastOperation+0x68>)
 8008d72:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8008d74:	2001      	movs	r0, #1
 8008d76:	e7df      	b.n	8008d38 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8008d78:	2000      	movs	r0, #0
 8008d7a:	e7dd      	b.n	8008d38 <FLASH_WaitForLastOperation+0x20>
 8008d7c:	58004000 	.word	0x58004000
 8008d80:	20001074 	.word	0x20001074

08008d84 <HAL_FLASH_Program>:
{
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 8008d88:	4b15      	ldr	r3, [pc, #84]	; (8008de0 <HAL_FLASH_Program+0x5c>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d025      	beq.n	8008ddc <HAL_FLASH_Program+0x58>
 8008d90:	4604      	mov	r4, r0
 8008d92:	460d      	mov	r5, r1
 8008d94:	4616      	mov	r6, r2
 8008d96:	4b12      	ldr	r3, [pc, #72]	; (8008de0 <HAL_FLASH_Program+0x5c>)
 8008d98:	2201      	movs	r2, #1
 8008d9a:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008da0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008da4:	f7ff ffb8 	bl	8008d18 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8008da8:	b970      	cbnz	r0, 8008dc8 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008daa:	2c01      	cmp	r4, #1
 8008dac:	d010      	beq.n	8008dd0 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008dae:	4631      	mov	r1, r6
 8008db0:	4628      	mov	r0, r5
 8008db2:	f7ff ff6f 	bl	8008c94 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008db6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008dba:	f7ff ffad 	bl	8008d18 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008dbe:	4a09      	ldr	r2, [pc, #36]	; (8008de4 <HAL_FLASH_Program+0x60>)
 8008dc0:	6953      	ldr	r3, [r2, #20]
 8008dc2:	ea23 0304 	bic.w	r3, r3, r4
 8008dc6:	6153      	str	r3, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 8008dc8:	4b05      	ldr	r3, [pc, #20]	; (8008de0 <HAL_FLASH_Program+0x5c>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	701a      	strb	r2, [r3, #0]
}
 8008dce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	4628      	mov	r0, r5
 8008dd6:	f7ff ff4f 	bl	8008c78 <FLASH_Program_DoubleWord>
 8008dda:	e7ec      	b.n	8008db6 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 8008ddc:	2002      	movs	r0, #2
 8008dde:	e7f6      	b.n	8008dce <HAL_FLASH_Program+0x4a>
 8008de0:	20001074 	.word	0x20001074
 8008de4:	58004000 	.word	0x58004000

08008de8 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8008de8:	4a03      	ldr	r2, [pc, #12]	; (8008df8 <FLASH_MassErase+0x10>)
 8008dea:	6953      	ldr	r3, [r2, #20]
 8008dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008df0:	f043 0304 	orr.w	r3, r3, #4
 8008df4:	6153      	str	r3, [r2, #20]
#endif
}
 8008df6:	4770      	bx	lr
 8008df8:	58004000 	.word	0x58004000

08008dfc <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8008dfc:	4b18      	ldr	r3, [pc, #96]	; (8008e60 <FLASH_FlushCaches+0x64>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d006      	beq.n	8008e16 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8008e08:	4b15      	ldr	r3, [pc, #84]	; (8008e60 <FLASH_FlushCaches+0x64>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d012      	beq.n	8008e3a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8008e14:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008e16:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <FLASH_FlushCaches+0x64>)
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008e1e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e2e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e7e6      	b.n	8008e08 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008e3a:	4b09      	ldr	r3, [pc, #36]	; (8008e60 <FLASH_FlushCaches+0x64>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e42:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e52:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e5a:	601a      	str	r2, [r3, #0]
}
 8008e5c:	e7da      	b.n	8008e14 <FLASH_FlushCaches+0x18>
 8008e5e:	bf00      	nop
 8008e60:	58004000 	.word	0x58004000

08008e64 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008e64:	4a03      	ldr	r2, [pc, #12]	; (8008e74 <FLASH_AcknowledgePageErase+0x10>)
 8008e66:	6953      	ldr	r3, [r2, #20]
 8008e68:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8008e6c:	f023 0302 	bic.w	r3, r3, #2
 8008e70:	6153      	str	r3, [r2, #20]
#endif
}
 8008e72:	4770      	bx	lr
 8008e74:	58004000 	.word	0x58004000

08008e78 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8008e78:	4a05      	ldr	r2, [pc, #20]	; (8008e90 <FLASH_PageErase+0x18>)
 8008e7a:	6953      	ldr	r3, [r2, #20]
 8008e7c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 8008e80:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 8008e84:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8008e88:	f040 0002 	orr.w	r0, r0, #2
 8008e8c:	6150      	str	r0, [r2, #20]
}
 8008e8e:	4770      	bx	lr
 8008e90:	58004000 	.word	0x58004000

08008e94 <HAL_FLASHEx_Erase>:
{
 8008e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8008e96:	4b1e      	ldr	r3, [pc, #120]	; (8008f10 <HAL_FLASHEx_Erase+0x7c>)
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d035      	beq.n	8008f0a <HAL_FLASHEx_Erase+0x76>
 8008e9e:	4605      	mov	r5, r0
 8008ea0:	460f      	mov	r7, r1
 8008ea2:	4b1b      	ldr	r3, [pc, #108]	; (8008f10 <HAL_FLASHEx_Erase+0x7c>)
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008eac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008eb0:	f7ff ff32 	bl	8008d18 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 8008eb4:	4606      	mov	r6, r0
 8008eb6:	bb18      	cbnz	r0, 8008f00 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8008eb8:	682b      	ldr	r3, [r5, #0]
 8008eba:	2b04      	cmp	r3, #4
 8008ebc:	d013      	beq.n	8008ee6 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 8008ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec2:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008ec4:	686c      	ldr	r4, [r5, #4]
 8008ec6:	686b      	ldr	r3, [r5, #4]
 8008ec8:	68aa      	ldr	r2, [r5, #8]
 8008eca:	4413      	add	r3, r2
 8008ecc:	42a3      	cmp	r3, r4
 8008ece:	d913      	bls.n	8008ef8 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 8008ed0:	4620      	mov	r0, r4
 8008ed2:	f7ff ffd1 	bl	8008e78 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008eda:	f7ff ff1d 	bl	8008d18 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 8008ede:	4606      	mov	r6, r0
 8008ee0:	b948      	cbnz	r0, 8008ef6 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008ee2:	3401      	adds	r4, #1
 8008ee4:	e7ef      	b.n	8008ec6 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8008ee6:	f7ff ff7f 	bl	8008de8 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008eea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008eee:	f7ff ff13 	bl	8008d18 <FLASH_WaitForLastOperation>
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	e002      	b.n	8008efc <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8008ef6:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8008ef8:	f7ff ffb4 	bl	8008e64 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 8008efc:	f7ff ff7e 	bl	8008dfc <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8008f00:	4b03      	ldr	r3, [pc, #12]	; (8008f10 <HAL_FLASHEx_Erase+0x7c>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	701a      	strb	r2, [r3, #0]
}
 8008f06:	4630      	mov	r0, r6
 8008f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 8008f0a:	2602      	movs	r6, #2
 8008f0c:	e7fb      	b.n	8008f06 <HAL_FLASHEx_Erase+0x72>
 8008f0e:	bf00      	nop
 8008f10:	20001074 	.word	0x20001074

08008f14 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008f14:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8008f16:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f18:	e069      	b.n	8008fee <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008f1a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008f1c:	005e      	lsls	r6, r3, #1
 8008f1e:	2403      	movs	r4, #3
 8008f20:	40b4      	lsls	r4, r6
 8008f22:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f26:	68cc      	ldr	r4, [r1, #12]
 8008f28:	40b4      	lsls	r4, r6
 8008f2a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8008f2c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f2e:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008f30:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f34:	684c      	ldr	r4, [r1, #4]
 8008f36:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8008f3a:	409c      	lsls	r4, r3
 8008f3c:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8008f3e:	6044      	str	r4, [r0, #4]
 8008f40:	e066      	b.n	8009010 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008f42:	08dd      	lsrs	r5, r3, #3
 8008f44:	3508      	adds	r5, #8
 8008f46:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008f4a:	f003 0c07 	and.w	ip, r3, #7
 8008f4e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008f52:	f04f 0e0f 	mov.w	lr, #15
 8008f56:	fa0e fe0c 	lsl.w	lr, lr, ip
 8008f5a:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008f5e:	690c      	ldr	r4, [r1, #16]
 8008f60:	fa04 f40c 	lsl.w	r4, r4, ip
 8008f64:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8008f68:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8008f6c:	e067      	b.n	800903e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008f6e:	2402      	movs	r4, #2
 8008f70:	e000      	b.n	8008f74 <HAL_GPIO_Init+0x60>
 8008f72:	2400      	movs	r4, #0
 8008f74:	fa04 f40e 	lsl.w	r4, r4, lr
 8008f78:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008f7a:	f10c 0c02 	add.w	ip, ip, #2
 8008f7e:	4d4b      	ldr	r5, [pc, #300]	; (80090ac <HAL_GPIO_Init+0x198>)
 8008f80:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008f84:	4c4a      	ldr	r4, [pc, #296]	; (80090b0 <HAL_GPIO_Init+0x19c>)
 8008f86:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8008f88:	43d4      	mvns	r4, r2
 8008f8a:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008f8e:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8008f92:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8008f96:	d001      	beq.n	8008f9c <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8008f98:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8008f9c:	4d44      	ldr	r5, [pc, #272]	; (80090b0 <HAL_GPIO_Init+0x19c>)
 8008f9e:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8008fa0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8008fa2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008fa6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8008faa:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8008fae:	d001      	beq.n	8008fb4 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8008fb0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8008fb4:	4d3e      	ldr	r5, [pc, #248]	; (80090b0 <HAL_GPIO_Init+0x19c>)
 8008fb6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8008fb8:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8008fbc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008fc0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8008fc4:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8008fc8:	d001      	beq.n	8008fce <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8008fca:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8008fce:	4d38      	ldr	r5, [pc, #224]	; (80090b0 <HAL_GPIO_Init+0x19c>)
 8008fd0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8008fd4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8008fd8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008fda:	684e      	ldr	r6, [r1, #4]
 8008fdc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8008fe0:	d001      	beq.n	8008fe6 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8008fe2:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8008fe6:	4a32      	ldr	r2, [pc, #200]	; (80090b0 <HAL_GPIO_Init+0x19c>)
 8008fe8:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8008fec:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008fee:	680a      	ldr	r2, [r1, #0]
 8008ff0:	fa32 f403 	lsrs.w	r4, r2, r3
 8008ff4:	d058      	beq.n	80090a8 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008ff6:	f04f 0c01 	mov.w	ip, #1
 8008ffa:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8008ffe:	ea1c 0202 	ands.w	r2, ip, r2
 8009002:	d0f3      	beq.n	8008fec <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009004:	684c      	ldr	r4, [r1, #4]
 8009006:	f004 0403 	and.w	r4, r4, #3
 800900a:	3c01      	subs	r4, #1
 800900c:	2c01      	cmp	r4, #1
 800900e:	d984      	bls.n	8008f1a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009010:	684c      	ldr	r4, [r1, #4]
 8009012:	f004 0403 	and.w	r4, r4, #3
 8009016:	2c03      	cmp	r4, #3
 8009018:	d00c      	beq.n	8009034 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800901a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800901c:	005d      	lsls	r5, r3, #1
 800901e:	f04f 0c03 	mov.w	ip, #3
 8009022:	fa0c fc05 	lsl.w	ip, ip, r5
 8009026:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800902a:	688c      	ldr	r4, [r1, #8]
 800902c:	40ac      	lsls	r4, r5
 800902e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8009032:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009034:	684c      	ldr	r4, [r1, #4]
 8009036:	f004 0403 	and.w	r4, r4, #3
 800903a:	2c02      	cmp	r4, #2
 800903c:	d081      	beq.n	8008f42 <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 800903e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009040:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8009044:	f04f 0c03 	mov.w	ip, #3
 8009048:	fa0c fc0e 	lsl.w	ip, ip, lr
 800904c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009050:	684c      	ldr	r4, [r1, #4]
 8009052:	f004 0403 	and.w	r4, r4, #3
 8009056:	fa04 f40e 	lsl.w	r4, r4, lr
 800905a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800905e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009060:	684c      	ldr	r4, [r1, #4]
 8009062:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8009066:	d0c1      	beq.n	8008fec <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8009068:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800906c:	f10c 0502 	add.w	r5, ip, #2
 8009070:	4c0e      	ldr	r4, [pc, #56]	; (80090ac <HAL_GPIO_Init+0x198>)
 8009072:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8009076:	f003 0e03 	and.w	lr, r3, #3
 800907a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800907e:	2407      	movs	r4, #7
 8009080:	fa04 f40e 	lsl.w	r4, r4, lr
 8009084:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009088:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800908c:	f43f af71 	beq.w	8008f72 <HAL_GPIO_Init+0x5e>
 8009090:	4c08      	ldr	r4, [pc, #32]	; (80090b4 <HAL_GPIO_Init+0x1a0>)
 8009092:	42a0      	cmp	r0, r4
 8009094:	d006      	beq.n	80090a4 <HAL_GPIO_Init+0x190>
 8009096:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800909a:	42a0      	cmp	r0, r4
 800909c:	f43f af67 	beq.w	8008f6e <HAL_GPIO_Init+0x5a>
 80090a0:	2407      	movs	r4, #7
 80090a2:	e767      	b.n	8008f74 <HAL_GPIO_Init+0x60>
 80090a4:	2401      	movs	r4, #1
 80090a6:	e765      	b.n	8008f74 <HAL_GPIO_Init+0x60>
  }
}
 80090a8:	bd70      	pop	{r4, r5, r6, pc}
 80090aa:	bf00      	nop
 80090ac:	40010000 	.word	0x40010000
 80090b0:	58000800 	.word	0x58000800
 80090b4:	48000400 	.word	0x48000400

080090b8 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80090b8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80090ba:	fa31 f203 	lsrs.w	r2, r1, r3
 80090be:	d071      	beq.n	80091a4 <HAL_GPIO_DeInit+0xec>
{
 80090c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090c2:	e02e      	b.n	8009122 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80090c4:	2502      	movs	r5, #2
 80090c6:	e000      	b.n	80090ca <HAL_GPIO_DeInit+0x12>
 80090c8:	2500      	movs	r5, #0
 80090ca:	fa05 f50c 	lsl.w	r5, r5, ip
 80090ce:	42a5      	cmp	r5, r4
 80090d0:	d049      	beq.n	8009166 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80090d2:	6804      	ldr	r4, [r0, #0]
 80090d4:	005d      	lsls	r5, r3, #1
 80090d6:	f04f 0c03 	mov.w	ip, #3
 80090da:	fa0c fc05 	lsl.w	ip, ip, r5
 80090de:	ea44 040c 	orr.w	r4, r4, ip
 80090e2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80090e4:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 80090e8:	f10e 0e08 	add.w	lr, lr, #8
 80090ec:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 80090f0:	f003 0607 	and.w	r6, r3, #7
 80090f4:	00b6      	lsls	r6, r6, #2
 80090f6:	250f      	movs	r5, #15
 80090f8:	40b5      	lsls	r5, r6
 80090fa:	ea24 0405 	bic.w	r4, r4, r5
 80090fe:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009102:	6884      	ldr	r4, [r0, #8]
 8009104:	ea24 040c 	bic.w	r4, r4, ip
 8009108:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800910a:	6844      	ldr	r4, [r0, #4]
 800910c:	ea24 0202 	bic.w	r2, r4, r2
 8009110:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009112:	68c2      	ldr	r2, [r0, #12]
 8009114:	ea22 020c 	bic.w	r2, r2, ip
 8009118:	60c2      	str	r2, [r0, #12]
    }

    position++;
 800911a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 800911c:	fa31 f203 	lsrs.w	r2, r1, r3
 8009120:	d03f      	beq.n	80091a2 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009122:	2201      	movs	r2, #1
 8009124:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8009126:	ea12 0701 	ands.w	r7, r2, r1
 800912a:	d0f6      	beq.n	800911a <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800912c:	089e      	lsrs	r6, r3, #2
 800912e:	1cb5      	adds	r5, r6, #2
 8009130:	4c1d      	ldr	r4, [pc, #116]	; (80091a8 <HAL_GPIO_DeInit+0xf0>)
 8009132:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8009136:	f003 0c03 	and.w	ip, r3, #3
 800913a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800913e:	f04f 0e07 	mov.w	lr, #7
 8009142:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009146:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800914a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 800914e:	d0bb      	beq.n	80090c8 <HAL_GPIO_DeInit+0x10>
 8009150:	4d16      	ldr	r5, [pc, #88]	; (80091ac <HAL_GPIO_DeInit+0xf4>)
 8009152:	42a8      	cmp	r0, r5
 8009154:	d005      	beq.n	8009162 <HAL_GPIO_DeInit+0xaa>
 8009156:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800915a:	42a8      	cmp	r0, r5
 800915c:	d0b2      	beq.n	80090c4 <HAL_GPIO_DeInit+0xc>
 800915e:	2507      	movs	r5, #7
 8009160:	e7b3      	b.n	80090ca <HAL_GPIO_DeInit+0x12>
 8009162:	2501      	movs	r5, #1
 8009164:	e7b1      	b.n	80090ca <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8009166:	4c12      	ldr	r4, [pc, #72]	; (80091b0 <HAL_GPIO_DeInit+0xf8>)
 8009168:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 800916c:	ea25 0507 	bic.w	r5, r5, r7
 8009170:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8009174:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8009178:	ea25 0507 	bic.w	r5, r5, r7
 800917c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8009180:	6825      	ldr	r5, [r4, #0]
 8009182:	ea25 0507 	bic.w	r5, r5, r7
 8009186:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8009188:	6865      	ldr	r5, [r4, #4]
 800918a:	ea25 0507 	bic.w	r5, r5, r7
 800918e:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009190:	4d05      	ldr	r5, [pc, #20]	; (80091a8 <HAL_GPIO_DeInit+0xf0>)
 8009192:	3602      	adds	r6, #2
 8009194:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8009198:	ea24 040e 	bic.w	r4, r4, lr
 800919c:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 80091a0:	e797      	b.n	80090d2 <HAL_GPIO_DeInit+0x1a>
  }
}
 80091a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40010000 	.word	0x40010000
 80091ac:	48000400 	.word	0x48000400
 80091b0:	58000800 	.word	0x58000800

080091b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80091b4:	b10a      	cbz	r2, 80091ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80091b6:	6181      	str	r1, [r0, #24]
 80091b8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80091ba:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80091bc:	4770      	bx	lr

080091be <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80091be:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80091c0:	ea01 0203 	and.w	r2, r1, r3
 80091c4:	ea21 0103 	bic.w	r1, r1, r3
 80091c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80091cc:	6181      	str	r1, [r0, #24]
}
 80091ce:	4770      	bx	lr

080091d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80091d0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80091d2:	4b05      	ldr	r3, [pc, #20]	; (80091e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	4203      	tst	r3, r0
 80091d8:	d100      	bne.n	80091dc <HAL_GPIO_EXTI_IRQHandler+0xc>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 80091da:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80091dc:	4b02      	ldr	r3, [pc, #8]	; (80091e8 <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80091de:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80091e0:	f7fe fbf8 	bl	80079d4 <HAL_GPIO_EXTI_Callback>
}
 80091e4:	e7f9      	b.n	80091da <HAL_GPIO_EXTI_IRQHandler+0xa>
 80091e6:	bf00      	nop
 80091e8:	58000800 	.word	0x58000800

080091ec <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80091ec:	6803      	ldr	r3, [r0, #0]
 80091ee:	699a      	ldr	r2, [r3, #24]
 80091f0:	f012 0f02 	tst.w	r2, #2
 80091f4:	d001      	beq.n	80091fa <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 80091f6:	2200      	movs	r2, #0
 80091f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80091fa:	6803      	ldr	r3, [r0, #0]
 80091fc:	699a      	ldr	r2, [r3, #24]
 80091fe:	f012 0f01 	tst.w	r2, #1
 8009202:	d103      	bne.n	800920c <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009204:	699a      	ldr	r2, [r3, #24]
 8009206:	f042 0201 	orr.w	r2, r2, #1
 800920a:	619a      	str	r2, [r3, #24]
  }
}
 800920c:	4770      	bx	lr

0800920e <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800920e:	b410      	push	{r4}
 8009210:	9c01      	ldr	r4, [sp, #4]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009212:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009216:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800921a:	4319      	orrs	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800921c:	4321      	orrs	r1, r4
 800921e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009222:	6802      	ldr	r2, [r0, #0]
 8009224:	6853      	ldr	r3, [r2, #4]
 8009226:	0d64      	lsrs	r4, r4, #21
 8009228:	f404 6480 	and.w	r4, r4, #1024	; 0x400
 800922c:	f044 747f 	orr.w	r4, r4, #66846720	; 0x3fc0000
 8009230:	f444 3458 	orr.w	r4, r4, #221184	; 0x36000
 8009234:	f444 747f 	orr.w	r4, r4, #1020	; 0x3fc
 8009238:	f044 0403 	orr.w	r4, r4, #3
 800923c:	ea23 0304 	bic.w	r3, r3, r4
 8009240:	430b      	orrs	r3, r1
 8009242:	6053      	str	r3, [r2, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009244:	bc10      	pop	{r4}
 8009246:	4770      	bx	lr

08009248 <I2C_IsErrorOccurred>:
{
 8009248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800924c:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800924e:	6803      	ldr	r3, [r0, #0]
 8009250:	699e      	ldr	r6, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009252:	f016 0610 	ands.w	r6, r6, #16
 8009256:	d07c      	beq.n	8009352 <I2C_IsErrorOccurred+0x10a>
 8009258:	460d      	mov	r5, r1
 800925a:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800925c:	2210      	movs	r2, #16
 800925e:	61da      	str	r2, [r3, #28]
  uint32_t error_code = 0;
 8009260:	2600      	movs	r6, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009262:	4637      	mov	r7, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009264:	6823      	ldr	r3, [r4, #0]
 8009266:	6998      	ldr	r0, [r3, #24]
 8009268:	f010 0f20 	tst.w	r0, #32
 800926c:	d130      	bne.n	80092d0 <I2C_IsErrorOccurred+0x88>
 800926e:	bb7f      	cbnz	r7, 80092d0 <I2C_IsErrorOccurred+0x88>
      if (Timeout != HAL_MAX_DELAY)
 8009270:	f1b5 3fff 	cmp.w	r5, #4294967295
 8009274:	d0f6      	beq.n	8009264 <I2C_IsErrorOccurred+0x1c>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009276:	f7f9 fb27 	bl	80028c8 <HAL_GetTick>
 800927a:	eba0 0008 	sub.w	r0, r0, r8
 800927e:	42a8      	cmp	r0, r5
 8009280:	d801      	bhi.n	8009286 <I2C_IsErrorOccurred+0x3e>
 8009282:	2d00      	cmp	r5, #0
 8009284:	d1ee      	bne.n	8009264 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009286:	6821      	ldr	r1, [r4, #0]
 8009288:	684b      	ldr	r3, [r1, #4]
 800928a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          tmp2 = hi2c->Mode;
 800928e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8009292:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009294:	6988      	ldr	r0, [r1, #24]
 8009296:	f410 4f00 	tst.w	r0, #32768	; 0x8000
 800929a:	d002      	beq.n	80092a2 <I2C_IsErrorOccurred+0x5a>
 800929c:	b90b      	cbnz	r3, 80092a2 <I2C_IsErrorOccurred+0x5a>
              (tmp1 != I2C_CR2_STOP) && \
 800929e:	2a20      	cmp	r2, #32
 80092a0:	d10e      	bne.n	80092c0 <I2C_IsErrorOccurred+0x78>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	699b      	ldr	r3, [r3, #24]
 80092a6:	f013 0f20 	tst.w	r3, #32
 80092aa:	d1db      	bne.n	8009264 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80092ac:	f7f9 fb0c 	bl	80028c8 <HAL_GetTick>
 80092b0:	eba0 0008 	sub.w	r0, r0, r8
 80092b4:	2819      	cmp	r0, #25
 80092b6:	d9f4      	bls.n	80092a2 <I2C_IsErrorOccurred+0x5a>
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80092b8:	f046 0620 	orr.w	r6, r6, #32
              status = HAL_ERROR;
 80092bc:	2701      	movs	r7, #1
              break;
 80092be:	e7d1      	b.n	8009264 <I2C_IsErrorOccurred+0x1c>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80092c0:	684b      	ldr	r3, [r1, #4]
 80092c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80092c6:	604b      	str	r3, [r1, #4]
            tickstart = HAL_GetTick();
 80092c8:	f7f9 fafe 	bl	80028c8 <HAL_GetTick>
 80092cc:	4680      	mov	r8, r0
 80092ce:	e7e8      	b.n	80092a2 <I2C_IsErrorOccurred+0x5a>
    if (status == HAL_OK)
 80092d0:	b90f      	cbnz	r7, 80092d6 <I2C_IsErrorOccurred+0x8e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092d2:	2220      	movs	r2, #32
 80092d4:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 80092d6:	f046 0604 	orr.w	r6, r6, #4
    status = HAL_ERROR;
 80092da:	2501      	movs	r5, #1
  itflag = hi2c->Instance->ISR;
 80092dc:	6822      	ldr	r2, [r4, #0]
 80092de:	6993      	ldr	r3, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80092e0:	f413 7f80 	tst.w	r3, #256	; 0x100
 80092e4:	d005      	beq.n	80092f2 <I2C_IsErrorOccurred+0xaa>
    error_code |= HAL_I2C_ERROR_BERR;
 80092e6:	f046 0601 	orr.w	r6, r6, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80092ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80092ee:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 80092f0:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80092f2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80092f6:	d006      	beq.n	8009306 <I2C_IsErrorOccurred+0xbe>
    error_code |= HAL_I2C_ERROR_OVR;
 80092f8:	f046 0608 	orr.w	r6, r6, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80092fc:	6822      	ldr	r2, [r4, #0]
 80092fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009302:	61d1      	str	r1, [r2, #28]
    status = HAL_ERROR;
 8009304:	2501      	movs	r5, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009306:	f413 7f00 	tst.w	r3, #512	; 0x200
 800930a:	d024      	beq.n	8009356 <I2C_IsErrorOccurred+0x10e>
    error_code |= HAL_I2C_ERROR_ARLO;
 800930c:	f046 0602 	orr.w	r6, r6, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009316:	61da      	str	r2, [r3, #28]
    status = HAL_ERROR;
 8009318:	2501      	movs	r5, #1
    I2C_Flush_TXDR(hi2c);
 800931a:	4620      	mov	r0, r4
 800931c:	f7ff ff66 	bl	80091ec <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8009320:	6822      	ldr	r2, [r4, #0]
 8009322:	6853      	ldr	r3, [r2, #4]
 8009324:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8009328:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800932c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8009336:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009338:	4333      	orrs	r3, r6
 800933a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800933c:	2320      	movs	r3, #32
 800933e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009342:	2300      	movs	r3, #0
 8009344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8009348:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800934c:	4628      	mov	r0, r5
 800934e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8009352:	2500      	movs	r5, #0
 8009354:	e7c2      	b.n	80092dc <I2C_IsErrorOccurred+0x94>
  if (status != HAL_OK)
 8009356:	2d00      	cmp	r5, #0
 8009358:	d0f8      	beq.n	800934c <I2C_IsErrorOccurred+0x104>
 800935a:	e7de      	b.n	800931a <I2C_IsErrorOccurred+0xd2>

0800935c <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800935c:	b570      	push	{r4, r5, r6, lr}
 800935e:	4604      	mov	r4, r0
 8009360:	460d      	mov	r5, r1
 8009362:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f013 0f02 	tst.w	r3, #2
 800936c:	d11d      	bne.n	80093aa <I2C_WaitOnTXISFlagUntilTimeout+0x4e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800936e:	4632      	mov	r2, r6
 8009370:	4629      	mov	r1, r5
 8009372:	4620      	mov	r0, r4
 8009374:	f7ff ff68 	bl	8009248 <I2C_IsErrorOccurred>
 8009378:	b9c8      	cbnz	r0, 80093ae <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 800937a:	f1b5 3fff 	cmp.w	r5, #4294967295
 800937e:	d0f1      	beq.n	8009364 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009380:	f7f9 faa2 	bl	80028c8 <HAL_GetTick>
 8009384:	1b80      	subs	r0, r0, r6
 8009386:	42a8      	cmp	r0, r5
 8009388:	d801      	bhi.n	800938e <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 800938a:	2d00      	cmp	r5, #0
 800938c:	d1ea      	bne.n	8009364 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800938e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009390:	f043 0320 	orr.w	r3, r3, #32
 8009394:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009396:	2320      	movs	r3, #32
 8009398:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800939c:	2300      	movs	r3, #0
 800939e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80093a2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80093a6:	2001      	movs	r0, #1
 80093a8:	e000      	b.n	80093ac <I2C_WaitOnTXISFlagUntilTimeout+0x50>
  return HAL_OK;
 80093aa:	2000      	movs	r0, #0
}
 80093ac:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80093ae:	2001      	movs	r0, #1
 80093b0:	e7fc      	b.n	80093ac <I2C_WaitOnTXISFlagUntilTimeout+0x50>

080093b2 <I2C_WaitOnFlagUntilTimeout>:
{
 80093b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093b6:	4606      	mov	r6, r0
 80093b8:	4688      	mov	r8, r1
 80093ba:	4617      	mov	r7, r2
 80093bc:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80093be:	6834      	ldr	r4, [r6, #0]
 80093c0:	69a4      	ldr	r4, [r4, #24]
 80093c2:	ea38 0404 	bics.w	r4, r8, r4
 80093c6:	bf0c      	ite	eq
 80093c8:	2401      	moveq	r4, #1
 80093ca:	2400      	movne	r4, #0
 80093cc:	42bc      	cmp	r4, r7
 80093ce:	d118      	bne.n	8009402 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80093d0:	f1b5 3fff 	cmp.w	r5, #4294967295
 80093d4:	d0f3      	beq.n	80093be <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093d6:	f7f9 fa77 	bl	80028c8 <HAL_GetTick>
 80093da:	9b06      	ldr	r3, [sp, #24]
 80093dc:	1ac0      	subs	r0, r0, r3
 80093de:	42a8      	cmp	r0, r5
 80093e0:	d801      	bhi.n	80093e6 <I2C_WaitOnFlagUntilTimeout+0x34>
 80093e2:	2d00      	cmp	r5, #0
 80093e4:	d1eb      	bne.n	80093be <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093e6:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80093e8:	f043 0320 	orr.w	r3, r3, #32
 80093ec:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093ee:	2320      	movs	r3, #32
 80093f0:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093f4:	2300      	movs	r3, #0
 80093f6:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 80093fa:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 80093fe:	2001      	movs	r0, #1
 8009400:	e000      	b.n	8009404 <I2C_WaitOnFlagUntilTimeout+0x52>
  return HAL_OK;
 8009402:	2000      	movs	r0, #0
}
 8009404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009408 <I2C_RequestMemoryWrite>:
{
 8009408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	4604      	mov	r4, r0
 8009410:	4690      	mov	r8, r2
 8009412:	461d      	mov	r5, r3
 8009414:	9e08      	ldr	r6, [sp, #32]
 8009416:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009418:	4b19      	ldr	r3, [pc, #100]	; (8009480 <I2C_RequestMemoryWrite+0x78>)
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009420:	b2ea      	uxtb	r2, r5
 8009422:	f7ff fef4 	bl	800920e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009426:	463a      	mov	r2, r7
 8009428:	4631      	mov	r1, r6
 800942a:	4620      	mov	r0, r4
 800942c:	f7ff ff96 	bl	800935c <I2C_WaitOnTXISFlagUntilTimeout>
 8009430:	b9f8      	cbnz	r0, 8009472 <I2C_RequestMemoryWrite+0x6a>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009432:	2d01      	cmp	r5, #1
 8009434:	d10e      	bne.n	8009454 <I2C_RequestMemoryWrite+0x4c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	fa5f f288 	uxtb.w	r2, r8
 800943c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800943e:	9700      	str	r7, [sp, #0]
 8009440:	4633      	mov	r3, r6
 8009442:	2200      	movs	r2, #0
 8009444:	2180      	movs	r1, #128	; 0x80
 8009446:	4620      	mov	r0, r4
 8009448:	f7ff ffb3 	bl	80093b2 <I2C_WaitOnFlagUntilTimeout>
 800944c:	b9a8      	cbnz	r0, 800947a <I2C_RequestMemoryWrite+0x72>
}
 800944e:	b002      	add	sp, #8
 8009450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	ea4f 2218 	mov.w	r2, r8, lsr #8
 800945a:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800945c:	463a      	mov	r2, r7
 800945e:	4631      	mov	r1, r6
 8009460:	4620      	mov	r0, r4
 8009462:	f7ff ff7b 	bl	800935c <I2C_WaitOnTXISFlagUntilTimeout>
 8009466:	b930      	cbnz	r0, 8009476 <I2C_RequestMemoryWrite+0x6e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	fa5f f288 	uxtb.w	r2, r8
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
 8009470:	e7e5      	b.n	800943e <I2C_RequestMemoryWrite+0x36>
    return HAL_ERROR;
 8009472:	2001      	movs	r0, #1
 8009474:	e7eb      	b.n	800944e <I2C_RequestMemoryWrite+0x46>
      return HAL_ERROR;
 8009476:	2001      	movs	r0, #1
 8009478:	e7e9      	b.n	800944e <I2C_RequestMemoryWrite+0x46>
    return HAL_ERROR;
 800947a:	2001      	movs	r0, #1
 800947c:	e7e7      	b.n	800944e <I2C_RequestMemoryWrite+0x46>
 800947e:	bf00      	nop
 8009480:	80002000 	.word	0x80002000

08009484 <I2C_RequestMemoryRead>:
{
 8009484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009488:	b082      	sub	sp, #8
 800948a:	4604      	mov	r4, r0
 800948c:	4690      	mov	r8, r2
 800948e:	461d      	mov	r5, r3
 8009490:	9e08      	ldr	r6, [sp, #32]
 8009492:	9f09      	ldr	r7, [sp, #36]	; 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009494:	4b18      	ldr	r3, [pc, #96]	; (80094f8 <I2C_RequestMemoryRead+0x74>)
 8009496:	9300      	str	r3, [sp, #0]
 8009498:	2300      	movs	r3, #0
 800949a:	b2ea      	uxtb	r2, r5
 800949c:	f7ff feb7 	bl	800920e <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094a0:	463a      	mov	r2, r7
 80094a2:	4631      	mov	r1, r6
 80094a4:	4620      	mov	r0, r4
 80094a6:	f7ff ff59 	bl	800935c <I2C_WaitOnTXISFlagUntilTimeout>
 80094aa:	b9f8      	cbnz	r0, 80094ec <I2C_RequestMemoryRead+0x68>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80094ac:	2d01      	cmp	r5, #1
 80094ae:	d10e      	bne.n	80094ce <I2C_RequestMemoryRead+0x4a>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094b0:	6823      	ldr	r3, [r4, #0]
 80094b2:	fa5f f288 	uxtb.w	r2, r8
 80094b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80094b8:	9700      	str	r7, [sp, #0]
 80094ba:	4633      	mov	r3, r6
 80094bc:	2200      	movs	r2, #0
 80094be:	2140      	movs	r1, #64	; 0x40
 80094c0:	4620      	mov	r0, r4
 80094c2:	f7ff ff76 	bl	80093b2 <I2C_WaitOnFlagUntilTimeout>
 80094c6:	b9a8      	cbnz	r0, 80094f4 <I2C_RequestMemoryRead+0x70>
}
 80094c8:	b002      	add	sp, #8
 80094ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80094ce:	6823      	ldr	r3, [r4, #0]
 80094d0:	ea4f 2218 	mov.w	r2, r8, lsr #8
 80094d4:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80094d6:	463a      	mov	r2, r7
 80094d8:	4631      	mov	r1, r6
 80094da:	4620      	mov	r0, r4
 80094dc:	f7ff ff3e 	bl	800935c <I2C_WaitOnTXISFlagUntilTimeout>
 80094e0:	b930      	cbnz	r0, 80094f0 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80094e2:	6823      	ldr	r3, [r4, #0]
 80094e4:	fa5f f288 	uxtb.w	r2, r8
 80094e8:	629a      	str	r2, [r3, #40]	; 0x28
 80094ea:	e7e5      	b.n	80094b8 <I2C_RequestMemoryRead+0x34>
    return HAL_ERROR;
 80094ec:	2001      	movs	r0, #1
 80094ee:	e7eb      	b.n	80094c8 <I2C_RequestMemoryRead+0x44>
      return HAL_ERROR;
 80094f0:	2001      	movs	r0, #1
 80094f2:	e7e9      	b.n	80094c8 <I2C_RequestMemoryRead+0x44>
    return HAL_ERROR;
 80094f4:	2001      	movs	r0, #1
 80094f6:	e7e7      	b.n	80094c8 <I2C_RequestMemoryRead+0x44>
 80094f8:	80002000 	.word	0x80002000

080094fc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80094fc:	b570      	push	{r4, r5, r6, lr}
 80094fe:	4605      	mov	r5, r0
 8009500:	460c      	mov	r4, r1
 8009502:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009504:	682b      	ldr	r3, [r5, #0]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	f013 0f20 	tst.w	r3, #32
 800950c:	d11a      	bne.n	8009544 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800950e:	4632      	mov	r2, r6
 8009510:	4621      	mov	r1, r4
 8009512:	4628      	mov	r0, r5
 8009514:	f7ff fe98 	bl	8009248 <I2C_IsErrorOccurred>
 8009518:	b9b0      	cbnz	r0, 8009548 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800951a:	f7f9 f9d5 	bl	80028c8 <HAL_GetTick>
 800951e:	1b80      	subs	r0, r0, r6
 8009520:	42a0      	cmp	r0, r4
 8009522:	d801      	bhi.n	8009528 <I2C_WaitOnSTOPFlagUntilTimeout+0x2c>
 8009524:	2c00      	cmp	r4, #0
 8009526:	d1ed      	bne.n	8009504 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009528:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800952a:	f043 0320 	orr.w	r3, r3, #32
 800952e:	646b      	str	r3, [r5, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009530:	2320      	movs	r3, #32
 8009532:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009536:	2300      	movs	r3, #0
 8009538:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800953c:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8009540:	2001      	movs	r0, #1
}
 8009542:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 8009544:	2000      	movs	r0, #0
 8009546:	e7fc      	b.n	8009542 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
      return HAL_ERROR;
 8009548:	2001      	movs	r0, #1
 800954a:	e7fa      	b.n	8009542 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>

0800954c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800954c:	2800      	cmp	r0, #0
 800954e:	d059      	beq.n	8009604 <HAL_I2C_Init+0xb8>
{
 8009550:	b510      	push	{r4, lr}
 8009552:	4604      	mov	r4, r0
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009554:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8009558:	2b00      	cmp	r3, #0
 800955a:	d043      	beq.n	80095e4 <HAL_I2C_Init+0x98>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800955c:	2324      	movs	r3, #36	; 0x24
 800955e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	6813      	ldr	r3, [r2, #0]
 8009566:	f023 0301 	bic.w	r3, r3, #1
 800956a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800956c:	6863      	ldr	r3, [r4, #4]
 800956e:	6822      	ldr	r2, [r4, #0]
 8009570:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8009574:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009576:	6822      	ldr	r2, [r4, #0]
 8009578:	6893      	ldr	r3, [r2, #8]
 800957a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800957e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009580:	68e3      	ldr	r3, [r4, #12]
 8009582:	2b01      	cmp	r3, #1
 8009584:	d033      	beq.n	80095ee <HAL_I2C_Init+0xa2>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009586:	68a3      	ldr	r3, [r4, #8]
 8009588:	6822      	ldr	r2, [r4, #0]
 800958a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 800958e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009590:	68e3      	ldr	r3, [r4, #12]
 8009592:	2b02      	cmp	r3, #2
 8009594:	d031      	beq.n	80095fa <HAL_I2C_Init+0xae>
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009596:	6822      	ldr	r2, [r4, #0]
 8009598:	6853      	ldr	r3, [r2, #4]
 800959a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800959e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095a2:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80095a4:	6822      	ldr	r2, [r4, #0]
 80095a6:	68d3      	ldr	r3, [r2, #12]
 80095a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095ac:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095ae:	6923      	ldr	r3, [r4, #16]
 80095b0:	6962      	ldr	r2, [r4, #20]
 80095b2:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80095b4:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80095b6:	6822      	ldr	r2, [r4, #0]
 80095b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80095bc:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80095be:	69e3      	ldr	r3, [r4, #28]
 80095c0:	6a21      	ldr	r1, [r4, #32]
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	430b      	orrs	r3, r1
 80095c6:	6013      	str	r3, [r2, #0]
  __HAL_I2C_ENABLE(hi2c);
 80095c8:	6822      	ldr	r2, [r4, #0]
 80095ca:	6813      	ldr	r3, [r2, #0]
 80095cc:	f043 0301 	orr.w	r3, r3, #1
 80095d0:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095d2:	2000      	movs	r0, #0
 80095d4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80095d6:	2320      	movs	r3, #32
 80095d8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80095dc:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80095de:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 80095e2:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80095e4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 80095e8:	f7f8 fe8a 	bl	8002300 <HAL_I2C_MspInit>
 80095ec:	e7b6      	b.n	800955c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80095ee:	68a3      	ldr	r3, [r4, #8]
 80095f0:	6822      	ldr	r2, [r4, #0]
 80095f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095f6:	6093      	str	r3, [r2, #8]
 80095f8:	e7ca      	b.n	8009590 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80095fa:	6823      	ldr	r3, [r4, #0]
 80095fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	e7c8      	b.n	8009596 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8009604:	2001      	movs	r0, #1
}
 8009606:	4770      	bx	lr

08009608 <HAL_I2C_Mem_Write>:
{
 8009608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	b083      	sub	sp, #12
 800960e:	460e      	mov	r6, r1
 8009610:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8009614:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009616:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 800961a:	b2c9      	uxtb	r1, r1
 800961c:	2920      	cmp	r1, #32
 800961e:	f040 80bb 	bne.w	8009798 <HAL_I2C_Mem_Write+0x190>
 8009622:	4604      	mov	r4, r0
 8009624:	4690      	mov	r8, r2
 8009626:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 8009628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800962a:	b1cb      	cbz	r3, 8009660 <HAL_I2C_Mem_Write+0x58>
 800962c:	f1ba 0f00 	cmp.w	sl, #0
 8009630:	d016      	beq.n	8009660 <HAL_I2C_Mem_Write+0x58>
    __HAL_LOCK(hi2c);
 8009632:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8009636:	2b01      	cmp	r3, #1
 8009638:	f000 80b2 	beq.w	80097a0 <HAL_I2C_Mem_Write+0x198>
 800963c:	f04f 0b01 	mov.w	fp, #1
 8009640:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8009644:	f7f9 f940 	bl	80028c8 <HAL_GetTick>
 8009648:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800964a:	9000      	str	r0, [sp, #0]
 800964c:	2319      	movs	r3, #25
 800964e:	465a      	mov	r2, fp
 8009650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009654:	4620      	mov	r0, r4
 8009656:	f7ff feac 	bl	80093b2 <I2C_WaitOnFlagUntilTimeout>
 800965a:	b130      	cbz	r0, 800966a <HAL_I2C_Mem_Write+0x62>
      return HAL_ERROR;
 800965c:	2001      	movs	r0, #1
 800965e:	e09c      	b.n	800979a <HAL_I2C_Mem_Write+0x192>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009660:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009664:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 8009666:	2001      	movs	r0, #1
 8009668:	e097      	b.n	800979a <HAL_I2C_Mem_Write+0x192>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800966a:	2321      	movs	r3, #33	; 0x21
 800966c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009676:	2300      	movs	r3, #0
 8009678:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800967a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800967c:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 800967e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009682:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009684:	9701      	str	r7, [sp, #4]
 8009686:	9500      	str	r5, [sp, #0]
 8009688:	464b      	mov	r3, r9
 800968a:	4642      	mov	r2, r8
 800968c:	4631      	mov	r1, r6
 800968e:	4620      	mov	r0, r4
 8009690:	f7ff feba 	bl	8009408 <I2C_RequestMemoryWrite>
 8009694:	b970      	cbnz	r0, 80096b4 <HAL_I2C_Mem_Write+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009696:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009698:	b29b      	uxth	r3, r3
 800969a:	2bff      	cmp	r3, #255	; 0xff
 800969c:	d90f      	bls.n	80096be <HAL_I2C_Mem_Write+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800969e:	22ff      	movs	r2, #255	; 0xff
 80096a0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80096a2:	2300      	movs	r3, #0
 80096a4:	9300      	str	r3, [sp, #0]
 80096a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096aa:	4631      	mov	r1, r6
 80096ac:	4620      	mov	r0, r4
 80096ae:	f7ff fdae 	bl	800920e <I2C_TransferConfig>
 80096b2:	e021      	b.n	80096f8 <HAL_I2C_Mem_Write+0xf0>
      __HAL_UNLOCK(hi2c);
 80096b4:	2300      	movs	r3, #0
 80096b6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80096ba:	4658      	mov	r0, fp
 80096bc:	e06d      	b.n	800979a <HAL_I2C_Mem_Write+0x192>
      hi2c->XferSize = hi2c->XferCount;
 80096be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80096c0:	b292      	uxth	r2, r2
 80096c2:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80096c4:	2300      	movs	r3, #0
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096cc:	b2d2      	uxtb	r2, r2
 80096ce:	4631      	mov	r1, r6
 80096d0:	4620      	mov	r0, r4
 80096d2:	f7ff fd9c 	bl	800920e <I2C_TransferConfig>
 80096d6:	e00f      	b.n	80096f8 <HAL_I2C_Mem_Write+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 80096d8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80096da:	b292      	uxth	r2, r2
 80096dc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096de:	2300      	movs	r3, #0
 80096e0:	9300      	str	r3, [sp, #0]
 80096e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80096e6:	b2d2      	uxtb	r2, r2
 80096e8:	4631      	mov	r1, r6
 80096ea:	4620      	mov	r0, r4
 80096ec:	f7ff fd8f 	bl	800920e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80096f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d033      	beq.n	8009760 <HAL_I2C_Mem_Write+0x158>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096f8:	463a      	mov	r2, r7
 80096fa:	4629      	mov	r1, r5
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7ff fe2d 	bl	800935c <I2C_WaitOnTXISFlagUntilTimeout>
 8009702:	2800      	cmp	r0, #0
 8009704:	d14e      	bne.n	80097a4 <HAL_I2C_Mem_Write+0x19c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009706:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	7812      	ldrb	r2, [r2, #0]
 800970c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 800970e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009710:	3301      	adds	r3, #1
 8009712:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8009714:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29b      	uxth	r3, r3
 800971c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800971e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8009720:	3b01      	subs	r3, #1
 8009722:	b29b      	uxth	r3, r3
 8009724:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009726:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009728:	b292      	uxth	r2, r2
 800972a:	2a00      	cmp	r2, #0
 800972c:	d0e0      	beq.n	80096f0 <HAL_I2C_Mem_Write+0xe8>
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1de      	bne.n	80096f0 <HAL_I2C_Mem_Write+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009732:	9700      	str	r7, [sp, #0]
 8009734:	462b      	mov	r3, r5
 8009736:	2200      	movs	r2, #0
 8009738:	2180      	movs	r1, #128	; 0x80
 800973a:	4620      	mov	r0, r4
 800973c:	f7ff fe39 	bl	80093b2 <I2C_WaitOnFlagUntilTimeout>
 8009740:	bb90      	cbnz	r0, 80097a8 <HAL_I2C_Mem_Write+0x1a0>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009742:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009744:	b29b      	uxth	r3, r3
 8009746:	2bff      	cmp	r3, #255	; 0xff
 8009748:	d9c6      	bls.n	80096d8 <HAL_I2C_Mem_Write+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800974a:	22ff      	movs	r2, #255	; 0xff
 800974c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800974e:	2300      	movs	r3, #0
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009756:	4631      	mov	r1, r6
 8009758:	4620      	mov	r0, r4
 800975a:	f7ff fd58 	bl	800920e <I2C_TransferConfig>
 800975e:	e7c7      	b.n	80096f0 <HAL_I2C_Mem_Write+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009760:	463a      	mov	r2, r7
 8009762:	4629      	mov	r1, r5
 8009764:	4620      	mov	r0, r4
 8009766:	f7ff fec9 	bl	80094fc <I2C_WaitOnSTOPFlagUntilTimeout>
 800976a:	b9f8      	cbnz	r0, 80097ac <HAL_I2C_Mem_Write+0x1a4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	2220      	movs	r2, #32
 8009770:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009772:	6821      	ldr	r1, [r4, #0]
 8009774:	684b      	ldr	r3, [r1, #4]
 8009776:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 800977a:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 800977e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8009782:	f023 0301 	bic.w	r3, r3, #1
 8009786:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009788:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800978c:	2300      	movs	r3, #0
 800978e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8009792:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8009796:	e000      	b.n	800979a <HAL_I2C_Mem_Write+0x192>
    return HAL_BUSY;
 8009798:	2002      	movs	r0, #2
}
 800979a:	b003      	add	sp, #12
 800979c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80097a0:	2002      	movs	r0, #2
 80097a2:	e7fa      	b.n	800979a <HAL_I2C_Mem_Write+0x192>
        return HAL_ERROR;
 80097a4:	2001      	movs	r0, #1
 80097a6:	e7f8      	b.n	800979a <HAL_I2C_Mem_Write+0x192>
          return HAL_ERROR;
 80097a8:	2001      	movs	r0, #1
 80097aa:	e7f6      	b.n	800979a <HAL_I2C_Mem_Write+0x192>
      return HAL_ERROR;
 80097ac:	2001      	movs	r0, #1
 80097ae:	e7f4      	b.n	800979a <HAL_I2C_Mem_Write+0x192>

080097b0 <HAL_I2C_Mem_Read>:
{
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	b083      	sub	sp, #12
 80097b6:	460e      	mov	r6, r1
 80097b8:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80097bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80097be:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80097c2:	b2c9      	uxtb	r1, r1
 80097c4:	2920      	cmp	r1, #32
 80097c6:	f040 80bc 	bne.w	8009942 <HAL_I2C_Mem_Read+0x192>
 80097ca:	4604      	mov	r4, r0
 80097cc:	4690      	mov	r8, r2
 80097ce:	4699      	mov	r9, r3
    if ((pData == NULL) || (Size == 0U))
 80097d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80097d2:	b1cb      	cbz	r3, 8009808 <HAL_I2C_Mem_Read+0x58>
 80097d4:	f1ba 0f00 	cmp.w	sl, #0
 80097d8:	d016      	beq.n	8009808 <HAL_I2C_Mem_Read+0x58>
    __HAL_LOCK(hi2c);
 80097da:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80097de:	2b01      	cmp	r3, #1
 80097e0:	f000 80b3 	beq.w	800994a <HAL_I2C_Mem_Read+0x19a>
 80097e4:	f04f 0b01 	mov.w	fp, #1
 80097e8:	f880 b040 	strb.w	fp, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80097ec:	f7f9 f86c 	bl	80028c8 <HAL_GetTick>
 80097f0:	4607      	mov	r7, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80097f2:	9000      	str	r0, [sp, #0]
 80097f4:	2319      	movs	r3, #25
 80097f6:	465a      	mov	r2, fp
 80097f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097fc:	4620      	mov	r0, r4
 80097fe:	f7ff fdd8 	bl	80093b2 <I2C_WaitOnFlagUntilTimeout>
 8009802:	b130      	cbz	r0, 8009812 <HAL_I2C_Mem_Read+0x62>
      return HAL_ERROR;
 8009804:	2001      	movs	r0, #1
 8009806:	e09d      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800980c:	6463      	str	r3, [r4, #68]	; 0x44
      return  HAL_ERROR;
 800980e:	2001      	movs	r0, #1
 8009810:	e098      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009812:	2322      	movs	r3, #34	; 0x22
 8009814:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009818:	2340      	movs	r3, #64	; 0x40
 800981a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800981e:	2300      	movs	r3, #0
 8009820:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8009822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009824:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8009826:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800982a:	6363      	str	r3, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800982c:	9701      	str	r7, [sp, #4]
 800982e:	9500      	str	r5, [sp, #0]
 8009830:	464b      	mov	r3, r9
 8009832:	4642      	mov	r2, r8
 8009834:	4631      	mov	r1, r6
 8009836:	4620      	mov	r0, r4
 8009838:	f7ff fe24 	bl	8009484 <I2C_RequestMemoryRead>
 800983c:	b970      	cbnz	r0, 800985c <HAL_I2C_Mem_Read+0xac>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800983e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009840:	b29b      	uxth	r3, r3
 8009842:	2bff      	cmp	r3, #255	; 0xff
 8009844:	d90f      	bls.n	8009866 <HAL_I2C_Mem_Read+0xb6>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009846:	22ff      	movs	r2, #255	; 0xff
 8009848:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800984a:	4b44      	ldr	r3, [pc, #272]	; (800995c <HAL_I2C_Mem_Read+0x1ac>)
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009852:	4631      	mov	r1, r6
 8009854:	4620      	mov	r0, r4
 8009856:	f7ff fcda 	bl	800920e <I2C_TransferConfig>
 800985a:	e021      	b.n	80098a0 <HAL_I2C_Mem_Read+0xf0>
      __HAL_UNLOCK(hi2c);
 800985c:	2300      	movs	r3, #0
 800985e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8009862:	4658      	mov	r0, fp
 8009864:	e06e      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
      hi2c->XferSize = hi2c->XferCount;
 8009866:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009868:	b292      	uxth	r2, r2
 800986a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800986c:	4b3b      	ldr	r3, [pc, #236]	; (800995c <HAL_I2C_Mem_Read+0x1ac>)
 800986e:	9300      	str	r3, [sp, #0]
 8009870:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	4631      	mov	r1, r6
 8009878:	4620      	mov	r0, r4
 800987a:	f7ff fcc8 	bl	800920e <I2C_TransferConfig>
 800987e:	e00f      	b.n	80098a0 <HAL_I2C_Mem_Read+0xf0>
          hi2c->XferSize = hi2c->XferCount;
 8009880:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009882:	b292      	uxth	r2, r2
 8009884:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009886:	2300      	movs	r3, #0
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800988e:	b2d2      	uxtb	r2, r2
 8009890:	4631      	mov	r1, r6
 8009892:	4620      	mov	r0, r4
 8009894:	f7ff fcbb 	bl	800920e <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009898:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800989a:	b29b      	uxth	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	d034      	beq.n	800990a <HAL_I2C_Mem_Read+0x15a>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80098a0:	9700      	str	r7, [sp, #0]
 80098a2:	462b      	mov	r3, r5
 80098a4:	2200      	movs	r2, #0
 80098a6:	2104      	movs	r1, #4
 80098a8:	4620      	mov	r0, r4
 80098aa:	f7ff fd82 	bl	80093b2 <I2C_WaitOnFlagUntilTimeout>
 80098ae:	2800      	cmp	r0, #0
 80098b0:	d14d      	bne.n	800994e <HAL_I2C_Mem_Read+0x19e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80098b2:	6823      	ldr	r3, [r4, #0]
 80098b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80098b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80098ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098bc:	3301      	adds	r3, #1
 80098be:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80098c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80098c2:	3a01      	subs	r2, #1
 80098c4:	b292      	uxth	r2, r2
 80098c6:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80098c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	3b01      	subs	r3, #1
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80098d2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0de      	beq.n	8009898 <HAL_I2C_Mem_Read+0xe8>
 80098da:	2a00      	cmp	r2, #0
 80098dc:	d1dc      	bne.n	8009898 <HAL_I2C_Mem_Read+0xe8>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80098de:	9700      	str	r7, [sp, #0]
 80098e0:	462b      	mov	r3, r5
 80098e2:	2180      	movs	r1, #128	; 0x80
 80098e4:	4620      	mov	r0, r4
 80098e6:	f7ff fd64 	bl	80093b2 <I2C_WaitOnFlagUntilTimeout>
 80098ea:	bb90      	cbnz	r0, 8009952 <HAL_I2C_Mem_Read+0x1a2>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098ec:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	2bff      	cmp	r3, #255	; 0xff
 80098f2:	d9c5      	bls.n	8009880 <HAL_I2C_Mem_Read+0xd0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098f4:	22ff      	movs	r2, #255	; 0xff
 80098f6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80098f8:	2300      	movs	r3, #0
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009900:	4631      	mov	r1, r6
 8009902:	4620      	mov	r0, r4
 8009904:	f7ff fc83 	bl	800920e <I2C_TransferConfig>
 8009908:	e7c6      	b.n	8009898 <HAL_I2C_Mem_Read+0xe8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800990a:	463a      	mov	r2, r7
 800990c:	4629      	mov	r1, r5
 800990e:	4620      	mov	r0, r4
 8009910:	f7ff fdf4 	bl	80094fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009914:	b9f8      	cbnz	r0, 8009956 <HAL_I2C_Mem_Read+0x1a6>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009916:	6823      	ldr	r3, [r4, #0]
 8009918:	2220      	movs	r2, #32
 800991a:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800991c:	6821      	ldr	r1, [r4, #0]
 800991e:	684b      	ldr	r3, [r1, #4]
 8009920:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8009924:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8009928:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009932:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009936:	2300      	movs	r3, #0
 8009938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 800993c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    return HAL_OK;
 8009940:	e000      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
    return HAL_BUSY;
 8009942:	2002      	movs	r0, #2
}
 8009944:	b003      	add	sp, #12
 8009946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800994a:	2002      	movs	r0, #2
 800994c:	e7fa      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
        return HAL_ERROR;
 800994e:	2001      	movs	r0, #1
 8009950:	e7f8      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
          return HAL_ERROR;
 8009952:	2001      	movs	r0, #1
 8009954:	e7f6      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
      return HAL_ERROR;
 8009956:	2001      	movs	r0, #1
 8009958:	e7f4      	b.n	8009944 <HAL_I2C_Mem_Read+0x194>
 800995a:	bf00      	nop
 800995c:	80002400 	.word	0x80002400

08009960 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009960:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009962:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8009966:	b2d2      	uxtb	r2, r2
 8009968:	2a20      	cmp	r2, #32
 800996a:	d123      	bne.n	80099b4 <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800996c:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8009970:	2a01      	cmp	r2, #1
 8009972:	d021      	beq.n	80099b8 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8009974:	2201      	movs	r2, #1
 8009976:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800997a:	2224      	movs	r2, #36	; 0x24
 800997c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009980:	6800      	ldr	r0, [r0, #0]
 8009982:	6802      	ldr	r2, [r0, #0]
 8009984:	f022 0201 	bic.w	r2, r2, #1
 8009988:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800998a:	6818      	ldr	r0, [r3, #0]
 800998c:	6802      	ldr	r2, [r0, #0]
 800998e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009992:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009994:	6818      	ldr	r0, [r3, #0]
 8009996:	6802      	ldr	r2, [r0, #0]
 8009998:	4311      	orrs	r1, r2
 800999a:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 800999c:	6819      	ldr	r1, [r3, #0]
 800999e:	680a      	ldr	r2, [r1, #0]
 80099a0:	f042 0201 	orr.w	r2, r2, #1
 80099a4:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099a6:	2220      	movs	r2, #32
 80099a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099ac:	2000      	movs	r0, #0
 80099ae:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 80099b2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 80099b4:	2002      	movs	r0, #2
 80099b6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 80099b8:	2002      	movs	r0, #2
  }
}
 80099ba:	4770      	bx	lr

080099bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099bc:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80099be:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80099c2:	b2d2      	uxtb	r2, r2
 80099c4:	2a20      	cmp	r2, #32
 80099c6:	d121      	bne.n	8009a0c <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099c8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80099cc:	2a01      	cmp	r2, #1
 80099ce:	d01f      	beq.n	8009a10 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 80099d0:	2201      	movs	r2, #1
 80099d2:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80099d6:	2224      	movs	r2, #36	; 0x24
 80099d8:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80099dc:	6800      	ldr	r0, [r0, #0]
 80099de:	6802      	ldr	r2, [r0, #0]
 80099e0:	f022 0201 	bic.w	r2, r2, #1
 80099e4:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80099e6:	6818      	ldr	r0, [r3, #0]
 80099e8:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80099ea:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80099ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80099f2:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099f4:	6819      	ldr	r1, [r3, #0]
 80099f6:	680a      	ldr	r2, [r1, #0]
 80099f8:	f042 0201 	orr.w	r2, r2, #1
 80099fc:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099fe:	2220      	movs	r2, #32
 8009a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a04:	2000      	movs	r0, #0
 8009a06:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8009a0a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8009a0c:	2002      	movs	r0, #2
 8009a0e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8009a10:	2002      	movs	r0, #2
  }
}
 8009a12:	4770      	bx	lr

08009a14 <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a14:	4a02      	ldr	r2, [pc, #8]	; (8009a20 <HAL_PWR_EnableBkUpAccess+0xc>)
 8009a16:	6813      	ldr	r3, [r2, #0]
 8009a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a1c:	6013      	str	r3, [r2, #0]
}
 8009a1e:	4770      	bx	lr
 8009a20:	58000400 	.word	0x58000400

08009a24 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8009a24:	b510      	push	{r4, lr}
 8009a26:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8009a28:	b9a0      	cbnz	r0, 8009a54 <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8009a2a:	4b0f      	ldr	r3, [pc, #60]	; (8009a68 <HAL_PWR_EnterSLEEPMode+0x44>)
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009a32:	d10a      	bne.n	8009a4a <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009a34:	4a0d      	ldr	r2, [pc, #52]	; (8009a6c <HAL_PWR_EnterSLEEPMode+0x48>)
 8009a36:	6913      	ldr	r3, [r2, #16]
 8009a38:	f023 0304 	bic.w	r3, r3, #4
 8009a3c:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8009a3e:	2c01      	cmp	r4, #1
 8009a40:	d010      	beq.n	8009a64 <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009a42:	bf40      	sev
    __WFE();
 8009a44:	bf20      	wfe
    __WFE();
 8009a46:	bf20      	wfe
  }
}
 8009a48:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8009a4a:	f000 f821 	bl	8009a90 <HAL_PWREx_DisableLowPowerRunMode>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	d0f0      	beq.n	8009a34 <HAL_PWR_EnterSLEEPMode+0x10>
 8009a52:	e7f9      	b.n	8009a48 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8009a54:	4b04      	ldr	r3, [pc, #16]	; (8009a68 <HAL_PWR_EnterSLEEPMode+0x44>)
 8009a56:	695b      	ldr	r3, [r3, #20]
 8009a58:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009a5c:	d1ea      	bne.n	8009a34 <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8009a5e:	f000 f80f 	bl	8009a80 <HAL_PWREx_EnableLowPowerRunMode>
 8009a62:	e7e7      	b.n	8009a34 <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8009a64:	bf30      	wfi
 8009a66:	e7ef      	b.n	8009a48 <HAL_PWR_EnterSLEEPMode+0x24>
 8009a68:	58000400 	.word	0x58000400
 8009a6c:	e000ed00 	.word	0xe000ed00

08009a70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8009a70:	4b02      	ldr	r3, [pc, #8]	; (8009a7c <HAL_PWREx_GetVoltageRange+0xc>)
 8009a72:	6818      	ldr	r0, [r3, #0]
}
 8009a74:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	58000400 	.word	0x58000400

08009a80 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8009a80:	4a02      	ldr	r2, [pc, #8]	; (8009a8c <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8009a82:	6813      	ldr	r3, [r2, #0]
 8009a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a88:	6013      	str	r3, [r2, #0]
}
 8009a8a:	4770      	bx	lr
 8009a8c:	58000400 	.word	0x58000400

08009a90 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8009a90:	4a0f      	ldr	r2, [pc, #60]	; (8009ad0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8009a92:	6813      	ldr	r3, [r2, #0]
 8009a94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a98:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8009a9a:	4b0e      	ldr	r3, [pc, #56]	; (8009ad4 <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2232      	movs	r2, #50	; 0x32
 8009aa0:	fb02 f303 	mul.w	r3, r2, r3
 8009aa4:	4a0c      	ldr	r2, [pc, #48]	; (8009ad8 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8009aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8009aaa:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8009aac:	e000      	b.n	8009ab0 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8009aae:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8009ab0:	4a07      	ldr	r2, [pc, #28]	; (8009ad0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8009ab2:	6952      	ldr	r2, [r2, #20]
 8009ab4:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009ab8:	d001      	beq.n	8009abe <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d1f7      	bne.n	8009aae <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8009abe:	4b04      	ldr	r3, [pc, #16]	; (8009ad0 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8009ac0:	695b      	ldr	r3, [r3, #20]
 8009ac2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009ac6:	d101      	bne.n	8009acc <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8009ac8:	2000      	movs	r0, #0
 8009aca:	4770      	bx	lr
    return HAL_TIMEOUT;
 8009acc:	2003      	movs	r0, #3
}
 8009ace:	4770      	bx	lr
 8009ad0:	58000400 	.word	0x58000400
 8009ad4:	200000d4 	.word	0x200000d4
 8009ad8:	431bde83 	.word	0x431bde83

08009adc <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8009adc:	4a0c      	ldr	r2, [pc, #48]	; (8009b10 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8009ade:	6813      	ldr	r3, [r2, #0]
 8009ae0:	f023 0307 	bic.w	r3, r3, #7
 8009ae4:	f043 0302 	orr.w	r3, r3, #2
 8009ae8:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009aea:	4a0a      	ldr	r2, [pc, #40]	; (8009b14 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8009aec:	6913      	ldr	r3, [r2, #16]
 8009aee:	f043 0304 	orr.w	r3, r3, #4
 8009af2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8009af4:	2801      	cmp	r0, #1
 8009af6:	d008      	beq.n	8009b0a <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8009af8:	bf40      	sev
    __WFE();
 8009afa:	bf20      	wfe
    __WFE();
 8009afc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8009afe:	4a05      	ldr	r2, [pc, #20]	; (8009b14 <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8009b00:	6913      	ldr	r3, [r2, #16]
 8009b02:	f023 0304 	bic.w	r3, r3, #4
 8009b06:	6113      	str	r3, [r2, #16]
}
 8009b08:	4770      	bx	lr
    __WFI();
 8009b0a:	bf30      	wfi
 8009b0c:	e7f7      	b.n	8009afe <HAL_PWREx_EnterSTOP2Mode+0x22>
 8009b0e:	bf00      	nop
 8009b10:	58000400 	.word	0x58000400
 8009b14:	e000ed00 	.word	0xe000ed00

08009b18 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8009b18:	b530      	push	{r4, r5, lr}
 8009b1a:	b089      	sub	sp, #36	; 0x24
 8009b1c:	4604      	mov	r4, r0
 8009b1e:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8009b20:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <RCC_SetFlashLatency+0xb4>)
 8009b22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009b26:	9006      	str	r0, [sp, #24]
 8009b28:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8009b2c:	f103 0208 	add.w	r2, r3, #8
 8009b30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009b34:	9004      	str	r0, [sp, #16]
 8009b36:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8009b3a:	ad01      	add	r5, sp, #4
 8009b3c:	3310      	adds	r3, #16
 8009b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b42:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009b46:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009b4a:	d007      	beq.n	8009b5c <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	e014      	b.n	8009b7a <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8009b50:	aa08      	add	r2, sp, #32
 8009b52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b56:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8009b5a:	e01e      	b.n	8009b9a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d808      	bhi.n	8009b74 <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8009b62:	aa08      	add	r2, sp, #32
 8009b64:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009b68:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8009b6c:	42a2      	cmp	r2, r4
 8009b6e:	d2ef      	bcs.n	8009b50 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009b70:	3301      	adds	r3, #1
 8009b72:	e7f4      	b.n	8009b5e <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009b74:	2500      	movs	r5, #0
 8009b76:	e010      	b.n	8009b9a <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009b78:	3301      	adds	r3, #1
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d80c      	bhi.n	8009b98 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009b7e:	aa08      	add	r2, sp, #32
 8009b80:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8009b84:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8009b88:	42a2      	cmp	r2, r4
 8009b8a:	d3f5      	bcc.n	8009b78 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009b8c:	aa08      	add	r2, sp, #32
 8009b8e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009b92:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8009b96:	e000      	b.n	8009b9a <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8009b98:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009b9a:	4a0d      	ldr	r2, [pc, #52]	; (8009bd0 <RCC_SetFlashLatency+0xb8>)
 8009b9c:	6813      	ldr	r3, [r2, #0]
 8009b9e:	f023 0307 	bic.w	r3, r3, #7
 8009ba2:	432b      	orrs	r3, r5
 8009ba4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ba6:	f7f8 fe8f 	bl	80028c8 <HAL_GetTick>
 8009baa:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8009bac:	4b08      	ldr	r3, [pc, #32]	; (8009bd0 <RCC_SetFlashLatency+0xb8>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f003 0307 	and.w	r3, r3, #7
 8009bb4:	42ab      	cmp	r3, r5
 8009bb6:	d006      	beq.n	8009bc6 <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009bb8:	f7f8 fe86 	bl	80028c8 <HAL_GetTick>
 8009bbc:	1b00      	subs	r0, r0, r4
 8009bbe:	2802      	cmp	r0, #2
 8009bc0:	d9f4      	bls.n	8009bac <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 8009bc2:	2003      	movs	r0, #3
 8009bc4:	e000      	b.n	8009bc8 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 8009bc6:	2000      	movs	r0, #0
}
 8009bc8:	b009      	add	sp, #36	; 0x24
 8009bca:	bd30      	pop	{r4, r5, pc}
 8009bcc:	0801c1b8 	.word	0x0801c1b8
 8009bd0:	58004000 	.word	0x58004000

08009bd4 <RCC_SetFlashLatencyFromMSIRange>:
{
 8009bd4:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8009bd6:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8009bda:	4b0c      	ldr	r3, [pc, #48]	; (8009c0c <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8009bdc:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8009be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009be4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8009be8:	f003 030f 	and.w	r3, r3, #15
 8009bec:	4a08      	ldr	r2, [pc, #32]	; (8009c10 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8009bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009bf2:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8009bf6:	f7ff ff3b 	bl	8009a70 <HAL_PWREx_GetVoltageRange>
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	4b05      	ldr	r3, [pc, #20]	; (8009c14 <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8009bfe:	fba3 3404 	umull	r3, r4, r3, r4
 8009c02:	0ca0      	lsrs	r0, r4, #18
 8009c04:	f7ff ff88 	bl	8009b18 <RCC_SetFlashLatency>
}
 8009c08:	bd10      	pop	{r4, pc}
 8009c0a:	bf00      	nop
 8009c0c:	0801e0ac 	.word	0x0801e0ac
 8009c10:	0801e04c 	.word	0x0801e04c
 8009c14:	431bde83 	.word	0x431bde83

08009c18 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009c18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c1c:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009c24:	f011 010c 	ands.w	r1, r1, #12
 8009c28:	d00a      	beq.n	8009c40 <HAL_RCC_GetSysClockFreq+0x28>
 8009c2a:	290c      	cmp	r1, #12
 8009c2c:	d006      	beq.n	8009c3c <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c2e:	2904      	cmp	r1, #4
 8009c30:	d047      	beq.n	8009cc2 <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009c32:	2908      	cmp	r1, #8
 8009c34:	d03b      	beq.n	8009cae <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 8009c36:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8009c38:	4610      	mov	r0, r2
 8009c3a:	e026      	b.n	8009c8a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d1f6      	bne.n	8009c2e <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8009c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f013 0308 	ands.w	r3, r3, #8
 8009c4a:	d00d      	beq.n	8009c68 <HAL_RCC_GetSysClockFreq+0x50>
 8009c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f013 0308 	ands.w	r3, r3, #8
 8009c56:	d124      	bne.n	8009ca2 <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009c58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c5c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009c60:	4a2e      	ldr	r2, [pc, #184]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x104>)
 8009c62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8009c66:	e00e      	b.n	8009c86 <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8009c68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c6c:	6812      	ldr	r2, [r2, #0]
 8009c6e:	f012 0f08 	tst.w	r2, #8
 8009c72:	d112      	bne.n	8009c9a <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8009c74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009c7c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009c80:	4a26      	ldr	r2, [pc, #152]	; (8009d1c <HAL_RCC_GetSysClockFreq+0x104>)
 8009c82:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c86:	b1d1      	cbz	r1, 8009cbe <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8009c88:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009c8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009c94:	2b0c      	cmp	r3, #12
 8009c96:	d01a      	beq.n	8009cce <HAL_RCC_GetSysClockFreq+0xb6>
}
 8009c98:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8009c9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009c9e:	6812      	ldr	r2, [r2, #0]
 8009ca0:	e7ee      	b.n	8009c80 <HAL_RCC_GetSysClockFreq+0x68>
 8009ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ca6:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8009ca8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009cac:	e7d8      	b.n	8009c60 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8009cae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8009cb8:	d106      	bne.n	8009cc8 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8009cba:	4819      	ldr	r0, [pc, #100]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cbc:	e7e5      	b.n	8009c8a <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8009cbe:	4610      	mov	r0, r2
 8009cc0:	e7e3      	b.n	8009c8a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8009cc2:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 8009cc4:	4817      	ldr	r0, [pc, #92]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009cc6:	e7e0      	b.n	8009c8a <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8009cc8:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8009cca:	4816      	ldr	r0, [pc, #88]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009ccc:	e7dd      	b.n	8009c8a <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d009      	beq.n	8009cf0 <HAL_RCC_GetSysClockFreq+0xd8>
 8009cdc:	2b03      	cmp	r3, #3
 8009cde:	d108      	bne.n	8009cf2 <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8009ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8009cea:	d115      	bne.n	8009d18 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8009cec:	4a0c      	ldr	r2, [pc, #48]	; (8009d20 <HAL_RCC_GetSysClockFreq+0x108>)
 8009cee:	e000      	b.n	8009cf2 <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8009cf0:	4a0c      	ldr	r2, [pc, #48]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009cf6:	68cb      	ldr	r3, [r1, #12]
 8009cf8:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8009cfc:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8009d00:	68cb      	ldr	r3, [r1, #12]
 8009d02:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009d06:	3301      	adds	r3, #1
 8009d08:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009d0c:	68c8      	ldr	r0, [r1, #12]
 8009d0e:	0f40      	lsrs	r0, r0, #29
 8009d10:	3001      	adds	r0, #1
 8009d12:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 8009d16:	e7bf      	b.n	8009c98 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8009d18:	4a02      	ldr	r2, [pc, #8]	; (8009d24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009d1a:	e7ea      	b.n	8009cf2 <HAL_RCC_GetSysClockFreq+0xda>
 8009d1c:	0801e0ac 	.word	0x0801e0ac
 8009d20:	01e84800 	.word	0x01e84800
 8009d24:	00f42400 	.word	0x00f42400

08009d28 <HAL_RCC_GetHCLKFreq>:
{
 8009d28:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009d2a:	f7ff ff75 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8009d38:	4a02      	ldr	r2, [pc, #8]	; (8009d44 <HAL_RCC_GetHCLKFreq+0x1c>)
 8009d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8009d3e:	fbb0 f0f3 	udiv	r0, r0, r3
 8009d42:	bd08      	pop	{r3, pc}
 8009d44:	0801e04c 	.word	0x0801e04c

08009d48 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	f000 8311 	beq.w	800a370 <HAL_RCC_OscConfig+0x628>
{
 8009d4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d50:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8009d52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d56:	689d      	ldr	r5, [r3, #8]
 8009d58:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8009d5c:	68de      	ldr	r6, [r3, #12]
 8009d5e:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009d62:	6803      	ldr	r3, [r0, #0]
 8009d64:	f013 0f20 	tst.w	r3, #32
 8009d68:	d02a      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009d6a:	2d00      	cmp	r5, #0
 8009d6c:	d065      	beq.n	8009e3a <HAL_RCC_OscConfig+0xf2>
 8009d6e:	2d0c      	cmp	r5, #12
 8009d70:	d061      	beq.n	8009e36 <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009d72:	6a23      	ldr	r3, [r4, #32]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f000 80bf 	beq.w	8009ef8 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8009d7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d7e:	6813      	ldr	r3, [r2, #0]
 8009d80:	f043 0301 	orr.w	r3, r3, #1
 8009d84:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009d86:	f7f8 fd9f 	bl	80028c8 <HAL_GetTick>
 8009d8a:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f013 0f02 	tst.w	r3, #2
 8009d96:	f000 80a7 	beq.w	8009ee8 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d9e:	681a      	ldr	r2, [r3, #0]
 8009da0:	f042 0208 	orr.w	r2, r2, #8
 8009da4:	601a      	str	r2, [r3, #0]
 8009da6:	681a      	ldr	r2, [r3, #0]
 8009da8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009dac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009dae:	430a      	orrs	r2, r1
 8009db0:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009db2:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009db4:	685a      	ldr	r2, [r3, #4]
 8009db6:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009dba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009dbe:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dc0:	6823      	ldr	r3, [r4, #0]
 8009dc2:	f013 0f01 	tst.w	r3, #1
 8009dc6:	f000 80b5 	beq.w	8009f34 <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009dca:	2d08      	cmp	r5, #8
 8009dcc:	f000 80ae 	beq.w	8009f2c <HAL_RCC_OscConfig+0x1e4>
 8009dd0:	2d0c      	cmp	r5, #12
 8009dd2:	f000 80a8 	beq.w	8009f26 <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8009dd6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dda:	6813      	ldr	r3, [r2, #0]
 8009ddc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009de0:	68a1      	ldr	r1, [r4, #8]
 8009de2:	430b      	orrs	r3, r1
 8009de4:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009de6:	6863      	ldr	r3, [r4, #4]
 8009de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dec:	f000 80c4 	beq.w	8009f78 <HAL_RCC_OscConfig+0x230>
 8009df0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8009df4:	f000 80c5 	beq.w	8009f82 <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8009df8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009e02:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8009e04:	681a      	ldr	r2, [r3, #0]
 8009e06:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8009e0a:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e0c:	6863      	ldr	r3, [r4, #4]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 80c2 	beq.w	8009f98 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 8009e14:	f7f8 fd58 	bl	80028c8 <HAL_GetTick>
 8009e18:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009e1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009e24:	f040 8086 	bne.w	8009f34 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009e28:	f7f8 fd4e 	bl	80028c8 <HAL_GetTick>
 8009e2c:	1bc0      	subs	r0, r0, r7
 8009e2e:	2864      	cmp	r0, #100	; 0x64
 8009e30:	d9f3      	bls.n	8009e1a <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8009e32:	2003      	movs	r0, #3
 8009e34:	e2a9      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009e36:	2e01      	cmp	r6, #1
 8009e38:	d19b      	bne.n	8009d72 <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8009e3a:	6a23      	ldr	r3, [r4, #32]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f000 8299 	beq.w	800a374 <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009e42:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f013 0f08 	tst.w	r3, #8
 8009e4e:	d029      	beq.n	8009ea4 <HAL_RCC_OscConfig+0x15c>
 8009e50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e5a:	4298      	cmp	r0, r3
 8009e5c:	d92a      	bls.n	8009eb4 <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009e5e:	f7ff feb9 	bl	8009bd4 <RCC_SetFlashLatencyFromMSIRange>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f040 8288 	bne.w	800a378 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009e68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	f042 0208 	orr.w	r2, r2, #8
 8009e72:	601a      	str	r2, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009e7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009e80:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009e82:	685a      	ldr	r2, [r3, #4]
 8009e84:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009e88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009e8c:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009e8e:	f7ff ff4b 	bl	8009d28 <HAL_RCC_GetHCLKFreq>
 8009e92:	4bba      	ldr	r3, [pc, #744]	; (800a17c <HAL_RCC_OscConfig+0x434>)
 8009e94:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8009e96:	4bba      	ldr	r3, [pc, #744]	; (800a180 <HAL_RCC_OscConfig+0x438>)
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	f7f8 fd13 	bl	80028c4 <HAL_InitTick>
        if (status != HAL_OK)
 8009e9e:	2800      	cmp	r0, #0
 8009ea0:	d08e      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x78>
 8009ea2:	e272      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8009ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009eac:	091b      	lsrs	r3, r3, #4
 8009eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009eb2:	e7d2      	b.n	8009e5a <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	f042 0208 	orr.w	r2, r2, #8
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8009ec6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009ec8:	430a      	orrs	r2, r1
 8009eca:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009ecc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ece:	685a      	ldr	r2, [r3, #4]
 8009ed0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8009ed4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009ed8:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009eda:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009edc:	f7ff fe7a 	bl	8009bd4 <RCC_SetFlashLatencyFromMSIRange>
 8009ee0:	2800      	cmp	r0, #0
 8009ee2:	d0d4      	beq.n	8009e8e <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 8009ee4:	2001      	movs	r0, #1
 8009ee6:	e250      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009ee8:	f7f8 fcee 	bl	80028c8 <HAL_GetTick>
 8009eec:	1bc0      	subs	r0, r0, r7
 8009eee:	2802      	cmp	r0, #2
 8009ef0:	f67f af4c 	bls.w	8009d8c <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 8009ef4:	2003      	movs	r0, #3
 8009ef6:	e248      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009ef8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009efc:	6813      	ldr	r3, [r2, #0]
 8009efe:	f023 0301 	bic.w	r3, r3, #1
 8009f02:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009f04:	f7f8 fce0 	bl	80028c8 <HAL_GetTick>
 8009f08:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009f0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f013 0f02 	tst.w	r3, #2
 8009f14:	f43f af54 	beq.w	8009dc0 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009f18:	f7f8 fcd6 	bl	80028c8 <HAL_GetTick>
 8009f1c:	1bc0      	subs	r0, r0, r7
 8009f1e:	2802      	cmp	r0, #2
 8009f20:	d9f3      	bls.n	8009f0a <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 8009f22:	2003      	movs	r0, #3
 8009f24:	e231      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009f26:	2e03      	cmp	r6, #3
 8009f28:	f47f af55 	bne.w	8009dd6 <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009f2c:	6863      	ldr	r3, [r4, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 8224 	beq.w	800a37c <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009f34:	6823      	ldr	r3, [r4, #0]
 8009f36:	f013 0f02 	tst.w	r3, #2
 8009f3a:	d056      	beq.n	8009fea <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009f3c:	2d04      	cmp	r5, #4
 8009f3e:	d03d      	beq.n	8009fbc <HAL_RCC_OscConfig+0x274>
 8009f40:	2d0c      	cmp	r5, #12
 8009f42:	d039      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	f000 808a 	beq.w	800a060 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009f4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f50:	6813      	ldr	r3, [r2, #0]
 8009f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f56:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8009f58:	f7f8 fcb6 	bl	80028c8 <HAL_GetTick>
 8009f5c:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8009f68:	d136      	bne.n	8009fd8 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f6a:	f7f8 fcad 	bl	80028c8 <HAL_GetTick>
 8009f6e:	1b80      	subs	r0, r0, r6
 8009f70:	2802      	cmp	r0, #2
 8009f72:	d9f4      	bls.n	8009f5e <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 8009f74:	2003      	movs	r0, #3
 8009f76:	e208      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009f78:	6813      	ldr	r3, [r2, #0]
 8009f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f7e:	6013      	str	r3, [r2, #0]
}
 8009f80:	e744      	b.n	8009e0c <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8009f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8009f8c:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009f94:	601a      	str	r2, [r3, #0]
}
 8009f96:	e739      	b.n	8009e0c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8009f98:	f7f8 fc96 	bl	80028c8 <HAL_GetTick>
 8009f9c:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009f9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8009fa8:	d0c4      	beq.n	8009f34 <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009faa:	f7f8 fc8d 	bl	80028c8 <HAL_GetTick>
 8009fae:	1bc0      	subs	r0, r0, r7
 8009fb0:	2864      	cmp	r0, #100	; 0x64
 8009fb2:	d9f4      	bls.n	8009f9e <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 8009fb4:	2003      	movs	r0, #3
 8009fb6:	e1e8      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009fb8:	2e02      	cmp	r6, #2
 8009fba:	d1c3      	bne.n	8009f44 <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009fbc:	6923      	ldr	r3, [r4, #16]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f000 81de 	beq.w	800a380 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fc4:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009fc6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fca:	6853      	ldr	r3, [r2, #4]
 8009fcc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009fd0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009fd4:	6053      	str	r3, [r2, #4]
}
 8009fd6:	e008      	b.n	8009fea <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fd8:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009fda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009fde:	6853      	ldr	r3, [r2, #4]
 8009fe0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009fe4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009fe8:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f013 0f08 	tst.w	r3, #8
 8009ff0:	d07e      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ff2:	69a3      	ldr	r3, [r4, #24]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d062      	beq.n	800a0be <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8009ff8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800a000:	69e1      	ldr	r1, [r4, #28]
 800a002:	f003 0210 	and.w	r2, r3, #16
 800a006:	4291      	cmp	r1, r2
 800a008:	d011      	beq.n	800a02e <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800a00a:	f003 0203 	and.w	r2, r3, #3
 800a00e:	2a02      	cmp	r2, #2
 800a010:	f000 81b8 	beq.w	800a384 <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800a014:	f013 0f01 	tst.w	r3, #1
 800a018:	d138      	bne.n	800a08c <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800a01a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a01e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a022:	f023 0310 	bic.w	r3, r3, #16
 800a026:	69e1      	ldr	r1, [r4, #28]
 800a028:	430b      	orrs	r3, r1
 800a02a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800a02e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a032:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a036:	f043 0301 	orr.w	r3, r3, #1
 800a03a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a03e:	f7f8 fc43 	bl	80028c8 <HAL_GetTick>
 800a042:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800a044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a048:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a04c:	f013 0f02 	tst.w	r3, #2
 800a050:	d14e      	bne.n	800a0f0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a052:	f7f8 fc39 	bl	80028c8 <HAL_GetTick>
 800a056:	1b80      	subs	r0, r0, r6
 800a058:	2811      	cmp	r0, #17
 800a05a:	d9f3      	bls.n	800a044 <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 800a05c:	2003      	movs	r0, #3
 800a05e:	e194      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a060:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a064:	6813      	ldr	r3, [r2, #0]
 800a066:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a06a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a06c:	f7f8 fc2c 	bl	80028c8 <HAL_GetTick>
 800a070:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a072:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a07c:	d0b5      	beq.n	8009fea <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a07e:	f7f8 fc23 	bl	80028c8 <HAL_GetTick>
 800a082:	1b80      	subs	r0, r0, r6
 800a084:	2802      	cmp	r0, #2
 800a086:	d9f4      	bls.n	800a072 <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 800a088:	2003      	movs	r0, #3
 800a08a:	e17e      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800a08c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a090:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a094:	f023 0301 	bic.w	r3, r3, #1
 800a098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 800a09c:	f7f8 fc14 	bl	80028c8 <HAL_GetTick>
 800a0a0:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800a0a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0aa:	f013 0f02 	tst.w	r3, #2
 800a0ae:	d0b4      	beq.n	800a01a <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0b0:	f7f8 fc0a 	bl	80028c8 <HAL_GetTick>
 800a0b4:	1b80      	subs	r0, r0, r6
 800a0b6:	2811      	cmp	r0, #17
 800a0b8:	d9f3      	bls.n	800a0a2 <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 800a0ba:	2003      	movs	r0, #3
 800a0bc:	e165      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800a0be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a0c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800a0c6:	f023 0301 	bic.w	r3, r3, #1
 800a0ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800a0ce:	f7f8 fbfb 	bl	80028c8 <HAL_GetTick>
 800a0d2:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800a0d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a0d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0dc:	f013 0f02 	tst.w	r3, #2
 800a0e0:	d006      	beq.n	800a0f0 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0e2:	f7f8 fbf1 	bl	80028c8 <HAL_GetTick>
 800a0e6:	1b80      	subs	r0, r0, r6
 800a0e8:	2811      	cmp	r0, #17
 800a0ea:	d9f3      	bls.n	800a0d4 <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 800a0ec:	2003      	movs	r0, #3
 800a0ee:	e14c      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	f013 0f04 	tst.w	r3, #4
 800a0f6:	f000 80b8 	beq.w	800a26a <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800a0fa:	4b22      	ldr	r3, [pc, #136]	; (800a184 <HAL_RCC_OscConfig+0x43c>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a102:	d110      	bne.n	800a126 <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 800a104:	f7ff fc86 	bl	8009a14 <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 800a108:	f7f8 fbde 	bl	80028c8 <HAL_GetTick>
 800a10c:	4606      	mov	r6, r0
 800a10e:	4b1d      	ldr	r3, [pc, #116]	; (800a184 <HAL_RCC_OscConfig+0x43c>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a116:	d106      	bne.n	800a126 <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a118:	f7f8 fbd6 	bl	80028c8 <HAL_GetTick>
 800a11c:	1b80      	subs	r0, r0, r6
 800a11e:	2802      	cmp	r0, #2
 800a120:	d9f5      	bls.n	800a10e <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800a122:	2003      	movs	r0, #3
 800a124:	e131      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a126:	68e3      	ldr	r3, [r4, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d068      	beq.n	800a1fe <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800a12c:	2b85      	cmp	r3, #133	; 0x85
 800a12e:	d001      	beq.n	800a134 <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800a130:	2b05      	cmp	r3, #5
 800a132:	d107      	bne.n	800a144 <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a138:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a13c:	f043 0304 	orr.w	r3, r3, #4
 800a140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800a144:	f7f8 fbc0 	bl	80028c8 <HAL_GetTick>
 800a148:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a14a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a14e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a152:	f043 0301 	orr.w	r3, r3, #1
 800a156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a15a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a162:	f013 0f02 	tst.w	r3, #2
 800a166:	d10f      	bne.n	800a188 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a168:	f7f8 fbae 	bl	80028c8 <HAL_GetTick>
 800a16c:	1b80      	subs	r0, r0, r6
 800a16e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a172:	4298      	cmp	r0, r3
 800a174:	d9f1      	bls.n	800a15a <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800a176:	2003      	movs	r0, #3
 800a178:	e107      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
 800a17a:	bf00      	nop
 800a17c:	200000d4 	.word	0x200000d4
 800a180:	200000d8 	.word	0x200000d8
 800a184:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 800a188:	68e3      	ldr	r3, [r4, #12]
 800a18a:	2b81      	cmp	r3, #129	; 0x81
 800a18c:	d001      	beq.n	800a192 <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800a18e:	2b85      	cmp	r3, #133	; 0x85
 800a190:	d11a      	bne.n	800a1c8 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800a192:	f7f8 fb99 	bl	80028c8 <HAL_GetTick>
 800a196:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a19c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a1a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800a1a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a1b4:	d159      	bne.n	800a26a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1b6:	f7f8 fb87 	bl	80028c8 <HAL_GetTick>
 800a1ba:	1b80      	subs	r0, r0, r6
 800a1bc:	f241 3388 	movw	r3, #5000	; 0x1388
 800a1c0:	4298      	cmp	r0, r3
 800a1c2:	d9f1      	bls.n	800a1a8 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 800a1c4:	2003      	movs	r0, #3
 800a1c6:	e0e0      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 800a1c8:	f7f8 fb7e 	bl	80028c8 <HAL_GetTick>
 800a1cc:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a1ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a1d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a1d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a1da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a1de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a1e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1e6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a1ea:	d03e      	beq.n	800a26a <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1ec:	f7f8 fb6c 	bl	80028c8 <HAL_GetTick>
 800a1f0:	1b80      	subs	r0, r0, r6
 800a1f2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a1f6:	4298      	cmp	r0, r3
 800a1f8:	d9f1      	bls.n	800a1de <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 800a1fa:	2003      	movs	r0, #3
 800a1fc:	e0c5      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800a1fe:	f7f8 fb63 	bl	80028c8 <HAL_GetTick>
 800a202:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800a204:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a208:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a20c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800a214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a21c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a220:	d008      	beq.n	800a234 <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a222:	f7f8 fb51 	bl	80028c8 <HAL_GetTick>
 800a226:	1b80      	subs	r0, r0, r6
 800a228:	f241 3388 	movw	r3, #5000	; 0x1388
 800a22c:	4298      	cmp	r0, r3
 800a22e:	d9f1      	bls.n	800a214 <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 800a230:	2003      	movs	r0, #3
 800a232:	e0aa      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800a234:	f7f8 fb48 	bl	80028c8 <HAL_GetTick>
 800a238:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a23a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a23e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800a242:	f023 0301 	bic.w	r3, r3, #1
 800a246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a24a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a252:	f013 0f02 	tst.w	r3, #2
 800a256:	d008      	beq.n	800a26a <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a258:	f7f8 fb36 	bl	80028c8 <HAL_GetTick>
 800a25c:	1b80      	subs	r0, r0, r6
 800a25e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a262:	4298      	cmp	r0, r3
 800a264:	d9f1      	bls.n	800a24a <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800a266:	2003      	movs	r0, #3
 800a268:	e08f      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a26a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	f000 808b 	beq.w	800a388 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a272:	2d0c      	cmp	r5, #12
 800a274:	d060      	beq.n	800a338 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a276:	2b02      	cmp	r3, #2
 800a278:	d016      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a27a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a27e:	6813      	ldr	r3, [r2, #0]
 800a280:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a284:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a286:	f7f8 fb1f 	bl	80028c8 <HAL_GetTick>
 800a28a:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a28c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a296:	d148      	bne.n	800a32a <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800a298:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a29c:	68d1      	ldr	r1, [r2, #12]
 800a29e:	4b41      	ldr	r3, [pc, #260]	; (800a3a4 <HAL_RCC_OscConfig+0x65c>)
 800a2a0:	400b      	ands	r3, r1
 800a2a2:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e070      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a2a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2ac:	6813      	ldr	r3, [r2, #0]
 800a2ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a2b2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800a2b4:	f7f8 fb08 	bl	80028c8 <HAL_GetTick>
 800a2b8:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a2ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a2c4:	d12a      	bne.n	800a31c <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a2ca:	68d3      	ldr	r3, [r2, #12]
 800a2cc:	4936      	ldr	r1, [pc, #216]	; (800a3a8 <HAL_RCC_OscConfig+0x660>)
 800a2ce:	4019      	ands	r1, r3
 800a2d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a2d2:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800a2d4:	4303      	orrs	r3, r0
 800a2d6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a2d8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800a2dc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800a2de:	4303      	orrs	r3, r0
 800a2e0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800a2e2:	4303      	orrs	r3, r0
 800a2e4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800a2e6:	4303      	orrs	r3, r0
 800a2e8:	4319      	orrs	r1, r3
 800a2ea:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a2ec:	6813      	ldr	r3, [r2, #0]
 800a2ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2f2:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a2f4:	68d3      	ldr	r3, [r2, #12]
 800a2f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2fa:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 800a2fc:	f7f8 fae4 	bl	80028c8 <HAL_GetTick>
 800a300:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a30c:	d13e      	bne.n	800a38c <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a30e:	f7f8 fadb 	bl	80028c8 <HAL_GetTick>
 800a312:	1b00      	subs	r0, r0, r4
 800a314:	280a      	cmp	r0, #10
 800a316:	d9f4      	bls.n	800a302 <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 800a318:	2003      	movs	r0, #3
 800a31a:	e036      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a31c:	f7f8 fad4 	bl	80028c8 <HAL_GetTick>
 800a320:	1b40      	subs	r0, r0, r5
 800a322:	280a      	cmp	r0, #10
 800a324:	d9c9      	bls.n	800a2ba <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800a326:	2003      	movs	r0, #3
 800a328:	e02f      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a32a:	f7f8 facd 	bl	80028c8 <HAL_GetTick>
 800a32e:	1b00      	subs	r0, r0, r4
 800a330:	280a      	cmp	r0, #10
 800a332:	d9ab      	bls.n	800a28c <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 800a334:	2003      	movs	r0, #3
 800a336:	e028      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d029      	beq.n	800a390 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 800a33c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a340:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800a342:	f003 0103 	and.w	r1, r3, #3
 800a346:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800a348:	4291      	cmp	r1, r2
 800a34a:	d123      	bne.n	800a394 <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800a34c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a352:	428a      	cmp	r2, r1
 800a354:	d120      	bne.n	800a398 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800a356:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a35a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a35c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 800a360:	d11c      	bne.n	800a39c <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800a362:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800a366:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800a368:	4293      	cmp	r3, r2
 800a36a:	d119      	bne.n	800a3a0 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 800a36c:	2000      	movs	r0, #0
 800a36e:	e00c      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 800a370:	2001      	movs	r0, #1
}
 800a372:	4770      	bx	lr
        return HAL_ERROR;
 800a374:	2001      	movs	r0, #1
 800a376:	e008      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 800a378:	2001      	movs	r0, #1
 800a37a:	e006      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800a37c:	2001      	movs	r0, #1
 800a37e:	e004      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800a380:	2001      	movs	r0, #1
 800a382:	e002      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800a384:	2001      	movs	r0, #1
 800a386:	e000      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 800a388:	2000      	movs	r0, #0
}
 800a38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 800a38c:	2000      	movs	r0, #0
 800a38e:	e7fc      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 800a390:	2001      	movs	r0, #1
 800a392:	e7fa      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800a394:	2001      	movs	r0, #1
 800a396:	e7f8      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
 800a398:	2001      	movs	r0, #1
 800a39a:	e7f6      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
 800a39c:	2001      	movs	r0, #1
 800a39e:	e7f4      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
 800a3a0:	2001      	movs	r0, #1
 800a3a2:	e7f2      	b.n	800a38a <HAL_RCC_OscConfig+0x642>
 800a3a4:	eefefffc 	.word	0xeefefffc
 800a3a8:	11c1808c 	.word	0x11c1808c

0800a3ac <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800a3ac:	2800      	cmp	r0, #0
 800a3ae:	f000 8127 	beq.w	800a600 <HAL_RCC_ClockConfig+0x254>
{
 800a3b2:	b570      	push	{r4, r5, r6, lr}
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a3b8:	4b93      	ldr	r3, [pc, #588]	; (800a608 <HAL_RCC_ClockConfig+0x25c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f003 0307 	and.w	r3, r3, #7
 800a3c0:	428b      	cmp	r3, r1
 800a3c2:	d32d      	bcc.n	800a420 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	f013 0f02 	tst.w	r3, #2
 800a3ca:	d13f      	bne.n	800a44c <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	f013 0f20 	tst.w	r3, #32
 800a3d2:	d153      	bne.n	800a47c <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a3da:	d16a      	bne.n	800a4b2 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	f013 0f04 	tst.w	r3, #4
 800a3e2:	f040 8083 	bne.w	800a4ec <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3e6:	682b      	ldr	r3, [r5, #0]
 800a3e8:	f013 0f08 	tst.w	r3, #8
 800a3ec:	f040 8097 	bne.w	800a51e <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	f013 0f01 	tst.w	r3, #1
 800a3f6:	f000 80de 	beq.w	800a5b6 <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a3fa:	686b      	ldr	r3, [r5, #4]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	f000 80a8 	beq.w	800a552 <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a402:	2b03      	cmp	r3, #3
 800a404:	f000 80ad 	beq.w	800a562 <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f040 80b2 	bne.w	800a572 <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a40e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a412:	6812      	ldr	r2, [r2, #0]
 800a414:	f012 0f02 	tst.w	r2, #2
 800a418:	f040 80b1 	bne.w	800a57e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800a41c:	2001      	movs	r0, #1
 800a41e:	e0ee      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a420:	4a79      	ldr	r2, [pc, #484]	; (800a608 <HAL_RCC_ClockConfig+0x25c>)
 800a422:	6813      	ldr	r3, [r2, #0]
 800a424:	f023 0307 	bic.w	r3, r3, #7
 800a428:	430b      	orrs	r3, r1
 800a42a:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800a42c:	f7f8 fa4c 	bl	80028c8 <HAL_GetTick>
 800a430:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a432:	4b75      	ldr	r3, [pc, #468]	; (800a608 <HAL_RCC_ClockConfig+0x25c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0307 	and.w	r3, r3, #7
 800a43a:	42a3      	cmp	r3, r4
 800a43c:	d0c2      	beq.n	800a3c4 <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a43e:	f7f8 fa43 	bl	80028c8 <HAL_GetTick>
 800a442:	1b80      	subs	r0, r0, r6
 800a444:	2802      	cmp	r0, #2
 800a446:	d9f4      	bls.n	800a432 <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 800a448:	2003      	movs	r0, #3
 800a44a:	e0d8      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800a44c:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a44e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a452:	688a      	ldr	r2, [r1, #8]
 800a454:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a458:	4313      	orrs	r3, r2
 800a45a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a45c:	f7f8 fa34 	bl	80028c8 <HAL_GetTick>
 800a460:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a46c:	d1ae      	bne.n	800a3cc <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a46e:	f7f8 fa2b 	bl	80028c8 <HAL_GetTick>
 800a472:	1b80      	subs	r0, r0, r6
 800a474:	2802      	cmp	r0, #2
 800a476:	d9f4      	bls.n	800a462 <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 800a478:	2003      	movs	r0, #3
 800a47a:	e0c0      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800a47c:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a47e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a482:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800a486:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800a48a:	4313      	orrs	r3, r2
 800a48c:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 800a490:	f7f8 fa1a 	bl	80028c8 <HAL_GetTick>
 800a494:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a49a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a49e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a4a2:	d197      	bne.n	800a3d4 <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a4a4:	f7f8 fa10 	bl	80028c8 <HAL_GetTick>
 800a4a8:	1b80      	subs	r0, r0, r6
 800a4aa:	2802      	cmp	r0, #2
 800a4ac:	d9f3      	bls.n	800a496 <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 800a4ae:	2003      	movs	r0, #3
 800a4b0:	e0a5      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800a4b2:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a4b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a4b8:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 800a4bc:	f023 030f 	bic.w	r3, r3, #15
 800a4c0:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 800a4c4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 800a4c8:	f7f8 f9fe 	bl	80028c8 <HAL_GetTick>
 800a4cc:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a4ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a4d6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a4da:	f47f af7f 	bne.w	800a3dc <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a4de:	f7f8 f9f3 	bl	80028c8 <HAL_GetTick>
 800a4e2:	1b80      	subs	r0, r0, r6
 800a4e4:	2802      	cmp	r0, #2
 800a4e6:	d9f2      	bls.n	800a4ce <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 800a4e8:	2003      	movs	r0, #3
 800a4ea:	e088      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a4ec:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a4ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a4f2:	688a      	ldr	r2, [r1, #8]
 800a4f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a4fc:	f7f8 f9e4 	bl	80028c8 <HAL_GetTick>
 800a500:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a502:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800a50c:	f47f af6b 	bne.w	800a3e6 <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a510:	f7f8 f9da 	bl	80028c8 <HAL_GetTick>
 800a514:	1b80      	subs	r0, r0, r6
 800a516:	2802      	cmp	r0, #2
 800a518:	d9f3      	bls.n	800a502 <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 800a51a:	2003      	movs	r0, #3
 800a51c:	e06f      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a51e:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a524:	6893      	ldr	r3, [r2, #8]
 800a526:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800a52a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800a52e:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800a530:	f7f8 f9ca 	bl	80028c8 <HAL_GetTick>
 800a534:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a536:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 800a540:	f47f af56 	bne.w	800a3f0 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a544:	f7f8 f9c0 	bl	80028c8 <HAL_GetTick>
 800a548:	1b80      	subs	r0, r0, r6
 800a54a:	2802      	cmp	r0, #2
 800a54c:	d9f3      	bls.n	800a536 <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 800a54e:	2003      	movs	r0, #3
 800a550:	e055      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a556:	6812      	ldr	r2, [r2, #0]
 800a558:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800a55c:	d10f      	bne.n	800a57e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800a55e:	2001      	movs	r0, #1
 800a560:	e04d      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a566:	6812      	ldr	r2, [r2, #0]
 800a568:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 800a56c:	d107      	bne.n	800a57e <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 800a56e:	2001      	movs	r0, #1
 800a570:	e045      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a576:	6812      	ldr	r2, [r2, #0]
 800a578:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800a57c:	d042      	beq.n	800a604 <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a57e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a582:	688a      	ldr	r2, [r1, #8]
 800a584:	f022 0203 	bic.w	r2, r2, #3
 800a588:	4313      	orrs	r3, r2
 800a58a:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800a58c:	f7f8 f99c 	bl	80028c8 <HAL_GetTick>
 800a590:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a59c:	686a      	ldr	r2, [r5, #4]
 800a59e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800a5a2:	d008      	beq.n	800a5b6 <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5a4:	f7f8 f990 	bl	80028c8 <HAL_GetTick>
 800a5a8:	1b80      	subs	r0, r0, r6
 800a5aa:	f241 3388 	movw	r3, #5000	; 0x1388
 800a5ae:	4298      	cmp	r0, r3
 800a5b0:	d9ef      	bls.n	800a592 <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 800a5b2:	2003      	movs	r0, #3
 800a5b4:	e023      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5b6:	4b14      	ldr	r3, [pc, #80]	; (800a608 <HAL_RCC_ClockConfig+0x25c>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0307 	and.w	r3, r3, #7
 800a5be:	42a3      	cmp	r3, r4
 800a5c0:	d915      	bls.n	800a5ee <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5c2:	4a11      	ldr	r2, [pc, #68]	; (800a608 <HAL_RCC_ClockConfig+0x25c>)
 800a5c4:	6813      	ldr	r3, [r2, #0]
 800a5c6:	f023 0307 	bic.w	r3, r3, #7
 800a5ca:	4323      	orrs	r3, r4
 800a5cc:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 800a5ce:	f7f8 f97b 	bl	80028c8 <HAL_GetTick>
 800a5d2:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <HAL_RCC_ClockConfig+0x25c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 0307 	and.w	r3, r3, #7
 800a5dc:	42a3      	cmp	r3, r4
 800a5de:	d006      	beq.n	800a5ee <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a5e0:	f7f8 f972 	bl	80028c8 <HAL_GetTick>
 800a5e4:	1b40      	subs	r0, r0, r5
 800a5e6:	2802      	cmp	r0, #2
 800a5e8:	d9f4      	bls.n	800a5d4 <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 800a5ea:	2003      	movs	r0, #3
 800a5ec:	e007      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a5ee:	f7ff fb9b 	bl	8009d28 <HAL_RCC_GetHCLKFreq>
 800a5f2:	4b06      	ldr	r3, [pc, #24]	; (800a60c <HAL_RCC_ClockConfig+0x260>)
 800a5f4:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 800a5f6:	4b06      	ldr	r3, [pc, #24]	; (800a610 <HAL_RCC_ClockConfig+0x264>)
 800a5f8:	6818      	ldr	r0, [r3, #0]
 800a5fa:	f7f8 f963 	bl	80028c4 <HAL_InitTick>
}
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800a600:	2001      	movs	r0, #1
}
 800a602:	4770      	bx	lr
        return HAL_ERROR;
 800a604:	2001      	movs	r0, #1
 800a606:	e7fa      	b.n	800a5fe <HAL_RCC_ClockConfig+0x252>
 800a608:	58004000 	.word	0x58004000
 800a60c:	200000d4 	.word	0x200000d4
 800a610:	200000d8 	.word	0x200000d8

0800a614 <HAL_RCC_GetPCLK1Freq>:
{
 800a614:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a616:	f7ff fb87 	bl	8009d28 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a61a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a61e:	689b      	ldr	r3, [r3, #8]
 800a620:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a624:	4a02      	ldr	r2, [pc, #8]	; (800a630 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a62a:	40d8      	lsrs	r0, r3
 800a62c:	bd08      	pop	{r3, pc}
 800a62e:	bf00      	nop
 800a630:	0801e08c 	.word	0x0801e08c

0800a634 <HAL_RCC_GetPCLK2Freq>:
{
 800a634:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a636:	f7ff fb77 	bl	8009d28 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a63a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800a644:	4a02      	ldr	r2, [pc, #8]	; (800a650 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a64a:	40d8      	lsrs	r0, r3
 800a64c:	bd08      	pop	{r3, pc}
 800a64e:	bf00      	nop
 800a650:	0801e08c 	.word	0x0801e08c

0800a654 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a654:	b570      	push	{r4, r5, r6, lr}
 800a656:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a658:	6803      	ldr	r3, [r0, #0]
 800a65a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800a65e:	f040 80ab 	bne.w	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a662:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	f013 0f01 	tst.w	r3, #1
 800a66a:	d00a      	beq.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a66c:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800a66e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a672:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a676:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800a67a:	b292      	uxth	r2, r2
 800a67c:	4313      	orrs	r3, r2
 800a67e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	f013 0f02 	tst.w	r3, #2
 800a688:	d00a      	beq.n	800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a68a:	68a2      	ldr	r2, [r4, #8]
 800a68c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a690:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a694:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 800a698:	b292      	uxth	r2, r2
 800a69a:	4313      	orrs	r3, r2
 800a69c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	f013 0f20 	tst.w	r3, #32
 800a6a6:	d009      	beq.n	800a6bc <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a6a8:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a6aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a6b2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a6bc:	6823      	ldr	r3, [r4, #0]
 800a6be:	f413 7f00 	tst.w	r3, #512	; 0x200
 800a6c2:	d00c      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a6c4:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a6c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a6ce:	0c02      	lsrs	r2, r0, #16
 800a6d0:	0412      	lsls	r2, r2, #16
 800a6d2:	ea23 0302 	bic.w	r3, r3, r2
 800a6d6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a6de:	6823      	ldr	r3, [r4, #0]
 800a6e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800a6e4:	d00c      	beq.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a6e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a6e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6ec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a6f0:	0c02      	lsrs	r2, r0, #16
 800a6f2:	0412      	lsls	r2, r2, #16
 800a6f4:	ea23 0302 	bic.w	r3, r3, r2
 800a6f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a706:	d00c      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800a708:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a70a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a70e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800a712:	0c02      	lsrs	r2, r0, #16
 800a714:	0412      	lsls	r2, r2, #16
 800a716:	ea23 0302 	bic.w	r3, r3, r2
 800a71a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a71e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a728:	f040 809e 	bne.w	800a868 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a72c:	6823      	ldr	r3, [r4, #0]
 800a72e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a732:	f040 80aa 	bne.w	800a88a <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a73c:	f040 80b6 	bne.w	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800a740:	6823      	ldr	r3, [r4, #0]
 800a742:	f013 0f10 	tst.w	r3, #16
 800a746:	d00e      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a748:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800a74a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a74e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a752:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a756:	4313      	orrs	r3, r2
 800a758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800a75c:	68e3      	ldr	r3, [r4, #12]
 800a75e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a762:	f000 80b4 	beq.w	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a766:	6823      	ldr	r3, [r4, #0]
 800a768:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800a76c:	d00f      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a76e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a770:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a774:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a778:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 800a77c:	4313      	orrs	r3, r2
 800a77e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a782:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a784:	b91b      	cbnz	r3, 800a78e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800a786:	68cb      	ldr	r3, [r1, #12]
 800a788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a78c:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a78e:	6823      	ldr	r3, [r4, #0]
 800a790:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800a794:	d00e      	beq.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a796:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a798:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a79c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800a7a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800a7aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a7ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a7b0:	f000 8092 	beq.w	800a8d8 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 800a7b4:	4628      	mov	r0, r5
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 800a7b8:	f7ff f92c 	bl	8009a14 <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 800a7bc:	f7f8 f884 	bl	80028c8 <HAL_GetTick>
 800a7c0:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800a7c2:	4b48      	ldr	r3, [pc, #288]	; (800a8e4 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f413 7f80 	tst.w	r3, #256	; 0x100
 800a7ca:	d106      	bne.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a7cc:	f7f8 f87c 	bl	80028c8 <HAL_GetTick>
 800a7d0:	1b40      	subs	r0, r0, r5
 800a7d2:	2802      	cmp	r0, #2
 800a7d4:	d9f5      	bls.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 800a7d6:	2503      	movs	r5, #3
 800a7d8:	e000      	b.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800a7da:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 800a7dc:	2d00      	cmp	r5, #0
 800a7de:	f47f af41 	bne.w	800a664 <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a7e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800a7ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d024      	beq.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a7f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a7fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a800:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a804:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800a808:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a80c:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800a810:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800a814:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 800a818:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800a81c:	f012 0f02 	tst.w	r2, #2
 800a820:	d10f      	bne.n	800a842 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 800a822:	2d00      	cmp	r5, #0
 800a824:	f47f af1e 	bne.w	800a664 <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a828:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a82a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a82e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800a832:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a836:	4313      	orrs	r3, r2
 800a838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a83c:	e712      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 800a83e:	2200      	movs	r2, #0
 800a840:	e7ec      	b.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 800a842:	f7f8 f841 	bl	80028c8 <HAL_GetTick>
 800a846:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a850:	f013 0f02 	tst.w	r3, #2
 800a854:	d1e5      	bne.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a856:	f7f8 f837 	bl	80028c8 <HAL_GetTick>
 800a85a:	1b80      	subs	r0, r0, r6
 800a85c:	f241 3388 	movw	r3, #5000	; 0x1388
 800a860:	4298      	cmp	r0, r3
 800a862:	d9f1      	bls.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 800a864:	2503      	movs	r5, #3
 800a866:	e7dc      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a868:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a86a:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800a86e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a872:	0919      	lsrs	r1, r3, #4
 800a874:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800a878:	ea22 0201 	bic.w	r2, r2, r1
 800a87c:	011b      	lsls	r3, r3, #4
 800a87e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a882:	4313      	orrs	r3, r2
 800a884:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800a888:	e750      	b.n	800a72c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a88a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a88c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800a890:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a894:	0919      	lsrs	r1, r3, #4
 800a896:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800a89a:	ea22 0201 	bic.w	r2, r2, r1
 800a89e:	011b      	lsls	r3, r3, #4
 800a8a0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800a8aa:	e744      	b.n	800a736 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a8ac:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a8ae:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800a8b2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800a8b6:	0919      	lsrs	r1, r3, #4
 800a8b8:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 800a8bc:	ea22 0201 	bic.w	r2, r2, r1
 800a8c0:	011b      	lsls	r3, r3, #4
 800a8c2:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800a8cc:	e738      	b.n	800a740 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800a8ce:	68cb      	ldr	r3, [r1, #12]
 800a8d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a8d4:	60cb      	str	r3, [r1, #12]
 800a8d6:	e746      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a8d8:	68cb      	ldr	r3, [r1, #12]
 800a8da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8de:	60cb      	str	r3, [r1, #12]
 800a8e0:	e768      	b.n	800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a8e2:	bf00      	nop
 800a8e4:	58000400 	.word	0x58000400

0800a8e8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 800a8e8:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a8ea:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800a8ee:	2a01      	cmp	r2, #1
 800a8f0:	d035      	beq.n	800a95e <HAL_RTC_DeactivateAlarm+0x76>
 800a8f2:	2201      	movs	r2, #1
 800a8f4:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a8f8:	2202      	movs	r2, #2
 800a8fa:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a8fe:	4a19      	ldr	r2, [pc, #100]	; (800a964 <HAL_RTC_DeactivateAlarm+0x7c>)
 800a900:	20ca      	movs	r0, #202	; 0xca
 800a902:	6250      	str	r0, [r2, #36]	; 0x24
 800a904:	2053      	movs	r0, #83	; 0x53
 800a906:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800a908:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a90c:	d018      	beq.n	800a940 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800a90e:	4a15      	ldr	r2, [pc, #84]	; (800a964 <HAL_RTC_DeactivateAlarm+0x7c>)
 800a910:	6991      	ldr	r1, [r2, #24]
 800a912:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 800a916:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800a918:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800a91a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a91e:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800a920:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a922:	f021 0102 	bic.w	r1, r1, #2
 800a926:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a928:	2102      	movs	r1, #2
 800a92a:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a92c:	4a0d      	ldr	r2, [pc, #52]	; (800a964 <HAL_RTC_DeactivateAlarm+0x7c>)
 800a92e:	21ff      	movs	r1, #255	; 0xff
 800a930:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800a932:	2201      	movs	r2, #1
 800a934:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a938:	2000      	movs	r0, #0
 800a93a:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 800a93e:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800a940:	6991      	ldr	r1, [r2, #24]
 800a942:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 800a946:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 800a948:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800a94a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a94e:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800a950:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a952:	f021 0101 	bic.w	r1, r1, #1
 800a956:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a958:	2101      	movs	r1, #1
 800a95a:	65d1      	str	r1, [r2, #92]	; 0x5c
 800a95c:	e7e6      	b.n	800a92c <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 800a95e:	2002      	movs	r0, #2
}
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	40002800 	.word	0x40002800

0800a968 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 800a96c:	4b0d      	ldr	r3, [pc, #52]	; (800a9a4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800a96e:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800a970:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800a972:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800a974:	f015 0f01 	tst.w	r5, #1
 800a978:	d106      	bne.n	800a988 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 800a97a:	f015 0f02 	tst.w	r5, #2
 800a97e:	d109      	bne.n	800a994 <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a980:	2301      	movs	r3, #1
 800a982:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800a986:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800a988:	4b06      	ldr	r3, [pc, #24]	; (800a9a4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 800a98e:	f7f8 f9a9 	bl	8002ce4 <HAL_RTC_AlarmAEventCallback>
 800a992:	e7f2      	b.n	800a97a <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800a994:	4b03      	ldr	r3, [pc, #12]	; (800a9a4 <HAL_RTC_AlarmIRQHandler+0x3c>)
 800a996:	2202      	movs	r2, #2
 800a998:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a99a:	4620      	mov	r0, r4
 800a99c:	f000 f9ec 	bl	800ad78 <HAL_RTCEx_AlarmBEventCallback>
 800a9a0:	e7ee      	b.n	800a980 <HAL_RTC_AlarmIRQHandler+0x18>
 800a9a2:	bf00      	nop
 800a9a4:	40002800 	.word	0x40002800

0800a9a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a9a8:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a9aa:	4a0b      	ldr	r2, [pc, #44]	; (800a9d8 <HAL_RTC_WaitForSynchro+0x30>)
 800a9ac:	68d3      	ldr	r3, [r2, #12]
 800a9ae:	f023 0320 	bic.w	r3, r3, #32
 800a9b2:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a9b4:	f7f7 ff88 	bl	80028c8 <HAL_GetTick>
 800a9b8:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a9ba:	4b07      	ldr	r3, [pc, #28]	; (800a9d8 <HAL_RTC_WaitForSynchro+0x30>)
 800a9bc:	68db      	ldr	r3, [r3, #12]
 800a9be:	f013 0f20 	tst.w	r3, #32
 800a9c2:	d107      	bne.n	800a9d4 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a9c4:	f7f7 ff80 	bl	80028c8 <HAL_GetTick>
 800a9c8:	1b00      	subs	r0, r0, r4
 800a9ca:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800a9ce:	d9f4      	bls.n	800a9ba <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 800a9d0:	2003      	movs	r0, #3
 800a9d2:	e000      	b.n	800a9d6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800a9d4:	2000      	movs	r0, #0
}
 800a9d6:	bd10      	pop	{r4, pc}
 800a9d8:	40002800 	.word	0x40002800

0800a9dc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a9dc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a9de:	4b11      	ldr	r3, [pc, #68]	; (800aa24 <RTC_EnterInitMode+0x48>)
 800a9e0:	68db      	ldr	r3, [r3, #12]
 800a9e2:	f013 0f40 	tst.w	r3, #64	; 0x40
 800a9e6:	d002      	beq.n	800a9ee <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 800a9e8:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	bd70      	pop	{r4, r5, r6, pc}
 800a9ee:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a9f0:	4a0c      	ldr	r2, [pc, #48]	; (800aa24 <RTC_EnterInitMode+0x48>)
 800a9f2:	68d3      	ldr	r3, [r2, #12]
 800a9f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9f8:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 800a9fa:	f7f7 ff65 	bl	80028c8 <HAL_GetTick>
 800a9fe:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 800aa00:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800aa02:	4b08      	ldr	r3, [pc, #32]	; (800aa24 <RTC_EnterInitMode+0x48>)
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f013 0f40 	tst.w	r3, #64	; 0x40
 800aa0a:	d1ee      	bne.n	800a9ea <RTC_EnterInitMode+0xe>
 800aa0c:	2c03      	cmp	r4, #3
 800aa0e:	d0ec      	beq.n	800a9ea <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800aa10:	f7f7 ff5a 	bl	80028c8 <HAL_GetTick>
 800aa14:	1b43      	subs	r3, r0, r5
 800aa16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aa1a:	d9f2      	bls.n	800aa02 <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa1c:	2403      	movs	r4, #3
 800aa1e:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 800aa22:	e7ee      	b.n	800aa02 <RTC_EnterInitMode+0x26>
 800aa24:	40002800 	.word	0x40002800

0800aa28 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800aa2c:	4b10      	ldr	r3, [pc, #64]	; (800aa70 <RTC_ExitInitMode+0x48>)
 800aa2e:	68da      	ldr	r2, [r3, #12]
 800aa30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa34:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800aa36:	699b      	ldr	r3, [r3, #24]
 800aa38:	f013 0f20 	tst.w	r3, #32
 800aa3c:	d106      	bne.n	800aa4c <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa3e:	f7ff ffb3 	bl	800a9a8 <HAL_RTC_WaitForSynchro>
 800aa42:	b198      	cbz	r0, 800aa6c <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa44:	2003      	movs	r0, #3
 800aa46:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800aa4a:	e00f      	b.n	800aa6c <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aa4c:	4a08      	ldr	r2, [pc, #32]	; (800aa70 <RTC_ExitInitMode+0x48>)
 800aa4e:	6993      	ldr	r3, [r2, #24]
 800aa50:	f023 0320 	bic.w	r3, r3, #32
 800aa54:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa56:	f7ff ffa7 	bl	800a9a8 <HAL_RTC_WaitForSynchro>
 800aa5a:	b110      	cbz	r0, 800aa62 <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800aa5c:	2003      	movs	r0, #3
 800aa5e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800aa62:	4a03      	ldr	r2, [pc, #12]	; (800aa70 <RTC_ExitInitMode+0x48>)
 800aa64:	6993      	ldr	r3, [r2, #24]
 800aa66:	f043 0320 	orr.w	r3, r3, #32
 800aa6a:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 800aa6c:	bd10      	pop	{r4, pc}
 800aa6e:	bf00      	nop
 800aa70:	40002800 	.word	0x40002800

0800aa74 <HAL_RTC_Init>:
  if (hrtc != NULL)
 800aa74:	2800      	cmp	r0, #0
 800aa76:	d052      	beq.n	800ab1e <HAL_RTC_Init+0xaa>
{
 800aa78:	b538      	push	{r3, r4, r5, lr}
 800aa7a:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800aa7c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800aa80:	b163      	cbz	r3, 800aa9c <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800aa82:	2302      	movs	r3, #2
 800aa84:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aa88:	4b26      	ldr	r3, [pc, #152]	; (800ab24 <HAL_RTC_Init+0xb0>)
 800aa8a:	68db      	ldr	r3, [r3, #12]
 800aa8c:	f013 0f10 	tst.w	r3, #16
 800aa90:	d009      	beq.n	800aaa6 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800aa92:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 800aa94:	2301      	movs	r3, #1
 800aa96:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800aa9a:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 800aa9c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800aaa0:	f7f7 fd68 	bl	8002574 <HAL_RTC_MspInit>
 800aaa4:	e7ed      	b.n	800aa82 <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaa6:	4b1f      	ldr	r3, [pc, #124]	; (800ab24 <HAL_RTC_Init+0xb0>)
 800aaa8:	22ca      	movs	r2, #202	; 0xca
 800aaaa:	625a      	str	r2, [r3, #36]	; 0x24
 800aaac:	2253      	movs	r2, #83	; 0x53
 800aaae:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 800aab0:	4620      	mov	r0, r4
 800aab2:	f7ff ff93 	bl	800a9dc <RTC_EnterInitMode>
      if (status == HAL_OK)
 800aab6:	b128      	cbz	r0, 800aac4 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aab8:	4b1a      	ldr	r3, [pc, #104]	; (800ab24 <HAL_RTC_Init+0xb0>)
 800aaba:	22ff      	movs	r2, #255	; 0xff
 800aabc:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d1eb      	bne.n	800aa9a <HAL_RTC_Init+0x26>
 800aac2:	e7e7      	b.n	800aa94 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800aac4:	4b17      	ldr	r3, [pc, #92]	; (800ab24 <HAL_RTC_Init+0xb0>)
 800aac6:	699a      	ldr	r2, [r3, #24]
 800aac8:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 800aacc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aad0:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800aad2:	6999      	ldr	r1, [r3, #24]
 800aad4:	6862      	ldr	r2, [r4, #4]
 800aad6:	6920      	ldr	r0, [r4, #16]
 800aad8:	4302      	orrs	r2, r0
 800aada:	69a0      	ldr	r0, [r4, #24]
 800aadc:	4302      	orrs	r2, r0
 800aade:	430a      	orrs	r2, r1
 800aae0:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800aae2:	68e2      	ldr	r2, [r4, #12]
 800aae4:	68a1      	ldr	r1, [r4, #8]
 800aae6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800aaea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800aaec:	68da      	ldr	r2, [r3, #12]
 800aaee:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800aaf2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800aaf4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800aaf6:	4301      	orrs	r1, r0
 800aaf8:	430a      	orrs	r2, r1
 800aafa:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 800aafc:	4620      	mov	r0, r4
 800aafe:	f7ff ff93 	bl	800aa28 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800ab02:	2800      	cmp	r0, #0
 800ab04:	d1d8      	bne.n	800aab8 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 800ab06:	4907      	ldr	r1, [pc, #28]	; (800ab24 <HAL_RTC_Init+0xb0>)
 800ab08:	698b      	ldr	r3, [r1, #24]
 800ab0a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800ab0e:	6a22      	ldr	r2, [r4, #32]
 800ab10:	69e5      	ldr	r5, [r4, #28]
 800ab12:	432a      	orrs	r2, r5
 800ab14:	6965      	ldr	r5, [r4, #20]
 800ab16:	432a      	orrs	r2, r5
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	618b      	str	r3, [r1, #24]
 800ab1c:	e7cc      	b.n	800aab8 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 800ab1e:	2001      	movs	r0, #1
}
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	40002800 	.word	0x40002800

0800ab28 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 800ab28:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 800ab2a:	e002      	b.n	800ab32 <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 800ab2c:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 800ab2e:	380a      	subs	r0, #10
 800ab30:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800ab32:	2809      	cmp	r0, #9
 800ab34:	d8fa      	bhi.n	800ab2c <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800ab36:	011b      	lsls	r3, r3, #4
 800ab38:	b2db      	uxtb	r3, r3
}
 800ab3a:	4318      	orrs	r0, r3
 800ab3c:	4770      	bx	lr
	...

0800ab40 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 800ab40:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	f000 80b0 	beq.w	800acaa <HAL_RTC_SetAlarm_IT+0x16a>
{
 800ab4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab4e:	4605      	mov	r5, r0
 800ab50:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800ab52:	2301      	movs	r3, #1
 800ab54:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab58:	2302      	movs	r3, #2
 800ab5a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800ab5e:	4b54      	ldr	r3, [pc, #336]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ab60:	68de      	ldr	r6, [r3, #12]
 800ab62:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800ab66:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800ab6a:	d043      	beq.n	800abf4 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 800ab6c:	bb12      	cbnz	r2, 800abb4 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ab74:	d101      	bne.n	800ab7a <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 800ab7a:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ab7e:	7820      	ldrb	r0, [r4, #0]
 800ab80:	f7ff ffd2 	bl	800ab28 <RTC_ByteToBcd2>
 800ab84:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ab86:	7860      	ldrb	r0, [r4, #1]
 800ab88:	f7ff ffce 	bl	800ab28 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800ab8c:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800ab90:	78a0      	ldrb	r0, [r4, #2]
 800ab92:	f7ff ffc9 	bl	800ab28 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800ab96:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800ab98:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800ab9a:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800ab9e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800aba2:	f7ff ffc1 	bl	800ab28 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800aba6:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800abaa:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800abac:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800abae:	ea48 0000 	orr.w	r0, r8, r0
 800abb2:	e020      	b.n	800abf6 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800abb4:	6948      	ldr	r0, [r1, #20]
 800abb6:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 800abba:	d009      	beq.n	800abd0 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800abbc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800abc0:	d006      	beq.n	800abd0 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800abc2:	4b3b      	ldr	r3, [pc, #236]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800abca:	d101      	bne.n	800abd0 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 800abcc:	2300      	movs	r3, #0
 800abce:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800abd0:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800abd2:	7863      	ldrb	r3, [r4, #1]
 800abd4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800abd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800abda:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800abdc:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800abde:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800abe0:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800abe4:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800abe8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800abec:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800abee:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800abf0:	4318      	orrs	r0, r3
 800abf2:	e000      	b.n	800abf6 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 800abf4:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abf6:	4b2e      	ldr	r3, [pc, #184]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800abf8:	22ca      	movs	r2, #202	; 0xca
 800abfa:	625a      	str	r2, [r3, #36]	; 0x24
 800abfc:	2253      	movs	r2, #83	; 0x53
 800abfe:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800ac00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ac02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac06:	d02a      	beq.n	800ac5e <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800ac08:	4b29      	ldr	r3, [pc, #164]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac0a:	699a      	ldr	r2, [r3, #24]
 800ac0c:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 800ac10:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800ac12:	2202      	movs	r2, #2
 800ac14:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800ac16:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800ac1a:	d040      	beq.n	800ac9e <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 800ac1c:	4b24      	ldr	r3, [pc, #144]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac1e:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800ac20:	69a2      	ldr	r2, [r4, #24]
 800ac22:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800ac24:	6862      	ldr	r2, [r4, #4]
 800ac26:	4b22      	ldr	r3, [pc, #136]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac28:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800ac2a:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ac2c:	f042 0202 	orr.w	r2, r2, #2
 800ac30:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800ac32:	699a      	ldr	r2, [r3, #24]
 800ac34:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 800ac38:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800ac3a:	4a1e      	ldr	r2, [pc, #120]	; (800acb4 <HAL_RTC_SetAlarm_IT+0x174>)
 800ac3c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 800ac40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac48:	4b19      	ldr	r3, [pc, #100]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac4a:	22ff      	movs	r2, #255	; 0xff
 800ac4c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800ac54:	2000      	movs	r0, #0
 800ac56:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 800ac5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800ac5e:	4b14      	ldr	r3, [pc, #80]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac60:	699a      	ldr	r2, [r3, #24]
 800ac62:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800ac66:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800ac68:	2201      	movs	r2, #1
 800ac6a:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800ac6c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800ac70:	d00f      	beq.n	800ac92 <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800ac72:	4b0f      	ldr	r3, [pc, #60]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac74:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800ac76:	69a2      	ldr	r2, [r4, #24]
 800ac78:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 800ac7a:	6862      	ldr	r2, [r4, #4]
 800ac7c:	4b0c      	ldr	r3, [pc, #48]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac7e:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800ac80:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800ac82:	f042 0201 	orr.w	r2, r2, #1
 800ac86:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800ac88:	699a      	ldr	r2, [r3, #24]
 800ac8a:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800ac8e:	619a      	str	r2, [r3, #24]
 800ac90:	e7d3      	b.n	800ac3a <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800ac92:	69a3      	ldr	r3, [r4, #24]
 800ac94:	69e2      	ldr	r2, [r4, #28]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	4a05      	ldr	r2, [pc, #20]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800ac9a:	6453      	str	r3, [r2, #68]	; 0x44
 800ac9c:	e7ed      	b.n	800ac7a <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800ac9e:	69a3      	ldr	r3, [r4, #24]
 800aca0:	69e2      	ldr	r2, [r4, #28]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	4a02      	ldr	r2, [pc, #8]	; (800acb0 <HAL_RTC_SetAlarm_IT+0x170>)
 800aca6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aca8:	e7bc      	b.n	800ac24 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 800acaa:	2002      	movs	r0, #2
}
 800acac:	4770      	bx	lr
 800acae:	bf00      	nop
 800acb0:	40002800 	.word	0x40002800
 800acb4:	58000800 	.word	0x58000800

0800acb8 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acb8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d017      	beq.n	800acf0 <HAL_RTCEx_EnableBypassShadow+0x38>
 800acc0:	2101      	movs	r1, #1
 800acc2:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800acc6:	2302      	movs	r3, #2
 800acc8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800accc:	4b09      	ldr	r3, [pc, #36]	; (800acf4 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800acce:	22ca      	movs	r2, #202	; 0xca
 800acd0:	625a      	str	r2, [r3, #36]	; 0x24
 800acd2:	2253      	movs	r2, #83	; 0x53
 800acd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800acd6:	699a      	ldr	r2, [r3, #24]
 800acd8:	f042 0220 	orr.w	r2, r2, #32
 800acdc:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acde:	22ff      	movs	r2, #255	; 0xff
 800ace0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ace2:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ace6:	2300      	movs	r3, #0
 800ace8:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800acec:	4618      	mov	r0, r3
 800acee:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800acf0:	2002      	movs	r0, #2
}
 800acf2:	4770      	bx	lr
 800acf4:	40002800 	.word	0x40002800

0800acf8 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800acf8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d020      	beq.n	800ad42 <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 800ad00:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800ad02:	2101      	movs	r1, #1
 800ad04:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad08:	2302      	movs	r3, #2
 800ad0a:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad0e:	4b0e      	ldr	r3, [pc, #56]	; (800ad48 <HAL_RTCEx_SetSSRU_IT+0x50>)
 800ad10:	22ca      	movs	r2, #202	; 0xca
 800ad12:	625a      	str	r2, [r3, #36]	; 0x24
 800ad14:	2253      	movs	r2, #83	; 0x53
 800ad16:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 800ad18:	699a      	ldr	r2, [r3, #24]
 800ad1a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad1e:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 800ad20:	4c0a      	ldr	r4, [pc, #40]	; (800ad4c <HAL_RTCEx_SetSSRU_IT+0x54>)
 800ad22:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800ad26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ad2a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad2e:	22ff      	movs	r2, #255	; 0xff
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800ad32:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad36:	2300      	movs	r3, #0
 800ad38:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 800ad3c:	4618      	mov	r0, r3
}
 800ad3e:	bc10      	pop	{r4}
 800ad40:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800ad42:	2002      	movs	r0, #2
}
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	40002800 	.word	0x40002800
 800ad4c:	58000800 	.word	0x58000800

0800ad50 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800ad50:	b510      	push	{r4, lr}
 800ad52:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800ad56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad58:	f013 0f40 	tst.w	r3, #64	; 0x40
 800ad5c:	d103      	bne.n	800ad66 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800ad64:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800ad66:	4b03      	ldr	r3, [pc, #12]	; (800ad74 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800ad68:	2240      	movs	r2, #64	; 0x40
 800ad6a:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800ad6c:	f7f7 ffbe 	bl	8002cec <HAL_RTCEx_SSRUEventCallback>
 800ad70:	e7f5      	b.n	800ad5e <HAL_RTCEx_SSRUIRQHandler+0xe>
 800ad72:	bf00      	nop
 800ad74:	40002800 	.word	0x40002800

0800ad78 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800ad78:	4770      	bx	lr

0800ad7a <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800ad7a:	0089      	lsls	r1, r1, #2
 800ad7c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800ad80:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800ad84:	600a      	str	r2, [r1, #0]
}
 800ad86:	4770      	bx	lr

0800ad88 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 800ad88:	0089      	lsls	r1, r1, #2
 800ad8a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800ad8e:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ad92:	6808      	ldr	r0, [r1, #0]
}
 800ad94:	4770      	bx	lr
	...

0800ad98 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800ad98:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <SUBGHZSPI_Init+0x20>)
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ada0:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800ada2:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 800ada6:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800ada8:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 800adac:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800adae:	681a      	ldr	r2, [r3, #0]
 800adb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adb4:	601a      	str	r2, [r3, #0]
}
 800adb6:	4770      	bx	lr
 800adb8:	58010000 	.word	0x58010000

0800adbc <HAL_SUBGHZ_Init>:
{
 800adbc:	b530      	push	{r4, r5, lr}
 800adbe:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d058      	beq.n	800ae76 <HAL_SUBGHZ_Init+0xba>
 800adc4:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 800adc6:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 800adc8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 800adcc:	b10b      	cbz	r3, 800add2 <HAL_SUBGHZ_Init+0x16>
 800adce:	2d03      	cmp	r5, #3
 800add0:	d10b      	bne.n	800adea <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 800add2:	2300      	movs	r3, #0
 800add4:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 800add6:	4620      	mov	r0, r4
 800add8:	f7f7 fc84 	bl	80026e4 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 800addc:	4a27      	ldr	r2, [pc, #156]	; (800ae7c <HAL_SUBGHZ_Init+0xc0>)
 800adde:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800ade2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ade6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 800adea:	b185      	cbz	r5, 800ae0e <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800adec:	4b24      	ldr	r3, [pc, #144]	; (800ae80 <HAL_SUBGHZ_Init+0xc4>)
 800adee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adf2:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 800adf4:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800adf6:	6820      	ldr	r0, [r4, #0]
 800adf8:	f7ff ffce 	bl	800ad98 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800adfc:	2301      	movs	r3, #1
 800adfe:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800ae00:	2300      	movs	r3, #0
 800ae02:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800ae04:	2301      	movs	r3, #1
 800ae06:	71a3      	strb	r3, [r4, #6]
}
 800ae08:	4628      	mov	r0, r5
 800ae0a:	b003      	add	sp, #12
 800ae0c:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800ae0e:	2302      	movs	r3, #2
 800ae10:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800ae12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ae16:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800ae1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ae1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800ae22:	4b18      	ldr	r3, [pc, #96]	; (800ae84 <HAL_SUBGHZ_Init+0xc8>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ae2a:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800ae2e:	2264      	movs	r2, #100	; 0x64
 800ae30:	fb02 f303 	mul.w	r3, r2, r3
 800ae34:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	b1d3      	cbz	r3, 800ae70 <HAL_SUBGHZ_Init+0xb4>
      count--;
 800ae3a:	9b01      	ldr	r3, [sp, #4]
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 800ae40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ae44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ae48:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800ae4c:	d1f3      	bne.n	800ae36 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800ae4e:	4b0c      	ldr	r3, [pc, #48]	; (800ae80 <HAL_SUBGHZ_Init+0xc4>)
 800ae50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800ae54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 800ae5c:	689a      	ldr	r2, [r3, #8]
 800ae5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae62:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800ae64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ae68:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	d1ca      	bne.n	800ae04 <HAL_SUBGHZ_Init+0x48>
 800ae6e:	e7c2      	b.n	800adf6 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800ae70:	2501      	movs	r5, #1
 800ae72:	60a5      	str	r5, [r4, #8]
        break;
 800ae74:	e7eb      	b.n	800ae4e <HAL_SUBGHZ_Init+0x92>
    return status;
 800ae76:	2501      	movs	r5, #1
 800ae78:	e7c6      	b.n	800ae08 <HAL_SUBGHZ_Init+0x4c>
 800ae7a:	bf00      	nop
 800ae7c:	58000800 	.word	0x58000800
 800ae80:	58000400 	.word	0x58000400
 800ae84:	200000d4 	.word	0x200000d4

0800ae88 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800ae88:	b082      	sub	sp, #8
 800ae8a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800ae8c:	4b1a      	ldr	r3, [pc, #104]	; (800aef8 <SUBGHZSPI_Transmit+0x70>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ae94:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800ae98:	2064      	movs	r0, #100	; 0x64
 800ae9a:	fb00 f303 	mul.w	r3, r0, r3
 800ae9e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800aea0:	9b01      	ldr	r3, [sp, #4]
 800aea2:	b14b      	cbz	r3, 800aeb8 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800aea4:	9b01      	ldr	r3, [sp, #4]
 800aea6:	3b01      	subs	r3, #1
 800aea8:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800aeaa:	4b14      	ldr	r3, [pc, #80]	; (800aefc <SUBGHZSPI_Transmit+0x74>)
 800aeac:	689b      	ldr	r3, [r3, #8]
 800aeae:	f013 0f02 	tst.w	r3, #2
 800aeb2:	d0f5      	beq.n	800aea0 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	e001      	b.n	800aebc <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aeb8:	2001      	movs	r0, #1
 800aeba:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 800aebc:	4b0f      	ldr	r3, [pc, #60]	; (800aefc <SUBGHZSPI_Transmit+0x74>)
 800aebe:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800aec0:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <SUBGHZSPI_Transmit+0x70>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800aec8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800aecc:	2164      	movs	r1, #100	; 0x64
 800aece:	fb01 f303 	mul.w	r3, r1, r3
 800aed2:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800aed4:	9b01      	ldr	r3, [sp, #4]
 800aed6:	b143      	cbz	r3, 800aeea <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800aed8:	9b01      	ldr	r3, [sp, #4]
 800aeda:	3b01      	subs	r3, #1
 800aedc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800aede:	4b07      	ldr	r3, [pc, #28]	; (800aefc <SUBGHZSPI_Transmit+0x74>)
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	f013 0f01 	tst.w	r3, #1
 800aee6:	d0f5      	beq.n	800aed4 <SUBGHZSPI_Transmit+0x4c>
 800aee8:	e001      	b.n	800aeee <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800aeea:	2001      	movs	r0, #1
 800aeec:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800aeee:	4b03      	ldr	r3, [pc, #12]	; (800aefc <SUBGHZSPI_Transmit+0x74>)
 800aef0:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800aef2:	b002      	add	sp, #8
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	200000d4 	.word	0x200000d4
 800aefc:	58010000 	.word	0x58010000

0800af00 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 800af00:	b082      	sub	sp, #8
 800af02:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800af04:	4b1c      	ldr	r3, [pc, #112]	; (800af78 <SUBGHZSPI_Receive+0x78>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800af0c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800af10:	2064      	movs	r0, #100	; 0x64
 800af12:	fb00 f303 	mul.w	r3, r0, r3
 800af16:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	b14b      	cbz	r3, 800af30 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800af1c:	9b01      	ldr	r3, [sp, #4]
 800af1e:	3b01      	subs	r3, #1
 800af20:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800af22:	4b16      	ldr	r3, [pc, #88]	; (800af7c <SUBGHZSPI_Receive+0x7c>)
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f013 0f02 	tst.w	r3, #2
 800af2a:	d0f5      	beq.n	800af18 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 800af2c:	2000      	movs	r0, #0
 800af2e:	e001      	b.n	800af34 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800af30:	2001      	movs	r0, #1
 800af32:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 800af34:	4b11      	ldr	r3, [pc, #68]	; (800af7c <SUBGHZSPI_Receive+0x7c>)
 800af36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800af3a:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800af3e:	4b0e      	ldr	r3, [pc, #56]	; (800af78 <SUBGHZSPI_Receive+0x78>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800af46:	f3c3 434c 	ubfx	r3, r3, #17, #13
 800af4a:	f04f 0c64 	mov.w	ip, #100	; 0x64
 800af4e:	fb0c f303 	mul.w	r3, ip, r3
 800af52:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800af54:	9b01      	ldr	r3, [sp, #4]
 800af56:	b143      	cbz	r3, 800af6a <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 800af58:	9b01      	ldr	r3, [sp, #4]
 800af5a:	3b01      	subs	r3, #1
 800af5c:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800af5e:	4b07      	ldr	r3, [pc, #28]	; (800af7c <SUBGHZSPI_Receive+0x7c>)
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f013 0f01 	tst.w	r3, #1
 800af66:	d0f5      	beq.n	800af54 <SUBGHZSPI_Receive+0x54>
 800af68:	e001      	b.n	800af6e <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800af6a:	2001      	movs	r0, #1
 800af6c:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800af6e:	4b03      	ldr	r3, [pc, #12]	; (800af7c <SUBGHZSPI_Receive+0x7c>)
 800af70:	68db      	ldr	r3, [r3, #12]
 800af72:	700b      	strb	r3, [r1, #0]

  return status;
}
 800af74:	b002      	add	sp, #8
 800af76:	4770      	bx	lr
 800af78:	200000d4 	.word	0x200000d4
 800af7c:	58010000 	.word	0x58010000

0800af80 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800af80:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800af82:	4b13      	ldr	r3, [pc, #76]	; (800afd0 <SUBGHZ_WaitOnBusy+0x50>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800af8a:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800af8e:	2264      	movs	r2, #100	; 0x64
 800af90:	fb02 f303 	mul.w	r3, r2, r3
 800af94:	9301      	str	r3, [sp, #4]
 800af96:	e006      	b.n	800afa6 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 800af98:	2302      	movs	r3, #2
 800af9a:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 800af9c:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800af9e:	b002      	add	sp, #8
 800afa0:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800afa2:	4213      	tst	r3, r2
 800afa4:	d012      	beq.n	800afcc <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <SUBGHZ_WaitOnBusy+0x54>)
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	f013 0304 	ands.w	r3, r3, #4
 800afae:	d000      	beq.n	800afb2 <SUBGHZ_WaitOnBusy+0x32>
 800afb0:	2301      	movs	r3, #1
    if (count == 0U)
 800afb2:	9a01      	ldr	r2, [sp, #4]
 800afb4:	2a00      	cmp	r2, #0
 800afb6:	d0ef      	beq.n	800af98 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 800afb8:	9a01      	ldr	r2, [sp, #4]
 800afba:	3a01      	subs	r2, #1
 800afbc:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800afbe:	4a05      	ldr	r2, [pc, #20]	; (800afd4 <SUBGHZ_WaitOnBusy+0x54>)
 800afc0:	6952      	ldr	r2, [r2, #20]
 800afc2:	f012 0202 	ands.w	r2, r2, #2
 800afc6:	d0ec      	beq.n	800afa2 <SUBGHZ_WaitOnBusy+0x22>
 800afc8:	2201      	movs	r2, #1
 800afca:	e7ea      	b.n	800afa2 <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 800afcc:	2000      	movs	r0, #0
 800afce:	e7e6      	b.n	800af9e <SUBGHZ_WaitOnBusy+0x1e>
 800afd0:	200000d4 	.word	0x200000d4
 800afd4:	58000400 	.word	0x58000400

0800afd8 <SUBGHZ_CheckDeviceReady>:
{
 800afd8:	b500      	push	{lr}
 800afda:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 800afdc:	7903      	ldrb	r3, [r0, #4]
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d004      	beq.n	800afec <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800afe2:	f7ff ffcd 	bl	800af80 <SUBGHZ_WaitOnBusy>
}
 800afe6:	b003      	add	sp, #12
 800afe8:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <SUBGHZ_CheckDeviceReady+0x4c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800aff4:	f3c3 334f 	ubfx	r3, r3, #13, #16
 800aff8:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800affa:	4a0b      	ldr	r2, [pc, #44]	; (800b028 <SUBGHZ_CheckDeviceReady+0x50>)
 800affc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 800b008:	9b01      	ldr	r3, [sp, #4]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 800b00e:	9b01      	ldr	r3, [sp, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1f9      	bne.n	800b008 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b014:	4a04      	ldr	r2, [pc, #16]	; (800b028 <SUBGHZ_CheckDeviceReady+0x50>)
 800b016:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b01a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b01e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800b022:	e7de      	b.n	800afe2 <SUBGHZ_CheckDeviceReady+0xa>
 800b024:	200000d4 	.word	0x200000d4
 800b028:	58000400 	.word	0x58000400

0800b02c <HAL_SUBGHZ_WriteRegisters>:
{
 800b02c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b030:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b032:	7980      	ldrb	r0, [r0, #6]
 800b034:	fa5f f880 	uxtb.w	r8, r0
 800b038:	f1b8 0f01 	cmp.w	r8, #1
 800b03c:	d13e      	bne.n	800b0bc <HAL_SUBGHZ_WriteRegisters+0x90>
 800b03e:	460c      	mov	r4, r1
 800b040:	4617      	mov	r7, r2
 800b042:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800b044:	796b      	ldrb	r3, [r5, #5]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d03b      	beq.n	800b0c2 <HAL_SUBGHZ_WriteRegisters+0x96>
 800b04a:	2301      	movs	r3, #1
 800b04c:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 800b04e:	2302      	movs	r3, #2
 800b050:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b052:	4628      	mov	r0, r5
 800b054:	f7ff ffc0 	bl	800afd8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b058:	4a1b      	ldr	r2, [pc, #108]	; (800b0c8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800b05a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b05e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800b066:	210d      	movs	r1, #13
 800b068:	4628      	mov	r0, r5
 800b06a:	f7ff ff0d 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b06e:	0a21      	lsrs	r1, r4, #8
 800b070:	4628      	mov	r0, r5
 800b072:	f7ff ff09 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b076:	b2e1      	uxtb	r1, r4
 800b078:	4628      	mov	r0, r5
 800b07a:	f7ff ff05 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b07e:	2400      	movs	r4, #0
 800b080:	e005      	b.n	800b08e <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b082:	5d39      	ldrb	r1, [r7, r4]
 800b084:	4628      	mov	r0, r5
 800b086:	f7ff feff 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b08a:	3401      	adds	r4, #1
 800b08c:	b2a4      	uxth	r4, r4
 800b08e:	42b4      	cmp	r4, r6
 800b090:	d3f7      	bcc.n	800b082 <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b092:	4a0d      	ldr	r2, [pc, #52]	; (800b0c8 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800b094:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b09c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	f7ff ff6d 	bl	800af80 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b0a6:	68ab      	ldr	r3, [r5, #8]
 800b0a8:	b90b      	cbnz	r3, 800b0ae <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 800b0aa:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	716b      	strb	r3, [r5, #5]
}
 800b0b6:	4640      	mov	r0, r8
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800b0bc:	f04f 0802 	mov.w	r8, #2
 800b0c0:	e7f9      	b.n	800b0b6 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800b0c2:	f04f 0802 	mov.w	r8, #2
 800b0c6:	e7f6      	b.n	800b0b6 <HAL_SUBGHZ_WriteRegisters+0x8a>
 800b0c8:	58000400 	.word	0x58000400

0800b0cc <HAL_SUBGHZ_ReadRegisters>:
{
 800b0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b0d2:	7980      	ldrb	r0, [r0, #6]
 800b0d4:	fa5f f880 	uxtb.w	r8, r0
 800b0d8:	f1b8 0f01 	cmp.w	r8, #1
 800b0dc:	d141      	bne.n	800b162 <HAL_SUBGHZ_ReadRegisters+0x96>
 800b0de:	460c      	mov	r4, r1
 800b0e0:	4615      	mov	r5, r2
 800b0e2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800b0e4:	7973      	ldrb	r3, [r6, #5]
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d03e      	beq.n	800b168 <HAL_SUBGHZ_ReadRegisters+0x9c>
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b0ee:	4630      	mov	r0, r6
 800b0f0:	f7ff ff72 	bl	800afd8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b0f4:	4a1e      	ldr	r2, [pc, #120]	; (800b170 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800b0f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b0fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b0fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800b102:	211d      	movs	r1, #29
 800b104:	4630      	mov	r0, r6
 800b106:	f7ff febf 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800b10a:	0a21      	lsrs	r1, r4, #8
 800b10c:	4630      	mov	r0, r6
 800b10e:	f7ff febb 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800b112:	b2e1      	uxtb	r1, r4
 800b114:	4630      	mov	r0, r6
 800b116:	f7ff feb7 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 800b11a:	2100      	movs	r1, #0
 800b11c:	4630      	mov	r0, r6
 800b11e:	f7ff feb3 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b122:	2400      	movs	r4, #0
 800b124:	e006      	b.n	800b134 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b126:	4629      	mov	r1, r5
 800b128:	4630      	mov	r0, r6
 800b12a:	f7ff fee9 	bl	800af00 <SUBGHZSPI_Receive>
      pData++;
 800b12e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800b130:	3401      	adds	r4, #1
 800b132:	b2a4      	uxth	r4, r4
 800b134:	42bc      	cmp	r4, r7
 800b136:	d3f6      	bcc.n	800b126 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b138:	4a0d      	ldr	r2, [pc, #52]	; (800b170 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 800b13a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b13e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b146:	4630      	mov	r0, r6
 800b148:	f7ff ff1a 	bl	800af80 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b14c:	68b3      	ldr	r3, [r6, #8]
 800b14e:	b90b      	cbnz	r3, 800b154 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 800b150:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b154:	2301      	movs	r3, #1
 800b156:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800b158:	2300      	movs	r3, #0
 800b15a:	7173      	strb	r3, [r6, #5]
}
 800b15c:	4640      	mov	r0, r8
 800b15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800b162:	f04f 0802 	mov.w	r8, #2
 800b166:	e7f9      	b.n	800b15c <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 800b168:	f04f 0802 	mov.w	r8, #2
 800b16c:	e7f6      	b.n	800b15c <HAL_SUBGHZ_ReadRegisters+0x90>
 800b16e:	bf00      	nop
 800b170:	58000400 	.word	0x58000400

0800b174 <HAL_SUBGHZ_ExecSetCmd>:
{
 800b174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b178:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b17a:	7980      	ldrb	r0, [r0, #6]
 800b17c:	fa5f f980 	uxtb.w	r9, r0
 800b180:	f1b9 0f01 	cmp.w	r9, #1
 800b184:	d143      	bne.n	800b20e <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800b186:	4688      	mov	r8, r1
 800b188:	4617      	mov	r7, r2
 800b18a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800b18c:	796b      	ldrb	r3, [r5, #5]
 800b18e:	2b01      	cmp	r3, #1
 800b190:	d040      	beq.n	800b214 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800b192:	2301      	movs	r3, #1
 800b194:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b196:	4628      	mov	r0, r5
 800b198:	f7ff ff1e 	bl	800afd8 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800b19c:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800b1a0:	d005      	beq.n	800b1ae <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800b1a2:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 800b1a6:	d002      	beq.n	800b1ae <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	712b      	strb	r3, [r5, #4]
 800b1ac:	e001      	b.n	800b1b2 <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b1b2:	4a1a      	ldr	r2, [pc, #104]	; (800b21c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800b1b4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b1b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b1bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b1c0:	4641      	mov	r1, r8
 800b1c2:	4628      	mov	r0, r5
 800b1c4:	f7ff fe60 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b1c8:	2400      	movs	r4, #0
 800b1ca:	e005      	b.n	800b1d8 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b1cc:	5d39      	ldrb	r1, [r7, r4]
 800b1ce:	4628      	mov	r0, r5
 800b1d0:	f7ff fe5a 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b1d4:	3401      	adds	r4, #1
 800b1d6:	b2a4      	uxth	r4, r4
 800b1d8:	42b4      	cmp	r4, r6
 800b1da:	d3f7      	bcc.n	800b1cc <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b1dc:	4a0f      	ldr	r2, [pc, #60]	; (800b21c <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800b1de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b1e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 800b1ea:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800b1ee:	d10a      	bne.n	800b206 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b1f0:	68ab      	ldr	r3, [r5, #8]
 800b1f2:	b90b      	cbnz	r3, 800b1f8 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 800b1f4:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	716b      	strb	r3, [r5, #5]
}
 800b200:	4648      	mov	r0, r9
 800b202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b206:	4628      	mov	r0, r5
 800b208:	f7ff feba 	bl	800af80 <SUBGHZ_WaitOnBusy>
 800b20c:	e7f0      	b.n	800b1f0 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 800b20e:	f04f 0902 	mov.w	r9, #2
 800b212:	e7f5      	b.n	800b200 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800b214:	f04f 0902 	mov.w	r9, #2
 800b218:	e7f2      	b.n	800b200 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 800b21a:	bf00      	nop
 800b21c:	58000400 	.word	0x58000400

0800b220 <HAL_SUBGHZ_ExecGetCmd>:
{
 800b220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b224:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b226:	7980      	ldrb	r0, [r0, #6]
 800b228:	fa5f f880 	uxtb.w	r8, r0
 800b22c:	f1b8 0f01 	cmp.w	r8, #1
 800b230:	d139      	bne.n	800b2a6 <HAL_SUBGHZ_ExecGetCmd+0x86>
 800b232:	460c      	mov	r4, r1
 800b234:	4615      	mov	r5, r2
 800b236:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800b238:	7973      	ldrb	r3, [r6, #5]
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d036      	beq.n	800b2ac <HAL_SUBGHZ_ExecGetCmd+0x8c>
 800b23e:	2301      	movs	r3, #1
 800b240:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b242:	4630      	mov	r0, r6
 800b244:	f7ff fec8 	bl	800afd8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b248:	4a1a      	ldr	r2, [pc, #104]	; (800b2b4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800b24a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b24e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800b256:	4621      	mov	r1, r4
 800b258:	4630      	mov	r0, r6
 800b25a:	f7ff fe15 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b25e:	2100      	movs	r1, #0
 800b260:	4630      	mov	r0, r6
 800b262:	f7ff fe11 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b266:	2400      	movs	r4, #0
 800b268:	e006      	b.n	800b278 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b26a:	4629      	mov	r1, r5
 800b26c:	4630      	mov	r0, r6
 800b26e:	f7ff fe47 	bl	800af00 <SUBGHZSPI_Receive>
      pData++;
 800b272:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800b274:	3401      	adds	r4, #1
 800b276:	b2a4      	uxth	r4, r4
 800b278:	42bc      	cmp	r4, r7
 800b27a:	d3f6      	bcc.n	800b26a <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b27c:	4a0d      	ldr	r2, [pc, #52]	; (800b2b4 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 800b27e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b286:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7ff fe78 	bl	800af80 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b290:	68b3      	ldr	r3, [r6, #8]
 800b292:	b90b      	cbnz	r3, 800b298 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 800b294:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b298:	2301      	movs	r3, #1
 800b29a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800b29c:	2300      	movs	r3, #0
 800b29e:	7173      	strb	r3, [r6, #5]
}
 800b2a0:	4640      	mov	r0, r8
 800b2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800b2a6:	f04f 0802 	mov.w	r8, #2
 800b2aa:	e7f9      	b.n	800b2a0 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 800b2ac:	f04f 0802 	mov.w	r8, #2
 800b2b0:	e7f6      	b.n	800b2a0 <HAL_SUBGHZ_ExecGetCmd+0x80>
 800b2b2:	bf00      	nop
 800b2b4:	58000400 	.word	0x58000400

0800b2b8 <HAL_SUBGHZ_IRQHandler>:
{
 800b2b8:	b530      	push	{r4, r5, lr}
 800b2ba:	b083      	sub	sp, #12
 800b2bc:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 800b2be:	2300      	movs	r3, #0
 800b2c0:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	aa01      	add	r2, sp, #4
 800b2c8:	2112      	movs	r1, #18
 800b2ca:	f7ff ffa9 	bl	800b220 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800b2ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 800b2d2:	f89d 4005 	ldrb.w	r4, [sp, #5]
 800b2d6:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 800b2da:	2302      	movs	r3, #2
 800b2dc:	aa01      	add	r2, sp, #4
 800b2de:	4619      	mov	r1, r3
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f7ff ff47 	bl	800b174 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800b2e6:	f014 0f01 	tst.w	r4, #1
 800b2ea:	d123      	bne.n	800b334 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800b2ec:	f014 0f02 	tst.w	r4, #2
 800b2f0:	d124      	bne.n	800b33c <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800b2f2:	f014 0f04 	tst.w	r4, #4
 800b2f6:	d125      	bne.n	800b344 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800b2f8:	f014 0f08 	tst.w	r4, #8
 800b2fc:	d126      	bne.n	800b34c <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800b2fe:	f014 0f10 	tst.w	r4, #16
 800b302:	d127      	bne.n	800b354 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800b304:	f014 0f20 	tst.w	r4, #32
 800b308:	d128      	bne.n	800b35c <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800b30a:	f014 0f40 	tst.w	r4, #64	; 0x40
 800b30e:	d129      	bne.n	800b364 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800b310:	f014 0f80 	tst.w	r4, #128	; 0x80
 800b314:	d006      	beq.n	800b324 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800b316:	f414 7f80 	tst.w	r4, #256	; 0x100
 800b31a:	d027      	beq.n	800b36c <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 800b31c:	2101      	movs	r1, #1
 800b31e:	4628      	mov	r0, r5
 800b320:	f00a ffa0 	bl	8016264 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800b324:	f414 7f00 	tst.w	r4, #512	; 0x200
 800b328:	d125      	bne.n	800b376 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 800b32a:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 800b32e:	d126      	bne.n	800b37e <HAL_SUBGHZ_IRQHandler+0xc6>
}
 800b330:	b003      	add	sp, #12
 800b332:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800b334:	4628      	mov	r0, r5
 800b336:	f00a ff7d 	bl	8016234 <HAL_SUBGHZ_TxCpltCallback>
 800b33a:	e7d7      	b.n	800b2ec <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800b33c:	4628      	mov	r0, r5
 800b33e:	f00a ff81 	bl	8016244 <HAL_SUBGHZ_RxCpltCallback>
 800b342:	e7d6      	b.n	800b2f2 <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800b344:	4628      	mov	r0, r5
 800b346:	f00a ffb1 	bl	80162ac <HAL_SUBGHZ_PreambleDetectedCallback>
 800b34a:	e7d5      	b.n	800b2f8 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 800b34c:	4628      	mov	r0, r5
 800b34e:	f00a ffb5 	bl	80162bc <HAL_SUBGHZ_SyncWordValidCallback>
 800b352:	e7d4      	b.n	800b2fe <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800b354:	4628      	mov	r0, r5
 800b356:	f00a ffb9 	bl	80162cc <HAL_SUBGHZ_HeaderValidCallback>
 800b35a:	e7d3      	b.n	800b304 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 800b35c:	4628      	mov	r0, r5
 800b35e:	f00a ff9d 	bl	801629c <HAL_SUBGHZ_HeaderErrorCallback>
 800b362:	e7d2      	b.n	800b30a <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800b364:	4628      	mov	r0, r5
 800b366:	f00a ff75 	bl	8016254 <HAL_SUBGHZ_CRCErrorCallback>
 800b36a:	e7d1      	b.n	800b310 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 800b36c:	2100      	movs	r1, #0
 800b36e:	4628      	mov	r0, r5
 800b370:	f00a ff78 	bl	8016264 <HAL_SUBGHZ_CADStatusCallback>
 800b374:	e7d6      	b.n	800b324 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800b376:	4628      	mov	r0, r5
 800b378:	f00a ff86 	bl	8016288 <HAL_SUBGHZ_RxTxTimeoutCallback>
 800b37c:	e7d5      	b.n	800b32a <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 800b37e:	4628      	mov	r0, r5
 800b380:	f00a ffac 	bl	80162dc <HAL_SUBGHZ_LrFhssHopCallback>
}
 800b384:	e7d4      	b.n	800b330 <HAL_SUBGHZ_IRQHandler+0x78>
	...

0800b388 <HAL_SUBGHZ_WriteBuffer>:
{
 800b388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b38c:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b38e:	7980      	ldrb	r0, [r0, #6]
 800b390:	fa5f f880 	uxtb.w	r8, r0
 800b394:	f1b8 0f01 	cmp.w	r8, #1
 800b398:	d138      	bne.n	800b40c <HAL_SUBGHZ_WriteBuffer+0x84>
 800b39a:	460c      	mov	r4, r1
 800b39c:	4617      	mov	r7, r2
 800b39e:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800b3a0:	796b      	ldrb	r3, [r5, #5]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d035      	beq.n	800b412 <HAL_SUBGHZ_WriteBuffer+0x8a>
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	f7ff fe14 	bl	800afd8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b3b0:	4a19      	ldr	r2, [pc, #100]	; (800b418 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800b3b2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b3b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b3ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 800b3be:	210e      	movs	r1, #14
 800b3c0:	4628      	mov	r0, r5
 800b3c2:	f7ff fd61 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f7ff fd5d 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b3ce:	2400      	movs	r4, #0
 800b3d0:	e005      	b.n	800b3de <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800b3d2:	5d39      	ldrb	r1, [r7, r4]
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	f7ff fd57 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b3da:	3401      	adds	r4, #1
 800b3dc:	b2a4      	uxth	r4, r4
 800b3de:	42b4      	cmp	r4, r6
 800b3e0:	d3f7      	bcc.n	800b3d2 <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b3e2:	4a0d      	ldr	r2, [pc, #52]	; (800b418 <HAL_SUBGHZ_WriteBuffer+0x90>)
 800b3e4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b3e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f7ff fdc5 	bl	800af80 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b3f6:	68ab      	ldr	r3, [r5, #8]
 800b3f8:	b90b      	cbnz	r3, 800b3fe <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 800b3fa:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b3fe:	2301      	movs	r3, #1
 800b400:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800b402:	2300      	movs	r3, #0
 800b404:	716b      	strb	r3, [r5, #5]
}
 800b406:	4640      	mov	r0, r8
 800b408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800b40c:	f04f 0802 	mov.w	r8, #2
 800b410:	e7f9      	b.n	800b406 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800b412:	f04f 0802 	mov.w	r8, #2
 800b416:	e7f6      	b.n	800b406 <HAL_SUBGHZ_WriteBuffer+0x7e>
 800b418:	58000400 	.word	0x58000400

0800b41c <HAL_SUBGHZ_ReadBuffer>:
{
 800b41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b420:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800b422:	7980      	ldrb	r0, [r0, #6]
 800b424:	fa5f f880 	uxtb.w	r8, r0
 800b428:	f1b8 0f01 	cmp.w	r8, #1
 800b42c:	d13d      	bne.n	800b4aa <HAL_SUBGHZ_ReadBuffer+0x8e>
 800b42e:	460c      	mov	r4, r1
 800b430:	4615      	mov	r5, r2
 800b432:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800b434:	7973      	ldrb	r3, [r6, #5]
 800b436:	2b01      	cmp	r3, #1
 800b438:	d03a      	beq.n	800b4b0 <HAL_SUBGHZ_ReadBuffer+0x94>
 800b43a:	2301      	movs	r3, #1
 800b43c:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800b43e:	4630      	mov	r0, r6
 800b440:	f7ff fdca 	bl	800afd8 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b444:	4a1c      	ldr	r2, [pc, #112]	; (800b4b8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800b446:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b44a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b44e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800b452:	211e      	movs	r1, #30
 800b454:	4630      	mov	r0, r6
 800b456:	f7ff fd17 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800b45a:	4621      	mov	r1, r4
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff fd13 	bl	800ae88 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800b462:	2100      	movs	r1, #0
 800b464:	4630      	mov	r0, r6
 800b466:	f7ff fd0f 	bl	800ae88 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800b46a:	2400      	movs	r4, #0
 800b46c:	e006      	b.n	800b47c <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800b46e:	4629      	mov	r1, r5
 800b470:	4630      	mov	r0, r6
 800b472:	f7ff fd45 	bl	800af00 <SUBGHZSPI_Receive>
      pData++;
 800b476:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800b478:	3401      	adds	r4, #1
 800b47a:	b2a4      	uxth	r4, r4
 800b47c:	42bc      	cmp	r4, r7
 800b47e:	d3f6      	bcc.n	800b46e <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800b480:	4a0d      	ldr	r2, [pc, #52]	; (800b4b8 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800b482:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800b486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b48a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800b48e:	4630      	mov	r0, r6
 800b490:	f7ff fd76 	bl	800af80 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800b494:	68b3      	ldr	r3, [r6, #8]
 800b496:	b90b      	cbnz	r3, 800b49c <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 800b498:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800b49c:	2301      	movs	r3, #1
 800b49e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	7173      	strb	r3, [r6, #5]
}
 800b4a4:	4640      	mov	r0, r8
 800b4a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800b4aa:	f04f 0802 	mov.w	r8, #2
 800b4ae:	e7f9      	b.n	800b4a4 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 800b4b0:	f04f 0802 	mov.w	r8, #2
 800b4b4:	e7f6      	b.n	800b4a4 <HAL_SUBGHZ_ReadBuffer+0x88>
 800b4b6:	bf00      	nop
 800b4b8:	58000400 	.word	0x58000400

0800b4bc <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b4bc:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4be:	e852 3f00 	ldrex	r3, [r2]
 800b4c2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4c6:	e842 3100 	strex	r1, r3, [r2]
 800b4ca:	2900      	cmp	r1, #0
 800b4cc:	d1f6      	bne.n	800b4bc <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b4ce:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4d0:	f102 0308 	add.w	r3, r2, #8
 800b4d4:	e853 3f00 	ldrex	r3, [r3]
 800b4d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4dc:	3208      	adds	r2, #8
 800b4de:	e842 3100 	strex	r1, r3, [r2]
 800b4e2:	2900      	cmp	r1, #0
 800b4e4:	d1f3      	bne.n	800b4ce <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b4e6:	2320      	movs	r3, #32
 800b4e8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 800b4ec:	4770      	bx	lr

0800b4ee <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4ee:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f0:	e852 3f00 	ldrex	r3, [r2]
 800b4f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4f8:	e842 3100 	strex	r1, r3, [r2]
 800b4fc:	2900      	cmp	r1, #0
 800b4fe:	d1f6      	bne.n	800b4ee <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b500:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b502:	f102 0308 	add.w	r3, r2, #8
 800b506:	e853 3f00 	ldrex	r3, [r3]
 800b50a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b50e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b512:	3208      	adds	r2, #8
 800b514:	e842 3100 	strex	r1, r3, [r2]
 800b518:	2900      	cmp	r1, #0
 800b51a:	d1f1      	bne.n	800b500 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b51c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d006      	beq.n	800b530 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b522:	2320      	movs	r3, #32
 800b524:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b528:	2300      	movs	r3, #0
 800b52a:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b52c:	6743      	str	r3, [r0, #116]	; 0x74
}
 800b52e:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b530:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b532:	e852 3f00 	ldrex	r3, [r2]
 800b536:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b53a:	e842 3100 	strex	r1, r3, [r2]
 800b53e:	2900      	cmp	r1, #0
 800b540:	d1f6      	bne.n	800b530 <UART_EndRxTransfer+0x42>
 800b542:	e7ee      	b.n	800b522 <UART_EndRxTransfer+0x34>

0800b544 <HAL_UART_Transmit_DMA>:
{
 800b544:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800b546:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800b54a:	2a20      	cmp	r2, #32
 800b54c:	d13d      	bne.n	800b5ca <HAL_UART_Transmit_DMA+0x86>
{
 800b54e:	b510      	push	{r4, lr}
 800b550:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 800b552:	2900      	cmp	r1, #0
 800b554:	d03b      	beq.n	800b5ce <HAL_UART_Transmit_DMA+0x8a>
 800b556:	2b00      	cmp	r3, #0
 800b558:	d03b      	beq.n	800b5d2 <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 800b55a:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b55c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 800b560:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b564:	2200      	movs	r2, #0
 800b566:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b56a:	2221      	movs	r2, #33	; 0x21
 800b56c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 800b570:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800b572:	b1ca      	cbz	r2, 800b5a8 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b574:	4918      	ldr	r1, [pc, #96]	; (800b5d8 <HAL_UART_Transmit_DMA+0x94>)
 800b576:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b578:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800b57a:	4918      	ldr	r1, [pc, #96]	; (800b5dc <HAL_UART_Transmit_DMA+0x98>)
 800b57c:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b57e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800b580:	4917      	ldr	r1, [pc, #92]	; (800b5e0 <HAL_UART_Transmit_DMA+0x9c>)
 800b582:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 800b584:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800b586:	2100      	movs	r1, #0
 800b588:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b58a:	6802      	ldr	r2, [r0, #0]
 800b58c:	3228      	adds	r2, #40	; 0x28
 800b58e:	6d01      	ldr	r1, [r0, #80]	; 0x50
 800b590:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 800b592:	f7fd fa29 	bl	80089e8 <HAL_DMA_Start_IT>
 800b596:	b138      	cbz	r0, 800b5a8 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b598:	2310      	movs	r3, #16
 800b59a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 800b59e:	2320      	movs	r3, #32
 800b5a0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 800b5a4:	2001      	movs	r0, #1
 800b5a6:	e00f      	b.n	800b5c8 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b5a8:	6823      	ldr	r3, [r4, #0]
 800b5aa:	2240      	movs	r2, #64	; 0x40
 800b5ac:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5ae:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b0:	f102 0308 	add.w	r3, r2, #8
 800b5b4:	e853 3f00 	ldrex	r3, [r3]
 800b5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5bc:	3208      	adds	r2, #8
 800b5be:	e842 3100 	strex	r1, r3, [r2]
 800b5c2:	2900      	cmp	r1, #0
 800b5c4:	d1f3      	bne.n	800b5ae <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 800b5c6:	2000      	movs	r0, #0
}
 800b5c8:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800b5ca:	2002      	movs	r0, #2
}
 800b5cc:	4770      	bx	lr
      return HAL_ERROR;
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	e7fa      	b.n	800b5c8 <HAL_UART_Transmit_DMA+0x84>
 800b5d2:	2001      	movs	r0, #1
 800b5d4:	e7f8      	b.n	800b5c8 <HAL_UART_Transmit_DMA+0x84>
 800b5d6:	bf00      	nop
 800b5d8:	0800b5e5 	.word	0x0800b5e5
 800b5dc:	0800b653 	.word	0x0800b653
 800b5e0:	0800b65f 	.word	0x0800b65f

0800b5e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b5e4:	b508      	push	{r3, lr}
 800b5e6:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b5e8:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f013 0f20 	tst.w	r3, #32
 800b5f2:	d118      	bne.n	800b626 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b5fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5fc:	f102 0308 	add.w	r3, r2, #8
 800b600:	e853 3f00 	ldrex	r3, [r3]
 800b604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b608:	3208      	adds	r2, #8
 800b60a:	e842 3100 	strex	r1, r3, [r2]
 800b60e:	2900      	cmp	r1, #0
 800b610:	d1f3      	bne.n	800b5fa <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b612:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b614:	e852 3f00 	ldrex	r3, [r2]
 800b618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b61c:	e842 3100 	strex	r1, r3, [r2]
 800b620:	2900      	cmp	r1, #0
 800b622:	d1f6      	bne.n	800b612 <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b624:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800b626:	f7f7 fd27 	bl	8003078 <HAL_UART_TxCpltCallback>
}
 800b62a:	e7fb      	b.n	800b624 <UART_DMATransmitCplt+0x40>

0800b62c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b62c:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b62e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b630:	e852 3f00 	ldrex	r3, [r2]
 800b634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b638:	e842 3100 	strex	r1, r3, [r2]
 800b63c:	2900      	cmp	r1, #0
 800b63e:	d1f6      	bne.n	800b62e <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b640:	2320      	movs	r3, #32
 800b642:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b646:	2300      	movs	r3, #0
 800b648:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b64a:	f7f7 fd15 	bl	8003078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b64e:	bd08      	pop	{r3, pc}

0800b650 <HAL_UART_TxHalfCpltCallback>:
}
 800b650:	4770      	bx	lr

0800b652 <UART_DMATxHalfCplt>:
{
 800b652:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800b654:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800b656:	f7ff fffb 	bl	800b650 <HAL_UART_TxHalfCpltCallback>
}
 800b65a:	bd08      	pop	{r3, pc}

0800b65c <HAL_UART_ErrorCallback>:
}
 800b65c:	4770      	bx	lr

0800b65e <UART_DMAError>:
{
 800b65e:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b660:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b662:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b666:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b66a:	6823      	ldr	r3, [r4, #0]
 800b66c:	689b      	ldr	r3, [r3, #8]
 800b66e:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b672:	d001      	beq.n	800b678 <UART_DMAError+0x1a>
 800b674:	2a21      	cmp	r2, #33	; 0x21
 800b676:	d010      	beq.n	800b69a <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b680:	d001      	beq.n	800b686 <UART_DMAError+0x28>
 800b682:	2d22      	cmp	r5, #34	; 0x22
 800b684:	d010      	beq.n	800b6a8 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b686:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800b68a:	f043 0310 	orr.w	r3, r3, #16
 800b68e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 800b692:	4620      	mov	r0, r4
 800b694:	f7ff ffe2 	bl	800b65c <HAL_UART_ErrorCallback>
}
 800b698:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 800b69a:	2300      	movs	r3, #0
 800b69c:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	f7ff ff0b 	bl	800b4bc <UART_EndTxTransfer>
 800b6a6:	e7e7      	b.n	800b678 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800b6ae:	4620      	mov	r0, r4
 800b6b0:	f7ff ff1d 	bl	800b4ee <UART_EndRxTransfer>
 800b6b4:	e7e7      	b.n	800b686 <UART_DMAError+0x28>

0800b6b6 <UART_DMAAbortOnError>:
{
 800b6b6:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b6b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b6c0:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 800b6c4:	f7ff ffca 	bl	800b65c <HAL_UART_ErrorCallback>
}
 800b6c8:	bd08      	pop	{r3, pc}

0800b6ca <HAL_UARTEx_RxEventCallback>:
}
 800b6ca:	4770      	bx	lr

0800b6cc <HAL_UART_IRQHandler>:
{
 800b6cc:	b570      	push	{r4, r5, r6, lr}
 800b6ce:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b6d0:	6801      	ldr	r1, [r0, #0]
 800b6d2:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b6d4:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b6d6:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b6d8:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 800b6dc:	401a      	ands	r2, r3
 800b6de:	d108      	bne.n	800b6f2 <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b6e0:	f013 0f20 	tst.w	r3, #32
 800b6e4:	d005      	beq.n	800b6f2 <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b6e6:	f010 0f20 	tst.w	r0, #32
 800b6ea:	d134      	bne.n	800b756 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b6ec:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800b6f0:	d131      	bne.n	800b756 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 800b6f2:	b12a      	cbz	r2, 800b700 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b6f4:	4a99      	ldr	r2, [pc, #612]	; (800b95c <HAL_UART_IRQHandler+0x290>)
 800b6f6:	402a      	ands	r2, r5
 800b6f8:	d133      	bne.n	800b762 <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b6fa:	4e99      	ldr	r6, [pc, #612]	; (800b960 <HAL_UART_IRQHandler+0x294>)
 800b6fc:	4230      	tst	r0, r6
 800b6fe:	d130      	bne.n	800b762 <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b700:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800b702:	2a01      	cmp	r2, #1
 800b704:	f000 80c6 	beq.w	800b894 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b708:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800b70c:	d003      	beq.n	800b716 <HAL_UART_IRQHandler+0x4a>
 800b70e:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800b712:	f040 8165 	bne.w	800b9e0 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b716:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b71a:	d007      	beq.n	800b72c <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b71c:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b720:	f040 8165 	bne.w	800b9ee <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b724:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 800b728:	f040 8161 	bne.w	800b9ee <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b72c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b730:	d003      	beq.n	800b73a <HAL_UART_IRQHandler+0x6e>
 800b732:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b736:	f040 8161 	bne.w	800b9fc <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b73a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800b73e:	d003      	beq.n	800b748 <HAL_UART_IRQHandler+0x7c>
 800b740:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b744:	f040 815e 	bne.w	800ba04 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b748:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800b74c:	d002      	beq.n	800b754 <HAL_UART_IRQHandler+0x88>
 800b74e:	2800      	cmp	r0, #0
 800b750:	f2c0 815c 	blt.w	800ba0c <HAL_UART_IRQHandler+0x340>
}
 800b754:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 800b756:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0fb      	beq.n	800b754 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 800b75c:	4620      	mov	r0, r4
 800b75e:	4798      	blx	r3
      return;
 800b760:	e7f8      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b762:	f013 0f01 	tst.w	r3, #1
 800b766:	d009      	beq.n	800b77c <HAL_UART_IRQHandler+0xb0>
 800b768:	f410 7f80 	tst.w	r0, #256	; 0x100
 800b76c:	d006      	beq.n	800b77c <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b76e:	2601      	movs	r6, #1
 800b770:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b772:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b776:	4331      	orrs	r1, r6
 800b778:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b77c:	f013 0f02 	tst.w	r3, #2
 800b780:	d00b      	beq.n	800b79a <HAL_UART_IRQHandler+0xce>
 800b782:	f015 0f01 	tst.w	r5, #1
 800b786:	d008      	beq.n	800b79a <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b788:	6821      	ldr	r1, [r4, #0]
 800b78a:	2602      	movs	r6, #2
 800b78c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b78e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b792:	f041 0104 	orr.w	r1, r1, #4
 800b796:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b79a:	f013 0f04 	tst.w	r3, #4
 800b79e:	d00b      	beq.n	800b7b8 <HAL_UART_IRQHandler+0xec>
 800b7a0:	f015 0f01 	tst.w	r5, #1
 800b7a4:	d008      	beq.n	800b7b8 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b7a6:	6821      	ldr	r1, [r4, #0]
 800b7a8:	2604      	movs	r6, #4
 800b7aa:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b7ac:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800b7b0:	f041 0102 	orr.w	r1, r1, #2
 800b7b4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b7b8:	f013 0f08 	tst.w	r3, #8
 800b7bc:	d00b      	beq.n	800b7d6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b7be:	f010 0f20 	tst.w	r0, #32
 800b7c2:	d100      	bne.n	800b7c6 <HAL_UART_IRQHandler+0xfa>
 800b7c4:	b13a      	cbz	r2, 800b7d6 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b7c6:	6822      	ldr	r2, [r4, #0]
 800b7c8:	2108      	movs	r1, #8
 800b7ca:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b7cc:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b7d0:	430a      	orrs	r2, r1
 800b7d2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b7d6:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800b7da:	d00c      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x12a>
 800b7dc:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 800b7e0:	d009      	beq.n	800b7f6 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b7e2:	6822      	ldr	r2, [r4, #0]
 800b7e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b7e8:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b7ea:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b7ee:	f042 0220 	orr.w	r2, r2, #32
 800b7f2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b7f6:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800b7fa:	2a00      	cmp	r2, #0
 800b7fc:	d0aa      	beq.n	800b754 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b7fe:	f013 0f20 	tst.w	r3, #32
 800b802:	d009      	beq.n	800b818 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b804:	f010 0f20 	tst.w	r0, #32
 800b808:	d102      	bne.n	800b810 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b80a:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 800b80e:	d003      	beq.n	800b818 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 800b810:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b812:	b10b      	cbz	r3, 800b818 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 800b814:	4620      	mov	r0, r4
 800b816:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800b818:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b824:	d102      	bne.n	800b82c <HAL_UART_IRQHandler+0x160>
 800b826:	f012 0f28 	tst.w	r2, #40	; 0x28
 800b82a:	d02c      	beq.n	800b886 <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 800b82c:	4620      	mov	r0, r4
 800b82e:	f7ff fe5e 	bl	800b4ee <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	689b      	ldr	r3, [r3, #8]
 800b836:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b83a:	d020      	beq.n	800b87e <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b83c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b83e:	f102 0308 	add.w	r3, r2, #8
 800b842:	e853 3f00 	ldrex	r3, [r3]
 800b846:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84a:	3208      	adds	r2, #8
 800b84c:	e842 3100 	strex	r1, r3, [r2]
 800b850:	2900      	cmp	r1, #0
 800b852:	d1f3      	bne.n	800b83c <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 800b854:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800b858:	b16b      	cbz	r3, 800b876 <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b85a:	4a42      	ldr	r2, [pc, #264]	; (800b964 <HAL_UART_IRQHandler+0x298>)
 800b85c:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b85e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800b862:	f7fd f947 	bl	8008af4 <HAL_DMA_Abort_IT>
 800b866:	2800      	cmp	r0, #0
 800b868:	f43f af74 	beq.w	800b754 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b86c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800b870:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b872:	4798      	blx	r3
 800b874:	e76e      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 800b876:	4620      	mov	r0, r4
 800b878:	f7ff fef0 	bl	800b65c <HAL_UART_ErrorCallback>
 800b87c:	e76a      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800b87e:	4620      	mov	r0, r4
 800b880:	f7ff feec 	bl	800b65c <HAL_UART_ErrorCallback>
 800b884:	e766      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 800b886:	4620      	mov	r0, r4
 800b888:	f7ff fee8 	bl	800b65c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b88c:	2300      	movs	r3, #0
 800b88e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800b892:	e75f      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b894:	f013 0f10 	tst.w	r3, #16
 800b898:	f43f af36 	beq.w	800b708 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b89c:	f010 0f10 	tst.w	r0, #16
 800b8a0:	f43f af32 	beq.w	800b708 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8a8:	6823      	ldr	r3, [r4, #0]
 800b8aa:	689b      	ldr	r3, [r3, #8]
 800b8ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b8b0:	d05a      	beq.n	800b968 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b8b2:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800b8b6:	6813      	ldr	r3, [r2, #0]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	f43f af49 	beq.w	800b754 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b8c2:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b8c6:	4299      	cmp	r1, r3
 800b8c8:	f67f af44 	bls.w	800b754 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 800b8cc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b8d0:	6813      	ldr	r3, [r2, #0]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f013 0f20 	tst.w	r3, #32
 800b8d8:	d132      	bne.n	800b940 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8dc:	e852 3f00 	ldrex	r3, [r2]
 800b8e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e4:	e842 3100 	strex	r1, r3, [r2]
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d1f6      	bne.n	800b8da <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ee:	f102 0308 	add.w	r3, r2, #8
 800b8f2:	e853 3f00 	ldrex	r3, [r3]
 800b8f6:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fa:	3208      	adds	r2, #8
 800b8fc:	e842 3100 	strex	r1, r3, [r2]
 800b900:	2900      	cmp	r1, #0
 800b902:	d1f3      	bne.n	800b8ec <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b904:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b906:	f102 0308 	add.w	r3, r2, #8
 800b90a:	e853 3f00 	ldrex	r3, [r3]
 800b90e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b912:	3208      	adds	r2, #8
 800b914:	e842 3100 	strex	r1, r3, [r2]
 800b918:	2900      	cmp	r1, #0
 800b91a:	d1f3      	bne.n	800b904 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 800b91c:	2320      	movs	r3, #32
 800b91e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b922:	2300      	movs	r3, #0
 800b924:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b926:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b928:	e852 3f00 	ldrex	r3, [r2]
 800b92c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b930:	e842 3100 	strex	r1, r3, [r2]
 800b934:	2900      	cmp	r1, #0
 800b936:	d1f6      	bne.n	800b926 <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b938:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800b93c:	f7fd f8a0 	bl	8008a80 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b940:	2302      	movs	r3, #2
 800b942:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b944:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b948:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	1ac9      	subs	r1, r1, r3
 800b950:	b289      	uxth	r1, r1
 800b952:	4620      	mov	r0, r4
 800b954:	f7ff feb9 	bl	800b6ca <HAL_UARTEx_RxEventCallback>
      return;
 800b958:	e6fc      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
 800b95a:	bf00      	nop
 800b95c:	10000001 	.word	0x10000001
 800b960:	04000120 	.word	0x04000120
 800b964:	0800b6b7 	.word	0x0800b6b7
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b968:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800b96c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b970:	b29b      	uxth	r3, r3
 800b972:	1ac9      	subs	r1, r1, r3
 800b974:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 800b976:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800b97a:	b29b      	uxth	r3, r3
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f43f aee9 	beq.w	800b754 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800b982:	2900      	cmp	r1, #0
 800b984:	f43f aee6 	beq.w	800b754 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b988:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b98a:	e852 3f00 	ldrex	r3, [r2]
 800b98e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b992:	e842 3000 	strex	r0, r3, [r2]
 800b996:	2800      	cmp	r0, #0
 800b998:	d1f6      	bne.n	800b988 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b99a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b99c:	f102 0308 	add.w	r3, r2, #8
 800b9a0:	e853 3f00 	ldrex	r3, [r3]
 800b9a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b9a8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ac:	3208      	adds	r2, #8
 800b9ae:	e842 3000 	strex	r0, r3, [r2]
 800b9b2:	2800      	cmp	r0, #0
 800b9b4:	d1f1      	bne.n	800b99a <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 800b9b6:	2320      	movs	r3, #32
 800b9b8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800b9c0:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9c4:	e852 3f00 	ldrex	r3, [r2]
 800b9c8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9cc:	e842 3000 	strex	r0, r3, [r2]
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d1f6      	bne.n	800b9c2 <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b9d4:	2302      	movs	r3, #2
 800b9d6:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f7ff fe76 	bl	800b6ca <HAL_UARTEx_RxEventCallback>
      return;
 800b9de:	e6b9      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b9e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b9e4:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800b9e6:	4620      	mov	r0, r4
 800b9e8:	f000 fec2 	bl	800c770 <HAL_UARTEx_WakeupCallback>
    return;
 800b9ec:	e6b2      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800b9ee:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f43f aeaf 	beq.w	800b754 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	4798      	blx	r3
    return;
 800b9fa:	e6ab      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7ff fe15 	bl	800b62c <UART_EndTransmit_IT>
    return;
 800ba02:	e6a7      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ba04:	4620      	mov	r0, r4
 800ba06:	f000 feb5 	bl	800c774 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800ba0a:	e6a3      	b.n	800b754 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ba0c:	4620      	mov	r0, r4
 800ba0e:	f000 feb0 	bl	800c772 <HAL_UARTEx_RxFifoFullCallback>
    return;
 800ba12:	e69f      	b.n	800b754 <HAL_UART_IRQHandler+0x88>

0800ba14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba14:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 800ba16:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba1a:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800ba1e:	2a22      	cmp	r2, #34	; 0x22
 800ba20:	d005      	beq.n	800ba2e <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ba22:	6802      	ldr	r2, [r0, #0]
 800ba24:	6993      	ldr	r3, [r2, #24]
 800ba26:	f043 0308 	orr.w	r3, r3, #8
 800ba2a:	6193      	str	r3, [r2, #24]
  }
}
 800ba2c:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba2e:	6802      	ldr	r2, [r0, #0]
 800ba30:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	6d82      	ldr	r2, [r0, #88]	; 0x58
 800ba36:	400b      	ands	r3, r1
 800ba38:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 800ba3a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800ba3c:	3301      	adds	r3, #1
 800ba3e:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800ba40:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	3b01      	subs	r3, #1
 800ba48:	b29b      	uxth	r3, r3
 800ba4a:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800ba4e:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800ba52:	b29b      	uxth	r3, r3
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d1e9      	bne.n	800ba2c <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ba58:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba5a:	e852 3f00 	ldrex	r3, [r2]
 800ba5e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba62:	e842 3100 	strex	r1, r3, [r2]
 800ba66:	2900      	cmp	r1, #0
 800ba68:	d1f6      	bne.n	800ba58 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba6a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba6c:	f102 0308 	add.w	r3, r2, #8
 800ba70:	e853 3f00 	ldrex	r3, [r3]
 800ba74:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba78:	3208      	adds	r2, #8
 800ba7a:	e842 3100 	strex	r1, r3, [r2]
 800ba7e:	2900      	cmp	r1, #0
 800ba80:	d1f3      	bne.n	800ba6a <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800ba82:	2320      	movs	r3, #32
 800ba84:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ba8c:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ba8e:	6803      	ldr	r3, [r0, #0]
 800ba90:	4a16      	ldr	r2, [pc, #88]	; (800baec <UART_RxISR_8BIT+0xd8>)
 800ba92:	4293      	cmp	r3, r2
 800ba94:	d00c      	beq.n	800bab0 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ba96:	685b      	ldr	r3, [r3, #4]
 800ba98:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800ba9c:	d008      	beq.n	800bab0 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ba9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa0:	e852 3f00 	ldrex	r3, [r2]
 800baa4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa8:	e842 3100 	strex	r1, r3, [r2]
 800baac:	2900      	cmp	r1, #0
 800baae:	d1f6      	bne.n	800ba9e <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bab0:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d116      	bne.n	800bae4 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bab6:	2300      	movs	r3, #0
 800bab8:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800baba:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800babc:	e852 3f00 	ldrex	r3, [r2]
 800bac0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac4:	e842 3100 	strex	r1, r3, [r2]
 800bac8:	2900      	cmp	r1, #0
 800baca:	d1f6      	bne.n	800baba <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bacc:	6803      	ldr	r3, [r0, #0]
 800bace:	69da      	ldr	r2, [r3, #28]
 800bad0:	f012 0f10 	tst.w	r2, #16
 800bad4:	d001      	beq.n	800bada <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bad6:	2210      	movs	r2, #16
 800bad8:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bada:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800bade:	f7ff fdf4 	bl	800b6ca <HAL_UARTEx_RxEventCallback>
 800bae2:	e7a3      	b.n	800ba2c <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800bae4:	f7f7 fad8 	bl	8003098 <HAL_UART_RxCpltCallback>
 800bae8:	e7a0      	b.n	800ba2c <UART_RxISR_8BIT+0x18>
 800baea:	bf00      	nop
 800baec:	40008000 	.word	0x40008000

0800baf0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800baf0:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800baf2:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800baf6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800bafa:	2b22      	cmp	r3, #34	; 0x22
 800bafc:	d005      	beq.n	800bb0a <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bafe:	6802      	ldr	r2, [r0, #0]
 800bb00:	6993      	ldr	r3, [r2, #24]
 800bb02:	f043 0308 	orr.w	r3, r3, #8
 800bb06:	6193      	str	r3, [r2, #24]
  }
}
 800bb08:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bb0a:	6803      	ldr	r3, [r0, #0]
 800bb0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bb0e:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 800bb10:	4013      	ands	r3, r2
 800bb12:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800bb14:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800bb16:	3302      	adds	r3, #2
 800bb18:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 800bb1a:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	3b01      	subs	r3, #1
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 800bb28:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1ea      	bne.n	800bb08 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb32:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb34:	e852 3f00 	ldrex	r3, [r2]
 800bb38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	e842 3100 	strex	r1, r3, [r2]
 800bb40:	2900      	cmp	r1, #0
 800bb42:	d1f6      	bne.n	800bb32 <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb44:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb46:	f102 0308 	add.w	r3, r2, #8
 800bb4a:	e853 3f00 	ldrex	r3, [r3]
 800bb4e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb52:	3208      	adds	r2, #8
 800bb54:	e842 3100 	strex	r1, r3, [r2]
 800bb58:	2900      	cmp	r1, #0
 800bb5a:	d1f3      	bne.n	800bb44 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 800bb5c:	2320      	movs	r3, #32
 800bb5e:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb66:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb68:	6803      	ldr	r3, [r0, #0]
 800bb6a:	4a16      	ldr	r2, [pc, #88]	; (800bbc4 <UART_RxISR_16BIT+0xd4>)
 800bb6c:	4293      	cmp	r3, r2
 800bb6e:	d00c      	beq.n	800bb8a <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800bb76:	d008      	beq.n	800bb8a <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb78:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb7a:	e852 3f00 	ldrex	r3, [r2]
 800bb7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb82:	e842 3100 	strex	r1, r3, [r2]
 800bb86:	2900      	cmp	r1, #0
 800bb88:	d1f6      	bne.n	800bb78 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb8a:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	d116      	bne.n	800bbbe <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb90:	2300      	movs	r3, #0
 800bb92:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	e852 3f00 	ldrex	r3, [r2]
 800bb9a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb9e:	e842 3100 	strex	r1, r3, [r2]
 800bba2:	2900      	cmp	r1, #0
 800bba4:	d1f6      	bne.n	800bb94 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bba6:	6803      	ldr	r3, [r0, #0]
 800bba8:	69da      	ldr	r2, [r3, #28]
 800bbaa:	f012 0f10 	tst.w	r2, #16
 800bbae:	d001      	beq.n	800bbb4 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbb0:	2210      	movs	r2, #16
 800bbb2:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbb4:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800bbb8:	f7ff fd87 	bl	800b6ca <HAL_UARTEx_RxEventCallback>
 800bbbc:	e7a4      	b.n	800bb08 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800bbbe:	f7f7 fa6b 	bl	8003098 <HAL_UART_RxCpltCallback>
 800bbc2:	e7a1      	b.n	800bb08 <UART_RxISR_16BIT+0x18>
 800bbc4:	40008000 	.word	0x40008000

0800bbc8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 800bbcc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bbd0:	6803      	ldr	r3, [r0, #0]
 800bbd2:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bbd4:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bbd8:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbdc:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800bbe0:	2a22      	cmp	r2, #34	; 0x22
 800bbe2:	d005      	beq.n	800bbf0 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbe4:	699a      	ldr	r2, [r3, #24]
 800bbe6:	f042 0208 	orr.w	r2, r2, #8
 800bbea:	619a      	str	r2, [r3, #24]
  }
}
 800bbec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbf0:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800bbf2:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bbf6:	e008      	b.n	800bc0a <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bbf8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d14c      	bne.n	800bc9a <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 800bc00:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bc04:	b29b      	uxth	r3, r3
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d04e      	beq.n	800bca8 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bc0a:	2f00      	cmp	r7, #0
 800bc0c:	f000 809a 	beq.w	800bd44 <UART_RxISR_8BIT_FIFOEN+0x17c>
 800bc10:	f015 0f20 	tst.w	r5, #32
 800bc14:	f000 8096 	beq.w	800bd44 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bc18:	6823      	ldr	r3, [r4, #0]
 800bc1a:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bc1c:	b2f3      	uxtb	r3, r6
 800bc1e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800bc20:	400b      	ands	r3, r1
 800bc22:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800bc24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc26:	3301      	adds	r3, #1
 800bc28:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800bc2a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	3b01      	subs	r3, #1
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bc38:	6823      	ldr	r3, [r4, #0]
 800bc3a:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bc3c:	f015 0f07 	tst.w	r5, #7
 800bc40:	d0de      	beq.n	800bc00 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc42:	f015 0f01 	tst.w	r5, #1
 800bc46:	d009      	beq.n	800bc5c <UART_RxISR_8BIT_FIFOEN+0x94>
 800bc48:	f419 7f80 	tst.w	r9, #256	; 0x100
 800bc4c:	d006      	beq.n	800bc5c <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc4e:	2201      	movs	r2, #1
 800bc50:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc56:	4313      	orrs	r3, r2
 800bc58:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc5c:	f015 0f02 	tst.w	r5, #2
 800bc60:	d00b      	beq.n	800bc7a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800bc62:	f018 0f01 	tst.w	r8, #1
 800bc66:	d008      	beq.n	800bc7a <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	2202      	movs	r2, #2
 800bc6c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc6e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc72:	f043 0304 	orr.w	r3, r3, #4
 800bc76:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc7a:	f015 0f04 	tst.w	r5, #4
 800bc7e:	d0bb      	beq.n	800bbf8 <UART_RxISR_8BIT_FIFOEN+0x30>
 800bc80:	f018 0f01 	tst.w	r8, #1
 800bc84:	d0b8      	beq.n	800bbf8 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	2204      	movs	r2, #4
 800bc8a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc8c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bc90:	f043 0302 	orr.w	r3, r3, #2
 800bc94:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800bc98:	e7ae      	b.n	800bbf8 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f7ff fcde 	bl	800b65c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800bca6:	e7ab      	b.n	800bc00 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bca8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcaa:	e852 3f00 	ldrex	r3, [r2]
 800bcae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcb2:	e842 3100 	strex	r1, r3, [r2]
 800bcb6:	2900      	cmp	r1, #0
 800bcb8:	d1f6      	bne.n	800bca8 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bcba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcbc:	f102 0308 	add.w	r3, r2, #8
 800bcc0:	e853 3f00 	ldrex	r3, [r3]
 800bcc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcc8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bccc:	3208      	adds	r2, #8
 800bcce:	e842 3100 	strex	r1, r3, [r2]
 800bcd2:	2900      	cmp	r1, #0
 800bcd4:	d1f1      	bne.n	800bcba <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 800bcd6:	2320      	movs	r3, #32
 800bcd8:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bce0:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	4a29      	ldr	r2, [pc, #164]	; (800bd8c <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 800bce6:	4293      	cmp	r3, r2
 800bce8:	d003      	beq.n	800bcf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800bcf0:	d106      	bne.n	800bd00 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bcf2:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d00d      	beq.n	800bd14 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 800bcf8:	4620      	mov	r0, r4
 800bcfa:	f7f7 f9cd 	bl	8003098 <HAL_UART_RxCpltCallback>
 800bcfe:	e784      	b.n	800bc0a <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bd00:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd02:	e852 3f00 	ldrex	r3, [r2]
 800bd06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0a:	e842 3100 	strex	r1, r3, [r2]
 800bd0e:	2900      	cmp	r1, #0
 800bd10:	d1f6      	bne.n	800bd00 <UART_RxISR_8BIT_FIFOEN+0x138>
 800bd12:	e7ee      	b.n	800bcf2 <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd14:	2300      	movs	r3, #0
 800bd16:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd18:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd1a:	e852 3f00 	ldrex	r3, [r2]
 800bd1e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd22:	e842 3100 	strex	r1, r3, [r2]
 800bd26:	2900      	cmp	r1, #0
 800bd28:	d1f6      	bne.n	800bd18 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bd2a:	6823      	ldr	r3, [r4, #0]
 800bd2c:	69da      	ldr	r2, [r3, #28]
 800bd2e:	f012 0f10 	tst.w	r2, #16
 800bd32:	d001      	beq.n	800bd38 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd34:	2210      	movs	r2, #16
 800bd36:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bd38:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f7ff fcc4 	bl	800b6ca <HAL_UARTEx_RxEventCallback>
 800bd42:	e762      	b.n	800bc0a <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800bd44:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bd48:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	f43f af4e 	beq.w	800bbec <UART_RxISR_8BIT_FIFOEN+0x24>
 800bd50:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800bd54:	429a      	cmp	r2, r3
 800bd56:	f67f af49 	bls.w	800bbec <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bd5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd5c:	f102 0308 	add.w	r3, r2, #8
 800bd60:	e853 3f00 	ldrex	r3, [r3]
 800bd64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd68:	3208      	adds	r2, #8
 800bd6a:	e842 3100 	strex	r1, r3, [r2]
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	d1f3      	bne.n	800bd5a <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800bd72:	4b07      	ldr	r3, [pc, #28]	; (800bd90 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 800bd74:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bd76:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd78:	e852 3f00 	ldrex	r3, [r2]
 800bd7c:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd80:	e842 3100 	strex	r1, r3, [r2]
 800bd84:	2900      	cmp	r1, #0
 800bd86:	d1f6      	bne.n	800bd76 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 800bd88:	e730      	b.n	800bbec <UART_RxISR_8BIT_FIFOEN+0x24>
 800bd8a:	bf00      	nop
 800bd8c:	40008000 	.word	0x40008000
 800bd90:	0800ba15 	.word	0x0800ba15

0800bd94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bd98:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bd9c:	6803      	ldr	r3, [r0, #0]
 800bd9e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bda0:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bda4:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bda8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800bdac:	2a22      	cmp	r2, #34	; 0x22
 800bdae:	d005      	beq.n	800bdbc <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bdb0:	699a      	ldr	r2, [r3, #24]
 800bdb2:	f042 0208 	orr.w	r2, r2, #8
 800bdb6:	619a      	str	r2, [r3, #24]
  }
}
 800bdb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdbc:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800bdbe:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bdc2:	e008      	b.n	800bdd6 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bdc4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d14b      	bne.n	800be64 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 800bdcc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d04d      	beq.n	800be72 <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	f000 8099 	beq.w	800bf0e <UART_RxISR_16BIT_FIFOEN+0x17a>
 800bddc:	f015 0f20 	tst.w	r5, #32
 800bde0:	f000 8095 	beq.w	800bf0e <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bde4:	6823      	ldr	r3, [r4, #0]
 800bde6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bde8:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 800bdea:	4033      	ands	r3, r6
 800bdec:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800bdee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bdf0:	3302      	adds	r3, #2
 800bdf2:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 800bdf4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bdf8:	b29b      	uxth	r3, r3
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800be06:	f015 0f07 	tst.w	r5, #7
 800be0a:	d0df      	beq.n	800bdcc <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800be0c:	f015 0f01 	tst.w	r5, #1
 800be10:	d009      	beq.n	800be26 <UART_RxISR_16BIT_FIFOEN+0x92>
 800be12:	f419 7f80 	tst.w	r9, #256	; 0x100
 800be16:	d006      	beq.n	800be26 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800be18:	2201      	movs	r2, #1
 800be1a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be1c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800be20:	4313      	orrs	r3, r2
 800be22:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be26:	f015 0f02 	tst.w	r5, #2
 800be2a:	d00b      	beq.n	800be44 <UART_RxISR_16BIT_FIFOEN+0xb0>
 800be2c:	f018 0f01 	tst.w	r8, #1
 800be30:	d008      	beq.n	800be44 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800be32:	6823      	ldr	r3, [r4, #0]
 800be34:	2202      	movs	r2, #2
 800be36:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800be38:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800be3c:	f043 0304 	orr.w	r3, r3, #4
 800be40:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800be44:	f015 0f04 	tst.w	r5, #4
 800be48:	d0bc      	beq.n	800bdc4 <UART_RxISR_16BIT_FIFOEN+0x30>
 800be4a:	f018 0f01 	tst.w	r8, #1
 800be4e:	d0b9      	beq.n	800bdc4 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800be50:	6823      	ldr	r3, [r4, #0]
 800be52:	2204      	movs	r2, #4
 800be54:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be56:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800be5a:	f043 0302 	orr.w	r3, r3, #2
 800be5e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800be62:	e7af      	b.n	800bdc4 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800be64:	4620      	mov	r0, r4
 800be66:	f7ff fbf9 	bl	800b65c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be6a:	2300      	movs	r3, #0
 800be6c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800be70:	e7ac      	b.n	800bdcc <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be72:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be74:	e852 3f00 	ldrex	r3, [r2]
 800be78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be7c:	e842 3100 	strex	r1, r3, [r2]
 800be80:	2900      	cmp	r1, #0
 800be82:	d1f6      	bne.n	800be72 <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be84:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	f102 0308 	add.w	r3, r2, #8
 800be8a:	e853 3f00 	ldrex	r3, [r3]
 800be8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be92:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be96:	3208      	adds	r2, #8
 800be98:	e842 3100 	strex	r1, r3, [r2]
 800be9c:	2900      	cmp	r1, #0
 800be9e:	d1f1      	bne.n	800be84 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800bea0:	2320      	movs	r3, #32
 800bea2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beaa:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800beac:	6823      	ldr	r3, [r4, #0]
 800beae:	4a29      	ldr	r2, [pc, #164]	; (800bf54 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d003      	beq.n	800bebc <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800beba:	d106      	bne.n	800beca <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bebc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800bebe:	2b01      	cmp	r3, #1
 800bec0:	d00d      	beq.n	800bede <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800bec2:	4620      	mov	r0, r4
 800bec4:	f7f7 f8e8 	bl	8003098 <HAL_UART_RxCpltCallback>
 800bec8:	e785      	b.n	800bdd6 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800beca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800becc:	e852 3f00 	ldrex	r3, [r2]
 800bed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bed4:	e842 3100 	strex	r1, r3, [r2]
 800bed8:	2900      	cmp	r1, #0
 800beda:	d1f6      	bne.n	800beca <UART_RxISR_16BIT_FIFOEN+0x136>
 800bedc:	e7ee      	b.n	800bebc <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bede:	2300      	movs	r3, #0
 800bee0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bee2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bee4:	e852 3f00 	ldrex	r3, [r2]
 800bee8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beec:	e842 3100 	strex	r1, r3, [r2]
 800bef0:	2900      	cmp	r1, #0
 800bef2:	d1f6      	bne.n	800bee2 <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	69da      	ldr	r2, [r3, #28]
 800bef8:	f012 0f10 	tst.w	r2, #16
 800befc:	d001      	beq.n	800bf02 <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800befe:	2210      	movs	r2, #16
 800bf00:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf02:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800bf06:	4620      	mov	r0, r4
 800bf08:	f7ff fbdf 	bl	800b6ca <HAL_UARTEx_RxEventCallback>
 800bf0c:	e763      	b.n	800bdd6 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800bf0e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800bf12:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f43f af4f 	beq.w	800bdb8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800bf1a:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800bf1e:	429a      	cmp	r2, r3
 800bf20:	f67f af4a 	bls.w	800bdb8 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bf24:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf26:	f102 0308 	add.w	r3, r2, #8
 800bf2a:	e853 3f00 	ldrex	r3, [r3]
 800bf2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf32:	3208      	adds	r2, #8
 800bf34:	e842 3100 	strex	r1, r3, [r2]
 800bf38:	2900      	cmp	r1, #0
 800bf3a:	d1f3      	bne.n	800bf24 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 800bf3c:	4b06      	ldr	r3, [pc, #24]	; (800bf58 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 800bf3e:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bf40:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf42:	e852 3f00 	ldrex	r3, [r2]
 800bf46:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4a:	e842 3100 	strex	r1, r3, [r2]
 800bf4e:	2900      	cmp	r1, #0
 800bf50:	d1f6      	bne.n	800bf40 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 800bf52:	e731      	b.n	800bdb8 <UART_RxISR_16BIT_FIFOEN+0x24>
 800bf54:	40008000 	.word	0x40008000
 800bf58:	0800baf1 	.word	0x0800baf1

0800bf5c <UART_SetConfig>:
{
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf60:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf62:	6883      	ldr	r3, [r0, #8]
 800bf64:	6902      	ldr	r2, [r0, #16]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	6942      	ldr	r2, [r0, #20]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	69c2      	ldr	r2, [r0, #28]
 800bf6e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf70:	6808      	ldr	r0, [r1, #0]
 800bf72:	4a9d      	ldr	r2, [pc, #628]	; (800c1e8 <UART_SetConfig+0x28c>)
 800bf74:	4002      	ands	r2, r0
 800bf76:	431a      	orrs	r2, r3
 800bf78:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf7a:	6822      	ldr	r2, [r4, #0]
 800bf7c:	6853      	ldr	r3, [r2, #4]
 800bf7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800bf82:	68e1      	ldr	r1, [r4, #12]
 800bf84:	430b      	orrs	r3, r1
 800bf86:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf88:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf8a:	6822      	ldr	r2, [r4, #0]
 800bf8c:	4b97      	ldr	r3, [pc, #604]	; (800c1ec <UART_SetConfig+0x290>)
 800bf8e:	429a      	cmp	r2, r3
 800bf90:	d001      	beq.n	800bf96 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800bf92:	6a23      	ldr	r3, [r4, #32]
 800bf94:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf96:	6893      	ldr	r3, [r2, #8]
 800bf98:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bf9c:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bfa0:	430b      	orrs	r3, r1
 800bfa2:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bfa4:	6822      	ldr	r2, [r4, #0]
 800bfa6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bfa8:	f023 030f 	bic.w	r3, r3, #15
 800bfac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfae:	430b      	orrs	r3, r1
 800bfb0:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfb2:	6823      	ldr	r3, [r4, #0]
 800bfb4:	4a8e      	ldr	r2, [pc, #568]	; (800c1f0 <UART_SetConfig+0x294>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d01c      	beq.n	800bff4 <UART_SetConfig+0x98>
 800bfba:	4a8e      	ldr	r2, [pc, #568]	; (800c1f4 <UART_SetConfig+0x298>)
 800bfbc:	4293      	cmp	r3, r2
 800bfbe:	d031      	beq.n	800c024 <UART_SetConfig+0xc8>
 800bfc0:	4a8a      	ldr	r2, [pc, #552]	; (800c1ec <UART_SetConfig+0x290>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d04b      	beq.n	800c05e <UART_SetConfig+0x102>
 800bfc6:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 800bfc8:	4988      	ldr	r1, [pc, #544]	; (800c1ec <UART_SetConfig+0x290>)
 800bfca:	428b      	cmp	r3, r1
 800bfcc:	d068      	beq.n	800c0a0 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfce:	69e0      	ldr	r0, [r4, #28]
 800bfd0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800bfd4:	f000 80a5 	beq.w	800c122 <UART_SetConfig+0x1c6>
    switch (clocksource)
 800bfd8:	2a08      	cmp	r2, #8
 800bfda:	f200 811f 	bhi.w	800c21c <UART_SetConfig+0x2c0>
 800bfde:	e8df f012 	tbh	[pc, r2, lsl #1]
 800bfe2:	00d3      	.short	0x00d3
 800bfe4:	00d100f5 	.word	0x00d100f5
 800bfe8:	00f8011d 	.word	0x00f8011d
 800bfec:	011d011d 	.word	0x011d011d
 800bff0:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800bff4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800bff8:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800bffc:	f002 0203 	and.w	r2, r2, #3
 800c000:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c004:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 800c008:	2a03      	cmp	r2, #3
 800c00a:	d809      	bhi.n	800c020 <UART_SetConfig+0xc4>
 800c00c:	e8df f002 	tbb	[pc, r2]
 800c010:	063c0402 	.word	0x063c0402
 800c014:	2201      	movs	r2, #1
 800c016:	e7d7      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c018:	2204      	movs	r2, #4
 800c01a:	e7d5      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c01c:	2208      	movs	r2, #8
 800c01e:	e7d3      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c020:	2210      	movs	r2, #16
 800c022:	e7d1      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c024:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c028:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c02c:	f002 020c 	and.w	r2, r2, #12
 800c030:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800c034:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 800c038:	2a0c      	cmp	r2, #12
 800c03a:	d80e      	bhi.n	800c05a <UART_SetConfig+0xfe>
 800c03c:	e8df f002 	tbb	[pc, r2]
 800c040:	0d0d0d07 	.word	0x0d0d0d07
 800c044:	0d0d0d09 	.word	0x0d0d0d09
 800c048:	0d0d0d26 	.word	0x0d0d0d26
 800c04c:	0b          	.byte	0x0b
 800c04d:	00          	.byte	0x00
 800c04e:	2200      	movs	r2, #0
 800c050:	e7ba      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c052:	2204      	movs	r2, #4
 800c054:	e7b8      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c056:	2208      	movs	r2, #8
 800c058:	e7b6      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c05a:	2210      	movs	r2, #16
 800c05c:	e7b4      	b.n	800bfc8 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c05e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c062:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800c066:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800c06a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800c06e:	d00f      	beq.n	800c090 <UART_SetConfig+0x134>
 800c070:	d805      	bhi.n	800c07e <UART_SetConfig+0x122>
 800c072:	b17a      	cbz	r2, 800c094 <UART_SetConfig+0x138>
 800c074:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800c078:	d10e      	bne.n	800c098 <UART_SetConfig+0x13c>
 800c07a:	2204      	movs	r2, #4
 800c07c:	e7a4      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c07e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800c082:	d10b      	bne.n	800c09c <UART_SetConfig+0x140>
 800c084:	2208      	movs	r2, #8
 800c086:	e79f      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c088:	2202      	movs	r2, #2
 800c08a:	e79d      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c08c:	2202      	movs	r2, #2
 800c08e:	e79b      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c090:	2202      	movs	r2, #2
 800c092:	e799      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c094:	2200      	movs	r2, #0
 800c096:	e797      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c098:	2210      	movs	r2, #16
 800c09a:	e795      	b.n	800bfc8 <UART_SetConfig+0x6c>
 800c09c:	2210      	movs	r2, #16
 800c09e:	e793      	b.n	800bfc8 <UART_SetConfig+0x6c>
    switch (clocksource)
 800c0a0:	2a08      	cmp	r2, #8
 800c0a2:	f200 809c 	bhi.w	800c1de <UART_SetConfig+0x282>
 800c0a6:	e8df f002 	tbb	[pc, r2]
 800c0aa:	9a08      	.short	0x9a08
 800c0ac:	9a379a3a 	.word	0x9a379a3a
 800c0b0:	9a9a      	.short	0x9a9a
 800c0b2:	05          	.byte	0x05
 800c0b3:	00          	.byte	0x00
 800c0b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c0b8:	e004      	b.n	800c0c4 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c0ba:	f7fe faab 	bl	800a614 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c0be:	2800      	cmp	r0, #0
 800c0c0:	f000 808f 	beq.w	800c1e2 <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0c4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c0c6:	4b4c      	ldr	r3, [pc, #304]	; (800c1f8 <UART_SetConfig+0x29c>)
 800c0c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c0cc:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0d0:	6865      	ldr	r5, [r4, #4]
 800c0d2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c0d6:	4299      	cmp	r1, r3
 800c0d8:	f200 8094 	bhi.w	800c204 <UART_SetConfig+0x2a8>
 800c0dc:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c0e0:	f200 8092 	bhi.w	800c208 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0e4:	2600      	movs	r6, #0
 800c0e6:	4633      	mov	r3, r6
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	f7f5 f8bf 	bl	800126c <__aeabi_uldivmod>
 800c0ee:	0209      	lsls	r1, r1, #8
 800c0f0:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c0f4:	0200      	lsls	r0, r0, #8
 800c0f6:	086b      	lsrs	r3, r5, #1
 800c0f8:	18c0      	adds	r0, r0, r3
 800c0fa:	462a      	mov	r2, r5
 800c0fc:	4633      	mov	r3, r6
 800c0fe:	f141 0100 	adc.w	r1, r1, #0
 800c102:	f7f5 f8b3 	bl	800126c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c106:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800c10a:	4b3c      	ldr	r3, [pc, #240]	; (800c1fc <UART_SetConfig+0x2a0>)
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d87d      	bhi.n	800c20c <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 800c110:	6823      	ldr	r3, [r4, #0]
 800c112:	60d8      	str	r0, [r3, #12]
 800c114:	4630      	mov	r0, r6
 800c116:	e050      	b.n	800c1ba <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 800c118:	f7fd fd7e 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
        break;
 800c11c:	e7cf      	b.n	800c0be <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 800c11e:	4838      	ldr	r0, [pc, #224]	; (800c200 <UART_SetConfig+0x2a4>)
 800c120:	e7d0      	b.n	800c0c4 <UART_SetConfig+0x168>
    switch (clocksource)
 800c122:	2a08      	cmp	r2, #8
 800c124:	d874      	bhi.n	800c210 <UART_SetConfig+0x2b4>
 800c126:	e8df f002 	tbb	[pc, r2]
 800c12a:	2707      	.short	0x2707
 800c12c:	732a7305 	.word	0x732a7305
 800c130:	7373      	.short	0x7373
 800c132:	0b          	.byte	0x0b
 800c133:	00          	.byte	0x00
 800c134:	4832      	ldr	r0, [pc, #200]	; (800c200 <UART_SetConfig+0x2a4>)
 800c136:	e003      	b.n	800c140 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c138:	f7fe fa6c 	bl	800a614 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d069      	beq.n	800c214 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c140:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c142:	4b2d      	ldr	r3, [pc, #180]	; (800c1f8 <UART_SetConfig+0x29c>)
 800c144:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c148:	fbb0 f0f3 	udiv	r0, r0, r3
 800c14c:	6862      	ldr	r2, [r4, #4]
 800c14e:	0853      	lsrs	r3, r2, #1
 800c150:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c154:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c158:	f1a3 0110 	sub.w	r1, r3, #16
 800c15c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800c160:	4291      	cmp	r1, r2
 800c162:	d859      	bhi.n	800c218 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c164:	b29a      	uxth	r2, r3
 800c166:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c16a:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800c16e:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 800c170:	6822      	ldr	r2, [r4, #0]
 800c172:	60d3      	str	r3, [r2, #12]
 800c174:	2000      	movs	r0, #0
 800c176:	e020      	b.n	800c1ba <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c178:	f7fe fa5c 	bl	800a634 <HAL_RCC_GetPCLK2Freq>
        break;
 800c17c:	e7de      	b.n	800c13c <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800c17e:	f7fd fd4b 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
        break;
 800c182:	e7db      	b.n	800c13c <UART_SetConfig+0x1e0>
    switch (clocksource)
 800c184:	481e      	ldr	r0, [pc, #120]	; (800c200 <UART_SetConfig+0x2a4>)
 800c186:	e003      	b.n	800c190 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c188:	f7fe fa44 	bl	800a614 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c18c:	2800      	cmp	r0, #0
 800c18e:	d047      	beq.n	800c220 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c190:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c192:	4b19      	ldr	r3, [pc, #100]	; (800c1f8 <UART_SetConfig+0x29c>)
 800c194:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c198:	fbb0 f0f3 	udiv	r0, r0, r3
 800c19c:	6863      	ldr	r3, [r4, #4]
 800c19e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800c1a2:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1a6:	f1a0 0210 	sub.w	r2, r0, #16
 800c1aa:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800c1ae:	429a      	cmp	r2, r3
 800c1b0:	d838      	bhi.n	800c224 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c1b2:	6823      	ldr	r3, [r4, #0]
 800c1b4:	b280      	uxth	r0, r0
 800c1b6:	60d8      	str	r0, [r3, #12]
 800c1b8:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c1c0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 800c1c8:	67a3      	str	r3, [r4, #120]	; 0x78
}
 800c1ca:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1cc:	f7fe fa32 	bl	800a634 <HAL_RCC_GetPCLK2Freq>
        break;
 800c1d0:	e7dc      	b.n	800c18c <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800c1d2:	f7fd fd21 	bl	8009c18 <HAL_RCC_GetSysClockFreq>
        break;
 800c1d6:	e7d9      	b.n	800c18c <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 800c1d8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c1dc:	e7d8      	b.n	800c190 <UART_SetConfig+0x234>
    switch (clocksource)
 800c1de:	2001      	movs	r0, #1
 800c1e0:	e7eb      	b.n	800c1ba <UART_SetConfig+0x25e>
 800c1e2:	2000      	movs	r0, #0
 800c1e4:	e7e9      	b.n	800c1ba <UART_SetConfig+0x25e>
 800c1e6:	bf00      	nop
 800c1e8:	cfff69f3 	.word	0xcfff69f3
 800c1ec:	40008000 	.word	0x40008000
 800c1f0:	40013800 	.word	0x40013800
 800c1f4:	40004400 	.word	0x40004400
 800c1f8:	0801e0ec 	.word	0x0801e0ec
 800c1fc:	000ffcff 	.word	0x000ffcff
 800c200:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800c204:	2001      	movs	r0, #1
 800c206:	e7d8      	b.n	800c1ba <UART_SetConfig+0x25e>
 800c208:	2001      	movs	r0, #1
 800c20a:	e7d6      	b.n	800c1ba <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 800c20c:	2001      	movs	r0, #1
 800c20e:	e7d4      	b.n	800c1ba <UART_SetConfig+0x25e>
    switch (clocksource)
 800c210:	2001      	movs	r0, #1
 800c212:	e7d2      	b.n	800c1ba <UART_SetConfig+0x25e>
 800c214:	2000      	movs	r0, #0
 800c216:	e7d0      	b.n	800c1ba <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800c218:	2001      	movs	r0, #1
 800c21a:	e7ce      	b.n	800c1ba <UART_SetConfig+0x25e>
    switch (clocksource)
 800c21c:	2001      	movs	r0, #1
 800c21e:	e7cc      	b.n	800c1ba <UART_SetConfig+0x25e>
 800c220:	2000      	movs	r0, #0
 800c222:	e7ca      	b.n	800c1ba <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800c224:	2001      	movs	r0, #1
 800c226:	e7c8      	b.n	800c1ba <UART_SetConfig+0x25e>

0800c228 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c228:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c22a:	f013 0f01 	tst.w	r3, #1
 800c22e:	d006      	beq.n	800c23e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c230:	6802      	ldr	r2, [r0, #0]
 800c232:	6853      	ldr	r3, [r2, #4]
 800c234:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c238:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800c23a:	430b      	orrs	r3, r1
 800c23c:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c23e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c240:	f013 0f02 	tst.w	r3, #2
 800c244:	d006      	beq.n	800c254 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c246:	6802      	ldr	r2, [r0, #0]
 800c248:	6853      	ldr	r3, [r2, #4]
 800c24a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c24e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800c250:	430b      	orrs	r3, r1
 800c252:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c254:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c256:	f013 0f04 	tst.w	r3, #4
 800c25a:	d006      	beq.n	800c26a <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c25c:	6802      	ldr	r2, [r0, #0]
 800c25e:	6853      	ldr	r3, [r2, #4]
 800c260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c264:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800c266:	430b      	orrs	r3, r1
 800c268:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c26a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c26c:	f013 0f08 	tst.w	r3, #8
 800c270:	d006      	beq.n	800c280 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c272:	6802      	ldr	r2, [r0, #0]
 800c274:	6853      	ldr	r3, [r2, #4]
 800c276:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c27a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800c27c:	430b      	orrs	r3, r1
 800c27e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c280:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c282:	f013 0f10 	tst.w	r3, #16
 800c286:	d006      	beq.n	800c296 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c288:	6802      	ldr	r2, [r0, #0]
 800c28a:	6893      	ldr	r3, [r2, #8]
 800c28c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c290:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800c292:	430b      	orrs	r3, r1
 800c294:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c296:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c298:	f013 0f20 	tst.w	r3, #32
 800c29c:	d006      	beq.n	800c2ac <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c29e:	6802      	ldr	r2, [r0, #0]
 800c2a0:	6893      	ldr	r3, [r2, #8]
 800c2a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2ac:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c2ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 800c2b2:	d00a      	beq.n	800c2ca <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2b4:	6802      	ldr	r2, [r0, #0]
 800c2b6:	6853      	ldr	r3, [r2, #4]
 800c2b8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c2bc:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2c2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800c2c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2c8:	d00b      	beq.n	800c2e2 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c2ca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800c2cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c2d0:	d006      	beq.n	800c2e0 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c2d2:	6802      	ldr	r2, [r0, #0]
 800c2d4:	6853      	ldr	r3, [r2, #4]
 800c2d6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800c2da:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800c2dc:	430b      	orrs	r3, r1
 800c2de:	6053      	str	r3, [r2, #4]
}
 800c2e0:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2e2:	6802      	ldr	r2, [r0, #0]
 800c2e4:	6853      	ldr	r3, [r2, #4]
 800c2e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800c2ea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800c2ec:	430b      	orrs	r3, r1
 800c2ee:	6053      	str	r3, [r2, #4]
 800c2f0:	e7eb      	b.n	800c2ca <UART_AdvFeatureConfig+0xa2>

0800c2f2 <UART_WaitOnFlagUntilTimeout>:
{
 800c2f2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2f6:	4605      	mov	r5, r0
 800c2f8:	460f      	mov	r7, r1
 800c2fa:	4616      	mov	r6, r2
 800c2fc:	4699      	mov	r9, r3
 800c2fe:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c302:	682b      	ldr	r3, [r5, #0]
 800c304:	69dc      	ldr	r4, [r3, #28]
 800c306:	ea37 0404 	bics.w	r4, r7, r4
 800c30a:	bf0c      	ite	eq
 800c30c:	2401      	moveq	r4, #1
 800c30e:	2400      	movne	r4, #0
 800c310:	42b4      	cmp	r4, r6
 800c312:	d157      	bne.n	800c3c4 <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800c314:	f1b8 3fff 	cmp.w	r8, #4294967295
 800c318:	d0f3      	beq.n	800c302 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c31a:	f7f6 fad5 	bl	80028c8 <HAL_GetTick>
 800c31e:	eba0 0009 	sub.w	r0, r0, r9
 800c322:	4540      	cmp	r0, r8
 800c324:	d82f      	bhi.n	800c386 <UART_WaitOnFlagUntilTimeout+0x94>
 800c326:	f1b8 0f00 	cmp.w	r8, #0
 800c32a:	d02c      	beq.n	800c386 <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c32c:	682b      	ldr	r3, [r5, #0]
 800c32e:	681a      	ldr	r2, [r3, #0]
 800c330:	f012 0f04 	tst.w	r2, #4
 800c334:	d0e5      	beq.n	800c302 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c336:	69da      	ldr	r2, [r3, #28]
 800c338:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800c33c:	d0e1      	beq.n	800c302 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c33e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c342:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c344:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c346:	e852 3f00 	ldrex	r3, [r2]
 800c34a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c34e:	e842 3100 	strex	r1, r3, [r2]
 800c352:	2900      	cmp	r1, #0
 800c354:	d1f6      	bne.n	800c344 <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c356:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c358:	f102 0308 	add.w	r3, r2, #8
 800c35c:	e853 3f00 	ldrex	r3, [r3]
 800c360:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c364:	3208      	adds	r2, #8
 800c366:	e842 3100 	strex	r1, r3, [r2]
 800c36a:	2900      	cmp	r1, #0
 800c36c:	d1f3      	bne.n	800c356 <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 800c36e:	2320      	movs	r3, #32
 800c370:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800c374:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c378:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 800c37c:	2300      	movs	r3, #0
 800c37e:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800c382:	2003      	movs	r0, #3
 800c384:	e01f      	b.n	800c3c6 <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c386:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c388:	e852 3f00 	ldrex	r3, [r2]
 800c38c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c390:	e842 3100 	strex	r1, r3, [r2]
 800c394:	2900      	cmp	r1, #0
 800c396:	d1f6      	bne.n	800c386 <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c398:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39a:	f102 0308 	add.w	r3, r2, #8
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a6:	3208      	adds	r2, #8
 800c3a8:	e842 3100 	strex	r1, r3, [r2]
 800c3ac:	2900      	cmp	r1, #0
 800c3ae:	d1f3      	bne.n	800c398 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 800c3b0:	2320      	movs	r3, #32
 800c3b2:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800c3b6:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 800c3c0:	2003      	movs	r0, #3
 800c3c2:	e000      	b.n	800c3c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 800c3c4:	2000      	movs	r0, #0
}
 800c3c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c3ca <HAL_UART_Transmit>:
{
 800c3ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800c3d2:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800c3d6:	2b20      	cmp	r3, #32
 800c3d8:	d14f      	bne.n	800c47a <HAL_UART_Transmit+0xb0>
 800c3da:	4604      	mov	r4, r0
 800c3dc:	460d      	mov	r5, r1
 800c3de:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 800c3e0:	2900      	cmp	r1, #0
 800c3e2:	d04e      	beq.n	800c482 <HAL_UART_Transmit+0xb8>
 800c3e4:	b90a      	cbnz	r2, 800c3ea <HAL_UART_Transmit+0x20>
      return  HAL_ERROR;
 800c3e6:	2001      	movs	r0, #1
 800c3e8:	e048      	b.n	800c47c <HAL_UART_Transmit+0xb2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3f0:	2321      	movs	r3, #33	; 0x21
 800c3f2:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    tickstart = HAL_GetTick();
 800c3f6:	f7f6 fa67 	bl	80028c8 <HAL_GetTick>
 800c3fa:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 800c3fc:	f8a4 8054 	strh.w	r8, [r4, #84]	; 0x54
    huart->TxXferCount = Size;
 800c400:	f8a4 8056 	strh.w	r8, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c404:	68a3      	ldr	r3, [r4, #8]
 800c406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c40a:	d002      	beq.n	800c412 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 800c40c:	f04f 0800 	mov.w	r8, #0
 800c410:	e011      	b.n	800c436 <HAL_UART_Transmit+0x6c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c412:	6923      	ldr	r3, [r4, #16]
 800c414:	b313      	cbz	r3, 800c45c <HAL_UART_Transmit+0x92>
      pdata16bits = NULL;
 800c416:	f04f 0800 	mov.w	r8, #0
 800c41a:	e00c      	b.n	800c436 <HAL_UART_Transmit+0x6c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c41c:	f838 3b02 	ldrh.w	r3, [r8], #2
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c426:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800c428:	f8b4 2056 	ldrh.w	r2, [r4, #86]	; 0x56
 800c42c:	b292      	uxth	r2, r2
 800c42e:	3a01      	subs	r2, #1
 800c430:	b292      	uxth	r2, r2
 800c432:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c436:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800c43a:	b29b      	uxth	r3, r3
 800c43c:	b18b      	cbz	r3, 800c462 <HAL_UART_Transmit+0x98>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c43e:	9600      	str	r6, [sp, #0]
 800c440:	463b      	mov	r3, r7
 800c442:	2200      	movs	r2, #0
 800c444:	2180      	movs	r1, #128	; 0x80
 800c446:	4620      	mov	r0, r4
 800c448:	f7ff ff53 	bl	800c2f2 <UART_WaitOnFlagUntilTimeout>
 800c44c:	b9d8      	cbnz	r0, 800c486 <HAL_UART_Transmit+0xbc>
      if (pdata8bits == NULL)
 800c44e:	2d00      	cmp	r5, #0
 800c450:	d0e4      	beq.n	800c41c <HAL_UART_Transmit+0x52>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c452:	f815 2b01 	ldrb.w	r2, [r5], #1
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c45a:	e7e5      	b.n	800c428 <HAL_UART_Transmit+0x5e>
      pdata16bits = (const uint16_t *) pData;
 800c45c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800c45e:	2500      	movs	r5, #0
 800c460:	e7e9      	b.n	800c436 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c462:	9600      	str	r6, [sp, #0]
 800c464:	463b      	mov	r3, r7
 800c466:	2200      	movs	r2, #0
 800c468:	2140      	movs	r1, #64	; 0x40
 800c46a:	4620      	mov	r0, r4
 800c46c:	f7ff ff41 	bl	800c2f2 <UART_WaitOnFlagUntilTimeout>
 800c470:	b958      	cbnz	r0, 800c48a <HAL_UART_Transmit+0xc0>
    huart->gState = HAL_UART_STATE_READY;
 800c472:	2320      	movs	r3, #32
 800c474:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 800c478:	e000      	b.n	800c47c <HAL_UART_Transmit+0xb2>
    return HAL_BUSY;
 800c47a:	2002      	movs	r0, #2
}
 800c47c:	b002      	add	sp, #8
 800c47e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 800c482:	2001      	movs	r0, #1
 800c484:	e7fa      	b.n	800c47c <HAL_UART_Transmit+0xb2>
        return HAL_TIMEOUT;
 800c486:	2003      	movs	r0, #3
 800c488:	e7f8      	b.n	800c47c <HAL_UART_Transmit+0xb2>
      return HAL_TIMEOUT;
 800c48a:	2003      	movs	r0, #3
 800c48c:	e7f6      	b.n	800c47c <HAL_UART_Transmit+0xb2>

0800c48e <UART_CheckIdleState>:
{
 800c48e:	b530      	push	{r4, r5, lr}
 800c490:	b083      	sub	sp, #12
 800c492:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c494:	2300      	movs	r3, #0
 800c496:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 800c49a:	f7f6 fa15 	bl	80028c8 <HAL_GetTick>
 800c49e:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4a0:	6822      	ldr	r2, [r4, #0]
 800c4a2:	6812      	ldr	r2, [r2, #0]
 800c4a4:	f012 0f08 	tst.w	r2, #8
 800c4a8:	d110      	bne.n	800c4cc <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4aa:	6823      	ldr	r3, [r4, #0]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f013 0f04 	tst.w	r3, #4
 800c4b2:	d119      	bne.n	800c4e8 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 800c4b4:	2320      	movs	r3, #32
 800c4b6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c4ba:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4be:	2000      	movs	r0, #0
 800c4c0:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c4c2:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 800c4c4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800c4c8:	b003      	add	sp, #12
 800c4ca:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4d0:	9300      	str	r3, [sp, #0]
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4da:	4620      	mov	r0, r4
 800c4dc:	f7ff ff09 	bl	800c2f2 <UART_WaitOnFlagUntilTimeout>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d0e2      	beq.n	800c4aa <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 800c4e4:	2003      	movs	r0, #3
 800c4e6:	e7ef      	b.n	800c4c8 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4ec:	9300      	str	r3, [sp, #0]
 800c4ee:	462b      	mov	r3, r5
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c4f6:	4620      	mov	r0, r4
 800c4f8:	f7ff fefb 	bl	800c2f2 <UART_WaitOnFlagUntilTimeout>
 800c4fc:	2800      	cmp	r0, #0
 800c4fe:	d0d9      	beq.n	800c4b4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 800c500:	2003      	movs	r0, #3
 800c502:	e7e1      	b.n	800c4c8 <UART_CheckIdleState+0x3a>

0800c504 <HAL_UART_Init>:
  if (huart == NULL)
 800c504:	b378      	cbz	r0, 800c566 <HAL_UART_Init+0x62>
{
 800c506:	b510      	push	{r4, lr}
 800c508:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800c50a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800c50e:	b30b      	cbz	r3, 800c554 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 800c510:	2324      	movs	r3, #36	; 0x24
 800c512:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800c516:	6822      	ldr	r2, [r4, #0]
 800c518:	6813      	ldr	r3, [r2, #0]
 800c51a:	f023 0301 	bic.w	r3, r3, #1
 800c51e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c520:	4620      	mov	r0, r4
 800c522:	f7ff fd1b 	bl	800bf5c <UART_SetConfig>
 800c526:	2801      	cmp	r0, #1
 800c528:	d013      	beq.n	800c552 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c52a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c52c:	b9bb      	cbnz	r3, 800c55e <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c52e:	6822      	ldr	r2, [r4, #0]
 800c530:	6853      	ldr	r3, [r2, #4]
 800c532:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800c536:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c538:	6822      	ldr	r2, [r4, #0]
 800c53a:	6893      	ldr	r3, [r2, #8]
 800c53c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800c540:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 800c542:	6822      	ldr	r2, [r4, #0]
 800c544:	6813      	ldr	r3, [r2, #0]
 800c546:	f043 0301 	orr.w	r3, r3, #1
 800c54a:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800c54c:	4620      	mov	r0, r4
 800c54e:	f7ff ff9e 	bl	800c48e <UART_CheckIdleState>
}
 800c552:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800c554:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800c558:	f7f6 fc38 	bl	8002dcc <HAL_UART_MspInit>
 800c55c:	e7d8      	b.n	800c510 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 800c55e:	4620      	mov	r0, r4
 800c560:	f7ff fe62 	bl	800c228 <UART_AdvFeatureConfig>
 800c564:	e7e3      	b.n	800c52e <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 800c566:	2001      	movs	r0, #1
}
 800c568:	4770      	bx	lr
	...

0800c56c <UART_Start_Receive_IT>:
{
 800c56c:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 800c56e:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c570:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c574:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 800c57c:	6883      	ldr	r3, [r0, #8]
 800c57e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c582:	d006      	beq.n	800c592 <UART_Start_Receive_IT+0x26>
 800c584:	b9a3      	cbnz	r3, 800c5b0 <UART_Start_Receive_IT+0x44>
 800c586:	6903      	ldr	r3, [r0, #16]
 800c588:	b973      	cbnz	r3, 800c5a8 <UART_Start_Receive_IT+0x3c>
 800c58a:	23ff      	movs	r3, #255	; 0xff
 800c58c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800c590:	e014      	b.n	800c5bc <UART_Start_Receive_IT+0x50>
 800c592:	6903      	ldr	r3, [r0, #16]
 800c594:	b923      	cbnz	r3, 800c5a0 <UART_Start_Receive_IT+0x34>
 800c596:	f240 13ff 	movw	r3, #511	; 0x1ff
 800c59a:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800c59e:	e00d      	b.n	800c5bc <UART_Start_Receive_IT+0x50>
 800c5a0:	23ff      	movs	r3, #255	; 0xff
 800c5a2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800c5a6:	e009      	b.n	800c5bc <UART_Start_Receive_IT+0x50>
 800c5a8:	237f      	movs	r3, #127	; 0x7f
 800c5aa:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800c5ae:	e005      	b.n	800c5bc <UART_Start_Receive_IT+0x50>
 800c5b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5b4:	d02d      	beq.n	800c612 <UART_Start_Receive_IT+0xa6>
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c5c2:	2322      	movs	r3, #34	; 0x22
 800c5c4:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c8:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ca:	f101 0308 	add.w	r3, r1, #8
 800c5ce:	e853 3f00 	ldrex	r3, [r3]
 800c5d2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	3108      	adds	r1, #8
 800c5d8:	e841 3400 	strex	r4, r3, [r1]
 800c5dc:	2c00      	cmp	r4, #0
 800c5de:	d1f3      	bne.n	800c5c8 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c5e0:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c5e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5e6:	d01e      	beq.n	800c626 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c5e8:	6883      	ldr	r3, [r0, #8]
 800c5ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5ee:	d042      	beq.n	800c676 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 800c5f0:	4b29      	ldr	r3, [pc, #164]	; (800c698 <UART_Start_Receive_IT+0x12c>)
 800c5f2:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c5f4:	6903      	ldr	r3, [r0, #16]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d043      	beq.n	800c682 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c5fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5fc:	e852 3f00 	ldrex	r3, [r2]
 800c600:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c604:	e842 3100 	strex	r1, r3, [r2]
 800c608:	2900      	cmp	r1, #0
 800c60a:	d1f6      	bne.n	800c5fa <UART_Start_Receive_IT+0x8e>
}
 800c60c:	2000      	movs	r0, #0
 800c60e:	bc10      	pop	{r4}
 800c610:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 800c612:	6903      	ldr	r3, [r0, #16]
 800c614:	b91b      	cbnz	r3, 800c61e <UART_Start_Receive_IT+0xb2>
 800c616:	237f      	movs	r3, #127	; 0x7f
 800c618:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800c61c:	e7ce      	b.n	800c5bc <UART_Start_Receive_IT+0x50>
 800c61e:	233f      	movs	r3, #63	; 0x3f
 800c620:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 800c624:	e7ca      	b.n	800c5bc <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c626:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d8dc      	bhi.n	800c5e8 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c62e:	6883      	ldr	r3, [r0, #8]
 800c630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c634:	d019      	beq.n	800c66a <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c636:	4b19      	ldr	r3, [pc, #100]	; (800c69c <UART_Start_Receive_IT+0x130>)
 800c638:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c63a:	6903      	ldr	r3, [r0, #16]
 800c63c:	b143      	cbz	r3, 800c650 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c63e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c640:	e852 3f00 	ldrex	r3, [r2]
 800c644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c648:	e842 3100 	strex	r1, r3, [r2]
 800c64c:	2900      	cmp	r1, #0
 800c64e:	d1f6      	bne.n	800c63e <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c650:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c652:	f102 0308 	add.w	r3, r2, #8
 800c656:	e853 3f00 	ldrex	r3, [r3]
 800c65a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c65e:	3208      	adds	r2, #8
 800c660:	e842 3100 	strex	r1, r3, [r2]
 800c664:	2900      	cmp	r1, #0
 800c666:	d1f3      	bne.n	800c650 <UART_Start_Receive_IT+0xe4>
 800c668:	e7d0      	b.n	800c60c <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c66a:	6903      	ldr	r3, [r0, #16]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e2      	bne.n	800c636 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c670:	4b0b      	ldr	r3, [pc, #44]	; (800c6a0 <UART_Start_Receive_IT+0x134>)
 800c672:	6743      	str	r3, [r0, #116]	; 0x74
 800c674:	e7e1      	b.n	800c63a <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c676:	6903      	ldr	r3, [r0, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d1b9      	bne.n	800c5f0 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 800c67c:	4b09      	ldr	r3, [pc, #36]	; (800c6a4 <UART_Start_Receive_IT+0x138>)
 800c67e:	6743      	str	r3, [r0, #116]	; 0x74
 800c680:	e7b8      	b.n	800c5f4 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c682:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c684:	e852 3f00 	ldrex	r3, [r2]
 800c688:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	e842 3100 	strex	r1, r3, [r2]
 800c690:	2900      	cmp	r1, #0
 800c692:	d1f6      	bne.n	800c682 <UART_Start_Receive_IT+0x116>
 800c694:	e7ba      	b.n	800c60c <UART_Start_Receive_IT+0xa0>
 800c696:	bf00      	nop
 800c698:	0800ba15 	.word	0x0800ba15
 800c69c:	0800bbc9 	.word	0x0800bbc9
 800c6a0:	0800bd95 	.word	0x0800bd95
 800c6a4:	0800baf1 	.word	0x0800baf1

0800c6a8 <HAL_UART_Receive_IT>:
{
 800c6a8:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800c6aa:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 800c6ae:	2b20      	cmp	r3, #32
 800c6b0:	d117      	bne.n	800c6e2 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 800c6b2:	b1c1      	cbz	r1, 800c6e6 <HAL_UART_Receive_IT+0x3e>
 800c6b4:	b1ca      	cbz	r2, 800c6ea <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c6ba:	6803      	ldr	r3, [r0, #0]
 800c6bc:	4c0c      	ldr	r4, [pc, #48]	; (800c6f0 <HAL_UART_Receive_IT+0x48>)
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	d00c      	beq.n	800c6dc <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800c6c8:	d008      	beq.n	800c6dc <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c6ca:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6cc:	e854 3f00 	ldrex	r3, [r4]
 800c6d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6d4:	e844 3500 	strex	r5, r3, [r4]
 800c6d8:	2d00      	cmp	r5, #0
 800c6da:	d1f6      	bne.n	800c6ca <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 800c6dc:	f7ff ff46 	bl	800c56c <UART_Start_Receive_IT>
 800c6e0:	e000      	b.n	800c6e4 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 800c6e2:	2002      	movs	r0, #2
}
 800c6e4:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800c6e6:	2001      	movs	r0, #1
 800c6e8:	e7fc      	b.n	800c6e4 <HAL_UART_Receive_IT+0x3c>
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	e7fa      	b.n	800c6e4 <HAL_UART_Receive_IT+0x3c>
 800c6ee:	bf00      	nop
 800c6f0:	40008000 	.word	0x40008000

0800c6f4 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800c6f4:	b082      	sub	sp, #8
 800c6f6:	ab02      	add	r3, sp, #8
 800c6f8:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 800c6fc:	6802      	ldr	r2, [r0, #0]
 800c6fe:	6853      	ldr	r3, [r2, #4]
 800c700:	f023 0310 	bic.w	r3, r3, #16
 800c704:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 800c708:	430b      	orrs	r3, r1
 800c70a:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 800c70c:	6802      	ldr	r2, [r0, #0]
 800c70e:	6853      	ldr	r3, [r2, #4]
 800c710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c714:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800c718:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c71c:	6053      	str	r3, [r2, #4]
}
 800c71e:	b002      	add	sp, #8
 800c720:	4770      	bx	lr
	...

0800c724 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c724:	6e43      	ldr	r3, [r0, #100]	; 0x64
 800c726:	b92b      	cbnz	r3, 800c734 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 800c728:	2301      	movs	r3, #1
 800c72a:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c72e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 800c732:	4770      	bx	lr
{
 800c734:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c736:	6803      	ldr	r3, [r0, #0]
 800c738:	689a      	ldr	r2, [r3, #8]
 800c73a:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c73e:	6899      	ldr	r1, [r3, #8]
 800c740:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c742:	4d09      	ldr	r5, [pc, #36]	; (800c768 <UARTEx_SetNbDataToProcess+0x44>)
 800c744:	5c6b      	ldrb	r3, [r5, r1]
 800c746:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c748:	4c08      	ldr	r4, [pc, #32]	; (800c76c <UARTEx_SetNbDataToProcess+0x48>)
 800c74a:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c74c:	fb93 f3f1 	sdiv	r3, r3, r1
 800c750:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c754:	5cab      	ldrb	r3, [r5, r2]
 800c756:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c758:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c75a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c75e:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 800c762:	bc30      	pop	{r4, r5}
 800c764:	4770      	bx	lr
 800c766:	bf00      	nop
 800c768:	0801e10c 	.word	0x0801e10c
 800c76c:	0801e104 	.word	0x0801e104

0800c770 <HAL_UARTEx_WakeupCallback>:
}
 800c770:	4770      	bx	lr

0800c772 <HAL_UARTEx_RxFifoFullCallback>:
}
 800c772:	4770      	bx	lr

0800c774 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 800c774:	4770      	bx	lr

0800c776 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 800c776:	b510      	push	{r4, lr}
 800c778:	b084      	sub	sp, #16
 800c77a:	ab04      	add	r3, sp, #16
 800c77c:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 800c780:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c784:	2b01      	cmp	r3, #1
 800c786:	d035      	beq.n	800c7f4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 800c788:	4604      	mov	r4, r0
 800c78a:	2301      	movs	r3, #1
 800c78c:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c790:	2324      	movs	r3, #36	; 0x24
 800c792:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800c796:	6802      	ldr	r2, [r0, #0]
 800c798:	6813      	ldr	r3, [r2, #0]
 800c79a:	f023 0301 	bic.w	r3, r3, #1
 800c79e:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800c7a0:	6801      	ldr	r1, [r0, #0]
 800c7a2:	688b      	ldr	r3, [r1, #8]
 800c7a4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c7a8:	9a02      	ldr	r2, [sp, #8]
 800c7aa:	4313      	orrs	r3, r2
 800c7ac:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 800c7ae:	b1aa      	cbz	r2, 800c7dc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 800c7b0:	6822      	ldr	r2, [r4, #0]
 800c7b2:	6813      	ldr	r3, [r2, #0]
 800c7b4:	f043 0301 	orr.w	r3, r3, #1
 800c7b8:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 800c7ba:	f7f6 f885 	bl	80028c8 <HAL_GetTick>
 800c7be:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7c0:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800c7c4:	9200      	str	r2, [sp, #0]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c7cc:	4620      	mov	r0, r4
 800c7ce:	f7ff fd90 	bl	800c2f2 <UART_WaitOnFlagUntilTimeout>
 800c7d2:	b948      	cbnz	r0, 800c7e8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 800c7d4:	2320      	movs	r3, #32
 800c7d6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800c7da:	e006      	b.n	800c7ea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 800c7dc:	ab04      	add	r3, sp, #16
 800c7de:	e913 0006 	ldmdb	r3, {r1, r2}
 800c7e2:	f7ff ff87 	bl	800c6f4 <UARTEx_Wakeup_AddressConfig>
 800c7e6:	e7e3      	b.n	800c7b0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 800c7e8:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 800c7f0:	b004      	add	sp, #16
 800c7f2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800c7f4:	2002      	movs	r0, #2
 800c7f6:	e7fb      	b.n	800c7f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

0800c7f8 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 800c7f8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d010      	beq.n	800c822 <HAL_UARTEx_EnableStopMode+0x2a>
 800c800:	2301      	movs	r3, #1
 800c802:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800c806:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c808:	e852 3f00 	ldrex	r3, [r2]
 800c80c:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c810:	e842 3100 	strex	r1, r3, [r2]
 800c814:	2900      	cmp	r1, #0
 800c816:	d1f6      	bne.n	800c806 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 800c818:	2300      	movs	r3, #0
 800c81a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 800c81e:	4618      	mov	r0, r3
 800c820:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c822:	2002      	movs	r0, #2
}
 800c824:	4770      	bx	lr

0800c826 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 800c826:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d01d      	beq.n	800c86a <HAL_UARTEx_EnableFifoMode+0x44>
{
 800c82e:	b510      	push	{r4, lr}
 800c830:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c832:	2301      	movs	r3, #1
 800c834:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c838:	2324      	movs	r3, #36	; 0x24
 800c83a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c83e:	6802      	ldr	r2, [r0, #0]
 800c840:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c842:	6811      	ldr	r1, [r2, #0]
 800c844:	f021 0101 	bic.w	r1, r1, #1
 800c848:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c84a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800c84e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c852:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c854:	6802      	ldr	r2, [r0, #0]
 800c856:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 800c858:	f7ff ff64 	bl	800c724 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c85c:	2320      	movs	r3, #32
 800c85e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800c862:	2000      	movs	r0, #0
 800c864:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800c868:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 800c86a:	2002      	movs	r0, #2
}
 800c86c:	4770      	bx	lr

0800c86e <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c86e:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c872:	2b01      	cmp	r3, #1
 800c874:	d018      	beq.n	800c8a8 <HAL_UARTEx_DisableFifoMode+0x3a>
 800c876:	2301      	movs	r3, #1
 800c878:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c87c:	2324      	movs	r3, #36	; 0x24
 800c87e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c882:	6803      	ldr	r3, [r0, #0]
 800c884:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c886:	6819      	ldr	r1, [r3, #0]
 800c888:	f021 0101 	bic.w	r1, r1, #1
 800c88c:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c88e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c892:	2300      	movs	r3, #0
 800c894:	6643      	str	r3, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c896:	6801      	ldr	r1, [r0, #0]
 800c898:	600a      	str	r2, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c89a:	2220      	movs	r2, #32
 800c89c:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800c8a0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c8a8:	2002      	movs	r0, #2
}
 800c8aa:	4770      	bx	lr

0800c8ac <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c8ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c8ae:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c8b2:	2b01      	cmp	r3, #1
 800c8b4:	d01d      	beq.n	800c8f2 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 800c8b6:	4604      	mov	r4, r0
 800c8b8:	2301      	movs	r3, #1
 800c8ba:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c8be:	2324      	movs	r3, #36	; 0x24
 800c8c0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c8c4:	6803      	ldr	r3, [r0, #0]
 800c8c6:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	f022 0201 	bic.w	r2, r2, #1
 800c8ce:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c8d0:	6802      	ldr	r2, [r0, #0]
 800c8d2:	6893      	ldr	r3, [r2, #8]
 800c8d4:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800c8d8:	4319      	orrs	r1, r3
 800c8da:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c8dc:	f7ff ff22 	bl	800c724 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c8e0:	6823      	ldr	r3, [r4, #0]
 800c8e2:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c8e4:	2320      	movs	r3, #32
 800c8e6:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800c8ea:	2000      	movs	r0, #0
 800c8ec:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800c8f0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c8f2:	2002      	movs	r0, #2
 800c8f4:	e7fc      	b.n	800c8f0 <HAL_UARTEx_SetTxFifoThreshold+0x44>

0800c8f6 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c8f6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 800c8f8:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d01d      	beq.n	800c93c <HAL_UARTEx_SetRxFifoThreshold+0x46>
 800c900:	4604      	mov	r4, r0
 800c902:	2301      	movs	r3, #1
 800c904:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800c908:	2324      	movs	r3, #36	; 0x24
 800c90a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c90e:	6803      	ldr	r3, [r0, #0]
 800c910:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	f022 0201 	bic.w	r2, r2, #1
 800c918:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c91a:	6802      	ldr	r2, [r0, #0]
 800c91c:	6893      	ldr	r3, [r2, #8]
 800c91e:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800c922:	4319      	orrs	r1, r3
 800c924:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c926:	f7ff fefd 	bl	800c724 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c92e:	2320      	movs	r3, #32
 800c930:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 800c934:	2000      	movs	r0, #0
 800c936:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 800c93c:	2002      	movs	r0, #2
 800c93e:	e7fc      	b.n	800c93a <HAL_UARTEx_SetRxFifoThreshold+0x44>

0800c940 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c940:	2804      	cmp	r0, #4
 800c942:	d807      	bhi.n	800c954 <LmHandlerPackageIsInitialized+0x14>
{
 800c944:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800c946:	4b05      	ldr	r3, [pc, #20]	; (800c95c <LmHandlerPackageIsInitialized+0x1c>)
 800c948:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	b11b      	cbz	r3, 800c958 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800c950:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 800c952:	bd08      	pop	{r3, pc}
        return false;
 800c954:	2000      	movs	r0, #0
}
 800c956:	4770      	bx	lr
        return false;
 800c958:	2000      	movs	r0, #0
 800c95a:	e7fa      	b.n	800c952 <LmHandlerPackageIsInitialized+0x12>
 800c95c:	200011a8 	.word	0x200011a8

0800c960 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800c960:	b570      	push	{r4, r5, r6, lr}
 800c962:	4605      	mov	r5, r0
 800c964:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c966:	2400      	movs	r4, #0
 800c968:	e005      	b.n	800c976 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800c96a:	699b      	ldr	r3, [r3, #24]
 800c96c:	b10b      	cbz	r3, 800c972 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800c96e:	4630      	mov	r0, r6
 800c970:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800c972:	3401      	adds	r4, #1
 800c974:	b264      	sxtb	r4, r4
 800c976:	2c04      	cmp	r4, #4
 800c978:	dc24      	bgt.n	800c9c4 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800c97a:	4b13      	ldr	r3, [pc, #76]	; (800c9c8 <LmHandlerPackagesNotify+0x68>)
 800c97c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d0f6      	beq.n	800c972 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 800c984:	2d03      	cmp	r5, #3
 800c986:	d8f4      	bhi.n	800c972 <LmHandlerPackagesNotify+0x12>
 800c988:	a201      	add	r2, pc, #4	; (adr r2, 800c990 <LmHandlerPackagesNotify+0x30>)
 800c98a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800c98e:	bf00      	nop
 800c990:	0800c96b 	.word	0x0800c96b
 800c994:	0800c9a1 	.word	0x0800c9a1
 800c998:	0800c9ad 	.word	0x0800c9ad
 800c99c:	0800c9b9 	.word	0x0800c9b9
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800c9a0:	69db      	ldr	r3, [r3, #28]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0e5      	beq.n	800c972 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 800c9a6:	4630      	mov	r0, r6
 800c9a8:	4798      	blx	r3
 800c9aa:	e7e2      	b.n	800c972 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d0df      	beq.n	800c972 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 800c9b2:	4630      	mov	r0, r6
 800c9b4:	4798      	blx	r3
 800c9b6:	e7dc      	b.n	800c972 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d0d9      	beq.n	800c972 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800c9be:	4630      	mov	r0, r6
 800c9c0:	4798      	blx	r3
 800c9c2:	e7d6      	b.n	800c972 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 800c9c4:	bd70      	pop	{r4, r5, r6, pc}
 800c9c6:	bf00      	nop
 800c9c8:	200011a8 	.word	0x200011a8

0800c9cc <MlmeIndication>:
{
 800c9cc:	b510      	push	{r4, lr}
 800c9ce:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 800c9d0:	4b11      	ldr	r3, [pc, #68]	; (800ca18 <MlmeIndication+0x4c>)
 800c9d2:	2200      	movs	r2, #0
 800c9d4:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c9d6:	7842      	ldrb	r2, [r0, #1]
 800c9d8:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c9da:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800c9de:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c9e0:	f9b1 2000 	ldrsh.w	r2, [r1]
 800c9e4:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c9e6:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800c9ea:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c9ec:	78ca      	ldrb	r2, [r1, #3]
 800c9ee:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c9f0:	6842      	ldr	r2, [r0, #4]
 800c9f2:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 800c9f4:	4b09      	ldr	r3, [pc, #36]	; (800ca1c <MlmeIndication+0x50>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9fa:	b13b      	cbz	r3, 800ca0c <MlmeIndication+0x40>
 800c9fc:	7802      	ldrb	r2, [r0, #0]
 800c9fe:	2a0a      	cmp	r2, #10
 800ca00:	d004      	beq.n	800ca0c <MlmeIndication+0x40>
 800ca02:	2a0e      	cmp	r2, #14
 800ca04:	d002      	beq.n	800ca0c <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800ca06:	4904      	ldr	r1, [pc, #16]	; (800ca18 <MlmeIndication+0x4c>)
 800ca08:	2000      	movs	r0, #0
 800ca0a:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ca0c:	4621      	mov	r1, r4
 800ca0e:	2003      	movs	r0, #3
 800ca10:	f7ff ffa6 	bl	800c960 <LmHandlerPackagesNotify>
}
 800ca14:	bd10      	pop	{r4, pc}
 800ca16:	bf00      	nop
 800ca18:	200000e8 	.word	0x200000e8
 800ca1c:	200011a4 	.word	0x200011a4

0800ca20 <McpsConfirm>:
{
 800ca20:	b510      	push	{r4, lr}
 800ca22:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 800ca24:	4b0d      	ldr	r3, [pc, #52]	; (800ca5c <McpsConfirm+0x3c>)
 800ca26:	2201      	movs	r2, #1
 800ca28:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800ca2a:	7842      	ldrb	r2, [r0, #1]
 800ca2c:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800ca2e:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800ca32:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800ca34:	68c2      	ldr	r2, [r0, #12]
 800ca36:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800ca38:	f990 2003 	ldrsb.w	r2, [r0, #3]
 800ca3c:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800ca3e:	6902      	ldr	r2, [r0, #16]
 800ca40:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800ca42:	7902      	ldrb	r2, [r0, #4]
 800ca44:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800ca46:	4b06      	ldr	r3, [pc, #24]	; (800ca60 <McpsConfirm+0x40>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4c:	b10b      	cbz	r3, 800ca52 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800ca4e:	4803      	ldr	r0, [pc, #12]	; (800ca5c <McpsConfirm+0x3c>)
 800ca50:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800ca52:	4621      	mov	r1, r4
 800ca54:	2000      	movs	r0, #0
 800ca56:	f7ff ff83 	bl	800c960 <LmHandlerPackagesNotify>
}
 800ca5a:	bd10      	pop	{r4, pc}
 800ca5c:	200000fc 	.word	0x200000fc
 800ca60:	200011a4 	.word	0x200011a4

0800ca64 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 800ca64:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ca66:	2400      	movs	r4, #0
 800ca68:	e001      	b.n	800ca6e <LmHandlerPackageIsTxPending+0xa>
 800ca6a:	3401      	adds	r4, #1
 800ca6c:	b264      	sxtb	r4, r4
 800ca6e:	2c04      	cmp	r4, #4
 800ca70:	dc0a      	bgt.n	800ca88 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 800ca72:	4b07      	ldr	r3, [pc, #28]	; (800ca90 <LmHandlerPackageIsTxPending+0x2c>)
 800ca74:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d0f6      	beq.n	800ca6a <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	4798      	blx	r3
 800ca80:	4603      	mov	r3, r0
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d0f1      	beq.n	800ca6a <LmHandlerPackageIsTxPending+0x6>
 800ca86:	e000      	b.n	800ca8a <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 800ca88:	2300      	movs	r3, #0
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	bd10      	pop	{r4, pc}
 800ca8e:	bf00      	nop
 800ca90:	200011a8 	.word	0x200011a8

0800ca94 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 800ca94:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ca96:	2400      	movs	r4, #0
 800ca98:	e001      	b.n	800ca9e <LmHandlerPackagesProcess+0xa>
 800ca9a:	3401      	adds	r4, #1
 800ca9c:	b264      	sxtb	r4, r4
 800ca9e:	2c04      	cmp	r4, #4
 800caa0:	dc12      	bgt.n	800cac8 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800caa2:	4b0a      	ldr	r3, [pc, #40]	; (800cacc <LmHandlerPackagesProcess+0x38>)
 800caa4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d0f6      	beq.n	800ca9a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800caac:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d0f3      	beq.n	800ca9a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800cab2:	b2e0      	uxtb	r0, r4
 800cab4:	f7ff ff44 	bl	800c940 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cab8:	2800      	cmp	r0, #0
 800caba:	d0ee      	beq.n	800ca9a <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800cabc:	4b03      	ldr	r3, [pc, #12]	; (800cacc <LmHandlerPackagesProcess+0x38>)
 800cabe:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	4798      	blx	r3
 800cac6:	e7e8      	b.n	800ca9a <LmHandlerPackagesProcess+0x6>
        }
    }
}
 800cac8:	bd38      	pop	{r3, r4, r5, pc}
 800caca:	bf00      	nop
 800cacc:	200011a8 	.word	0x200011a8

0800cad0 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 800cad0:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800cad2:	4b04      	ldr	r3, [pc, #16]	; (800cae4 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 800cad4:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 800cad6:	4b04      	ldr	r3, [pc, #16]	; (800cae8 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cadc:	b103      	cbz	r3, 800cae0 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800cade:	4798      	blx	r3
    }
}
 800cae0:	bd08      	pop	{r3, pc}
 800cae2:	bf00      	nop
 800cae4:	200011bc 	.word	0x200011bc
 800cae8:	200011a4 	.word	0x200011a4

0800caec <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800caec:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800caee:	4b04      	ldr	r3, [pc, #16]	; (800cb00 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 800caf0:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 800caf2:	4b04      	ldr	r3, [pc, #16]	; (800cb04 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf8:	b103      	cbz	r3, 800cafc <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 800cafa:	4798      	blx	r3
    }
}
 800cafc:	bd08      	pop	{r3, pc}
 800cafe:	bf00      	nop
 800cb00:	200011bc 	.word	0x200011bc
 800cb04:	200011a4 	.word	0x200011a4

0800cb08 <LmHandlerJoin>:
{
 800cb08:	b530      	push	{r4, r5, lr}
 800cb0a:	b091      	sub	sp, #68	; 0x44
 800cb0c:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 800cb0e:	2301      	movs	r3, #1
 800cb10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800cb14:	4b33      	ldr	r3, [pc, #204]	; (800cbe4 <LmHandlerJoin+0xdc>)
 800cb16:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800cb1a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 800cb1e:	f993 1005 	ldrsb.w	r1, [r3, #5]
 800cb22:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 800cb26:	2802      	cmp	r0, #2
 800cb28:	d022      	beq.n	800cb70 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cb2a:	2001      	movs	r0, #1
 800cb2c:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800cb30:	4b2d      	ldr	r3, [pc, #180]	; (800cbe8 <LmHandlerJoin+0xe0>)
 800cb32:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800cb34:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 800cb36:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800cb38:	2100      	movs	r1, #0
 800cb3a:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800cb3c:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 800cb3e:	4b2b      	ldr	r3, [pc, #172]	; (800cbec <LmHandlerJoin+0xe4>)
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	b1f3      	cbz	r3, 800cb82 <LmHandlerJoin+0x7a>
        LoRaMacStart();
 800cb44:	f003 fb20 	bl	8010188 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cb48:	2301      	movs	r3, #1
 800cb4a:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800cb4e:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800cb52:	a801      	add	r0, sp, #4
 800cb54:	f003 fd70 	bl	8010638 <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 800cb58:	4b24      	ldr	r3, [pc, #144]	; (800cbec <LmHandlerJoin+0xe4>)
 800cb5a:	781b      	ldrb	r3, [r3, #0]
 800cb5c:	b103      	cbz	r3, 800cb60 <LmHandlerJoin+0x58>
 800cb5e:	b114      	cbz	r4, 800cb66 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 800cb60:	a80b      	add	r0, sp, #44	; 0x2c
 800cb62:	f004 f839 	bl	8010bd8 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cb66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cb68:	4b21      	ldr	r3, [pc, #132]	; (800cbf0 <LmHandlerJoin+0xe8>)
 800cb6a:	601a      	str	r2, [r3, #0]
}
 800cb6c:	b011      	add	sp, #68	; 0x44
 800cb6e:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800cb70:	2202      	movs	r2, #2
 800cb72:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800cb76:	4b1c      	ldr	r3, [pc, #112]	; (800cbe8 <LmHandlerJoin+0xe0>)
 800cb78:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800cb7a:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 800cb7c:	f003 fb04 	bl	8010188 <LoRaMacStart>
 800cb80:	e7ea      	b.n	800cb58 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800cb82:	231f      	movs	r3, #31
 800cb84:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800cb88:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cb8c:	a801      	add	r0, sp, #4
 800cb8e:	f003 fd53 	bl	8010638 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 800cb92:	2320      	movs	r3, #32
 800cb94:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800cb98:	4d12      	ldr	r5, [pc, #72]	; (800cbe4 <LmHandlerJoin+0xdc>)
 800cb9a:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800cb9e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cba2:	a801      	add	r0, sp, #4
 800cba4:	f003 fd48 	bl	8010638 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 800cba8:	2322      	movs	r3, #34	; 0x22
 800cbaa:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800cbae:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800cbb2:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cbb6:	a801      	add	r0, sp, #4
 800cbb8:	f003 fd3e 	bl	8010638 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800cbbc:	2321      	movs	r3, #33	; 0x21
 800cbbe:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 800cbc2:	f995 3005 	ldrsb.w	r3, [r5, #5]
 800cbc6:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cbca:	a801      	add	r0, sp, #4
 800cbcc:	f003 fd34 	bl	8010638 <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800cbd0:	2329      	movs	r3, #41	; 0x29
 800cbd2:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800cbd6:	4b07      	ldr	r3, [pc, #28]	; (800cbf4 <LmHandlerJoin+0xec>)
 800cbd8:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800cbda:	a801      	add	r0, sp, #4
 800cbdc:	f003 fd2c 	bl	8010638 <LoRaMacMibSetRequestConfirm>
 800cbe0:	e7b0      	b.n	800cb44 <LmHandlerJoin+0x3c>
 800cbe2:	bf00      	nop
 800cbe4:	200011bc 	.word	0x200011bc
 800cbe8:	200000dc 	.word	0x200000dc
 800cbec:	20001198 	.word	0x20001198
 800cbf0:	2000119c 	.word	0x2000119c
 800cbf4:	01000400 	.word	0x01000400

0800cbf8 <LmHandlerDeviceTimeReq>:
{
 800cbf8:	b500      	push	{lr}
 800cbfa:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 800cbfc:	2309      	movs	r3, #9
 800cbfe:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 800cc02:	a801      	add	r0, sp, #4
 800cc04:	f003 ffe8 	bl	8010bd8 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800cc08:	9a05      	ldr	r2, [sp, #20]
 800cc0a:	4b04      	ldr	r3, [pc, #16]	; (800cc1c <LmHandlerDeviceTimeReq+0x24>)
 800cc0c:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 800cc0e:	b910      	cbnz	r0, 800cc16 <LmHandlerDeviceTimeReq+0x1e>
}
 800cc10:	b007      	add	sp, #28
 800cc12:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800cc16:	f04f 30ff 	mov.w	r0, #4294967295
 800cc1a:	e7f9      	b.n	800cc10 <LmHandlerDeviceTimeReq+0x18>
 800cc1c:	2000119c 	.word	0x2000119c

0800cc20 <LmHandlerGetDutyCycleWaitTime>:
}
 800cc20:	4b01      	ldr	r3, [pc, #4]	; (800cc28 <LmHandlerGetDutyCycleWaitTime+0x8>)
 800cc22:	6818      	ldr	r0, [r3, #0]
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	2000119c 	.word	0x2000119c

0800cc2c <LmHandlerJoinStatus>:
{
 800cc2c:	b500      	push	{lr}
 800cc2e:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800cc30:	2301      	movs	r3, #1
 800cc32:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800cc36:	4668      	mov	r0, sp
 800cc38:	f003 fb70 	bl	801031c <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 800cc3c:	b920      	cbnz	r0, 800cc48 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800cc3e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800cc42:	b110      	cbz	r0, 800cc4a <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 800cc44:	2001      	movs	r0, #1
 800cc46:	e000      	b.n	800cc4a <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 800cc48:	2000      	movs	r0, #0
}
 800cc4a:	b00b      	add	sp, #44	; 0x2c
 800cc4c:	f85d fb04 	ldr.w	pc, [sp], #4

0800cc50 <LmHandlerIsBusy>:
{
 800cc50:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 800cc52:	f003 f847 	bl	800fce4 <LoRaMacIsBusy>
 800cc56:	b100      	cbz	r0, 800cc5a <LmHandlerIsBusy+0xa>
}
 800cc58:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cc5a:	f7ff ffe7 	bl	800cc2c <LmHandlerJoinStatus>
 800cc5e:	2801      	cmp	r0, #1
 800cc60:	d006      	beq.n	800cc70 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cc62:	4b05      	ldr	r3, [pc, #20]	; (800cc78 <LmHandlerIsBusy+0x28>)
 800cc64:	7a19      	ldrb	r1, [r3, #8]
 800cc66:	79d8      	ldrb	r0, [r3, #7]
 800cc68:	f7ff ff4e 	bl	800cb08 <LmHandlerJoin>
        return true;
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	e7f3      	b.n	800cc58 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 800cc70:	f7ff fef8 	bl	800ca64 <LmHandlerPackageIsTxPending>
 800cc74:	e7f0      	b.n	800cc58 <LmHandlerIsBusy+0x8>
 800cc76:	bf00      	nop
 800cc78:	200000dc 	.word	0x200000dc

0800cc7c <LmHandlerSend>:
{
 800cc7c:	b570      	push	{r4, r5, r6, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	4604      	mov	r4, r0
 800cc82:	460d      	mov	r5, r1
 800cc84:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 800cc86:	f003 f82d 	bl	800fce4 <LoRaMacIsBusy>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	d168      	bne.n	800cd60 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 800cc8e:	f003 f847 	bl	800fd20 <LoRaMacIsStopped>
 800cc92:	2800      	cmp	r0, #0
 800cc94:	d167      	bne.n	800cd66 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800cc96:	f7ff ffc9 	bl	800cc2c <LmHandlerJoinStatus>
 800cc9a:	2801      	cmp	r0, #1
 800cc9c:	d137      	bne.n	800cd0e <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 800cc9e:	4b35      	ldr	r3, [pc, #212]	; (800cd74 <LmHandlerSend+0xf8>)
 800cca0:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800cca2:	3d00      	subs	r5, #0
 800cca4:	bf18      	it	ne
 800cca6:	2501      	movne	r5, #1
 800cca8:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800ccac:	4b32      	ldr	r3, [pc, #200]	; (800cd78 <LmHandlerSend+0xfc>)
 800ccae:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800ccb2:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800ccb6:	4669      	mov	r1, sp
 800ccb8:	7860      	ldrb	r0, [r4, #1]
 800ccba:	f003 fac5 	bl	8010248 <LoRaMacQueryTxPossible>
 800ccbe:	b370      	cbz	r0, 800cd1e <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800ccc6:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800ccc8:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800cccc:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 800ccd0:	4b28      	ldr	r3, [pc, #160]	; (800cd74 <LmHandlerSend+0xf8>)
 800ccd2:	f103 0c10 	add.w	ip, r3, #16
 800ccd6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ccda:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800ccde:	4a26      	ldr	r2, [pc, #152]	; (800cd78 <LmHandlerSend+0xfc>)
 800cce0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800cce4:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 800cce6:	4631      	mov	r1, r6
 800cce8:	a801      	add	r0, sp, #4
 800ccea:	f004 f879 	bl	8010de0 <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800ccee:	9a05      	ldr	r2, [sp, #20]
 800ccf0:	4b22      	ldr	r3, [pc, #136]	; (800cd7c <LmHandlerSend+0x100>)
 800ccf2:	601a      	str	r2, [r3, #0]
    switch( status )
 800ccf4:	2811      	cmp	r0, #17
 800ccf6:	d830      	bhi.n	800cd5a <LmHandlerSend+0xde>
 800ccf8:	e8df f000 	tbb	[pc, r0]
 800ccfc:	2f2f1c21 	.word	0x2f2f1c21
 800cd00:	382f2f2f 	.word	0x382f2f2f
 800cd04:	2c2f2f2f 	.word	0x2c2f2f2f
 800cd08:	1c1c2f2f 	.word	0x1c1c2f2f
 800cd0c:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800cd0e:	4b1c      	ldr	r3, [pc, #112]	; (800cd80 <LmHandlerSend+0x104>)
 800cd10:	7a19      	ldrb	r1, [r3, #8]
 800cd12:	79d8      	ldrb	r0, [r3, #7]
 800cd14:	f7ff fef8 	bl	800cb08 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd18:	f06f 0502 	mvn.w	r5, #2
 800cd1c:	e00c      	b.n	800cd38 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800cd1e:	7823      	ldrb	r3, [r4, #0]
 800cd20:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800cd24:	7863      	ldrb	r3, [r4, #1]
 800cd26:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800cd2a:	6863      	ldr	r3, [r4, #4]
 800cd2c:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cd2e:	f04f 35ff 	mov.w	r5, #4294967295
 800cd32:	e7cd      	b.n	800ccd0 <LmHandlerSend+0x54>
    switch( status )
 800cd34:	f06f 0501 	mvn.w	r5, #1
}
 800cd38:	4628      	mov	r0, r5
 800cd3a:	b006      	add	sp, #24
 800cd3c:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 800cd3e:	4b11      	ldr	r3, [pc, #68]	; (800cd84 <LmHandlerSend+0x108>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 800cd44:	f115 0f07 	cmn.w	r5, #7
 800cd48:	d0f6      	beq.n	800cd38 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cd4a:	2500      	movs	r5, #0
 800cd4c:	e7f4      	b.n	800cd38 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800cd4e:	f06f 0504 	mvn.w	r5, #4
            break;
 800cd52:	e7f1      	b.n	800cd38 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800cd54:	f06f 0505 	mvn.w	r5, #5
            break;
 800cd58:	e7ee      	b.n	800cd38 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cd5a:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800cd5e:	e7eb      	b.n	800cd38 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd60:	f06f 0501 	mvn.w	r5, #1
 800cd64:	e7e8      	b.n	800cd38 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd66:	f06f 0502 	mvn.w	r5, #2
 800cd6a:	e7e5      	b.n	800cd38 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800cd6c:	f06f 0502 	mvn.w	r5, #2
 800cd70:	e7e2      	b.n	800cd38 <LmHandlerSend+0xbc>
 800cd72:	bf00      	nop
 800cd74:	200000fc 	.word	0x200000fc
 800cd78:	200011bc 	.word	0x200011bc
 800cd7c:	2000119c 	.word	0x2000119c
 800cd80:	200000dc 	.word	0x200000dc
 800cd84:	200011a0 	.word	0x200011a0

0800cd88 <LmHandlerProcess>:
{
 800cd88:	b500      	push	{lr}
 800cd8a:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800cd8c:	f002 ffd4 	bl	800fd38 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 800cd90:	f7ff fe80 	bl	800ca94 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 800cd94:	f7ff fe66 	bl	800ca64 <LmHandlerPackageIsTxPending>
 800cd98:	b910      	cbnz	r0, 800cda0 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800cd9a:	4b0b      	ldr	r3, [pc, #44]	; (800cdc8 <LmHandlerProcess+0x40>)
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	b913      	cbnz	r3, 800cda6 <LmHandlerProcess+0x1e>
}
 800cda0:	b003      	add	sp, #12
 800cda2:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 800cda6:	2200      	movs	r2, #0
 800cda8:	f88d 2000 	strb.w	r2, [sp]
 800cdac:	f88d 2001 	strb.w	r2, [sp, #1]
 800cdb0:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800cdb2:	4b06      	ldr	r3, [pc, #24]	; (800cdcc <LmHandlerProcess+0x44>)
 800cdb4:	78d9      	ldrb	r1, [r3, #3]
 800cdb6:	4668      	mov	r0, sp
 800cdb8:	f7ff ff60 	bl	800cc7c <LmHandlerSend>
 800cdbc:	2800      	cmp	r0, #0
 800cdbe:	d1ef      	bne.n	800cda0 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 800cdc0:	4b01      	ldr	r3, [pc, #4]	; (800cdc8 <LmHandlerProcess+0x40>)
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	701a      	strb	r2, [r3, #0]
 800cdc6:	e7eb      	b.n	800cda0 <LmHandlerProcess+0x18>
 800cdc8:	200011a0 	.word	0x200011a0
 800cdcc:	200011bc 	.word	0x200011bc

0800cdd0 <LmHandlerRequestClass>:
{
 800cdd0:	b510      	push	{r4, lr}
 800cdd2:	b08a      	sub	sp, #40	; 0x28
 800cdd4:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 800cdd6:	f002 ff85 	bl	800fce4 <LoRaMacIsBusy>
 800cdda:	bbb0      	cbnz	r0, 800ce4a <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800cddc:	f7ff ff26 	bl	800cc2c <LmHandlerJoinStatus>
 800cde0:	2801      	cmp	r0, #1
 800cde2:	d135      	bne.n	800ce50 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 800cde4:	2300      	movs	r3, #0
 800cde6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cdea:	4668      	mov	r0, sp
 800cdec:	f003 fa96 	bl	801031c <LoRaMacMibGetRequestConfirm>
 800cdf0:	bb88      	cbnz	r0, 800ce56 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 800cdf2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 800cdf6:	42a3      	cmp	r3, r4
 800cdf8:	d030      	beq.n	800ce5c <LmHandlerRequestClass+0x8c>
        switch( newClass )
 800cdfa:	2c01      	cmp	r4, #1
 800cdfc:	d030      	beq.n	800ce60 <LmHandlerRequestClass+0x90>
 800cdfe:	2c02      	cmp	r4, #2
 800ce00:	d014      	beq.n	800ce2c <LmHandlerRequestClass+0x5c>
 800ce02:	b114      	cbz	r4, 800ce0a <LmHandlerRequestClass+0x3a>
 800ce04:	2000      	movs	r0, #0
}
 800ce06:	b00a      	add	sp, #40	; 0x28
 800ce08:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 800ce0a:	b90b      	cbnz	r3, 800ce10 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ce0c:	2000      	movs	r0, #0
 800ce0e:	e7fa      	b.n	800ce06 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 800ce10:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ce14:	4668      	mov	r0, sp
 800ce16:	f003 fc0f 	bl	8010638 <LoRaMacMibSetRequestConfirm>
 800ce1a:	bb20      	cbnz	r0, 800ce66 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ce1c:	4b18      	ldr	r3, [pc, #96]	; (800ce80 <LmHandlerRequestClass+0xb0>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce22:	b31b      	cbz	r3, 800ce6c <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ce24:	4620      	mov	r0, r4
 800ce26:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ce28:	2000      	movs	r0, #0
 800ce2a:	e7ec      	b.n	800ce06 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 800ce2c:	bb03      	cbnz	r3, 800ce70 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 800ce2e:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800ce32:	4668      	mov	r0, sp
 800ce34:	f003 fc00 	bl	8010638 <LoRaMacMibSetRequestConfirm>
 800ce38:	b9e8      	cbnz	r0, 800ce76 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 800ce3a:	4b11      	ldr	r3, [pc, #68]	; (800ce80 <LmHandlerRequestClass+0xb0>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce40:	b1e3      	cbz	r3, 800ce7c <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 800ce42:	4620      	mov	r0, r4
 800ce44:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ce46:	2000      	movs	r0, #0
 800ce48:	e7dd      	b.n	800ce06 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800ce4a:	f06f 0001 	mvn.w	r0, #1
 800ce4e:	e7da      	b.n	800ce06 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800ce50:	f06f 0002 	mvn.w	r0, #2
 800ce54:	e7d7      	b.n	800ce06 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 800ce56:	f04f 30ff 	mov.w	r0, #4294967295
 800ce5a:	e7d4      	b.n	800ce06 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ce5c:	2000      	movs	r0, #0
 800ce5e:	e7d2      	b.n	800ce06 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800ce60:	f04f 30ff 	mov.w	r0, #4294967295
 800ce64:	e7cf      	b.n	800ce06 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ce66:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6a:	e7cc      	b.n	800ce06 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	e7ca      	b.n	800ce06 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800ce70:	f04f 30ff 	mov.w	r0, #4294967295
 800ce74:	e7c7      	b.n	800ce06 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 800ce76:	f04f 30ff 	mov.w	r0, #4294967295
 800ce7a:	e7c4      	b.n	800ce06 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800ce7c:	2000      	movs	r0, #0
 800ce7e:	e7c2      	b.n	800ce06 <LmHandlerRequestClass+0x36>
 800ce80:	200011a4 	.word	0x200011a4

0800ce84 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 800ce84:	b170      	cbz	r0, 800cea4 <LmHandlerGetCurrentClass+0x20>
{
 800ce86:	b510      	push	{r4, lr}
 800ce88:	b08a      	sub	sp, #40	; 0x28
 800ce8a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800ce92:	4668      	mov	r0, sp
 800ce94:	f003 fa42 	bl	801031c <LoRaMacMibGetRequestConfirm>
 800ce98:	b938      	cbnz	r0, 800ceaa <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800ce9a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ce9e:	7023      	strb	r3, [r4, #0]
}
 800cea0:	b00a      	add	sp, #40	; 0x28
 800cea2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800cea4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cea8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800ceaa:	f04f 30ff 	mov.w	r0, #4294967295
 800ceae:	e7f7      	b.n	800cea0 <LmHandlerGetCurrentClass+0x1c>

0800ceb0 <McpsIndication>:
{
 800ceb0:	b510      	push	{r4, lr}
 800ceb2:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800ceba:	4a1d      	ldr	r2, [pc, #116]	; (800cf30 <McpsIndication+0x80>)
 800cebc:	2301      	movs	r3, #1
 800cebe:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 800cec0:	7843      	ldrb	r3, [r0, #1]
 800cec2:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d131      	bne.n	800cf2c <McpsIndication+0x7c>
 800cec8:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800ceca:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800cece:	4b18      	ldr	r3, [pc, #96]	; (800cf30 <McpsIndication+0x80>)
 800ced0:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800ced2:	f9b1 2000 	ldrsh.w	r2, [r1]
 800ced6:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800ced8:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800cedc:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800cede:	78ca      	ldrb	r2, [r1, #3]
 800cee0:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800cee2:	6902      	ldr	r2, [r0, #16]
 800cee4:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 800cee6:	78c3      	ldrb	r3, [r0, #3]
 800cee8:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800ceec:	7b03      	ldrb	r3, [r0, #12]
 800ceee:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 800cef2:	6883      	ldr	r3, [r0, #8]
 800cef4:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 800cef6:	4b0f      	ldr	r3, [pc, #60]	; (800cf34 <McpsIndication+0x84>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefc:	b113      	cbz	r3, 800cf04 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800cefe:	490c      	ldr	r1, [pc, #48]	; (800cf30 <McpsIndication+0x80>)
 800cf00:	a802      	add	r0, sp, #8
 800cf02:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 800cf04:	4b0b      	ldr	r3, [pc, #44]	; (800cf34 <McpsIndication+0x84>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0a:	b113      	cbz	r3, 800cf12 <McpsIndication+0x62>
 800cf0c:	7e22      	ldrb	r2, [r4, #24]
 800cf0e:	b102      	cbz	r2, 800cf12 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800cf10:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800cf12:	4621      	mov	r1, r4
 800cf14:	2001      	movs	r0, #1
 800cf16:	f7ff fd23 	bl	800c960 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 800cf1a:	f10d 0007 	add.w	r0, sp, #7
 800cf1e:	f7ff ffb1 	bl	800ce84 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 800cf22:	7963      	ldrb	r3, [r4, #5]
 800cf24:	b113      	cbz	r3, 800cf2c <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 800cf26:	4b04      	ldr	r3, [pc, #16]	; (800cf38 <McpsIndication+0x88>)
 800cf28:	2201      	movs	r2, #1
 800cf2a:	701a      	strb	r2, [r3, #0]
}
 800cf2c:	b004      	add	sp, #16
 800cf2e:	bd10      	pop	{r4, pc}
 800cf30:	200000e8 	.word	0x200000e8
 800cf34:	200011a4 	.word	0x200011a4
 800cf38:	200011a0 	.word	0x200011a0

0800cf3c <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 800cf3c:	b180      	cbz	r0, 800cf60 <LmHandlerGetTxDatarate+0x24>
{
 800cf3e:	b510      	push	{r4, lr}
 800cf40:	b08a      	sub	sp, #40	; 0x28
 800cf42:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800cf44:	2320      	movs	r3, #32
 800cf46:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 800cf4a:	4668      	mov	r0, sp
 800cf4c:	f003 f9e6 	bl	801031c <LoRaMacMibGetRequestConfirm>
 800cf50:	b948      	cbnz	r0, 800cf66 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800cf52:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800cf56:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800cf58:	4a04      	ldr	r2, [pc, #16]	; (800cf6c <LmHandlerGetTxDatarate+0x30>)
 800cf5a:	7113      	strb	r3, [r2, #4]
}
 800cf5c:	b00a      	add	sp, #40	; 0x28
 800cf5e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800cf60:	f04f 30ff 	mov.w	r0, #4294967295
}
 800cf64:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800cf66:	f04f 30ff 	mov.w	r0, #4294967295
 800cf6a:	e7f7      	b.n	800cf5c <LmHandlerGetTxDatarate+0x20>
 800cf6c:	200011bc 	.word	0x200011bc

0800cf70 <LmHandlerSetSystemMaxRxError>:
{
 800cf70:	b500      	push	{lr}
 800cf72:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800cf74:	2323      	movs	r3, #35	; 0x23
 800cf76:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800cf7a:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800cf7c:	4668      	mov	r0, sp
 800cf7e:	f003 fb5b 	bl	8010638 <LoRaMacMibSetRequestConfirm>
 800cf82:	b910      	cbnz	r0, 800cf8a <LmHandlerSetSystemMaxRxError+0x1a>
}
 800cf84:	b00b      	add	sp, #44	; 0x2c
 800cf86:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800cf8a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf8e:	e7f9      	b.n	800cf84 <LmHandlerSetSystemMaxRxError+0x14>

0800cf90 <LmHandlerConfigure>:
{
 800cf90:	b570      	push	{r4, r5, r6, lr}
 800cf92:	b08e      	sub	sp, #56	; 0x38
 800cf94:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 800cf96:	4c6d      	ldr	r4, [pc, #436]	; (800d14c <LmHandlerConfigure+0x1bc>)
 800cf98:	2218      	movs	r2, #24
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	f007 fc15 	bl	80147ca <memcpy1>
    IsUplinkTxPending = false;
 800cfa0:	4b6b      	ldr	r3, [pc, #428]	; (800d150 <LmHandlerConfigure+0x1c0>)
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 800cfa6:	f7fa fd5d 	bl	8007a64 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800cfaa:	7822      	ldrb	r2, [r4, #0]
 800cfac:	2301      	movs	r3, #1
 800cfae:	4093      	lsls	r3, r2
 800cfb0:	6841      	ldr	r1, [r0, #4]
 800cfb2:	420b      	tst	r3, r1
 800cfb4:	d106      	bne.n	800cfc4 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 800cfb6:	4b67      	ldr	r3, [pc, #412]	; (800d154 <LmHandlerConfigure+0x1c4>)
 800cfb8:	2201      	movs	r2, #1
 800cfba:	2100      	movs	r1, #0
 800cfbc:	4608      	mov	r0, r1
 800cfbe:	f009 fae1 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 800cfc2:	e7fe      	b.n	800cfc2 <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 800cfc4:	4964      	ldr	r1, [pc, #400]	; (800d158 <LmHandlerConfigure+0x1c8>)
 800cfc6:	4865      	ldr	r0, [pc, #404]	; (800d15c <LmHandlerConfigure+0x1cc>)
 800cfc8:	f002 fefe 	bl	800fdc8 <LoRaMacInitialization>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f040 80b7 	bne.w	800d140 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 800cfd2:	2327      	movs	r3, #39	; 0x27
 800cfd4:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800cfd8:	a804      	add	r0, sp, #16
 800cfda:	f003 fb2d 	bl	8010638 <LoRaMacMibSetRequestConfirm>
 800cfde:	2800      	cmp	r0, #0
 800cfe0:	d17c      	bne.n	800d0dc <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 800cfe2:	4b5f      	ldr	r3, [pc, #380]	; (800d160 <LmHandlerConfigure+0x1d0>)
 800cfe4:	2201      	movs	r2, #1
 800cfe6:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 800cfe8:	4b5d      	ldr	r3, [pc, #372]	; (800d160 <LmHandlerConfigure+0x1d0>)
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	f000 809e 	beq.w	800d12e <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800cff2:	4b5c      	ldr	r3, [pc, #368]	; (800d164 <LmHandlerConfigure+0x1d4>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	b10b      	cbz	r3, 800cffe <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800cffa:	2000      	movs	r0, #0
 800cffc:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800cffe:	2327      	movs	r3, #39	; 0x27
 800d000:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800d004:	a804      	add	r0, sp, #16
 800d006:	f003 f989 	bl	801031c <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 800d00a:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 800d00c:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 800d010:	4b4e      	ldr	r3, [pc, #312]	; (800d14c <LmHandlerConfigure+0x1bc>)
 800d012:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 800d014:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 800d018:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 800d01a:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 800d01e:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 800d020:	4b4d      	ldr	r3, [pc, #308]	; (800d158 <LmHandlerConfigure+0x1c8>)
 800d022:	68d9      	ldr	r1, [r3, #12]
 800d024:	6898      	ldr	r0, [r3, #8]
 800d026:	f007 fae3 	bl	80145f0 <SecureElementInitMcuID>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	f040 808b 	bne.w	800d146 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 800d030:	2306      	movs	r3, #6
 800d032:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d036:	a804      	add	r0, sp, #16
 800d038:	f003 f970 	bl	801031c <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d03c:	4c4a      	ldr	r4, [pc, #296]	; (800d168 <LmHandlerConfigure+0x1d8>)
 800d03e:	9b05      	ldr	r3, [sp, #20]
 800d040:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d042:	a804      	add	r0, sp, #16
 800d044:	f003 faf8 	bl	8010638 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 800d048:	2302      	movs	r3, #2
 800d04a:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 800d04e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d050:	a804      	add	r0, sp, #16
 800d052:	f003 f963 	bl	801031c <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 800d056:	2303      	movs	r3, #3
 800d058:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800d05c:	3408      	adds	r4, #8
 800d05e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800d060:	a804      	add	r0, sp, #16
 800d062:	f003 f95b 	bl	801031c <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 800d066:	f007 fb5d 	bl	8014724 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800d06a:	260f      	movs	r6, #15
 800d06c:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800d070:	2301      	movs	r3, #1
 800d072:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d076:	a804      	add	r0, sp, #16
 800d078:	f003 fade 	bl	8010638 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800d07c:	2310      	movs	r3, #16
 800d07e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800d082:	2500      	movs	r5, #0
 800d084:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d088:	eb0d 0003 	add.w	r0, sp, r3
 800d08c:	f003 fad4 	bl	8010638 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 800d090:	2304      	movs	r3, #4
 800d092:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800d096:	4c2d      	ldr	r4, [pc, #180]	; (800d14c <LmHandlerConfigure+0x1bc>)
 800d098:	78a3      	ldrb	r3, [r4, #2]
 800d09a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d09e:	a804      	add	r0, sp, #16
 800d0a0:	f003 faca 	bl	8010638 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800d0a4:	233a      	movs	r3, #58	; 0x3a
 800d0a6:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800d0aa:	6963      	ldr	r3, [r4, #20]
 800d0ac:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800d0ae:	a804      	add	r0, sp, #16
 800d0b0:	f003 fac2 	bl	8010638 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800d0b4:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800d0b8:	a902      	add	r1, sp, #8
 800d0ba:	7820      	ldrb	r0, [r4, #0]
 800d0bc:	f005 f8b9 	bl	8012232 <RegionGetPhyParam>
 800d0c0:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 800d0c2:	1b43      	subs	r3, r0, r5
 800d0c4:	bf18      	it	ne
 800d0c6:	2301      	movne	r3, #1
 800d0c8:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800d0ca:	2014      	movs	r0, #20
 800d0cc:	f7ff ff50 	bl	800cf70 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800d0d0:	79e0      	ldrb	r0, [r4, #7]
 800d0d2:	f003 ff73 	bl	8010fbc <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 800d0d6:	4628      	mov	r0, r5
}
 800d0d8:	b00e      	add	sp, #56	; 0x38
 800d0da:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800d0dc:	2328      	movs	r3, #40	; 0x28
 800d0de:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 800d0e2:	4b20      	ldr	r3, [pc, #128]	; (800d164 <LmHandlerConfigure+0x1d4>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	b14b      	cbz	r3, 800d0fe <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d0ea:	a804      	add	r0, sp, #16
 800d0ec:	f003 f916 	bl	801031c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 800d0f0:	4b1c      	ldr	r3, [pc, #112]	; (800d164 <LmHandlerConfigure+0x1d4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	691b      	ldr	r3, [r3, #16]
 800d0f6:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 800d0fa:	9805      	ldr	r0, [sp, #20]
 800d0fc:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 800d0fe:	2327      	movs	r3, #39	; 0x27
 800d100:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800d104:	a804      	add	r0, sp, #16
 800d106:	f003 fa97 	bl	8010638 <LoRaMacMibSetRequestConfirm>
 800d10a:	2800      	cmp	r0, #0
 800d10c:	f47f af6c 	bne.w	800cfe8 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800d110:	2301      	movs	r3, #1
 800d112:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d116:	a804      	add	r0, sp, #16
 800d118:	f003 f900 	bl	801031c <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 800d11c:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800d120:	2b00      	cmp	r3, #0
 800d122:	f43f af61 	beq.w	800cfe8 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 800d126:	4b0e      	ldr	r3, [pc, #56]	; (800d160 <LmHandlerConfigure+0x1d0>)
 800d128:	2201      	movs	r2, #1
 800d12a:	701a      	strb	r2, [r3, #0]
 800d12c:	e75c      	b.n	800cfe8 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 800d12e:	2305      	movs	r3, #5
 800d130:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800d134:	2300      	movs	r3, #0
 800d136:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d138:	a804      	add	r0, sp, #16
 800d13a:	f003 fa7d 	bl	8010638 <LoRaMacMibSetRequestConfirm>
 800d13e:	e76f      	b.n	800d020 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 800d140:	f04f 30ff 	mov.w	r0, #4294967295
 800d144:	e7c8      	b.n	800d0d8 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 800d146:	f04f 30ff 	mov.w	r0, #4294967295
 800d14a:	e7c5      	b.n	800d0d8 <LmHandlerConfigure+0x148>
 800d14c:	200011bc 	.word	0x200011bc
 800d150:	200011a0 	.word	0x200011a0
 800d154:	0801e114 	.word	0x0801e114
 800d158:	200011e4 	.word	0x200011e4
 800d15c:	200011fc 	.word	0x200011fc
 800d160:	20001198 	.word	0x20001198
 800d164:	200011a4 	.word	0x200011a4
 800d168:	20001180 	.word	0x20001180

0800d16c <LmHandlerPackageRegister>:
{
 800d16c:	b530      	push	{r4, r5, lr}
 800d16e:	b083      	sub	sp, #12
 800d170:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 800d172:	2300      	movs	r3, #0
 800d174:	9301      	str	r3, [sp, #4]
    switch( id )
 800d176:	4604      	mov	r4, r0
 800d178:	b9d8      	cbnz	r0, 800d1b2 <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 800d17a:	f000 fc1b 	bl	800d9b4 <LmhpCompliancePackageFactory>
 800d17e:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 800d180:	9b01      	ldr	r3, [sp, #4]
 800d182:	b1f3      	cbz	r3, 800d1c2 <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 800d184:	4a10      	ldr	r2, [pc, #64]	; (800d1c8 <LmHandlerPackageRegister+0x5c>)
 800d186:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800d18a:	4a10      	ldr	r2, [pc, #64]	; (800d1cc <LmHandlerPackageRegister+0x60>)
 800d18c:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800d18e:	4a10      	ldr	r2, [pc, #64]	; (800d1d0 <LmHandlerPackageRegister+0x64>)
 800d190:	6812      	ldr	r2, [r2, #0]
 800d192:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800d194:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800d196:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800d198:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800d19a:	490e      	ldr	r1, [pc, #56]	; (800d1d4 <LmHandlerPackageRegister+0x68>)
 800d19c:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800d19e:	6992      	ldr	r2, [r2, #24]
 800d1a0:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	22f2      	movs	r2, #242	; 0xf2
 800d1a6:	490c      	ldr	r1, [pc, #48]	; (800d1d8 <LmHandlerPackageRegister+0x6c>)
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800d1ac:	2000      	movs	r0, #0
}
 800d1ae:	b003      	add	sp, #12
 800d1b0:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 800d1b2:	a901      	add	r1, sp, #4
 800d1b4:	f000 fc04 	bl	800d9c0 <LmhpPackagesRegister>
 800d1b8:	2800      	cmp	r0, #0
 800d1ba:	d0e1      	beq.n	800d180 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c0:	e7f5      	b.n	800d1ae <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 800d1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c6:	e7f2      	b.n	800d1ae <LmHandlerPackageRegister+0x42>
 800d1c8:	200011a8 	.word	0x200011a8
 800d1cc:	0800cb09 	.word	0x0800cb09
 800d1d0:	200011a4 	.word	0x200011a4
 800d1d4:	0800cbf9 	.word	0x0800cbf9
 800d1d8:	2000108c 	.word	0x2000108c

0800d1dc <LmHandlerInit>:
{
 800d1dc:	b500      	push	{lr}
 800d1de:	b083      	sub	sp, #12
 800d1e0:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 800d1e2:	4b19      	ldr	r3, [pc, #100]	; (800d248 <LmHandlerInit+0x6c>)
 800d1e4:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800d1e6:	4b19      	ldr	r3, [pc, #100]	; (800d24c <LmHandlerInit+0x70>)
 800d1e8:	4a19      	ldr	r2, [pc, #100]	; (800d250 <LmHandlerInit+0x74>)
 800d1ea:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800d1ec:	4a19      	ldr	r2, [pc, #100]	; (800d254 <LmHandlerInit+0x78>)
 800d1ee:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800d1f0:	4a19      	ldr	r2, [pc, #100]	; (800d258 <LmHandlerInit+0x7c>)
 800d1f2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800d1f4:	4a19      	ldr	r2, [pc, #100]	; (800d25c <LmHandlerInit+0x80>)
 800d1f6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800d1f8:	6802      	ldr	r2, [r0, #0]
 800d1fa:	4b19      	ldr	r3, [pc, #100]	; (800d260 <LmHandlerInit+0x84>)
 800d1fc:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800d1fe:	6842      	ldr	r2, [r0, #4]
 800d200:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800d202:	6882      	ldr	r2, [r0, #8]
 800d204:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 800d206:	68c2      	ldr	r2, [r0, #12]
 800d208:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800d20a:	4a16      	ldr	r2, [pc, #88]	; (800d264 <LmHandlerInit+0x88>)
 800d20c:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800d20e:	6982      	ldr	r2, [r0, #24]
 800d210:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800d212:	4b15      	ldr	r3, [pc, #84]	; (800d268 <LmHandlerInit+0x8c>)
 800d214:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800d216:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d218:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 800d21a:	4a14      	ldr	r2, [pc, #80]	; (800d26c <LmHandlerInit+0x90>)
 800d21c:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 800d21e:	4a14      	ldr	r2, [pc, #80]	; (800d270 <LmHandlerInit+0x94>)
 800d220:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 800d222:	4619      	mov	r1, r3
 800d224:	2000      	movs	r0, #0
 800d226:	f7ff ffa1 	bl	800d16c <LmHandlerPackageRegister>
 800d22a:	b930      	cbnz	r0, 800d23a <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 800d22c:	a801      	add	r0, sp, #4
 800d22e:	f000 fbc5 	bl	800d9bc <LmhpPackagesRegistrationInit>
 800d232:	b928      	cbnz	r0, 800d240 <LmHandlerInit+0x64>
}
 800d234:	b003      	add	sp, #12
 800d236:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800d23a:	f04f 30ff 	mov.w	r0, #4294967295
 800d23e:	e7f9      	b.n	800d234 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 800d240:	f04f 30ff 	mov.w	r0, #4294967295
 800d244:	e7f6      	b.n	800d234 <LmHandlerInit+0x58>
 800d246:	bf00      	nop
 800d248:	200011a4 	.word	0x200011a4
 800d24c:	200011fc 	.word	0x200011fc
 800d250:	0800ca21 	.word	0x0800ca21
 800d254:	0800ceb1 	.word	0x0800ceb1
 800d258:	0800d2f5 	.word	0x0800d2f5
 800d25c:	0800c9cd 	.word	0x0800c9cd
 800d260:	200011e4 	.word	0x200011e4
 800d264:	080121e5 	.word	0x080121e5
 800d268:	200011d4 	.word	0x200011d4
 800d26c:	0800cad1 	.word	0x0800cad1
 800d270:	0800caed 	.word	0x0800caed

0800d274 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 800d274:	b161      	cbz	r1, 800d290 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 800d276:	b118      	cbz	r0, 800d280 <LmHandlerGetVersion+0xc>
 800d278:	2801      	cmp	r0, #1
 800d27a:	d005      	beq.n	800d288 <LmHandlerGetVersion+0x14>
 800d27c:	2000      	movs	r0, #0
 800d27e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 800d280:	4a05      	ldr	r2, [pc, #20]	; (800d298 <LmHandlerGetVersion+0x24>)
 800d282:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 800d284:	2000      	movs	r0, #0
            break;
 800d286:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 800d288:	4a04      	ldr	r2, [pc, #16]	; (800d29c <LmHandlerGetVersion+0x28>)
 800d28a:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800d28c:	2000      	movs	r0, #0
            break;
 800d28e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800d290:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d294:	4770      	bx	lr
 800d296:	bf00      	nop
 800d298:	01000400 	.word	0x01000400
 800d29c:	02010001 	.word	0x02010001

0800d2a0 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 800d2a0:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 800d2a2:	f003 fea9 	bl	8010ff8 <LoRaMacDeInitialization>
 800d2a6:	b900      	cbnz	r0, 800d2aa <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800d2a8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d2aa:	f06f 0001 	mvn.w	r0, #1
 800d2ae:	e7fb      	b.n	800d2a8 <LmHandlerStop+0x8>

0800d2b0 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 800d2b0:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 800d2b2:	f002 ff97 	bl	80101e4 <LoRaMacHalt>
 800d2b6:	b900      	cbnz	r0, 800d2ba <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 800d2b8:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800d2ba:	f06f 0001 	mvn.w	r0, #1
 800d2be:	e7fb      	b.n	800d2b8 <LmHandlerHalt+0x8>

0800d2c0 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 800d2c0:	b180      	cbz	r0, 800d2e4 <LmHandlerGetTxPower+0x24>
{
 800d2c2:	b510      	push	{r4, lr}
 800d2c4:	b08a      	sub	sp, #40	; 0x28
 800d2c6:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 800d2c8:	2321      	movs	r3, #33	; 0x21
 800d2ca:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800d2ce:	4668      	mov	r0, sp
 800d2d0:	f003 f824 	bl	801031c <LoRaMacMibGetRequestConfirm>
 800d2d4:	b948      	cbnz	r0, 800d2ea <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 800d2d6:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800d2da:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800d2dc:	4a04      	ldr	r2, [pc, #16]	; (800d2f0 <LmHandlerGetTxPower+0x30>)
 800d2de:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 800d2e0:	b00a      	add	sp, #40	; 0x28
 800d2e2:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 800d2e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d2e8:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800d2ea:	f04f 30ff 	mov.w	r0, #4294967295
 800d2ee:	e7f7      	b.n	800d2e0 <LmHandlerGetTxPower+0x20>
 800d2f0:	200011bc 	.word	0x200011bc

0800d2f4 <MlmeConfirm>:
{
 800d2f4:	b510      	push	{r4, lr}
 800d2f6:	b08a      	sub	sp, #40	; 0x28
 800d2f8:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800d2fa:	4b2c      	ldr	r3, [pc, #176]	; (800d3ac <MlmeConfirm+0xb8>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800d300:	7842      	ldrb	r2, [r0, #1]
 800d302:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 800d304:	4b2a      	ldr	r3, [pc, #168]	; (800d3b0 <MlmeConfirm+0xbc>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30a:	b10b      	cbz	r3, 800d310 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 800d30c:	4827      	ldr	r0, [pc, #156]	; (800d3ac <MlmeConfirm+0xb8>)
 800d30e:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800d310:	4621      	mov	r1, r4
 800d312:	2002      	movs	r0, #2
 800d314:	f7ff fb24 	bl	800c960 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 800d318:	7823      	ldrb	r3, [r4, #0]
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	d037      	beq.n	800d38e <MlmeConfirm+0x9a>
 800d31e:	2b0b      	cmp	r3, #11
 800d320:	d03d      	beq.n	800d39e <MlmeConfirm+0xaa>
 800d322:	2b01      	cmp	r3, #1
 800d324:	d001      	beq.n	800d32a <MlmeConfirm+0x36>
}
 800d326:	b00a      	add	sp, #40	; 0x28
 800d328:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 800d32a:	2306      	movs	r3, #6
 800d32c:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d330:	4668      	mov	r0, sp
 800d332:	f002 fff3 	bl	801031c <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 800d336:	9901      	ldr	r1, [sp, #4]
 800d338:	4b1e      	ldr	r3, [pc, #120]	; (800d3b4 <MlmeConfirm+0xc0>)
 800d33a:	79d8      	ldrb	r0, [r3, #7]
 800d33c:	f007 f936 	bl	80145ac <SecureElementSetDevAddr>
 800d340:	b910      	cbnz	r0, 800d348 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800d342:	9a01      	ldr	r2, [sp, #4]
 800d344:	4b1c      	ldr	r3, [pc, #112]	; (800d3b8 <MlmeConfirm+0xc4>)
 800d346:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800d348:	4c1a      	ldr	r4, [pc, #104]	; (800d3b4 <MlmeConfirm+0xc0>)
 800d34a:	1d20      	adds	r0, r4, #4
 800d34c:	f7ff fdf6 	bl	800cf3c <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 800d350:	1d60      	adds	r0, r4, #5
 800d352:	f7ff ffb5 	bl	800d2c0 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d356:	4b15      	ldr	r3, [pc, #84]	; (800d3ac <MlmeConfirm+0xb8>)
 800d358:	785b      	ldrb	r3, [r3, #1]
 800d35a:	b18b      	cbz	r3, 800d380 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800d35c:	4b15      	ldr	r3, [pc, #84]	; (800d3b4 <MlmeConfirm+0xc0>)
 800d35e:	22ff      	movs	r2, #255	; 0xff
 800d360:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 800d362:	4b13      	ldr	r3, [pc, #76]	; (800d3b0 <MlmeConfirm+0xbc>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d368:	b10b      	cbz	r3, 800d36e <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800d36a:	4812      	ldr	r0, [pc, #72]	; (800d3b4 <MlmeConfirm+0xc0>)
 800d36c:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d36e:	4b0f      	ldr	r3, [pc, #60]	; (800d3ac <MlmeConfirm+0xb8>)
 800d370:	785b      	ldrb	r3, [r3, #1]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d1d7      	bne.n	800d326 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 800d376:	4b0f      	ldr	r3, [pc, #60]	; (800d3b4 <MlmeConfirm+0xc0>)
 800d378:	79d8      	ldrb	r0, [r3, #7]
 800d37a:	f007 f9e5 	bl	8014748 <SecureElementPrintSessionKeys>
            break;
 800d37e:	e7d2      	b.n	800d326 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800d380:	2200      	movs	r2, #0
 800d382:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 800d384:	4b0d      	ldr	r3, [pc, #52]	; (800d3bc <MlmeConfirm+0xc8>)
 800d386:	7858      	ldrb	r0, [r3, #1]
 800d388:	f7ff fd22 	bl	800cdd0 <LmHandlerRequestClass>
 800d38c:	e7e9      	b.n	800d362 <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 800d38e:	4b0c      	ldr	r3, [pc, #48]	; (800d3c0 <MlmeConfirm+0xcc>)
 800d390:	2201      	movs	r2, #1
 800d392:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800d394:	7a22      	ldrb	r2, [r4, #8]
 800d396:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 800d398:	7a62      	ldrb	r2, [r4, #9]
 800d39a:	74da      	strb	r2, [r3, #19]
            break;
 800d39c:	e7c3      	b.n	800d326 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800d39e:	7863      	ldrb	r3, [r4, #1]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d0c0      	beq.n	800d326 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 800d3a4:	f7ff fc28 	bl	800cbf8 <LmHandlerDeviceTimeReq>
}
 800d3a8:	e7bd      	b.n	800d326 <MlmeConfirm+0x32>
 800d3aa:	bf00      	nop
 800d3ac:	200000fc 	.word	0x200000fc
 800d3b0:	200011a4 	.word	0x200011a4
 800d3b4:	200000dc 	.word	0x200000dc
 800d3b8:	20001180 	.word	0x20001180
 800d3bc:	200011bc 	.word	0x200011bc
 800d3c0:	200000e8 	.word	0x200000e8

0800d3c4 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 800d3c8:	f7ff ff72 	bl	800d2b0 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 800d3cc:	4604      	mov	r4, r0
 800d3ce:	b148      	cbz	r0, 800d3e4 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 800d3d0:	b92c      	cbnz	r4, 800d3de <LmHandlerNvmDataStore+0x1a>
 800d3d2:	4b18      	ldr	r3, [pc, #96]	; (800d434 <LmHandlerNvmDataStore+0x70>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	69db      	ldr	r3, [r3, #28]
 800d3d8:	b10b      	cbz	r3, 800d3de <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800d3da:	2001      	movs	r0, #1
 800d3dc:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d3de:	4620      	mov	r0, r4
 800d3e0:	b00a      	add	sp, #40	; 0x28
 800d3e2:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 800d3e4:	f004 ff06 	bl	80121f4 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 800d3e8:	f110 0f02 	cmn.w	r0, #2
 800d3ec:	d012      	beq.n	800d414 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 800d3ee:	b9d0      	cbnz	r0, 800d426 <LmHandlerNvmDataStore+0x62>
 800d3f0:	4b10      	ldr	r3, [pc, #64]	; (800d434 <LmHandlerNvmDataStore+0x70>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	b1cb      	cbz	r3, 800d42c <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 800d3f8:	2327      	movs	r3, #39	; 0x27
 800d3fa:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800d3fe:	4668      	mov	r0, sp
 800d400:	f002 ff8c 	bl	801031c <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 800d404:	4b0b      	ldr	r3, [pc, #44]	; (800d434 <LmHandlerNvmDataStore+0x70>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	695b      	ldr	r3, [r3, #20]
 800d40a:	f44f 61bd 	mov.w	r1, #1512	; 0x5e8
 800d40e:	9801      	ldr	r0, [sp, #4]
 800d410:	4798      	blx	r3
 800d412:	e001      	b.n	800d418 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800d414:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800d418:	f004 fefc 	bl	8012214 <NvmDataMgmtStoreEnd>
 800d41c:	2800      	cmp	r0, #0
 800d41e:	d0d7      	beq.n	800d3d0 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d420:	f04f 34ff 	mov.w	r4, #4294967295
 800d424:	e7db      	b.n	800d3de <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800d426:	f04f 34ff 	mov.w	r4, #4294967295
 800d42a:	e7f5      	b.n	800d418 <LmHandlerNvmDataStore+0x54>
 800d42c:	f04f 34ff 	mov.w	r4, #4294967295
 800d430:	e7f2      	b.n	800d418 <LmHandlerNvmDataStore+0x54>
 800d432:	bf00      	nop
 800d434:	200011a4 	.word	0x200011a4

0800d438 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 800d438:	4b01      	ldr	r3, [pc, #4]	; (800d440 <LmhpComplianceIsInitialized+0x8>)
 800d43a:	7818      	ldrb	r0, [r3, #0]
 800d43c:	4770      	bx	lr
 800d43e:	bf00      	nop
 800d440:	20001210 	.word	0x20001210

0800d444 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 800d444:	4b01      	ldr	r3, [pc, #4]	; (800d44c <LmhpComplianceIsTxPending+0x8>)
 800d446:	7858      	ldrb	r0, [r3, #1]
 800d448:	4770      	bx	lr
 800d44a:	bf00      	nop
 800d44c:	20001210 	.word	0x20001210

0800d450 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800d450:	4770      	bx	lr

0800d452 <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 800d452:	4770      	bx	lr

0800d454 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 800d454:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 800d456:	4b05      	ldr	r3, [pc, #20]	; (800d46c <OnProcessTimer+0x18>)
 800d458:	7a9b      	ldrb	r3, [r3, #10]
 800d45a:	b113      	cbz	r3, 800d462 <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 800d45c:	4b03      	ldr	r3, [pc, #12]	; (800d46c <OnProcessTimer+0x18>)
 800d45e:	2201      	movs	r2, #1
 800d460:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 800d462:	4b03      	ldr	r3, [pc, #12]	; (800d470 <OnProcessTimer+0x1c>)
 800d464:	695b      	ldr	r3, [r3, #20]
 800d466:	b103      	cbz	r3, 800d46a <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 800d468:	4798      	blx	r3
    }
}
 800d46a:	bd08      	pop	{r3, pc}
 800d46c:	20001210 	.word	0x20001210
 800d470:	20000118 	.word	0x20000118

0800d474 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 800d474:	4b8c      	ldr	r3, [pc, #560]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	f000 8205 	beq.w	800d888 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d47e:	78c3      	ldrb	r3, [r0, #3]
 800d480:	b90b      	cbnz	r3, 800d486 <LmhpComplianceOnMcpsIndication+0x12>
 800d482:	7b83      	ldrb	r3, [r0, #14]
 800d484:	b11b      	cbz	r3, 800d48e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 800d486:	4a88      	ldr	r2, [pc, #544]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d488:	8a13      	ldrh	r3, [r2, #16]
 800d48a:	3301      	adds	r3, #1
 800d48c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 800d48e:	7b43      	ldrb	r3, [r0, #13]
 800d490:	2b00      	cmp	r3, #0
 800d492:	f000 81f9 	beq.w	800d888 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d496:	78c3      	ldrb	r3, [r0, #3]
 800d498:	2be0      	cmp	r3, #224	; 0xe0
 800d49a:	f040 81f5 	bne.w	800d888 <LmhpComplianceOnMcpsIndication+0x414>
{
 800d49e:	b570      	push	{r4, r5, r6, lr}
 800d4a0:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 800d4a2:	4b81      	ldr	r3, [pc, #516]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d4a8:	6884      	ldr	r4, [r0, #8]
 800d4aa:	7823      	ldrb	r3, [r4, #0]
 800d4ac:	2b7f      	cmp	r3, #127	; 0x7f
 800d4ae:	f200 8093 	bhi.w	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
 800d4b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d4b6:	0080      	.short	0x0080
 800d4b8:	00a2009d 	.word	0x00a2009d
 800d4bc:	00b200aa 	.word	0x00b200aa
 800d4c0:	00c600bf 	.word	0x00c600bf
 800d4c4:	00f000df 	.word	0x00f000df
 800d4c8:	0131011d 	.word	0x0131011d
 800d4cc:	00910091 	.word	0x00910091
 800d4d0:	00910091 	.word	0x00910091
 800d4d4:	00910091 	.word	0x00910091
 800d4d8:	00910091 	.word	0x00910091
 800d4dc:	00910091 	.word	0x00910091
 800d4e0:	00910091 	.word	0x00910091
 800d4e4:	00910091 	.word	0x00910091
 800d4e8:	00910091 	.word	0x00910091
 800d4ec:	00910091 	.word	0x00910091
 800d4f0:	00910091 	.word	0x00910091
 800d4f4:	01350091 	.word	0x01350091
 800d4f8:	0140013c 	.word	0x0140013c
 800d4fc:	00910091 	.word	0x00910091
 800d500:	00910091 	.word	0x00910091
 800d504:	00910091 	.word	0x00910091
 800d508:	00910091 	.word	0x00910091
 800d50c:	00910091 	.word	0x00910091
 800d510:	00910091 	.word	0x00910091
 800d514:	00910091 	.word	0x00910091
 800d518:	00910091 	.word	0x00910091
 800d51c:	00910091 	.word	0x00910091
 800d520:	00910091 	.word	0x00910091
 800d524:	00910091 	.word	0x00910091
 800d528:	00910091 	.word	0x00910091
 800d52c:	00910091 	.word	0x00910091
 800d530:	00910091 	.word	0x00910091
 800d534:	00910091 	.word	0x00910091
 800d538:	00910091 	.word	0x00910091
 800d53c:	00910091 	.word	0x00910091
 800d540:	00910091 	.word	0x00910091
 800d544:	00910091 	.word	0x00910091
 800d548:	00910091 	.word	0x00910091
 800d54c:	00910091 	.word	0x00910091
 800d550:	00910091 	.word	0x00910091
 800d554:	00910091 	.word	0x00910091
 800d558:	00910091 	.word	0x00910091
 800d55c:	00910091 	.word	0x00910091
 800d560:	00910091 	.word	0x00910091
 800d564:	00910091 	.word	0x00910091
 800d568:	00910091 	.word	0x00910091
 800d56c:	00910091 	.word	0x00910091
 800d570:	00910091 	.word	0x00910091
 800d574:	00910091 	.word	0x00910091
 800d578:	00910091 	.word	0x00910091
 800d57c:	00910091 	.word	0x00910091
 800d580:	00910091 	.word	0x00910091
 800d584:	00910091 	.word	0x00910091
 800d588:	00910091 	.word	0x00910091
 800d58c:	00910091 	.word	0x00910091
 800d590:	00910091 	.word	0x00910091
 800d594:	00910091 	.word	0x00910091
 800d598:	00910091 	.word	0x00910091
 800d59c:	00910091 	.word	0x00910091
 800d5a0:	00910091 	.word	0x00910091
 800d5a4:	00910091 	.word	0x00910091
 800d5a8:	00910091 	.word	0x00910091
 800d5ac:	00910091 	.word	0x00910091
 800d5b0:	016c014b 	.word	0x016c014b
 800d5b4:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d5b6:	4b3c      	ldr	r3, [pc, #240]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d5b8:	68da      	ldr	r2, [r3, #12]
 800d5ba:	2101      	movs	r1, #1
 800d5bc:	7299      	strb	r1, [r3, #10]
 800d5be:	2000      	movs	r0, #0
 800d5c0:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d5c2:	68d8      	ldr	r0, [r3, #12]
 800d5c4:	7a9a      	ldrb	r2, [r3, #10]
 800d5c6:	1854      	adds	r4, r2, r1
 800d5c8:	729c      	strb	r4, [r3, #10]
 800d5ca:	2406      	movs	r4, #6
 800d5cc:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d5ce:	68d8      	ldr	r0, [r3, #12]
 800d5d0:	7a9a      	ldrb	r2, [r3, #10]
 800d5d2:	1854      	adds	r4, r2, r1
 800d5d4:	729c      	strb	r4, [r3, #10]
 800d5d6:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 800d5d8:	4b33      	ldr	r3, [pc, #204]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d5da:	7a9b      	ldrb	r3, [r3, #10]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	f000 814c 	beq.w	800d87a <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 800d5e2:	4b32      	ldr	r3, [pc, #200]	; (800d6ac <LmhpComplianceOnMcpsIndication+0x238>)
 800d5e4:	7a5b      	ldrb	r3, [r3, #9]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	f000 813d 	beq.w	800d866 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 800d5ec:	b016      	add	sp, #88	; 0x58
 800d5ee:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 800d5f0:	4b2d      	ldr	r3, [pc, #180]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800d5f8:	e7ee      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 800d5fa:	4b2d      	ldr	r3, [pc, #180]	; (800d6b0 <LmhpComplianceOnMcpsIndication+0x23c>)
 800d5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d0ea      	beq.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d602:	2101      	movs	r1, #1
 800d604:	2002      	movs	r0, #2
 800d606:	4798      	blx	r3
 800d608:	e7e6      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d60a:	7862      	ldrb	r2, [r4, #1]
 800d60c:	4b26      	ldr	r3, [pc, #152]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d60e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 800d612:	2201      	movs	r2, #1
 800d614:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 800d618:	e7de      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 800d61a:	2304      	movs	r3, #4
 800d61c:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d620:	7863      	ldrb	r3, [r4, #1]
 800d622:	3b00      	subs	r3, #0
 800d624:	bf18      	it	ne
 800d626:	2301      	movne	r3, #1
 800d628:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d62c:	a801      	add	r0, sp, #4
 800d62e:	f003 f803 	bl	8010638 <LoRaMacMibSetRequestConfirm>
                break;
 800d632:	e7d1      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d634:	7860      	ldrb	r0, [r4, #1]
 800d636:	3800      	subs	r0, #0
 800d638:	bf18      	it	ne
 800d63a:	2001      	movne	r0, #1
 800d63c:	f003 fcbe 	bl	8010fbc <LoRaMacTestSetDutyCycleOn>
                break;
 800d640:	e7ca      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d642:	ad01      	add	r5, sp, #4
 800d644:	4e1b      	ldr	r6, [pc, #108]	; (800d6b4 <LmhpComplianceOnMcpsIndication+0x240>)
 800d646:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d64a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d64c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d64e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800d652:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d656:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d658:	2b0a      	cmp	r3, #10
 800d65a:	d8bd      	bhi.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d65c:	4a16      	ldr	r2, [pc, #88]	; (800d6b8 <LmhpComplianceOnMcpsIndication+0x244>)
 800d65e:	6812      	ldr	r2, [r2, #0]
 800d660:	6852      	ldr	r2, [r2, #4]
 800d662:	2a00      	cmp	r2, #0
 800d664:	d0b8      	beq.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d666:	a916      	add	r1, sp, #88	; 0x58
 800d668:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800d66c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 800d670:	4790      	blx	r2
                break;
 800d672:	e7b1      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d674:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d676:	1e53      	subs	r3, r2, #1
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b01      	cmp	r3, #1
 800d67c:	d8ac      	bhi.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d67e:	1e50      	subs	r0, r2, #1
 800d680:	bf18      	it	ne
 800d682:	2001      	movne	r0, #1
 800d684:	4b08      	ldr	r3, [pc, #32]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d686:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d688:	4b0b      	ldr	r3, [pc, #44]	; (800d6b8 <LmhpComplianceOnMcpsIndication+0x244>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	689b      	ldr	r3, [r3, #8]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d0a2      	beq.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d692:	4798      	blx	r3
 800d694:	e7a0      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d696:	4b04      	ldr	r3, [pc, #16]	; (800d6a8 <LmhpComplianceOnMcpsIndication+0x234>)
 800d698:	68da      	ldr	r2, [r3, #12]
 800d69a:	2101      	movs	r1, #1
 800d69c:	7299      	strb	r1, [r3, #10]
 800d69e:	2308      	movs	r3, #8
 800d6a0:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d6a2:	460b      	mov	r3, r1
 800d6a4:	e01b      	b.n	800d6de <LmhpComplianceOnMcpsIndication+0x26a>
 800d6a6:	bf00      	nop
 800d6a8:	20001210 	.word	0x20001210
 800d6ac:	20001248 	.word	0x20001248
 800d6b0:	20000118 	.word	0x20000118
 800d6b4:	0801c1d4 	.word	0x0801c1d4
 800d6b8:	2000120c 	.word	0x2000120c
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d6bc:	6882      	ldr	r2, [r0, #8]
 800d6be:	f101 0c01 	add.w	ip, r1, #1
 800d6c2:	5c52      	ldrb	r2, [r2, r1]
 800d6c4:	4971      	ldr	r1, [pc, #452]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d6c6:	68cd      	ldr	r5, [r1, #12]
 800d6c8:	7a8c      	ldrb	r4, [r1, #10]
 800d6ca:	f104 0e01 	add.w	lr, r4, #1
 800d6ce:	f881 e00a 	strb.w	lr, [r1, #10]
 800d6d2:	3201      	adds	r2, #1
 800d6d4:	552a      	strb	r2, [r5, r4]
                     i++ )
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d6da:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d6de:	4a6b      	ldr	r2, [pc, #428]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d6e0:	7a52      	ldrb	r2, [r2, #9]
 800d6e2:	7b04      	ldrb	r4, [r0, #12]
 800d6e4:	42a2      	cmp	r2, r4
 800d6e6:	bf28      	it	cs
 800d6e8:	4622      	movcs	r2, r4
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d8e6      	bhi.n	800d6bc <LmhpComplianceOnMcpsIndication+0x248>
 800d6ee:	e773      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d6f0:	4b66      	ldr	r3, [pc, #408]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d6f2:	68da      	ldr	r2, [r3, #12]
 800d6f4:	2101      	movs	r1, #1
 800d6f6:	7299      	strb	r1, [r3, #10]
 800d6f8:	2109      	movs	r1, #9
 800d6fa:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d6fc:	8a18      	ldrh	r0, [r3, #16]
 800d6fe:	68d9      	ldr	r1, [r3, #12]
 800d700:	7a9a      	ldrb	r2, [r3, #10]
 800d702:	1c54      	adds	r4, r2, #1
 800d704:	729c      	strb	r4, [r3, #10]
 800d706:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d708:	8a1a      	ldrh	r2, [r3, #16]
 800d70a:	68d8      	ldr	r0, [r3, #12]
 800d70c:	7a99      	ldrb	r1, [r3, #10]
 800d70e:	1c4c      	adds	r4, r1, #1
 800d710:	729c      	strb	r4, [r3, #10]
 800d712:	0a13      	lsrs	r3, r2, #8
 800d714:	5443      	strb	r3, [r0, r1]
                break;
 800d716:	e75f      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 800d718:	4b5c      	ldr	r3, [pc, #368]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d71a:	2200      	movs	r2, #0
 800d71c:	821a      	strh	r2, [r3, #16]
                break;
 800d71e:	e75b      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 800d720:	2305      	movs	r3, #5
 800d722:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 800d726:	a801      	add	r0, sp, #4
 800d728:	f003 fa56 	bl	8010bd8 <LoRaMacMlmeRequest>
                break;
 800d72c:	e754      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 800d72e:	4b58      	ldr	r3, [pc, #352]	; (800d890 <LmhpComplianceOnMcpsIndication+0x41c>)
 800d730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d732:	4798      	blx	r3
                break;
 800d734:	e750      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d736:	7860      	ldrb	r0, [r4, #1]
 800d738:	4b54      	ldr	r3, [pc, #336]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d73a:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d73c:	4b55      	ldr	r3, [pc, #340]	; (800d894 <LmhpComplianceOnMcpsIndication+0x420>)
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	68db      	ldr	r3, [r3, #12]
 800d742:	2b00      	cmp	r3, #0
 800d744:	f43f af48 	beq.w	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d748:	4798      	blx	r3
 800d74a:	e745      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 800d74c:	7b03      	ldrb	r3, [r0, #12]
 800d74e:	2b07      	cmp	r3, #7
 800d750:	f47f af42 	bne.w	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 800d754:	2306      	movs	r3, #6
 800d756:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d75a:	7863      	ldrb	r3, [r4, #1]
 800d75c:	78a2      	ldrb	r2, [r4, #2]
 800d75e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 800d762:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d766:	78e3      	ldrb	r3, [r4, #3]
 800d768:	7922      	ldrb	r2, [r4, #4]
 800d76a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d76e:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d774:	2264      	movs	r2, #100	; 0x64
 800d776:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 800d77a:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d77c:	6883      	ldr	r3, [r0, #8]
 800d77e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800d782:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 800d786:	a801      	add	r0, sp, #4
 800d788:	f003 fa26 	bl	8010bd8 <LoRaMacMlmeRequest>
                break;
 800d78c:	e724      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d78e:	233b      	movs	r3, #59	; 0x3b
 800d790:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 800d794:	2300      	movs	r3, #0
 800d796:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 800d79a:	a80c      	add	r0, sp, #48	; 0x30
 800d79c:	f002 ff4c 	bl	8010638 <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 800d7a0:	4b3a      	ldr	r3, [pc, #232]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d7a2:	2201      	movs	r2, #1
 800d7a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 800d7a8:	e716      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 800d7aa:	232a      	movs	r3, #42	; 0x2a
 800d7ac:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 800d7b0:	a801      	add	r0, sp, #4
 800d7b2:	f002 fdb3 	bl	801031c <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d7b6:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d7b8:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d7ba:	4b34      	ldr	r3, [pc, #208]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d7bc:	68dc      	ldr	r4, [r3, #12]
 800d7be:	7a98      	ldrb	r0, [r3, #10]
 800d7c0:	1c45      	adds	r5, r0, #1
 800d7c2:	729d      	strb	r5, [r3, #10]
 800d7c4:	257f      	movs	r5, #127	; 0x7f
 800d7c6:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d7c8:	4832      	ldr	r0, [pc, #200]	; (800d894 <LmhpComplianceOnMcpsIndication+0x420>)
 800d7ca:	6800      	ldr	r0, [r0, #0]
 800d7cc:	68dd      	ldr	r5, [r3, #12]
 800d7ce:	7a9c      	ldrb	r4, [r3, #10]
 800d7d0:	1c66      	adds	r6, r4, #1
 800d7d2:	729e      	strb	r6, [r3, #10]
 800d7d4:	78c6      	ldrb	r6, [r0, #3]
 800d7d6:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d7d8:	68dd      	ldr	r5, [r3, #12]
 800d7da:	7a9c      	ldrb	r4, [r3, #10]
 800d7dc:	1c66      	adds	r6, r4, #1
 800d7de:	729e      	strb	r6, [r3, #10]
 800d7e0:	7886      	ldrb	r6, [r0, #2]
 800d7e2:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d7e4:	68dd      	ldr	r5, [r3, #12]
 800d7e6:	7a9c      	ldrb	r4, [r3, #10]
 800d7e8:	1c66      	adds	r6, r4, #1
 800d7ea:	729e      	strb	r6, [r3, #10]
 800d7ec:	7846      	ldrb	r6, [r0, #1]
 800d7ee:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d7f0:	68dd      	ldr	r5, [r3, #12]
 800d7f2:	7a9c      	ldrb	r4, [r3, #10]
 800d7f4:	1c66      	adds	r6, r4, #1
 800d7f6:	729e      	strb	r6, [r3, #10]
 800d7f8:	7800      	ldrb	r0, [r0, #0]
 800d7fa:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d7fc:	68dc      	ldr	r4, [r3, #12]
 800d7fe:	7a98      	ldrb	r0, [r3, #10]
 800d800:	1c45      	adds	r5, r0, #1
 800d802:	729d      	strb	r5, [r3, #10]
 800d804:	f3c1 6507 	ubfx	r5, r1, #24, #8
 800d808:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d80a:	68dc      	ldr	r4, [r3, #12]
 800d80c:	7a98      	ldrb	r0, [r3, #10]
 800d80e:	1c45      	adds	r5, r0, #1
 800d810:	729d      	strb	r5, [r3, #10]
 800d812:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800d816:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d818:	68dc      	ldr	r4, [r3, #12]
 800d81a:	7a98      	ldrb	r0, [r3, #10]
 800d81c:	1c45      	adds	r5, r0, #1
 800d81e:	729d      	strb	r5, [r3, #10]
 800d820:	f3c1 2507 	ubfx	r5, r1, #8, #8
 800d824:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d826:	68dc      	ldr	r4, [r3, #12]
 800d828:	7a98      	ldrb	r0, [r3, #10]
 800d82a:	1c45      	adds	r5, r0, #1
 800d82c:	729d      	strb	r5, [r3, #10]
 800d82e:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d830:	68d8      	ldr	r0, [r3, #12]
 800d832:	7a99      	ldrb	r1, [r3, #10]
 800d834:	1c4c      	adds	r4, r1, #1
 800d836:	729c      	strb	r4, [r3, #10]
 800d838:	f3c2 6407 	ubfx	r4, r2, #24, #8
 800d83c:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d83e:	68d8      	ldr	r0, [r3, #12]
 800d840:	7a99      	ldrb	r1, [r3, #10]
 800d842:	1c4c      	adds	r4, r1, #1
 800d844:	729c      	strb	r4, [r3, #10]
 800d846:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d84a:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d84c:	68d8      	ldr	r0, [r3, #12]
 800d84e:	7a99      	ldrb	r1, [r3, #10]
 800d850:	1c4c      	adds	r4, r1, #1
 800d852:	729c      	strb	r4, [r3, #10]
 800d854:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800d858:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d85a:	68d8      	ldr	r0, [r3, #12]
 800d85c:	7a99      	ldrb	r1, [r3, #10]
 800d85e:	1c4c      	adds	r4, r1, #1
 800d860:	729c      	strb	r4, [r3, #10]
 800d862:	5442      	strb	r2, [r0, r1]
                break;
 800d864:	e6b8      	b.n	800d5d8 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 800d866:	4c0c      	ldr	r4, [pc, #48]	; (800d898 <LmhpComplianceOnMcpsIndication+0x424>)
 800d868:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800d86c:	4620      	mov	r0, r4
 800d86e:	f009 fa7b 	bl	8016d68 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 800d872:	4620      	mov	r0, r4
 800d874:	f009 fa32 	bl	8016cdc <UTIL_TIMER_Start>
 800d878:	e6b8      	b.n	800d5ec <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 800d87a:	4807      	ldr	r0, [pc, #28]	; (800d898 <LmhpComplianceOnMcpsIndication+0x424>)
 800d87c:	f009 f9d4 	bl	8016c28 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800d880:	4b02      	ldr	r3, [pc, #8]	; (800d88c <LmhpComplianceOnMcpsIndication+0x418>)
 800d882:	2200      	movs	r2, #0
 800d884:	705a      	strb	r2, [r3, #1]
 800d886:	e6b1      	b.n	800d5ec <LmhpComplianceOnMcpsIndication+0x178>
 800d888:	4770      	bx	lr
 800d88a:	bf00      	nop
 800d88c:	20001210 	.word	0x20001210
 800d890:	20000118 	.word	0x20000118
 800d894:	2000120c 	.word	0x2000120c
 800d898:	20001248 	.word	0x20001248

0800d89c <LmhpComplianceProcess>:
{
 800d89c:	b530      	push	{r4, r5, lr}
 800d89e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 800d8a0:	4b27      	ldr	r3, [pc, #156]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d8a2:	785b      	ldrb	r3, [r3, #1]
 800d8a4:	b993      	cbnz	r3, 800d8cc <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800d8a6:	4b26      	ldr	r3, [pc, #152]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d8a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d13d      	bne.n	800d92c <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 800d8b0:	4b23      	ldr	r3, [pc, #140]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d8b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8b6:	b13b      	cbz	r3, 800d8c8 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 800d8b8:	4b21      	ldr	r3, [pc, #132]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 800d8c0:	4b20      	ldr	r3, [pc, #128]	; (800d944 <LmhpComplianceProcess+0xa8>)
 800d8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8c4:	b103      	cbz	r3, 800d8c8 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 800d8c6:	4798      	blx	r3
}
 800d8c8:	b003      	add	sp, #12
 800d8ca:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 800d8cc:	f009 f96c 	bl	8016ba8 <UTIL_TIMER_GetCurrentTime>
 800d8d0:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800d8d2:	4b1b      	ldr	r3, [pc, #108]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d8d4:	685d      	ldr	r5, [r3, #4]
 800d8d6:	f7ff f9a3 	bl	800cc20 <LmHandlerGetDutyCycleWaitTime>
 800d8da:	4405      	add	r5, r0
 800d8dc:	42a5      	cmp	r5, r4
 800d8de:	d2e7      	bcs.n	800d8b0 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 800d8e0:	4b17      	ldr	r3, [pc, #92]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d8e2:	7a9b      	ldrb	r3, [r3, #10]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d0e3      	beq.n	800d8b0 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 800d8e8:	22e0      	movs	r2, #224	; 0xe0
 800d8ea:	f88d 2000 	strb.w	r2, [sp]
 800d8ee:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800d8f2:	4b13      	ldr	r3, [pc, #76]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d8f4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 800d8f6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800d8f8:	2201      	movs	r2, #1
 800d8fa:	7a19      	ldrb	r1, [r3, #8]
 800d8fc:	4668      	mov	r0, sp
 800d8fe:	f7ff f9bd 	bl	800cc7c <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 800d902:	b110      	cbz	r0, 800d90a <LmhpComplianceProcess+0x6e>
 800d904:	f110 0f07 	cmn.w	r0, #7
 800d908:	d106      	bne.n	800d918 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 800d90a:	4b0d      	ldr	r3, [pc, #52]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d90c:	2200      	movs	r2, #0
 800d90e:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800d910:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 800d912:	4b0b      	ldr	r3, [pc, #44]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d914:	605c      	str	r4, [r3, #4]
 800d916:	e7cb      	b.n	800d8b0 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 800d918:	4d0b      	ldr	r5, [pc, #44]	; (800d948 <LmhpComplianceProcess+0xac>)
 800d91a:	f240 51dc 	movw	r1, #1500	; 0x5dc
 800d91e:	4628      	mov	r0, r5
 800d920:	f009 fa22 	bl	8016d68 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 800d924:	4628      	mov	r0, r5
 800d926:	f009 f9d9 	bl	8016cdc <UTIL_TIMER_Start>
 800d92a:	e7f2      	b.n	800d912 <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 800d92c:	4b04      	ldr	r3, [pc, #16]	; (800d940 <LmhpComplianceProcess+0xa4>)
 800d92e:	2200      	movs	r2, #0
 800d930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d934:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 800d938:	f7ff fa4a 	bl	800cdd0 <LmHandlerRequestClass>
 800d93c:	e7b8      	b.n	800d8b0 <LmhpComplianceProcess+0x14>
 800d93e:	bf00      	nop
 800d940:	20001210 	.word	0x20001210
 800d944:	20000118 	.word	0x20000118
 800d948:	20001248 	.word	0x20001248

0800d94c <LmhpComplianceInit>:
{
 800d94c:	b530      	push	{r4, r5, lr}
 800d94e:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800d950:	b188      	cbz	r0, 800d976 <LmhpComplianceInit+0x2a>
 800d952:	4603      	mov	r3, r0
 800d954:	b179      	cbz	r1, 800d976 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 800d956:	4813      	ldr	r0, [pc, #76]	; (800d9a4 <LmhpComplianceInit+0x58>)
 800d958:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800d95a:	4b13      	ldr	r3, [pc, #76]	; (800d9a8 <LmhpComplianceInit+0x5c>)
 800d95c:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800d95e:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 800d960:	2201      	movs	r2, #1
 800d962:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800d964:	2200      	movs	r2, #0
 800d966:	9200      	str	r2, [sp, #0]
 800d968:	4b10      	ldr	r3, [pc, #64]	; (800d9ac <LmhpComplianceInit+0x60>)
 800d96a:	f04f 31ff 	mov.w	r1, #4294967295
 800d96e:	4810      	ldr	r0, [pc, #64]	; (800d9b0 <LmhpComplianceInit+0x64>)
 800d970:	f009 f8fc 	bl	8016b6c <UTIL_TIMER_Create>
 800d974:	e004      	b.n	800d980 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 800d976:	2300      	movs	r3, #0
 800d978:	4a0a      	ldr	r2, [pc, #40]	; (800d9a4 <LmhpComplianceInit+0x58>)
 800d97a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800d97c:	4a0a      	ldr	r2, [pc, #40]	; (800d9a8 <LmhpComplianceInit+0x5c>)
 800d97e:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 800d980:	4c09      	ldr	r4, [pc, #36]	; (800d9a8 <LmhpComplianceInit+0x5c>)
 800d982:	2500      	movs	r5, #0
 800d984:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800d986:	2220      	movs	r2, #32
 800d988:	4629      	mov	r1, r5
 800d98a:	f104 0014 	add.w	r0, r4, #20
 800d98e:	f006 ff34 	bl	80147fa <memset1>
    ComplianceTestState.IsTxPending = false;
 800d992:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800d994:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800d996:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800d99a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800d99e:	b003      	add	sp, #12
 800d9a0:	bd30      	pop	{r4, r5, pc}
 800d9a2:	bf00      	nop
 800d9a4:	2000120c 	.word	0x2000120c
 800d9a8:	20001210 	.word	0x20001210
 800d9ac:	0800d455 	.word	0x0800d455
 800d9b0:	20001248 	.word	0x20001248

0800d9b4 <LmhpCompliancePackageFactory>:
}
 800d9b4:	4800      	ldr	r0, [pc, #0]	; (800d9b8 <LmhpCompliancePackageFactory+0x4>)
 800d9b6:	4770      	bx	lr
 800d9b8:	20000118 	.word	0x20000118

0800d9bc <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800d9bc:	2000      	movs	r0, #0
 800d9be:	4770      	bx	lr

0800d9c0 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 800d9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800d9c4:	4770      	bx	lr
	...

0800d9c8 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800d9c8:	4b07      	ldr	r3, [pc, #28]	; (800d9e8 <UpdateRxSlotIdleState+0x20>)
 800d9ca:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800d9ce:	2b02      	cmp	r3, #2
 800d9d0:	d004      	beq.n	800d9dc <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800d9d2:	4b06      	ldr	r3, [pc, #24]	; (800d9ec <UpdateRxSlotIdleState+0x24>)
 800d9d4:	2206      	movs	r2, #6
 800d9d6:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 800d9da:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800d9dc:	4b03      	ldr	r3, [pc, #12]	; (800d9ec <UpdateRxSlotIdleState+0x24>)
 800d9de:	2202      	movs	r2, #2
 800d9e0:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	20008000 	.word	0x20008000
 800d9ec:	20001264 	.word	0x20001264

0800d9f0 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 800d9f0:	4b01      	ldr	r3, [pc, #4]	; (800d9f8 <LoRaMacEnableRequests+0x8>)
 800d9f2:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 800d9f6:	4770      	bx	lr
 800d9f8:	20001264 	.word	0x20001264

0800d9fc <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 800d9fc:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800d9fe:	4b15      	ldr	r3, [pc, #84]	; (800da54 <LoRaMacHandleIndicationEvents+0x58>)
 800da00:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800da04:	f013 0f08 	tst.w	r3, #8
 800da08:	d00e      	beq.n	800da28 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800da0a:	4812      	ldr	r0, [pc, #72]	; (800da54 <LoRaMacHandleIndicationEvents+0x58>)
 800da0c:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800da10:	f36f 03c3 	bfc	r3, #3, #1
 800da14:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800da18:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800da22:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 800da26:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800da28:	4b0a      	ldr	r3, [pc, #40]	; (800da54 <LoRaMacHandleIndicationEvents+0x58>)
 800da2a:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800da2e:	f013 0f02 	tst.w	r3, #2
 800da32:	d00e      	beq.n	800da52 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800da34:	4807      	ldr	r0, [pc, #28]	; (800da54 <LoRaMacHandleIndicationEvents+0x58>)
 800da36:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 800da3a:	f36f 0341 	bfc	r3, #1, #1
 800da3e:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800da42:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 800da4c:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 800da50:	4798      	blx	r3
    }
}
 800da52:	bd08      	pop	{r3, pc}
 800da54:	20001264 	.word	0x20001264

0800da58 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 800da58:	b110      	cbz	r0, 800da60 <CheckForMinimumAbpDatarate+0x8>
 800da5a:	2901      	cmp	r1, #1
 800da5c:	d001      	beq.n	800da62 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800da5e:	2000      	movs	r0, #0
}
 800da60:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800da62:	2a00      	cmp	r2, #0
 800da64:	d0fc      	beq.n	800da60 <CheckForMinimumAbpDatarate+0x8>
    return false;
 800da66:	2000      	movs	r0, #0
 800da68:	4770      	bx	lr
	...

0800da6c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800da6c:	4b07      	ldr	r3, [pc, #28]	; (800da8c <LoRaMacCheckForRxAbort+0x20>)
 800da6e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800da72:	f013 0f80 	tst.w	r3, #128	; 0x80
 800da76:	d008      	beq.n	800da8a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800da78:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800da7c:	4a03      	ldr	r2, [pc, #12]	; (800da8c <LoRaMacCheckForRxAbort+0x20>)
 800da7e:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800da82:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 800da86:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800da8a:	4770      	bx	lr
 800da8c:	20001264 	.word	0x20001264

0800da90 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 800da90:	4b06      	ldr	r3, [pc, #24]	; (800daac <CalculateBackOff+0x1c>)
 800da92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da94:	b94b      	cbnz	r3, 800daaa <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 800da96:	4a05      	ldr	r2, [pc, #20]	; (800daac <CalculateBackOff+0x1c>)
 800da98:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 800da9c:	4904      	ldr	r1, [pc, #16]	; (800dab0 <CalculateBackOff+0x20>)
 800da9e:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 800daa2:	3b01      	subs	r3, #1
 800daa4:	fb01 f303 	mul.w	r3, r1, r3
 800daa8:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800daaa:	4770      	bx	lr
 800daac:	20008000 	.word	0x20008000
 800dab0:	20001264 	.word	0x20001264

0800dab4 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 800dab4:	b508      	push	{r3, lr}
 800dab6:	4684      	mov	ip, r0
 800dab8:	4608      	mov	r0, r1
 800daba:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800dabc:	4b06      	ldr	r3, [pc, #24]	; (800dad8 <SetTxContinuousWave+0x24>)
 800dabe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dac0:	4662      	mov	r2, ip
 800dac2:	b249      	sxtb	r1, r1
 800dac4:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800dac6:	4a05      	ldr	r2, [pc, #20]	; (800dadc <SetTxContinuousWave+0x28>)
 800dac8:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800dacc:	f043 0302 	orr.w	r3, r3, #2
 800dad0:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800dad4:	2000      	movs	r0, #0
 800dad6:	bd08      	pop	{r3, pc}
 800dad8:	0801e9c8 	.word	0x0801e9c8
 800dadc:	20001264 	.word	0x20001264

0800dae0 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 800dae0:	4602      	mov	r2, r0
 800dae2:	b1f8      	cbz	r0, 800db24 <DetermineFrameType+0x44>
 800dae4:	b301      	cbz	r1, 800db28 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800dae6:	7b03      	ldrb	r3, [r0, #12]
 800dae8:	f013 030f 	ands.w	r3, r3, #15
 800daec:	d005      	beq.n	800dafa <DetermineFrameType+0x1a>
 800daee:	f890 0020 	ldrb.w	r0, [r0, #32]
 800daf2:	b110      	cbz	r0, 800dafa <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 800daf4:	2000      	movs	r0, #0
 800daf6:	7008      	strb	r0, [r1, #0]
 800daf8:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 800dafa:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 800dafe:	b910      	cbnz	r0, 800db06 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 800db00:	2301      	movs	r3, #1
 800db02:	700b      	strb	r3, [r1, #0]
 800db04:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800db06:	b92b      	cbnz	r3, 800db14 <DetermineFrameType+0x34>
 800db08:	f892 0020 	ldrb.w	r0, [r2, #32]
 800db0c:	b910      	cbnz	r0, 800db14 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 800db0e:	2302      	movs	r3, #2
 800db10:	700b      	strb	r3, [r1, #0]
 800db12:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 800db14:	b953      	cbnz	r3, 800db2c <DetermineFrameType+0x4c>
 800db16:	f892 2020 	ldrb.w	r2, [r2, #32]
 800db1a:	b14a      	cbz	r2, 800db30 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 800db1c:	2203      	movs	r2, #3
 800db1e:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 800db20:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 800db22:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800db24:	2003      	movs	r0, #3
 800db26:	4770      	bx	lr
 800db28:	2003      	movs	r0, #3
 800db2a:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 800db2c:	2018      	movs	r0, #24
 800db2e:	4770      	bx	lr
 800db30:	2018      	movs	r0, #24
}
 800db32:	4770      	bx	lr

0800db34 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 800db34:	4288      	cmp	r0, r1
 800db36:	d201      	bcs.n	800db3c <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 800db38:	2000      	movs	r0, #0
 800db3a:	4770      	bx	lr
        return true;
 800db3c:	2001      	movs	r0, #1
}
 800db3e:	4770      	bx	lr

0800db40 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 800db40:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800db42:	4b0b      	ldr	r3, [pc, #44]	; (800db70 <CheckRetransUnconfirmedUplink+0x30>)
 800db44:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800db48:	4b0a      	ldr	r3, [pc, #40]	; (800db74 <CheckRetransUnconfirmedUplink+0x34>)
 800db4a:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800db4e:	f7ff fff1 	bl	800db34 <CheckRetrans>
 800db52:	b950      	cbnz	r0, 800db6a <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800db54:	4b07      	ldr	r3, [pc, #28]	; (800db74 <CheckRetransUnconfirmedUplink+0x34>)
 800db56:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800db5a:	f013 0f02 	tst.w	r3, #2
 800db5e:	d004      	beq.n	800db6a <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800db60:	4b04      	ldr	r3, [pc, #16]	; (800db74 <CheckRetransUnconfirmedUplink+0x34>)
 800db62:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800db66:	2b01      	cmp	r3, #1
 800db68:	d900      	bls.n	800db6c <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800db6a:	bd08      	pop	{r3, pc}
            return true;
 800db6c:	2001      	movs	r0, #1
 800db6e:	e7fc      	b.n	800db6a <CheckRetransUnconfirmedUplink+0x2a>
 800db70:	20008000 	.word	0x20008000
 800db74:	20001264 	.word	0x20001264

0800db78 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 800db78:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800db7a:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <CheckRetransConfirmedUplink+0x28>)
 800db7c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800db80:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <CheckRetransConfirmedUplink+0x2c>)
 800db82:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 800db86:	f7ff ffd5 	bl	800db34 <CheckRetrans>
 800db8a:	b940      	cbnz	r0, 800db9e <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800db8c:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <CheckRetransConfirmedUplink+0x2c>)
 800db8e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800db92:	f013 0f02 	tst.w	r3, #2
 800db96:	d002      	beq.n	800db9e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 800db98:	4b02      	ldr	r3, [pc, #8]	; (800dba4 <CheckRetransConfirmedUplink+0x2c>)
 800db9a:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800db9e:	bd08      	pop	{r3, pc}
 800dba0:	20008000 	.word	0x20008000
 800dba4:	20001264 	.word	0x20001264

0800dba8 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 800dba8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dbac:	d000      	beq.n	800dbb0 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800dbae:	3001      	adds	r0, #1
    }
    return counter;
}
 800dbb0:	4770      	bx	lr
	...

0800dbb4 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 800dbb4:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800dbb6:	4b12      	ldr	r3, [pc, #72]	; (800dc00 <StopRetransmission+0x4c>)
 800dbb8:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800dbbc:	f013 0f02 	tst.w	r3, #2
 800dbc0:	d004      	beq.n	800dbcc <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800dbc2:	4b0f      	ldr	r3, [pc, #60]	; (800dc00 <StopRetransmission+0x4c>)
 800dbc4:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d908      	bls.n	800dbde <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800dbcc:	4b0d      	ldr	r3, [pc, #52]	; (800dc04 <StopRetransmission+0x50>)
 800dbce:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800dbd2:	b123      	cbz	r3, 800dbde <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 800dbd4:	4c0b      	ldr	r4, [pc, #44]	; (800dc04 <StopRetransmission+0x50>)
 800dbd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800dbd8:	f7ff ffe6 	bl	800dba8 <IncreaseAdrAckCounter>
 800dbdc:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800dbde:	4b08      	ldr	r3, [pc, #32]	; (800dc00 <StopRetransmission+0x4c>)
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 800dbe6:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800dbea:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800dbee:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800dbf2:	f022 0202 	bic.w	r2, r2, #2
 800dbf6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 800dbfa:	2001      	movs	r0, #1
 800dbfc:	bd10      	pop	{r4, pc}
 800dbfe:	bf00      	nop
 800dc00:	20001264 	.word	0x20001264
 800dc04:	20008000 	.word	0x20008000

0800dc08 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 800dc08:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800dc0a:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <OnMacProcessNotify+0x14>)
 800dc0c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc10:	b113      	cbz	r3, 800dc18 <OnMacProcessNotify+0x10>
 800dc12:	695b      	ldr	r3, [r3, #20]
 800dc14:	b103      	cbz	r3, 800dc18 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800dc16:	4798      	blx	r3
    }
}
 800dc18:	bd08      	pop	{r3, pc}
 800dc1a:	bf00      	nop
 800dc1c:	20001264 	.word	0x20001264

0800dc20 <OnRadioRxError>:
{
 800dc20:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800dc22:	4a04      	ldr	r2, [pc, #16]	; (800dc34 <OnRadioRxError+0x14>)
 800dc24:	7813      	ldrb	r3, [r2, #0]
 800dc26:	f043 0304 	orr.w	r3, r3, #4
 800dc2a:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800dc2c:	f7ff ffec 	bl	800dc08 <OnMacProcessNotify>
}
 800dc30:	bd08      	pop	{r3, pc}
 800dc32:	bf00      	nop
 800dc34:	20001260 	.word	0x20001260

0800dc38 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 800dc38:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 800dc3a:	4b04      	ldr	r3, [pc, #16]	; (800dc4c <CallNvmDataChangeCallback+0x14>)
 800dc3c:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800dc40:	b113      	cbz	r3, 800dc48 <CallNvmDataChangeCallback+0x10>
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	b103      	cbz	r3, 800dc48 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 800dc46:	4798      	blx	r3
    }
}
 800dc48:	bd08      	pop	{r3, pc}
 800dc4a:	bf00      	nop
 800dc4c:	20001264 	.word	0x20001264

0800dc50 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800dc50:	4b04      	ldr	r3, [pc, #16]	; (800dc64 <IsRequestPending+0x14>)
 800dc52:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 800dc56:	f010 0005 	ands.w	r0, r0, #5
 800dc5a:	d100      	bne.n	800dc5e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800dc5c:	4770      	bx	lr
        return 1;
 800dc5e:	2001      	movs	r0, #1
 800dc60:	e7fc      	b.n	800dc5c <IsRequestPending+0xc>
 800dc62:	bf00      	nop
 800dc64:	20001264 	.word	0x20001264

0800dc68 <GetMaxAppPayloadWithoutFOptsLength>:
{
 800dc68:	b500      	push	{lr}
 800dc6a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800dc6c:	4b0d      	ldr	r3, [pc, #52]	; (800dca4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800dc6e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800dc72:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 800dc76:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800dc7a:	220d      	movs	r2, #13
 800dc7c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800dc80:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800dc84:	b113      	cbz	r3, 800dc8c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800dc86:	230e      	movs	r3, #14
 800dc88:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dc8c:	a902      	add	r1, sp, #8
 800dc8e:	4b05      	ldr	r3, [pc, #20]	; (800dca4 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800dc90:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dc94:	f004 facd 	bl	8012232 <RegionGetPhyParam>
 800dc98:	9001      	str	r0, [sp, #4]
}
 800dc9a:	b2c0      	uxtb	r0, r0
 800dc9c:	b005      	add	sp, #20
 800dc9e:	f85d fb04 	ldr.w	pc, [sp], #4
 800dca2:	bf00      	nop
 800dca4:	20008000 	.word	0x20008000

0800dca8 <ValidatePayloadLength>:
{
 800dca8:	b538      	push	{r3, r4, r5, lr}
 800dcaa:	4605      	mov	r5, r0
 800dcac:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800dcae:	4608      	mov	r0, r1
 800dcb0:	f7ff ffda 	bl	800dc68 <GetMaxAppPayloadWithoutFOptsLength>
 800dcb4:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 800dcb6:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d303      	bcc.n	800dcc4 <ValidatePayloadLength+0x1c>
 800dcbc:	2aff      	cmp	r2, #255	; 0xff
 800dcbe:	d903      	bls.n	800dcc8 <ValidatePayloadLength+0x20>
    return false;
 800dcc0:	2000      	movs	r0, #0
 800dcc2:	e000      	b.n	800dcc6 <ValidatePayloadLength+0x1e>
 800dcc4:	2000      	movs	r0, #0
}
 800dcc6:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 800dcc8:	2001      	movs	r0, #1
 800dcca:	e7fc      	b.n	800dcc6 <ValidatePayloadLength+0x1e>

0800dccc <ProcessRadioTxDone>:
{
 800dccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dcce:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800dcd0:	4b3b      	ldr	r3, [pc, #236]	; (800ddc0 <ProcessRadioTxDone+0xf4>)
 800dcd2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800dcd6:	2b02      	cmp	r3, #2
 800dcd8:	d002      	beq.n	800dce0 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800dcda:	4b3a      	ldr	r3, [pc, #232]	; (800ddc4 <ProcessRadioTxDone+0xf8>)
 800dcdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcde:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dce0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dce4:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 800dce6:	f008 ff5f 	bl	8016ba8 <UTIL_TIMER_GetCurrentTime>
 800dcea:	4b37      	ldr	r3, [pc, #220]	; (800ddc8 <ProcessRadioTxDone+0xfc>)
 800dcec:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800dcee:	4c37      	ldr	r4, [pc, #220]	; (800ddcc <ProcessRadioTxDone+0x100>)
 800dcf0:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 800dcf4:	1a2d      	subs	r5, r5, r0
 800dcf6:	f504 7660 	add.w	r6, r4, #896	; 0x380
 800dcfa:	4429      	add	r1, r5
 800dcfc:	4630      	mov	r0, r6
 800dcfe:	f009 f833 	bl	8016d68 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800dd02:	4630      	mov	r0, r6
 800dd04:	f008 ffea 	bl	8016cdc <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 800dd08:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800dd0c:	f504 7666 	add.w	r6, r4, #920	; 0x398
 800dd10:	4429      	add	r1, r5
 800dd12:	4630      	mov	r0, r6
 800dd14:	f009 f828 	bl	8016d68 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800dd18:	4630      	mov	r0, r6
 800dd1a:	f008 ffdf 	bl	8016cdc <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd1e:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 800dd22:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d134      	bne.n	800dd94 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dd2a:	4b28      	ldr	r3, [pc, #160]	; (800ddcc <ProcessRadioTxDone+0x100>)
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800dd32:	4b25      	ldr	r3, [pc, #148]	; (800ddc8 <ProcessRadioTxDone+0xfc>)
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4c22      	ldr	r4, [pc, #136]	; (800ddc0 <ProcessRadioTxDone+0xf4>)
 800dd38:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 800dd3a:	4f24      	ldr	r7, [pc, #144]	; (800ddcc <ProcessRadioTxDone+0x100>)
 800dd3c:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 800dd40:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800dd44:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800dd46:	ae0c      	add	r6, sp, #48	; 0x30
 800dd48:	4630      	mov	r0, r6
 800dd4a:	f008 fea1 	bl	8016a90 <SysTimeGetMcuTime>
 800dd4e:	ad02      	add	r5, sp, #8
 800dd50:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800dd5a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800dd5e:	4628      	mov	r0, r5
 800dd60:	f008 fe33 	bl	80169ca <SysTimeSub>
 800dd64:	ab07      	add	r3, sp, #28
 800dd66:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dd6a:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800dd6e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800dd72:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 800dd74:	2301      	movs	r3, #1
 800dd76:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800dd7a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800dd7e:	b90b      	cbnz	r3, 800dd84 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 800dd80:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800dd84:	a904      	add	r1, sp, #16
 800dd86:	4b0e      	ldr	r3, [pc, #56]	; (800ddc0 <ProcessRadioTxDone+0xf4>)
 800dd88:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dd8c:	f004 fa61 	bl	8012252 <RegionSetBandTxDone>
}
 800dd90:	b00f      	add	sp, #60	; 0x3c
 800dd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800dd94:	2315      	movs	r3, #21
 800dd96:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800dd9a:	a90a      	add	r1, sp, #40	; 0x28
 800dd9c:	4b08      	ldr	r3, [pc, #32]	; (800ddc0 <ProcessRadioTxDone+0xf4>)
 800dd9e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800dda2:	f004 fa46 	bl	8012232 <RegionGetPhyParam>
 800dda6:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dda8:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800ddac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ddb0:	4401      	add	r1, r0
 800ddb2:	4620      	mov	r0, r4
 800ddb4:	f008 ffd8 	bl	8016d68 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f008 ff8f 	bl	8016cdc <UTIL_TIMER_Start>
 800ddbe:	e7b8      	b.n	800dd32 <ProcessRadioTxDone+0x66>
 800ddc0:	20008000 	.word	0x20008000
 800ddc4:	0801e9c8 	.word	0x0801e9c8
 800ddc8:	20001820 	.word	0x20001820
 800ddcc:	20001264 	.word	0x20001264

0800ddd0 <OnRetransmitTimeoutTimerEvent>:
{
 800ddd0:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800ddd2:	4c07      	ldr	r4, [pc, #28]	; (800ddf0 <OnRetransmitTimeoutTimerEvent+0x20>)
 800ddd4:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800ddd8:	f008 ff26 	bl	8016c28 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800dddc:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800dde0:	b113      	cbz	r3, 800dde8 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 800dde2:	2201      	movs	r2, #1
 800dde4:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 800dde8:	f7ff ff0e 	bl	800dc08 <OnMacProcessNotify>
}
 800ddec:	bd10      	pop	{r4, pc}
 800ddee:	bf00      	nop
 800ddf0:	20001264 	.word	0x20001264

0800ddf4 <PrepareRxDoneAbort>:
{
 800ddf4:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800ddf6:	4b0e      	ldr	r3, [pc, #56]	; (800de30 <PrepareRxDoneAbort+0x3c>)
 800ddf8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 800ddfc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de00:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 800de04:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800de08:	b973      	cbnz	r3, 800de28 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800de0a:	4b09      	ldr	r3, [pc, #36]	; (800de30 <PrepareRxDoneAbort+0x3c>)
 800de0c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800de10:	f042 0202 	orr.w	r2, r2, #2
 800de14:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 800de18:	b2d2      	uxtb	r2, r2
 800de1a:	f042 0210 	orr.w	r2, r2, #16
 800de1e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800de22:	f7ff fdd1 	bl	800d9c8 <UpdateRxSlotIdleState>
}
 800de26:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 800de28:	2000      	movs	r0, #0
 800de2a:	f7ff ffd1 	bl	800ddd0 <OnRetransmitTimeoutTimerEvent>
 800de2e:	e7ec      	b.n	800de0a <PrepareRxDoneAbort+0x16>
 800de30:	20001264 	.word	0x20001264

0800de34 <LoRaMacCheckForBeaconAcquisition>:
{
 800de34:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800de36:	200b      	movs	r0, #11
 800de38:	f003 fbfc 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800de3c:	b188      	cbz	r0, 800de62 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800de3e:	4b0b      	ldr	r3, [pc, #44]	; (800de6c <LoRaMacCheckForBeaconAcquisition+0x38>)
 800de40:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800de44:	f010 0f01 	tst.w	r0, #1
 800de48:	d10d      	bne.n	800de66 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800de4a:	f010 0004 	ands.w	r0, r0, #4
 800de4e:	d009      	beq.n	800de64 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800de50:	461a      	mov	r2, r3
 800de52:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800de56:	f023 0302 	bic.w	r3, r3, #2
 800de5a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800de5e:	2001      	movs	r0, #1
 800de60:	e000      	b.n	800de64 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 800de62:	2000      	movs	r0, #0
}
 800de64:	bd08      	pop	{r3, pc}
    return 0x00;
 800de66:	2000      	movs	r0, #0
 800de68:	e7fc      	b.n	800de64 <LoRaMacCheckForBeaconAcquisition+0x30>
 800de6a:	bf00      	nop
 800de6c:	20001264 	.word	0x20001264

0800de70 <GetFCntDown>:
{
 800de70:	b538      	push	{r3, r4, r5, lr}
 800de72:	9c04      	ldr	r4, [sp, #16]
 800de74:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800de76:	b1f2      	cbz	r2, 800deb6 <GetFCntDown+0x46>
 800de78:	4694      	mov	ip, r2
 800de7a:	b1f4      	cbz	r4, 800deba <GetFCntDown+0x4a>
 800de7c:	b1fd      	cbz	r5, 800debe <GetFCntDown+0x4e>
    switch( addrID )
 800de7e:	b188      	cbz	r0, 800dea4 <GetFCntDown+0x34>
 800de80:	2801      	cmp	r0, #1
 800de82:	d11e      	bne.n	800dec2 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 800de84:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800de88:	2b01      	cmp	r3, #1
 800de8a:	d002      	beq.n	800de92 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800de8c:	2303      	movs	r3, #3
 800de8e:	7023      	strb	r3, [r4, #0]
 800de90:	e00a      	b.n	800dea8 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800de92:	b121      	cbz	r1, 800de9e <GetFCntDown+0x2e>
 800de94:	2903      	cmp	r1, #3
 800de96:	d002      	beq.n	800de9e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 800de98:	2301      	movs	r3, #1
 800de9a:	7023      	strb	r3, [r4, #0]
 800de9c:	e004      	b.n	800dea8 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800de9e:	2302      	movs	r3, #2
 800dea0:	7023      	strb	r3, [r4, #0]
 800dea2:	e001      	b.n	800dea8 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 800dea4:	2304      	movs	r3, #4
 800dea6:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800dea8:	462a      	mov	r2, r5
 800deaa:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800deae:	7820      	ldrb	r0, [r4, #0]
 800deb0:	f003 fe70 	bl	8011b94 <LoRaMacCryptoGetFCntDown>
}
 800deb4:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800deb6:	2009      	movs	r0, #9
 800deb8:	e7fc      	b.n	800deb4 <GetFCntDown+0x44>
 800deba:	2009      	movs	r0, #9
 800debc:	e7fa      	b.n	800deb4 <GetFCntDown+0x44>
 800debe:	2009      	movs	r0, #9
 800dec0:	e7f8      	b.n	800deb4 <GetFCntDown+0x44>
    switch( addrID )
 800dec2:	2005      	movs	r0, #5
 800dec4:	e7f6      	b.n	800deb4 <GetFCntDown+0x44>

0800dec6 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800dec6:	2801      	cmp	r0, #1
 800dec8:	d900      	bls.n	800decc <RemoveMacCommands+0x6>
 800deca:	4770      	bx	lr
{
 800decc:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800dece:	2a01      	cmp	r2, #1
 800ded0:	d105      	bne.n	800dede <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 800ded2:	f011 0f20 	tst.w	r1, #32
 800ded6:	d004      	beq.n	800dee2 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800ded8:	f003 fa58 	bl	801138c <LoRaMacCommandsRemoveStickyAnsCmds>
 800dedc:	e001      	b.n	800dee2 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800dede:	f003 fa55 	bl	801138c <LoRaMacCommandsRemoveStickyAnsCmds>
}
 800dee2:	bd08      	pop	{r3, pc}

0800dee4 <ProcessMacCommands>:
{
 800dee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee8:	b08f      	sub	sp, #60	; 0x3c
 800deea:	4698      	mov	r8, r3
    uint8_t status = 0;
 800deec:	2300      	movs	r3, #0
 800deee:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800def2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800def6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 800defa:	2b01      	cmp	r3, #1
 800defc:	f200 82d2 	bhi.w	800e4a4 <ProcessMacCommands+0x5c0>
 800df00:	4605      	mov	r5, r0
 800df02:	460c      	mov	r4, r1
 800df04:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 800df06:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 800df0a:	42bc      	cmp	r4, r7
 800df0c:	f080 82ca 	bcs.w	800e4a4 <ProcessMacCommands+0x5c0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800df10:	5d28      	ldrb	r0, [r5, r4]
 800df12:	f003 fa93 	bl	801143c <LoRaMacCommandsGetCmdSize>
 800df16:	4420      	add	r0, r4
 800df18:	42b8      	cmp	r0, r7
 800df1a:	f300 82c3 	bgt.w	800e4a4 <ProcessMacCommands+0x5c0>
        switch( payload[macIndex++] )
 800df1e:	1c66      	adds	r6, r4, #1
 800df20:	b2f6      	uxtb	r6, r6
 800df22:	5d2b      	ldrb	r3, [r5, r4]
 800df24:	3b02      	subs	r3, #2
 800df26:	2b11      	cmp	r3, #17
 800df28:	f200 82bc 	bhi.w	800e4a4 <ProcessMacCommands+0x5c0>
 800df2c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800df30:	00280012 	.word	0x00280012
 800df34:	00b800a5 	.word	0x00b800a5
 800df38:	011600fe 	.word	0x011600fe
 800df3c:	016c014f 	.word	0x016c014f
 800df40:	02ba01b8 	.word	0x02ba01b8
 800df44:	01e802ba 	.word	0x01e802ba
 800df48:	02ba02ba 	.word	0x02ba02ba
 800df4c:	0261024a 	.word	0x0261024a
 800df50:	029a0280 	.word	0x029a0280
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800df54:	2005      	movs	r0, #5
 800df56:	f003 fb6d 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800df5a:	b908      	cbnz	r0, 800df60 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800df5c:	4634      	mov	r4, r6
 800df5e:	e7d4      	b.n	800df0a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800df60:	2105      	movs	r1, #5
 800df62:	2000      	movs	r0, #0
 800df64:	f003 fb1a 	bl	801159c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800df68:	1ca3      	adds	r3, r4, #2
 800df6a:	b2db      	uxtb	r3, r3
 800df6c:	5da9      	ldrb	r1, [r5, r6]
 800df6e:	4aa3      	ldr	r2, [pc, #652]	; (800e1fc <ProcessMacCommands+0x318>)
 800df70:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800df74:	3403      	adds	r4, #3
 800df76:	b2e4      	uxtb	r4, r4
 800df78:	5ceb      	ldrb	r3, [r5, r3]
 800df7a:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 800df7e:	e7c4      	b.n	800df0a <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 800df80:	2300      	movs	r3, #0
 800df82:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 800df86:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800df8a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800df8e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 800df92:	f1b9 0f00 	cmp.w	r9, #0
 800df96:	d032      	beq.n	800dffe <ProcessMacCommands+0x11a>
                    macIndex += 4;
 800df98:	3405      	adds	r4, #5
 800df9a:	b2e4      	uxtb	r4, r4
 800df9c:	e7b5      	b.n	800df0a <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800df9e:	2305      	movs	r3, #5
 800dfa0:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800dfa4:	e048      	b.n	800e038 <ProcessMacCommands+0x154>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800dfa6:	4b96      	ldr	r3, [pc, #600]	; (800e200 <ProcessMacCommands+0x31c>)
 800dfa8:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800dfac:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	da03      	bge.n	800dfbc <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800dfb4:	4b92      	ldr	r3, [pc, #584]	; (800e200 <ProcessMacCommands+0x31c>)
 800dfb6:	2101      	movs	r1, #1
 800dfb8:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800dfbc:	4b90      	ldr	r3, [pc, #576]	; (800e200 <ProcessMacCommands+0x31c>)
 800dfbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800dfc2:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800dfc6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 800dfca:	e049      	b.n	800e060 <ProcessMacCommands+0x17c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800dfcc:	2201      	movs	r2, #1
 800dfce:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800dfd2:	2003      	movs	r0, #3
 800dfd4:	f003 f966 	bl	80112a4 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800dfd8:	3401      	adds	r4, #1
 800dfda:	b2e4      	uxtb	r4, r4
 800dfdc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800dfe0:	4988      	ldr	r1, [pc, #544]	; (800e204 <ProcessMacCommands+0x320>)
 800dfe2:	fba1 2103 	umull	r2, r1, r1, r3
 800dfe6:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 800dfea:	d3ef      	bcc.n	800dfcc <ProcessMacCommands+0xe8>
                        macIndex += linkAdrNbBytesParsed - 1;
 800dfec:	4433      	add	r3, r6
 800dfee:	b2de      	uxtb	r6, r3
 800dff0:	1e74      	subs	r4, r6, #1
 800dff2:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 800dff4:	42a7      	cmp	r7, r4
 800dff6:	d936      	bls.n	800e066 <ProcessMacCommands+0x182>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800dff8:	5d2b      	ldrb	r3, [r5, r4]
 800dffa:	2b03      	cmp	r3, #3
 800dffc:	d132      	bne.n	800e064 <ProcessMacCommands+0x180>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800dffe:	1e73      	subs	r3, r6, #1
 800e000:	442b      	add	r3, r5
 800e002:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800e004:	4b7e      	ldr	r3, [pc, #504]	; (800e200 <ProcessMacCommands+0x31c>)
 800e006:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 800e00a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e00e:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 800e012:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800e016:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800e01a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800e01e:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 800e022:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800e026:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e02a:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800e02c:	2a00      	cmp	r2, #0
 800e02e:	d0b6      	beq.n	800df9e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800e030:	1bbb      	subs	r3, r7, r6
 800e032:	3301      	adds	r3, #1
 800e034:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800e038:	ab05      	add	r3, sp, #20
 800e03a:	9301      	str	r3, [sp, #4]
 800e03c:	ab03      	add	r3, sp, #12
 800e03e:	9300      	str	r3, [sp, #0]
 800e040:	f10d 030b 	add.w	r3, sp, #11
 800e044:	f10d 020a 	add.w	r2, sp, #10
 800e048:	a907      	add	r1, sp, #28
 800e04a:	486d      	ldr	r0, [pc, #436]	; (800e200 <ProcessMacCommands+0x31c>)
 800e04c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800e050:	f004 f946 	bl	80122e0 <RegionLinkAdrReq>
 800e054:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 800e058:	f000 0007 	and.w	r0, r0, #7
 800e05c:	2807      	cmp	r0, #7
 800e05e:	d0a2      	beq.n	800dfa6 <ProcessMacCommands+0xc2>
{
 800e060:	2400      	movs	r4, #0
 800e062:	e7bb      	b.n	800dfdc <ProcessMacCommands+0xf8>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800e064:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 800e066:	42bc      	cmp	r4, r7
 800e068:	d204      	bcs.n	800e074 <ProcessMacCommands+0x190>
                        macIndex--;
 800e06a:	3c01      	subs	r4, #1
 800e06c:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800e06e:	f04f 0901 	mov.w	r9, #1
 800e072:	e74a      	b.n	800df0a <ProcessMacCommands+0x26>
 800e074:	f04f 0901 	mov.w	r9, #1
                break;
 800e078:	e747      	b.n	800df0a <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800e07a:	3402      	adds	r4, #2
 800e07c:	b2e4      	uxtb	r4, r4
 800e07e:	5dab      	ldrb	r3, [r5, r6]
 800e080:	f003 030f 	and.w	r3, r3, #15
 800e084:	495e      	ldr	r1, [pc, #376]	; (800e200 <ProcessMacCommands+0x31c>)
 800e086:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800e08a:	2201      	movs	r2, #1
 800e08c:	fa02 f303 	lsl.w	r3, r2, r3
 800e090:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800e094:	2200      	movs	r2, #0
 800e096:	a90b      	add	r1, sp, #44	; 0x2c
 800e098:	2004      	movs	r0, #4
 800e09a:	f003 f903 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e09e:	e734      	b.n	800df0a <ProcessMacCommands+0x26>
                status = 0x07;
 800e0a0:	2307      	movs	r3, #7
 800e0a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800e0a6:	5dab      	ldrb	r3, [r5, r6]
 800e0a8:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800e0ac:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800e0b0:	57ab      	ldrsb	r3, [r5, r6]
 800e0b2:	f003 030f 	and.w	r3, r3, #15
 800e0b6:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800e0ba:	1ca3      	adds	r3, r4, #2
 800e0bc:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800e0be:	1ce1      	adds	r1, r4, #3
 800e0c0:	b2c9      	uxtb	r1, r1
 800e0c2:	5ceb      	ldrb	r3, [r5, r3]
 800e0c4:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e0c6:	1d22      	adds	r2, r4, #4
 800e0c8:	b2d2      	uxtb	r2, r2
 800e0ca:	5c69      	ldrb	r1, [r5, r1]
 800e0cc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e0d0:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e0d2:	3405      	adds	r4, #5
 800e0d4:	b2e4      	uxtb	r4, r4
 800e0d6:	5caa      	ldrb	r2, [r5, r2]
 800e0d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0dc:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800e0de:	2264      	movs	r2, #100	; 0x64
 800e0e0:	fb02 f303 	mul.w	r3, r2, r3
 800e0e4:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800e0e6:	a907      	add	r1, sp, #28
 800e0e8:	4b45      	ldr	r3, [pc, #276]	; (800e200 <ProcessMacCommands+0x31c>)
 800e0ea:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e0ee:	f004 f908 	bl	8012302 <RegionRxParamSetupReq>
 800e0f2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 800e0f6:	f000 0307 	and.w	r3, r0, #7
 800e0fa:	2b07      	cmp	r3, #7
 800e0fc:	d007      	beq.n	800e10e <ProcessMacCommands+0x22a>
                macCmdPayload[0] = status;
 800e0fe:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800e102:	2201      	movs	r2, #1
 800e104:	a90b      	add	r1, sp, #44	; 0x2c
 800e106:	2005      	movs	r0, #5
 800e108:	f003 f8cc 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e10c:	e6fd      	b.n	800df0a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800e10e:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800e112:	4b3b      	ldr	r3, [pc, #236]	; (800e200 <ProcessMacCommands+0x31c>)
 800e114:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800e118:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800e11c:	9a08      	ldr	r2, [sp, #32]
 800e11e:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800e120:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800e122:	f89d 201d 	ldrb.w	r2, [sp, #29]
 800e126:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800e12a:	e7e8      	b.n	800e0fe <ProcessMacCommands+0x21a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800e12c:	4b33      	ldr	r3, [pc, #204]	; (800e1fc <ProcessMacCommands+0x318>)
 800e12e:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 800e132:	b17b      	cbz	r3, 800e154 <ProcessMacCommands+0x270>
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	b17b      	cbz	r3, 800e158 <ProcessMacCommands+0x274>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800e138:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800e13a:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800e13e:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 800e142:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800e146:	2202      	movs	r2, #2
 800e148:	a90b      	add	r1, sp, #44	; 0x2c
 800e14a:	2006      	movs	r0, #6
 800e14c:	f003 f8aa 	bl	80112a4 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 800e150:	4634      	mov	r4, r6
                break;
 800e152:	e6da      	b.n	800df0a <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800e154:	20ff      	movs	r0, #255	; 0xff
 800e156:	e7f0      	b.n	800e13a <ProcessMacCommands+0x256>
 800e158:	20ff      	movs	r0, #255	; 0xff
 800e15a:	e7ee      	b.n	800e13a <ProcessMacCommands+0x256>
                status = 0x03;
 800e15c:	2303      	movs	r3, #3
 800e15e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 800e162:	1ca3      	adds	r3, r4, #2
 800e164:	b2db      	uxtb	r3, r3
 800e166:	57aa      	ldrsb	r2, [r5, r6]
 800e168:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800e16c:	aa07      	add	r2, sp, #28
 800e16e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800e170:	1ce2      	adds	r2, r4, #3
 800e172:	b2d2      	uxtb	r2, r2
 800e174:	5ceb      	ldrb	r3, [r5, r3]
 800e176:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e178:	1d21      	adds	r1, r4, #4
 800e17a:	b2c9      	uxtb	r1, r1
 800e17c:	5caa      	ldrb	r2, [r5, r2]
 800e17e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e182:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e184:	1d62      	adds	r2, r4, #5
 800e186:	b2d2      	uxtb	r2, r2
 800e188:	5c69      	ldrb	r1, [r5, r1]
 800e18a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800e18e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 800e190:	2164      	movs	r1, #100	; 0x64
 800e192:	fb01 f303 	mul.w	r3, r1, r3
 800e196:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 800e198:	2300      	movs	r3, #0
 800e19a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800e19c:	3406      	adds	r4, #6
 800e19e:	b2e4      	uxtb	r4, r4
 800e1a0:	56ab      	ldrsb	r3, [r5, r2]
 800e1a2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800e1a6:	a905      	add	r1, sp, #20
 800e1a8:	4b15      	ldr	r3, [pc, #84]	; (800e200 <ProcessMacCommands+0x31c>)
 800e1aa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e1ae:	f004 f8b0 	bl	8012312 <RegionNewChannelReq>
 800e1b2:	b2c3      	uxtb	r3, r0
 800e1b4:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	f6ff aea6 	blt.w	800df0a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800e1be:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800e1c2:	2201      	movs	r2, #1
 800e1c4:	a90b      	add	r1, sp, #44	; 0x2c
 800e1c6:	2007      	movs	r0, #7
 800e1c8:	f003 f86c 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e1cc:	e69d      	b.n	800df0a <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800e1ce:	3402      	adds	r4, #2
 800e1d0:	b2e4      	uxtb	r4, r4
 800e1d2:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 800e1d4:	f013 030f 	ands.w	r3, r3, #15
 800e1d8:	d100      	bne.n	800e1dc <ProcessMacCommands+0x2f8>
                    delay++;
 800e1da:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800e1dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e1e0:	fb02 f303 	mul.w	r3, r2, r3
 800e1e4:	4a06      	ldr	r2, [pc, #24]	; (800e200 <ProcessMacCommands+0x31c>)
 800e1e6:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e1e8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800e1ec:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	a90b      	add	r1, sp, #44	; 0x2c
 800e1f2:	2008      	movs	r0, #8
 800e1f4:	f003 f856 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e1f8:	e687      	b.n	800df0a <ProcessMacCommands+0x26>
 800e1fa:	bf00      	nop
 800e1fc:	20001264 	.word	0x20001264
 800e200:	20008000 	.word	0x20008000
 800e204:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 800e208:	3402      	adds	r4, #2
 800e20a:	b2e4      	uxtb	r4, r4
 800e20c:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 800e20e:	2200      	movs	r2, #0
 800e210:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 800e214:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800e218:	f013 0f20 	tst.w	r3, #32
 800e21c:	d002      	beq.n	800e224 <ProcessMacCommands+0x340>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800e21e:	2201      	movs	r2, #1
 800e220:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800e224:	f013 0f10 	tst.w	r3, #16
 800e228:	d002      	beq.n	800e230 <ProcessMacCommands+0x34c>
                    txParamSetupReq.UplinkDwellTime = 1;
 800e22a:	2201      	movs	r2, #1
 800e22c:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800e230:	f003 030f 	and.w	r3, r3, #15
 800e234:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800e238:	a903      	add	r1, sp, #12
 800e23a:	4b9c      	ldr	r3, [pc, #624]	; (800e4ac <ProcessMacCommands+0x5c8>)
 800e23c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e240:	f004 f86f 	bl	8012322 <RegionTxParamSetupReq>
 800e244:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e248:	f43f ae5f 	beq.w	800df0a <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800e24c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 800e250:	4e96      	ldr	r6, [pc, #600]	; (800e4ac <ProcessMacCommands+0x5c8>)
 800e252:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800e256:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800e25a:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800e25e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800e262:	4a93      	ldr	r2, [pc, #588]	; (800e4b0 <ProcessMacCommands+0x5cc>)
 800e264:	5cd0      	ldrb	r0, [r2, r3]
 800e266:	f7f2 fd9d 	bl	8000da4 <__aeabi_ui2f>
 800e26a:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800e26e:	2302      	movs	r3, #2
 800e270:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800e274:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e278:	a907      	add	r1, sp, #28
 800e27a:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800e27e:	f003 ffd8 	bl	8012232 <RegionGetPhyParam>
 800e282:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800e284:	b240      	sxtb	r0, r0
 800e286:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800e28a:	4298      	cmp	r0, r3
 800e28c:	bfb8      	it	lt
 800e28e:	4618      	movlt	r0, r3
 800e290:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800e294:	2200      	movs	r2, #0
 800e296:	a90b      	add	r1, sp, #44	; 0x2c
 800e298:	2009      	movs	r0, #9
 800e29a:	f003 f803 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e29e:	e634      	b.n	800df0a <ProcessMacCommands+0x26>
                status = 0x03;
 800e2a0:	2303      	movs	r3, #3
 800e2a2:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 800e2a6:	1ca3      	adds	r3, r4, #2
 800e2a8:	b2db      	uxtb	r3, r3
 800e2aa:	5daa      	ldrb	r2, [r5, r6]
 800e2ac:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800e2b0:	1ce1      	adds	r1, r4, #3
 800e2b2:	b2c9      	uxtb	r1, r1
 800e2b4:	5ceb      	ldrb	r3, [r5, r3]
 800e2b6:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800e2b8:	1d22      	adds	r2, r4, #4
 800e2ba:	b2d2      	uxtb	r2, r2
 800e2bc:	5c69      	ldrb	r1, [r5, r1]
 800e2be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800e2c2:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800e2c4:	3405      	adds	r4, #5
 800e2c6:	b2e4      	uxtb	r4, r4
 800e2c8:	5caa      	ldrb	r2, [r5, r2]
 800e2ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2ce:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 800e2d0:	2264      	movs	r2, #100	; 0x64
 800e2d2:	fb02 f303 	mul.w	r3, r2, r3
 800e2d6:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800e2d8:	a907      	add	r1, sp, #28
 800e2da:	4b74      	ldr	r3, [pc, #464]	; (800e4ac <ProcessMacCommands+0x5c8>)
 800e2dc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e2e0:	f004 f827 	bl	8012332 <RegionDlChannelReq>
 800e2e4:	b2c3      	uxtb	r3, r0
 800e2e6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 800e2ea:	2800      	cmp	r0, #0
 800e2ec:	f6ff ae0d 	blt.w	800df0a <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800e2f0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	a90b      	add	r1, sp, #44	; 0x2c
 800e2f8:	200a      	movs	r0, #10
 800e2fa:	f002 ffd3 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e2fe:	e604      	b.n	800df0a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800e300:	2009      	movs	r0, #9
 800e302:	f003 f997 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800e306:	b928      	cbnz	r0, 800e314 <ProcessMacCommands+0x430>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e308:	4b6a      	ldr	r3, [pc, #424]	; (800e4b4 <ProcessMacCommands+0x5d0>)
 800e30a:	2200      	movs	r2, #0
 800e30c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 800e310:	4634      	mov	r4, r6
 800e312:	e5fa      	b.n	800df0a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800e314:	2109      	movs	r1, #9
 800e316:	2000      	movs	r0, #0
 800e318:	f003 f940 	bl	801159c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 800e31c:	a903      	add	r1, sp, #12
 800e31e:	2300      	movs	r3, #0
 800e320:	9303      	str	r3, [sp, #12]
 800e322:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 800e324:	f10d 0a14 	add.w	sl, sp, #20
 800e328:	9305      	str	r3, [sp, #20]
 800e32a:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 800e32c:	f10d 0b1c 	add.w	fp, sp, #28
 800e330:	9307      	str	r3, [sp, #28]
 800e332:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800e334:	1ca0      	adds	r0, r4, #2
 800e336:	b2c0      	uxtb	r0, r0
 800e338:	5dab      	ldrb	r3, [r5, r6]
 800e33a:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800e33c:	1ce2      	adds	r2, r4, #3
 800e33e:	b2d2      	uxtb	r2, r2
 800e340:	5c28      	ldrb	r0, [r5, r0]
 800e342:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800e346:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800e348:	1d20      	adds	r0, r4, #4
 800e34a:	b2c0      	uxtb	r0, r0
 800e34c:	5caa      	ldrb	r2, [r5, r2]
 800e34e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e352:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800e354:	1d62      	adds	r2, r4, #5
 800e356:	b2d2      	uxtb	r2, r2
 800e358:	5c28      	ldrb	r0, [r5, r0]
 800e35a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800e35e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800e360:	3406      	adds	r4, #6
 800e362:	b2e4      	uxtb	r4, r4
 800e364:	5caa      	ldrb	r2, [r5, r2]
 800e366:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800e36a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e36e:	fb00 f202 	mul.w	r2, r0, r2
 800e372:	0a12      	lsrs	r2, r2, #8
 800e374:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 800e378:	c903      	ldmia	r1, {r0, r1}
 800e37a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800e37e:	4a4e      	ldr	r2, [pc, #312]	; (800e4b8 <ProcessMacCommands+0x5d4>)
 800e380:	441a      	add	r2, r3
 800e382:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 800e384:	4658      	mov	r0, fp
 800e386:	f008 fb61 	bl	8016a4c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800e38a:	4e4a      	ldr	r6, [pc, #296]	; (800e4b4 <ProcessMacCommands+0x5d0>)
 800e38c:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 800e390:	9300      	str	r3, [sp, #0]
 800e392:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 800e396:	e89a 0006 	ldmia.w	sl, {r1, r2}
 800e39a:	a80c      	add	r0, sp, #48	; 0x30
 800e39c:	f008 fb15 	bl	80169ca <SysTimeSub>
 800e3a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e3a6:	e89b 0006 	ldmia.w	fp, {r1, r2}
 800e3aa:	4650      	mov	r0, sl
 800e3ac:	f008 faee 	bl	801698c <SysTimeAdd>
                    SysTimeSet( sysTime );
 800e3b0:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800e3b4:	f008 fb28 	bl	8016a08 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800e3b8:	f002 feda 	bl	8011170 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800e3bc:	2301      	movs	r3, #1
 800e3be:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 800e3c2:	e5a2      	b.n	800df0a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800e3c4:	200c      	movs	r0, #12
 800e3c6:	f003 f935 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800e3ca:	b908      	cbnz	r0, 800e3d0 <ProcessMacCommands+0x4ec>
        switch( payload[macIndex++] )
 800e3cc:	4634      	mov	r4, r6
 800e3ce:	e59c      	b.n	800df0a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800e3d0:	210c      	movs	r1, #12
 800e3d2:	2000      	movs	r0, #0
 800e3d4:	f003 f8e2 	bl	801159c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800e3d8:	4b36      	ldr	r3, [pc, #216]	; (800e4b4 <ProcessMacCommands+0x5d0>)
 800e3da:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800e3de:	3b04      	subs	r3, #4
 800e3e0:	b2db      	uxtb	r3, r3
 800e3e2:	2b01      	cmp	r3, #1
 800e3e4:	d801      	bhi.n	800e3ea <ProcessMacCommands+0x506>
        switch( payload[macIndex++] )
 800e3e6:	4634      	mov	r4, r6
 800e3e8:	e58f      	b.n	800df0a <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 800e3ea:	f002 febd 	bl	8011168 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 800e3ee:	4634      	mov	r4, r6
 800e3f0:	e58b      	b.n	800df0a <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 800e3f2:	1ca2      	adds	r2, r4, #2
 800e3f4:	b2d2      	uxtb	r2, r2
 800e3f6:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800e3f8:	1ce1      	adds	r1, r4, #3
 800e3fa:	b2c9      	uxtb	r1, r1
 800e3fc:	5caa      	ldrb	r2, [r5, r2]
 800e3fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800e402:	1d22      	adds	r2, r4, #4
 800e404:	b2d2      	uxtb	r2, r2
 800e406:	5c69      	ldrb	r1, [r5, r1]
 800e408:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 800e40c:	3405      	adds	r4, #5
 800e40e:	b2e4      	uxtb	r4, r4
 800e410:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800e412:	2164      	movs	r1, #100	; 0x64
 800e414:	fb03 f101 	mul.w	r1, r3, r1
 800e418:	f000 000f 	and.w	r0, r0, #15
 800e41c:	f002 fea5 	bl	801116a <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800e420:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800e424:	2201      	movs	r2, #1
 800e426:	a90b      	add	r1, sp, #44	; 0x2c
 800e428:	2011      	movs	r0, #17
 800e42a:	f002 ff3b 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e42e:	e56c      	b.n	800df0a <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800e430:	200d      	movs	r0, #13
 800e432:	f003 f8ff 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800e436:	b908      	cbnz	r0, 800e43c <ProcessMacCommands+0x558>
        switch( payload[macIndex++] )
 800e438:	4634      	mov	r4, r6
 800e43a:	e566      	b.n	800df0a <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800e43c:	210d      	movs	r1, #13
 800e43e:	2000      	movs	r0, #0
 800e440:	f003 f8ac 	bl	801159c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800e444:	1ca2      	adds	r2, r4, #2
 800e446:	b2d2      	uxtb	r2, r2
 800e448:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800e44a:	1ce3      	adds	r3, r4, #3
 800e44c:	b2db      	uxtb	r3, r3
 800e44e:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 800e450:	3404      	adds	r4, #4
 800e452:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800e454:	4a19      	ldr	r2, [pc, #100]	; (800e4bc <ProcessMacCommands+0x5d8>)
 800e456:	6812      	ldr	r2, [r2, #0]
 800e458:	5ce9      	ldrb	r1, [r5, r3]
 800e45a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 800e45e:	f002 fe86 	bl	801116e <LoRaMacClassBBeaconTimingAns>
 800e462:	e552      	b.n	800df0a <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 800e464:	1ca1      	adds	r1, r4, #2
 800e466:	b2c9      	uxtb	r1, r1
 800e468:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800e46a:	1ce2      	adds	r2, r4, #3
 800e46c:	b2d2      	uxtb	r2, r2
 800e46e:	5c69      	ldrb	r1, [r5, r1]
 800e470:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800e474:	3404      	adds	r4, #4
 800e476:	b2e4      	uxtb	r4, r4
 800e478:	5caa      	ldrb	r2, [r5, r2]
 800e47a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800e47e:	2064      	movs	r0, #100	; 0x64
 800e480:	fb03 f000 	mul.w	r0, r3, r0
 800e484:	f002 fe75 	bl	8011172 <LoRaMacClassBBeaconFreqReq>
 800e488:	b140      	cbz	r0, 800e49c <ProcessMacCommands+0x5b8>
                        macCmdPayload[0] = 1;
 800e48a:	2301      	movs	r3, #1
 800e48c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800e490:	2201      	movs	r2, #1
 800e492:	a90b      	add	r1, sp, #44	; 0x2c
 800e494:	2013      	movs	r0, #19
 800e496:	f002 ff05 	bl	80112a4 <LoRaMacCommandsAddCmd>
                break;
 800e49a:	e536      	b.n	800df0a <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 800e49c:	2300      	movs	r3, #0
 800e49e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800e4a2:	e7f5      	b.n	800e490 <ProcessMacCommands+0x5ac>
}
 800e4a4:	b00f      	add	sp, #60	; 0x3c
 800e4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4aa:	bf00      	nop
 800e4ac:	20008000 	.word	0x20008000
 800e4b0:	0801e1bc 	.word	0x0801e1bc
 800e4b4:	20001264 	.word	0x20001264
 800e4b8:	12d53d80 	.word	0x12d53d80
 800e4bc:	20001810 	.word	0x20001810

0800e4c0 <ProcessRadioRxDone>:
{
 800e4c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4c4:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 800e4c6:	4ba5      	ldr	r3, [pc, #660]	; (800e75c <ProcessRadioRxDone+0x29c>)
 800e4c8:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 800e4ca:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800e4cc:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 800e4d0:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800e4d8:	4aa1      	ldr	r2, [pc, #644]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e4da:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800e4de:	4aa1      	ldr	r2, [pc, #644]	; (800e764 <ProcessRadioRxDone+0x2a4>)
 800e4e0:	7811      	ldrb	r1, [r2, #0]
 800e4e2:	f363 0100 	bfi	r1, r3, #0, #1
 800e4e6:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 800e4e8:	4c9f      	ldr	r4, [pc, #636]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e4ea:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 800e4ee:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 800e4f2:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800e4f6:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 800e4fa:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 800e4fe:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 800e502:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 800e506:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 800e50a:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 800e50e:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 800e512:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 800e516:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800e51a:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e51e:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 800e522:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800e526:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800e52a:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 800e52e:	4b8f      	ldr	r3, [pc, #572]	; (800e76c <ProcessRadioRxDone+0x2ac>)
 800e530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e532:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800e534:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800e538:	b1d3      	cbz	r3, 800e570 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800e53a:	4629      	mov	r1, r5
 800e53c:	4630      	mov	r0, r6
 800e53e:	f002 fe00 	bl	8011142 <LoRaMacClassBRxBeacon>
 800e542:	b9d0      	cbnz	r0, 800e57a <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e544:	4b86      	ldr	r3, [pc, #536]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e546:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d01d      	beq.n	800e58a <ProcessRadioRxDone+0xca>
    if( size == 0 )
 800e54e:	2d00      	cmp	r5, #0
 800e550:	d038      	beq.n	800e5c4 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 800e552:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 800e554:	0963      	lsrs	r3, r4, #5
 800e556:	3b01      	subs	r3, #1
 800e558:	2b06      	cmp	r3, #6
 800e55a:	f200 82fd 	bhi.w	800eb58 <ProcessRadioRxDone+0x698>
 800e55e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e562:	0038      	.short	0x0038
 800e564:	00d102fb 	.word	0x00d102fb
 800e568:	00cd02fb 	.word	0x00cd02fb
 800e56c:	02cd02fb 	.word	0x02cd02fb
        TimerStop( &MacCtx.RxWindowTimer2 );
 800e570:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800e574:	f008 fb58 	bl	8016c28 <UTIL_TIMER_Stop>
 800e578:	e7df      	b.n	800e53a <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800e57a:	4b7b      	ldr	r3, [pc, #492]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e57c:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800e580:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 800e584:	b025      	add	sp, #148	; 0x94
 800e586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e58a:	f002 fdde 	bl	801114a <LoRaMacClassBIsPingExpected>
 800e58e:	b150      	cbz	r0, 800e5a6 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e590:	2000      	movs	r0, #0
 800e592:	f002 fdcf 	bl	8011134 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e596:	2000      	movs	r0, #0
 800e598:	f002 fdd1 	bl	801113e <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e59c:	4b72      	ldr	r3, [pc, #456]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e59e:	2204      	movs	r2, #4
 800e5a0:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800e5a4:	e7d3      	b.n	800e54e <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e5a6:	f002 fdd2 	bl	801114e <LoRaMacClassBIsMulticastExpected>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	d0cf      	beq.n	800e54e <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e5ae:	2000      	movs	r0, #0
 800e5b0:	f002 fdc1 	bl	8011136 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e5b4:	2000      	movs	r0, #0
 800e5b6:	f002 fdc3 	bl	8011140 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e5ba:	4b6b      	ldr	r3, [pc, #428]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e5bc:	2205      	movs	r2, #5
 800e5be:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 800e5c2:	e7c4      	b.n	800e54e <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e5c4:	4b68      	ldr	r3, [pc, #416]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e5c6:	2201      	movs	r2, #1
 800e5c8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 800e5cc:	f7ff fc12 	bl	800ddf4 <PrepareRxDoneAbort>
        return;
 800e5d0:	e7d8      	b.n	800e584 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800e5d2:	2d10      	cmp	r5, #16
 800e5d4:	d92e      	bls.n	800e634 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 800e5d6:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 800e5d8:	b2ed      	uxtb	r5, r5
 800e5da:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800e5de:	4b60      	ldr	r3, [pc, #384]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e5e0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800e5e4:	bb6b      	cbnz	r3, 800e642 <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 800e5e6:	a804      	add	r0, sp, #16
 800e5e8:	f005 ffd2 	bl	8014590 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 800e5ec:	aa08      	add	r2, sp, #32
 800e5ee:	a904      	add	r1, sp, #16
 800e5f0:	20ff      	movs	r0, #255	; 0xff
 800e5f2:	f003 fc25 	bl	8011e40 <LoRaMacCryptoHandleJoinAccept>
 800e5f6:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e5f8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e5fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e600:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e604:	4b56      	ldr	r3, [pc, #344]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e606:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e60a:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 800e60e:	2207      	movs	r2, #7
 800e610:	a903      	add	r1, sp, #12
 800e612:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e616:	f003 fe2a 	bl	801226e <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 800e61a:	b904      	cbnz	r4, 800e61e <ProcessRadioRxDone+0x15e>
 800e61c:	b9c0      	cbnz	r0, 800e650 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e61e:	2001      	movs	r0, #1
 800e620:	f003 f808 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800e624:	2800      	cmp	r0, #0
 800e626:	f000 8283 	beq.w	800eb30 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800e62a:	2101      	movs	r1, #1
 800e62c:	2007      	movs	r0, #7
 800e62e:	f002 ffb5 	bl	801159c <LoRaMacConfirmQueueSetStatus>
 800e632:	e27d      	b.n	800eb30 <ProcessRadioRxDone+0x670>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e634:	4b4c      	ldr	r3, [pc, #304]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e636:	2201      	movs	r2, #1
 800e638:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e63c:	f7ff fbda 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e640:	e7a0      	b.n	800e584 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e642:	4b49      	ldr	r3, [pc, #292]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e644:	2201      	movs	r2, #1
 800e646:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e64a:	f7ff fbd3 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e64e:	e799      	b.n	800e584 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800e650:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 800e654:	4c42      	ldr	r4, [pc, #264]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e656:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800e65a:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 800e65e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e662:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800e666:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 800e66a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e66e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800e672:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e674:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 800e678:	2002      	movs	r0, #2
 800e67a:	f005 ff97 	bl	80145ac <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800e67e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800e682:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800e686:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e68a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e68e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800e692:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800e696:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 800e69a:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800e69c:	b90b      	cbnz	r3, 800e6a2 <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800e69e:	2201      	movs	r2, #1
 800e6a0:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800e6a2:	4c2f      	ldr	r4, [pc, #188]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e6a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e6a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6aa:	fb02 f303 	mul.w	r3, r2, r3
 800e6ae:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800e6b0:	4413      	add	r3, r2
 800e6b2:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 800e6b4:	2601      	movs	r6, #1
 800e6b6:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800e6c0:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800e6c4:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 800e6c6:	3d11      	subs	r5, #17
 800e6c8:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 800e6cc:	4b26      	ldr	r3, [pc, #152]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e6ce:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 800e6d2:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800e6d6:	a921      	add	r1, sp, #132	; 0x84
 800e6d8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800e6dc:	f003 fdd1 	bl	8012282 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800e6e0:	2302      	movs	r3, #2
 800e6e2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 800e6e6:	4630      	mov	r0, r6
 800e6e8:	f002 ffa4 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800e6ec:	2800      	cmp	r0, #0
 800e6ee:	f000 821f 	beq.w	800eb30 <ProcessRadioRxDone+0x670>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 800e6f2:	4631      	mov	r1, r6
 800e6f4:	2000      	movs	r0, #0
 800e6f6:	f002 ff51 	bl	801159c <LoRaMacConfirmQueueSetStatus>
 800e6fa:	e219      	b.n	800eb30 <ProcessRadioRxDone+0x670>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e6fc:	4b1a      	ldr	r3, [pc, #104]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e6fe:	2201      	movs	r2, #1
 800e700:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800e704:	4b16      	ldr	r3, [pc, #88]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e706:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800e70a:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800e70e:	4a16      	ldr	r2, [pc, #88]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e710:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 800e714:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800e718:	220d      	movs	r2, #13
 800e71a:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800e71e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e722:	b113      	cbz	r3, 800e72a <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800e724:	230e      	movs	r3, #14
 800e726:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800e72a:	a91f      	add	r1, sp, #124	; 0x7c
 800e72c:	4b0c      	ldr	r3, [pc, #48]	; (800e760 <ProcessRadioRxDone+0x2a0>)
 800e72e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800e732:	f003 fd7e 	bl	8012232 <RegionGetPhyParam>
 800e736:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800e738:	f1a5 030d 	sub.w	r3, r5, #13
 800e73c:	b21b      	sxth	r3, r3
 800e73e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e742:	b200      	sxth	r0, r0
 800e744:	4283      	cmp	r3, r0
 800e746:	dc01      	bgt.n	800e74c <ProcessRadioRxDone+0x28c>
 800e748:	2d0b      	cmp	r5, #11
 800e74a:	d811      	bhi.n	800e770 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e74c:	4b06      	ldr	r3, [pc, #24]	; (800e768 <ProcessRadioRxDone+0x2a8>)
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e754:	f7ff fb4e 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e758:	e714      	b.n	800e584 <ProcessRadioRxDone+0xc4>
 800e75a:	bf00      	nop
 800e75c:	20001810 	.word	0x20001810
 800e760:	20008000 	.word	0x20008000
 800e764:	20001260 	.word	0x20001260
 800e768:	20001264 	.word	0x20001264
 800e76c:	0801e9c8 	.word	0x0801e9c8
            macMsgData.Buffer = payload;
 800e770:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800e772:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800e776:	4ba5      	ldr	r3, [pc, #660]	; (800ea0c <ProcessRadioRxDone+0x54c>)
 800e778:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800e77a:	23ff      	movs	r3, #255	; 0xff
 800e77c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800e780:	a812      	add	r0, sp, #72	; 0x48
 800e782:	f003 fc2b 	bl	8011fdc <LoRaMacParserData>
 800e786:	2800      	cmp	r0, #0
 800e788:	d142      	bne.n	800e810 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e78a:	4ba1      	ldr	r3, [pc, #644]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e78c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e790:	2b01      	cmp	r3, #1
 800e792:	d044      	beq.n	800e81e <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e794:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e796:	4b9f      	ldr	r3, [pc, #636]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e798:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e79c:	a904      	add	r1, sp, #16
 800e79e:	a812      	add	r0, sp, #72	; 0x48
 800e7a0:	f7ff f99e 	bl	800dae0 <DetermineFrameType>
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	d164      	bne.n	800e874 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d066      	beq.n	800e882 <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800e7b4:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e7b6:	2d01      	cmp	r5, #1
 800e7b8:	d10a      	bne.n	800e7d0 <ProcessRadioRxDone+0x310>
 800e7ba:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e7be:	2b03      	cmp	r3, #3
 800e7c0:	f040 808e 	bne.w	800e8e0 <ProcessRadioRxDone+0x420>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e7c4:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e7c8:	f013 0f60 	tst.w	r3, #96	; 0x60
 800e7cc:	f040 8088 	bne.w	800e8e0 <ProcessRadioRxDone+0x420>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e7d0:	ab07      	add	r3, sp, #28
 800e7d2:	9301      	str	r3, [sp, #4]
 800e7d4:	f10d 031b 	add.w	r3, sp, #27
 800e7d8:	9300      	str	r3, [sp, #0]
 800e7da:	4b8d      	ldr	r3, [pc, #564]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e7dc:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800e7e0:	aa12      	add	r2, sp, #72	; 0x48
 800e7e2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f7ff fb42 	bl	800de70 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e7ec:	2800      	cmp	r0, #0
 800e7ee:	f000 8083 	beq.w	800e8f8 <ProcessRadioRxDone+0x438>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e7f2:	2807      	cmp	r0, #7
 800e7f4:	d07b      	beq.n	800e8ee <ProcessRadioRxDone+0x42e>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e7f6:	4b87      	ldr	r3, [pc, #540]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e7fe:	9a07      	ldr	r2, [sp, #28]
 800e800:	4b84      	ldr	r3, [pc, #528]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e802:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e806:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 800e80a:	f7ff faf3 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e80e:	e6b9      	b.n	800e584 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e810:	4b80      	ldr	r3, [pc, #512]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e812:	2201      	movs	r2, #1
 800e814:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e818:	f7ff faec 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e81c:	e6b2      	b.n	800e584 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 800e81e:	f002 fc94 	bl	801114a <LoRaMacClassBIsPingExpected>
 800e822:	b188      	cbz	r0, 800e848 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e824:	2000      	movs	r0, #0
 800e826:	f002 fc85 	bl	8011134 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800e82a:	2000      	movs	r0, #0
 800e82c:	f002 fc87 	bl	801113e <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800e830:	4b78      	ldr	r3, [pc, #480]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e832:	2204      	movs	r2, #4
 800e834:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e838:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800e83c:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800e840:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e842:	f002 fc9b 	bl	801117c <LoRaMacClassBSetFPendingBit>
 800e846:	e7a5      	b.n	800e794 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e848:	f002 fc81 	bl	801114e <LoRaMacClassBIsMulticastExpected>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	d0a1      	beq.n	800e794 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e850:	2000      	movs	r0, #0
 800e852:	f002 fc70 	bl	8011136 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e856:	2000      	movs	r0, #0
 800e858:	f002 fc72 	bl	8011140 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e85c:	4b6d      	ldr	r3, [pc, #436]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e85e:	2205      	movs	r2, #5
 800e860:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e864:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800e868:	f3c1 1100 	ubfx	r1, r1, #4, #1
 800e86c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e86e:	f002 fc85 	bl	801117c <LoRaMacClassBSetFPendingBit>
 800e872:	e78f      	b.n	800e794 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e874:	4b67      	ldr	r3, [pc, #412]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e876:	2201      	movs	r2, #1
 800e878:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e87c:	f7ff faba 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e880:	e680      	b.n	800e584 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e882:	4618      	mov	r0, r3
 800e884:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e888:	4a61      	ldr	r2, [pc, #388]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e88a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800e88e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 800e892:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e894:	428a      	cmp	r2, r1
 800e896:	d002      	beq.n	800e89e <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e898:	3301      	adds	r3, #1
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	e788      	b.n	800e7b0 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e89e:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 800e8a2:	495b      	ldr	r1, [pc, #364]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e8a4:	eb01 1106 	add.w	r1, r1, r6, lsl #4
 800e8a8:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e8ac:	2900      	cmp	r1, #0
 800e8ae:	d0f3      	beq.n	800e898 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e8b0:	4b57      	ldr	r3, [pc, #348]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e8b2:	2130      	movs	r1, #48	; 0x30
 800e8b4:	fb01 3000 	mla	r0, r1, r0, r3
 800e8b8:	f890 60ea 	ldrb.w	r6, [r0, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e8bc:	f8d0 110c 	ldr.w	r1, [r0, #268]	; 0x10c
 800e8c0:	6809      	ldr	r1, [r1, #0]
 800e8c2:	9107      	str	r1, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e8c4:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e8c8:	2b02      	cmp	r3, #2
 800e8ca:	d002      	beq.n	800e8d2 <ProcessRadioRxDone+0x412>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e8cc:	4691      	mov	r9, r2
                    multicast = 1;
 800e8ce:	2501      	movs	r5, #1
 800e8d0:	e771      	b.n	800e7b6 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e8d2:	4b50      	ldr	r3, [pc, #320]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e8d4:	2103      	movs	r1, #3
 800e8d6:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e8da:	4691      	mov	r9, r2
                    multicast = 1;
 800e8dc:	2501      	movs	r5, #1
 800e8de:	e76a      	b.n	800e7b6 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e8e0:	4b4c      	ldr	r3, [pc, #304]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e8e8:	f7ff fa84 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e8ec:	e64a      	b.n	800e584 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e8ee:	4b49      	ldr	r3, [pc, #292]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e8f0:	2208      	movs	r2, #8
 800e8f2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800e8f6:	e782      	b.n	800e7fe <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e8f8:	ab12      	add	r3, sp, #72	; 0x48
 800e8fa:	9300      	str	r3, [sp, #0]
 800e8fc:	9b07      	ldr	r3, [sp, #28]
 800e8fe:	f89d 201b 	ldrb.w	r2, [sp, #27]
 800e902:	4649      	mov	r1, r9
 800e904:	4630      	mov	r0, r6
 800e906:	f003 f9f3 	bl	8011cf0 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e90a:	2800      	cmp	r0, #0
 800e90c:	d14a      	bne.n	800e9a4 <ProcessRadioRxDone+0x4e4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e90e:	4b41      	ldr	r3, [pc, #260]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e910:	2100      	movs	r1, #0
 800e912:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 800e916:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 800e91a:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 800e91e:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e922:	9a07      	ldr	r2, [sp, #28]
 800e924:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e928:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e92c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800e930:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800e934:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e938:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e93c:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e940:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800e944:	2801      	cmp	r0, #1
 800e946:	d93b      	bls.n	800e9c0 <ProcessRadioRxDone+0x500>
            if( multicast == 1 )
 800e948:	2d01      	cmp	r5, #1
 800e94a:	d03f      	beq.n	800e9cc <ProcessRadioRxDone+0x50c>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e94c:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800e950:	2ca0      	cmp	r4, #160	; 0xa0
 800e952:	d040      	beq.n	800e9d6 <ProcessRadioRxDone+0x516>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e954:	2300      	movs	r3, #0
 800e956:	4a2e      	ldr	r2, [pc, #184]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e958:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e95c:	4a2d      	ldr	r2, [pc, #180]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e95e:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800e962:	4b2b      	ldr	r3, [pc, #172]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e964:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e968:	b923      	cbnz	r3, 800e974 <ProcessRadioRxDone+0x4b4>
 800e96a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800e96e:	f013 0f10 	tst.w	r3, #16
 800e972:	d007      	beq.n	800e984 <ProcessRadioRxDone+0x4c4>
 800e974:	4b26      	ldr	r3, [pc, #152]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e976:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800e97a:	b91b      	cbnz	r3, 800e984 <ProcessRadioRxDone+0x4c4>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800e97c:	4b25      	ldr	r3, [pc, #148]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e97e:	2201      	movs	r2, #1
 800e980:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e984:	4b23      	ldr	r3, [pc, #140]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e986:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800e98a:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800e98e:	f7ff fa9a 	bl	800dec6 <RemoveMacCommands>
            switch( fType )
 800e992:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e996:	2b03      	cmp	r3, #3
 800e998:	f200 8099 	bhi.w	800eace <ProcessRadioRxDone+0x60e>
 800e99c:	e8df f003 	tbb	[pc, r3]
 800e9a0:	8777653e 	.word	0x8777653e
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e9a4:	2802      	cmp	r0, #2
 800e9a6:	d006      	beq.n	800e9b6 <ProcessRadioRxDone+0x4f6>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e9a8:	4b1a      	ldr	r3, [pc, #104]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e9aa:	220b      	movs	r2, #11
 800e9ac:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800e9b0:	f7ff fa20 	bl	800ddf4 <PrepareRxDoneAbort>
                return;
 800e9b4:	e5e6      	b.n	800e584 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e9b6:	4b17      	ldr	r3, [pc, #92]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e9b8:	220a      	movs	r2, #10
 800e9ba:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800e9be:	e7f7      	b.n	800e9b0 <ProcessRadioRxDone+0x4f0>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e9c0:	4b13      	ldr	r3, [pc, #76]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e9c2:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800e9ca:	e7bd      	b.n	800e948 <ProcessRadioRxDone+0x488>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e9cc:	4b11      	ldr	r3, [pc, #68]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e9ce:	2202      	movs	r2, #2
 800e9d0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800e9d4:	e7c5      	b.n	800e962 <ProcessRadioRxDone+0x4a2>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e9d6:	4b0e      	ldr	r3, [pc, #56]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e9d8:	2201      	movs	r2, #1
 800e9da:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e9de:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800e9e2:	b913      	cbnz	r3, 800e9ea <ProcessRadioRxDone+0x52a>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e9e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e9e8:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e9ea:	4b0a      	ldr	r3, [pc, #40]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e9ec:	2201      	movs	r2, #1
 800e9ee:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e9f2:	4290      	cmp	r0, r2
 800e9f4:	d9b5      	bls.n	800e962 <ProcessRadioRxDone+0x4a2>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e9f6:	4b06      	ldr	r3, [pc, #24]	; (800ea10 <ProcessRadioRxDone+0x550>)
 800e9f8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e9fc:	4b05      	ldr	r3, [pc, #20]	; (800ea14 <ProcessRadioRxDone+0x554>)
 800e9fe:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800ea02:	4a05      	ldr	r2, [pc, #20]	; (800ea18 <ProcessRadioRxDone+0x558>)
 800ea04:	6812      	ldr	r2, [r2, #0]
 800ea06:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800ea0a:	e7aa      	b.n	800e962 <ProcessRadioRxDone+0x4a2>
 800ea0c:	2000149c 	.word	0x2000149c
 800ea10:	20008000 	.word	0x20008000
 800ea14:	20001264 	.word	0x20001264
 800ea18:	20001810 	.word	0x20001810
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ea1c:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800ea20:	4c58      	ldr	r4, [pc, #352]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800ea22:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	463b      	mov	r3, r7
 800ea2a:	f002 020f 	and.w	r2, r2, #15
 800ea2e:	2100      	movs	r1, #0
 800ea30:	a816      	add	r0, sp, #88	; 0x58
 800ea32:	f7ff fa57 	bl	800dee4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea36:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ea3a:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800ea3e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ea40:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ea44:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800ea48:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800ea52:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ea56:	2be0      	cmp	r3, #224	; 0xe0
 800ea58:	d040      	beq.n	800eadc <ProcessRadioRxDone+0x61c>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ea5a:	4a4a      	ldr	r2, [pc, #296]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800ea5c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ea60:	f043 0302 	orr.w	r3, r3, #2
 800ea64:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800ea68:	e062      	b.n	800eb30 <ProcessRadioRxDone+0x670>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800ea6a:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800ea6e:	4c45      	ldr	r4, [pc, #276]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800ea70:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800ea74:	9300      	str	r3, [sp, #0]
 800ea76:	463b      	mov	r3, r7
 800ea78:	f002 020f 	and.w	r2, r2, #15
 800ea7c:	2100      	movs	r1, #0
 800ea7e:	a816      	add	r0, sp, #88	; 0x58
 800ea80:	f7ff fa30 	bl	800dee4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ea84:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800ea88:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800ea8c:	e7e1      	b.n	800ea52 <ProcessRadioRxDone+0x592>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800ea8e:	4c3d      	ldr	r4, [pc, #244]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800ea90:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800ea94:	9300      	str	r3, [sp, #0]
 800ea96:	463b      	mov	r3, r7
 800ea98:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800ea9c:	2100      	movs	r1, #0
 800ea9e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800eaa0:	f7ff fa20 	bl	800dee4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eaa4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800eaa8:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800eaac:	e7d1      	b.n	800ea52 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eaae:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800eab2:	4b34      	ldr	r3, [pc, #208]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eab4:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800eab8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800eaba:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800eabe:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800eac2:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800eacc:	e7c1      	b.n	800ea52 <ProcessRadioRxDone+0x592>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eace:	4b2d      	ldr	r3, [pc, #180]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800ead0:	2201      	movs	r2, #1
 800ead2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800ead6:	f7ff f98d 	bl	800ddf4 <PrepareRxDoneAbort>
                    break;
 800eada:	e7ba      	b.n	800ea52 <ProcessRadioRxDone+0x592>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800eadc:	4a2a      	ldr	r2, [pc, #168]	; (800eb88 <ProcessRadioRxDone+0x6c8>)
 800eade:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800eae2:	2a00      	cmp	r2, #0
 800eae4:	d1b9      	bne.n	800ea5a <ProcessRadioRxDone+0x59a>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800eae6:	4a27      	ldr	r2, [pc, #156]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eae8:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800eaec:	2300      	movs	r3, #0
 800eaee:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800eaf2:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800eaf6:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800eafa:	e7ae      	b.n	800ea5a <ProcessRadioRxDone+0x59a>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800eafc:	1e6a      	subs	r2, r5, #1
 800eafe:	4c21      	ldr	r4, [pc, #132]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eb00:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800eb04:	b292      	uxth	r2, r2
 800eb06:	1c71      	adds	r1, r6, #1
 800eb08:	4638      	mov	r0, r7
 800eb0a:	f005 fe5e 	bl	80147ca <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800eb0e:	2303      	movs	r3, #3
 800eb10:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800eb14:	2300      	movs	r3, #0
 800eb16:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800eb1a:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800eb1e:	3d01      	subs	r5, #1
 800eb20:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800eb24:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800eb28:	f043 0302 	orr.w	r3, r3, #2
 800eb2c:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800eb30:	4b14      	ldr	r3, [pc, #80]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eb32:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d915      	bls.n	800eb66 <ProcessRadioRxDone+0x6a6>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800eb3a:	4b12      	ldr	r3, [pc, #72]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eb3c:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d006      	beq.n	800eb52 <ProcessRadioRxDone+0x692>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800eb44:	4a0f      	ldr	r2, [pc, #60]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eb46:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800eb4a:	f043 0310 	orr.w	r3, r3, #16
 800eb4e:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800eb52:	f7fe ff39 	bl	800d9c8 <UpdateRxSlotIdleState>
 800eb56:	e515      	b.n	800e584 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800eb58:	4b0a      	ldr	r3, [pc, #40]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eb5a:	2201      	movs	r2, #1
 800eb5c:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800eb60:	f7ff f948 	bl	800ddf4 <PrepareRxDoneAbort>
            break;
 800eb64:	e7e4      	b.n	800eb30 <ProcessRadioRxDone+0x670>
        if( MacCtx.NodeAckRequested == true )
 800eb66:	4b07      	ldr	r3, [pc, #28]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eb68:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d0e4      	beq.n	800eb3a <ProcessRadioRxDone+0x67a>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800eb70:	4b04      	ldr	r3, [pc, #16]	; (800eb84 <ProcessRadioRxDone+0x6c4>)
 800eb72:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d0df      	beq.n	800eb3a <ProcessRadioRxDone+0x67a>
                OnRetransmitTimeoutTimerEvent( NULL );
 800eb7a:	2000      	movs	r0, #0
 800eb7c:	f7ff f928 	bl	800ddd0 <OnRetransmitTimeoutTimerEvent>
 800eb80:	e7db      	b.n	800eb3a <ProcessRadioRxDone+0x67a>
 800eb82:	bf00      	nop
 800eb84:	20001264 	.word	0x20001264
 800eb88:	20008000 	.word	0x20008000

0800eb8c <ProcessRadioTxTimeout>:
{
 800eb8c:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800eb8e:	4b0f      	ldr	r3, [pc, #60]	; (800ebcc <ProcessRadioTxTimeout+0x40>)
 800eb90:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800eb94:	2b02      	cmp	r3, #2
 800eb96:	d002      	beq.n	800eb9e <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800eb98:	4b0d      	ldr	r3, [pc, #52]	; (800ebd0 <ProcessRadioTxTimeout+0x44>)
 800eb9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb9c:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800eb9e:	f7fe ff13 	bl	800d9c8 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800eba2:	4c0c      	ldr	r4, [pc, #48]	; (800ebd4 <ProcessRadioTxTimeout+0x48>)
 800eba4:	2002      	movs	r0, #2
 800eba6:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800ebaa:	f002 fd25 	bl	80115f8 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800ebae:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800ebb2:	b113      	cbz	r3, 800ebba <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800ebb4:	2201      	movs	r2, #1
 800ebb6:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800ebba:	4a06      	ldr	r2, [pc, #24]	; (800ebd4 <ProcessRadioTxTimeout+0x48>)
 800ebbc:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ebc0:	f043 0310 	orr.w	r3, r3, #16
 800ebc4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800ebc8:	bd10      	pop	{r4, pc}
 800ebca:	bf00      	nop
 800ebcc:	20008000 	.word	0x20008000
 800ebd0:	0801e9c8 	.word	0x0801e9c8
 800ebd4:	20001264 	.word	0x20001264

0800ebd8 <CheckForClassBCollision>:
{
 800ebd8:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ebda:	f002 fab4 	bl	8011146 <LoRaMacClassBIsBeaconExpected>
 800ebde:	b978      	cbnz	r0, 800ec00 <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ebe0:	4b09      	ldr	r3, [pc, #36]	; (800ec08 <CheckForClassBCollision+0x30>)
 800ebe2:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ebe6:	2b01      	cmp	r3, #1
 800ebe8:	d001      	beq.n	800ebee <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800ebea:	2000      	movs	r0, #0
}
 800ebec:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ebee:	f002 faac 	bl	801114a <LoRaMacClassBIsPingExpected>
 800ebf2:	b938      	cbnz	r0, 800ec04 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ebf4:	f002 faab 	bl	801114e <LoRaMacClassBIsMulticastExpected>
 800ebf8:	2800      	cmp	r0, #0
 800ebfa:	d0f7      	beq.n	800ebec <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ebfc:	200f      	movs	r0, #15
 800ebfe:	e7f5      	b.n	800ebec <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800ec00:	200e      	movs	r0, #14
 800ec02:	e7f3      	b.n	800ebec <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800ec04:	200f      	movs	r0, #15
 800ec06:	e7f1      	b.n	800ebec <CheckForClassBCollision+0x14>
 800ec08:	20008000 	.word	0x20008000

0800ec0c <HandleRadioRxErrorTimeout>:
{
 800ec0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0e:	4605      	mov	r5, r0
 800ec10:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800ec12:	4b34      	ldr	r3, [pc, #208]	; (800ece4 <HandleRadioRxErrorTimeout+0xd8>)
 800ec14:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ec18:	2b02      	cmp	r3, #2
 800ec1a:	d002      	beq.n	800ec22 <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800ec1c:	4b32      	ldr	r3, [pc, #200]	; (800ece8 <HandleRadioRxErrorTimeout+0xdc>)
 800ec1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec20:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800ec22:	f002 fa90 	bl	8011146 <LoRaMacClassBIsBeaconExpected>
 800ec26:	4606      	mov	r6, r0
 800ec28:	bb50      	cbnz	r0, 800ec80 <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800ec2a:	4b2e      	ldr	r3, [pc, #184]	; (800ece4 <HandleRadioRxErrorTimeout+0xd8>)
 800ec2c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ec30:	2b01      	cmp	r3, #1
 800ec32:	d02c      	beq.n	800ec8e <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800ec34:	2e00      	cmp	r6, #0
 800ec36:	d152      	bne.n	800ecde <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ec38:	4b2c      	ldr	r3, [pc, #176]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ec3a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800ec3e:	2b00      	cmp	r3, #0
 800ec40:	d13c      	bne.n	800ecbc <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800ec42:	4b2a      	ldr	r3, [pc, #168]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ec44:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ec48:	b113      	cbz	r3, 800ec50 <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800ec4a:	4b28      	ldr	r3, [pc, #160]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ec4c:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800ec50:	4628      	mov	r0, r5
 800ec52:	f002 fcd1 	bl	80115f8 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800ec56:	4b23      	ldr	r3, [pc, #140]	; (800ece4 <HandleRadioRxErrorTimeout+0xd8>)
 800ec58:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800ec5a:	f007 ffaf 	bl	8016bbc <UTIL_TIMER_GetElapsedTime>
 800ec5e:	4b23      	ldr	r3, [pc, #140]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ec60:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800ec64:	4298      	cmp	r0, r3
 800ec66:	d33a      	bcc.n	800ecde <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800ec68:	4c20      	ldr	r4, [pc, #128]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ec6a:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800ec6e:	f007 ffdb 	bl	8016c28 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800ec72:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800ec76:	f043 0310 	orr.w	r3, r3, #16
 800ec7a:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800ec7e:	e02e      	b.n	800ecde <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800ec80:	2002      	movs	r0, #2
 800ec82:	f002 fa56 	bl	8011132 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800ec86:	2000      	movs	r0, #0
 800ec88:	f002 fa58 	bl	801113c <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800ec8c:	e7cd      	b.n	800ec2a <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800ec8e:	f002 fa5c 	bl	801114a <LoRaMacClassBIsPingExpected>
 800ec92:	4607      	mov	r7, r0
 800ec94:	b950      	cbnz	r0, 800ecac <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800ec96:	f002 fa5a 	bl	801114e <LoRaMacClassBIsMulticastExpected>
 800ec9a:	2800      	cmp	r0, #0
 800ec9c:	d0ca      	beq.n	800ec34 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ec9e:	2000      	movs	r0, #0
 800eca0:	f002 fa49 	bl	8011136 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800eca4:	2000      	movs	r0, #0
 800eca6:	f002 fa4b 	bl	8011140 <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800ecaa:	e018      	b.n	800ecde <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800ecac:	2000      	movs	r0, #0
 800ecae:	f002 fa41 	bl	8011134 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	f002 fa43 	bl	801113e <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800ecb8:	463e      	mov	r6, r7
 800ecba:	e7ec      	b.n	800ec96 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800ecbc:	4b0b      	ldr	r3, [pc, #44]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ecbe:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800ecc2:	b113      	cbz	r3, 800ecca <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800ecc4:	4b09      	ldr	r3, [pc, #36]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ecc6:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800ecca:	4620      	mov	r0, r4
 800eccc:	f002 fc94 	bl	80115f8 <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800ecd0:	4a06      	ldr	r2, [pc, #24]	; (800ecec <HandleRadioRxErrorTimeout+0xe0>)
 800ecd2:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800ecd6:	f043 0310 	orr.w	r3, r3, #16
 800ecda:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800ecde:	f7fe fe73 	bl	800d9c8 <UpdateRxSlotIdleState>
}
 800ece2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ece4:	20008000 	.word	0x20008000
 800ece8:	0801e9c8 	.word	0x0801e9c8
 800ecec:	20001264 	.word	0x20001264

0800ecf0 <ProcessRadioRxError>:
{
 800ecf0:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800ecf2:	2106      	movs	r1, #6
 800ecf4:	2005      	movs	r0, #5
 800ecf6:	f7ff ff89 	bl	800ec0c <HandleRadioRxErrorTimeout>
}
 800ecfa:	bd08      	pop	{r3, pc}

0800ecfc <ProcessRadioRxTimeout>:
{
 800ecfc:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800ecfe:	2104      	movs	r1, #4
 800ed00:	2003      	movs	r0, #3
 800ed02:	f7ff ff83 	bl	800ec0c <HandleRadioRxErrorTimeout>
}
 800ed06:	bd08      	pop	{r3, pc}

0800ed08 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed08:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ed0c:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800ed0e:	4a14      	ldr	r2, [pc, #80]	; (800ed60 <LoRaMacHandleIrqEvents+0x58>)
 800ed10:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800ed12:	2000      	movs	r0, #0
 800ed14:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed16:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800ed1a:	b303      	cbz	r3, 800ed5e <LoRaMacHandleIrqEvents+0x56>
{
 800ed1c:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800ed1e:	b2dc      	uxtb	r4, r3
 800ed20:	f013 0f20 	tst.w	r3, #32
 800ed24:	d10c      	bne.n	800ed40 <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800ed26:	f014 0f10 	tst.w	r4, #16
 800ed2a:	d10c      	bne.n	800ed46 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800ed2c:	f014 0f08 	tst.w	r4, #8
 800ed30:	d10c      	bne.n	800ed4c <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800ed32:	f014 0f04 	tst.w	r4, #4
 800ed36:	d10c      	bne.n	800ed52 <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800ed38:	f014 0f02 	tst.w	r4, #2
 800ed3c:	d10c      	bne.n	800ed58 <LoRaMacHandleIrqEvents+0x50>
}
 800ed3e:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800ed40:	f7fe ffc4 	bl	800dccc <ProcessRadioTxDone>
 800ed44:	e7ef      	b.n	800ed26 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800ed46:	f7ff fbbb 	bl	800e4c0 <ProcessRadioRxDone>
 800ed4a:	e7ef      	b.n	800ed2c <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800ed4c:	f7ff ff1e 	bl	800eb8c <ProcessRadioTxTimeout>
 800ed50:	e7ef      	b.n	800ed32 <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800ed52:	f7ff ffcd 	bl	800ecf0 <ProcessRadioRxError>
 800ed56:	e7ef      	b.n	800ed38 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800ed58:	f7ff ffd0 	bl	800ecfc <ProcessRadioRxTimeout>
}
 800ed5c:	e7ef      	b.n	800ed3e <LoRaMacHandleIrqEvents+0x36>
 800ed5e:	4770      	bx	lr
 800ed60:	20001260 	.word	0x20001260

0800ed64 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800ed64:	b909      	cbnz	r1, 800ed6a <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800ed66:	2000      	movs	r0, #0
}
 800ed68:	4770      	bx	lr
{
 800ed6a:	b510      	push	{r4, lr}
 800ed6c:	4604      	mov	r4, r0
 800ed6e:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ed70:	f007 ff24 	bl	8016bbc <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800ed74:	42a0      	cmp	r0, r4
 800ed76:	d801      	bhi.n	800ed7c <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800ed78:	2000      	movs	r0, #0
}
 800ed7a:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800ed7c:	4b02      	ldr	r3, [pc, #8]	; (800ed88 <LoRaMacHandleResponseTimeout+0x24>)
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800ed84:	2001      	movs	r0, #1
 800ed86:	e7f8      	b.n	800ed7a <LoRaMacHandleResponseTimeout+0x16>
 800ed88:	20008000 	.word	0x20008000

0800ed8c <LoRaMacHandleMlmeRequest>:
{
 800ed8c:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ed8e:	4b14      	ldr	r3, [pc, #80]	; (800ede0 <LoRaMacHandleMlmeRequest+0x54>)
 800ed90:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800ed94:	f013 0f04 	tst.w	r3, #4
 800ed98:	d100      	bne.n	800ed9c <LoRaMacHandleMlmeRequest+0x10>
}
 800ed9a:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ed9c:	2001      	movs	r0, #1
 800ed9e:	f002 fc49 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800eda2:	b178      	cbz	r0, 800edc4 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800eda4:	2001      	movs	r0, #1
 800eda6:	f002 fc0f 	bl	80115c8 <LoRaMacConfirmQueueGetStatus>
 800edaa:	b918      	cbnz	r0, 800edb4 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800edac:	4b0c      	ldr	r3, [pc, #48]	; (800ede0 <LoRaMacHandleMlmeRequest+0x54>)
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800edb4:	4a0a      	ldr	r2, [pc, #40]	; (800ede0 <LoRaMacHandleMlmeRequest+0x54>)
 800edb6:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800edba:	f023 0302 	bic.w	r3, r3, #2
 800edbe:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800edc2:	e7ea      	b.n	800ed9a <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800edc4:	2006      	movs	r0, #6
 800edc6:	f002 fc35 	bl	8011634 <LoRaMacConfirmQueueIsCmdActive>
 800edca:	2800      	cmp	r0, #0
 800edcc:	d0e5      	beq.n	800ed9a <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800edce:	4a04      	ldr	r2, [pc, #16]	; (800ede0 <LoRaMacHandleMlmeRequest+0x54>)
 800edd0:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800edd4:	f023 0302 	bic.w	r3, r3, #2
 800edd8:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800eddc:	e7dd      	b.n	800ed9a <LoRaMacHandleMlmeRequest+0xe>
 800edde:	bf00      	nop
 800ede0:	20001264 	.word	0x20001264

0800ede4 <SerializeTxFrame>:
{
 800ede4:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800ede6:	4b0f      	ldr	r3, [pc, #60]	; (800ee24 <SerializeTxFrame+0x40>)
 800ede8:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800edec:	b11b      	cbz	r3, 800edf6 <SerializeTxFrame+0x12>
 800edee:	2b04      	cmp	r3, #4
 800edf0:	d00a      	beq.n	800ee08 <SerializeTxFrame+0x24>
 800edf2:	2003      	movs	r0, #3
}
 800edf4:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800edf6:	480c      	ldr	r0, [pc, #48]	; (800ee28 <SerializeTxFrame+0x44>)
 800edf8:	f003 f94f 	bl	801209a <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800edfc:	b968      	cbnz	r0, 800ee1a <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800edfe:	4b09      	ldr	r3, [pc, #36]	; (800ee24 <SerializeTxFrame+0x40>)
 800ee00:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ee04:	801a      	strh	r2, [r3, #0]
            break;
 800ee06:	e7f5      	b.n	800edf4 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ee08:	4807      	ldr	r0, [pc, #28]	; (800ee28 <SerializeTxFrame+0x44>)
 800ee0a:	f003 f97c 	bl	8012106 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ee0e:	b930      	cbnz	r0, 800ee1e <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ee10:	4b04      	ldr	r3, [pc, #16]	; (800ee24 <SerializeTxFrame+0x40>)
 800ee12:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ee16:	801a      	strh	r2, [r3, #0]
            break;
 800ee18:	e7ec      	b.n	800edf4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee1a:	2011      	movs	r0, #17
 800ee1c:	e7ea      	b.n	800edf4 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ee1e:	2011      	movs	r0, #17
 800ee20:	e7e8      	b.n	800edf4 <SerializeTxFrame+0x10>
 800ee22:	bf00      	nop
 800ee24:	20001264 	.word	0x20001264
 800ee28:	2000136c 	.word	0x2000136c

0800ee2c <ComputeRxWindowParameters>:
{
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ee30:	4c1e      	ldr	r4, [pc, #120]	; (800eeac <ComputeRxWindowParameters+0x80>)
 800ee32:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800ee36:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800ee3a:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800ee3e:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800ee42:	4630      	mov	r0, r6
 800ee44:	f003 fa93 	bl	801236e <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ee48:	4d19      	ldr	r5, [pc, #100]	; (800eeb0 <ComputeRxWindowParameters+0x84>)
 800ee4a:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800ee4e:	9300      	str	r3, [sp, #0]
 800ee50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ee52:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800ee56:	b241      	sxtb	r1, r0
 800ee58:	4630      	mov	r0, r6
 800ee5a:	f003 fa21 	bl	80122a0 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800ee5e:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800ee62:	9300      	str	r3, [sp, #0]
 800ee64:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800ee66:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800ee6a:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800ee6e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ee72:	f003 fa15 	bl	80122a0 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ee76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ee78:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800ee7c:	440b      	add	r3, r1
 800ee7e:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ee82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800ee84:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800ee88:	4413      	add	r3, r2
 800ee8a:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800ee8e:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800ee92:	2b04      	cmp	r3, #4
 800ee94:	d007      	beq.n	800eea6 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800ee96:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800ee98:	4419      	add	r1, r3
 800ee9a:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800ee9e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800eea0:	440a      	add	r2, r1
 800eea2:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800eea6:	b002      	add	sp, #8
 800eea8:	bd70      	pop	{r4, r5, r6, pc}
 800eeaa:	bf00      	nop
 800eeac:	20008000 	.word	0x20008000
 800eeb0:	20001264 	.word	0x20001264

0800eeb4 <VerifyTxFrame>:
{
 800eeb4:	b510      	push	{r4, lr}
 800eeb6:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800eeb8:	2300      	movs	r3, #0
 800eeba:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800eebc:	4b0d      	ldr	r3, [pc, #52]	; (800eef4 <VerifyTxFrame+0x40>)
 800eebe:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800eec2:	b914      	cbnz	r4, 800eeca <VerifyTxFrame+0x16>
}
 800eec4:	4620      	mov	r0, r4
 800eec6:	b002      	add	sp, #8
 800eec8:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800eeca:	a801      	add	r0, sp, #4
 800eecc:	f002 fa78 	bl	80113c0 <LoRaMacCommandsGetSizeSerializedCmds>
 800eed0:	4604      	mov	r4, r0
 800eed2:	b968      	cbnz	r0, 800eef0 <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800eed4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800eed8:	4b06      	ldr	r3, [pc, #24]	; (800eef4 <VerifyTxFrame+0x40>)
 800eeda:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800eede:	4b06      	ldr	r3, [pc, #24]	; (800eef8 <VerifyTxFrame+0x44>)
 800eee0:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800eee4:	f7fe fee0 	bl	800dca8 <ValidatePayloadLength>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d1eb      	bne.n	800eec4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800eeec:	2408      	movs	r4, #8
 800eeee:	e7e9      	b.n	800eec4 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800eef0:	2413      	movs	r4, #19
 800eef2:	e7e7      	b.n	800eec4 <VerifyTxFrame+0x10>
 800eef4:	20008000 	.word	0x20008000
 800eef8:	20001264 	.word	0x20001264

0800eefc <SecureFrame>:
{
 800eefc:	b530      	push	{r4, r5, lr}
 800eefe:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800ef04:	4b18      	ldr	r3, [pc, #96]	; (800ef68 <SecureFrame+0x6c>)
 800ef06:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800ef0a:	b133      	cbz	r3, 800ef1a <SecureFrame+0x1e>
 800ef0c:	4605      	mov	r5, r0
 800ef0e:	460c      	mov	r4, r1
 800ef10:	2b04      	cmp	r3, #4
 800ef12:	d00b      	beq.n	800ef2c <SecureFrame+0x30>
 800ef14:	2003      	movs	r0, #3
}
 800ef16:	b003      	add	sp, #12
 800ef18:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ef1a:	4814      	ldr	r0, [pc, #80]	; (800ef6c <SecureFrame+0x70>)
 800ef1c:	f002 fe7a 	bl	8011c14 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ef20:	b9d8      	cbnz	r0, 800ef5a <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ef22:	4b11      	ldr	r3, [pc, #68]	; (800ef68 <SecureFrame+0x6c>)
 800ef24:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ef28:	801a      	strh	r2, [r3, #0]
            break;
 800ef2a:	e7f4      	b.n	800ef16 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800ef2c:	a801      	add	r0, sp, #4
 800ef2e:	f002 fe25 	bl	8011b7c <LoRaMacCryptoGetFCntUp>
 800ef32:	b9a0      	cbnz	r0, 800ef5e <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800ef34:	4b0c      	ldr	r3, [pc, #48]	; (800ef68 <SecureFrame+0x6c>)
 800ef36:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800ef3a:	b113      	cbz	r3, 800ef42 <SecureFrame+0x46>
                fCntUp -= 1;
 800ef3c:	9b01      	ldr	r3, [sp, #4]
 800ef3e:	3b01      	subs	r3, #1
 800ef40:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800ef42:	4b0a      	ldr	r3, [pc, #40]	; (800ef6c <SecureFrame+0x70>)
 800ef44:	4622      	mov	r2, r4
 800ef46:	4629      	mov	r1, r5
 800ef48:	9801      	ldr	r0, [sp, #4]
 800ef4a:	f002 fe8d 	bl	8011c68 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800ef4e:	b940      	cbnz	r0, 800ef62 <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ef50:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <SecureFrame+0x6c>)
 800ef52:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800ef56:	801a      	strh	r2, [r3, #0]
            break;
 800ef58:	e7dd      	b.n	800ef16 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef5a:	2011      	movs	r0, #17
 800ef5c:	e7db      	b.n	800ef16 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800ef5e:	2012      	movs	r0, #18
 800ef60:	e7d9      	b.n	800ef16 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ef62:	2011      	movs	r0, #17
 800ef64:	e7d7      	b.n	800ef16 <SecureFrame+0x1a>
 800ef66:	bf00      	nop
 800ef68:	20001264 	.word	0x20001264
 800ef6c:	2000136c 	.word	0x2000136c

0800ef70 <SendFrameOnChannel>:
{
 800ef70:	b570      	push	{r4, r5, r6, lr}
 800ef72:	b086      	sub	sp, #24
 800ef74:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800ef76:	2300      	movs	r3, #0
 800ef78:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800ef7c:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ef80:	4d36      	ldr	r5, [pc, #216]	; (800f05c <SendFrameOnChannel+0xec>)
 800ef82:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800ef86:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800ef8a:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800ef8e:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800ef92:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800ef96:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800ef98:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800ef9c:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800ef9e:	4c30      	ldr	r4, [pc, #192]	; (800f060 <SendFrameOnChannel+0xf0>)
 800efa0:	8823      	ldrh	r3, [r4, #0]
 800efa2:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800efa6:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800efaa:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800efae:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800efb2:	f10d 0207 	add.w	r2, sp, #7
 800efb6:	a902      	add	r1, sp, #8
 800efb8:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800efbc:	f003 f985 	bl	80122ca <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800efc0:	2301      	movs	r3, #1
 800efc2:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800efc6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800efca:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800efce:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800efd2:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800efd6:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800efda:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800efde:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800efe2:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800efe6:	f002 f8b4 	bl	8011152 <LoRaMacClassBIsBeaconModeActive>
 800efea:	bb60      	cbnz	r0, 800f046 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800efec:	4b1b      	ldr	r3, [pc, #108]	; (800f05c <SendFrameOnChannel+0xec>)
 800efee:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d02f      	beq.n	800f056 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800eff6:	f002 f8af 	bl	8011158 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800effa:	4b18      	ldr	r3, [pc, #96]	; (800f05c <SendFrameOnChannel+0xec>)
 800effc:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800f000:	4b17      	ldr	r3, [pc, #92]	; (800f060 <SendFrameOnChannel+0xf0>)
 800f002:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800f006:	b2c0      	uxtb	r0, r0
 800f008:	f7ff ff78 	bl	800eefc <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800f00c:	4604      	mov	r4, r0
 800f00e:	b9b8      	cbnz	r0, 800f040 <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800f010:	4813      	ldr	r0, [pc, #76]	; (800f060 <SendFrameOnChannel+0xf0>)
 800f012:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800f016:	f043 0302 	orr.w	r3, r3, #2
 800f01a:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800f01e:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800f022:	3301      	adds	r3, #1
 800f024:	b2db      	uxtb	r3, r3
 800f026:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f02a:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800f02e:	2300      	movs	r3, #0
 800f030:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800f034:	4b0b      	ldr	r3, [pc, #44]	; (800f064 <SendFrameOnChannel+0xf4>)
 800f036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f038:	f830 1b02 	ldrh.w	r1, [r0], #2
 800f03c:	b2c9      	uxtb	r1, r1
 800f03e:	4798      	blx	r3
}
 800f040:	4620      	mov	r0, r4
 800f042:	b006      	add	sp, #24
 800f044:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800f046:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800f04a:	f002 f894 	bl	8011176 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800f04e:	2800      	cmp	r0, #0
 800f050:	d0cc      	beq.n	800efec <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800f052:	2410      	movs	r4, #16
 800f054:	e7f4      	b.n	800f040 <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800f056:	f002 f890 	bl	801117a <LoRaMacClassBStopRxSlots>
 800f05a:	e7cc      	b.n	800eff6 <SendFrameOnChannel+0x86>
 800f05c:	20008000 	.word	0x20008000
 800f060:	20001264 	.word	0x20001264
 800f064:	0801e9c8 	.word	0x0801e9c8

0800f068 <ScheduleTx>:
{
 800f068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f06c:	b08c      	sub	sp, #48	; 0x30
 800f06e:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800f070:	f7ff fdb2 	bl	800ebd8 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800f074:	4604      	mov	r4, r0
 800f076:	b118      	cbz	r0, 800f080 <ScheduleTx+0x18>
}
 800f078:	4620      	mov	r0, r4
 800f07a:	b00c      	add	sp, #48	; 0x30
 800f07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800f080:	f7fe fd06 	bl	800da90 <CalculateBackOff>
    status = SerializeTxFrame( );
 800f084:	f7ff feae 	bl	800ede4 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800f088:	4604      	mov	r4, r0
 800f08a:	2800      	cmp	r0, #0
 800f08c:	d1f4      	bne.n	800f078 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800f08e:	4e36      	ldr	r6, [pc, #216]	; (800f168 <ScheduleTx+0x100>)
 800f090:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800f092:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f094:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800f098:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800f09c:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800f0a0:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800f0a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	f007 fcf1 	bl	8016a90 <SysTimeGetMcuTime>
 800f0ae:	af02      	add	r7, sp, #8
 800f0b0:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800f0b4:	9300      	str	r3, [sp, #0]
 800f0b6:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800f0ba:	e898 0006 	ldmia.w	r8, {r1, r2}
 800f0be:	4638      	mov	r0, r7
 800f0c0:	f007 fc83 	bl	80169ca <SysTimeSub>
 800f0c4:	ab07      	add	r3, sp, #28
 800f0c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f0ca:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800f0ce:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800f0d0:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800f0d8:	2301      	movs	r3, #1
 800f0da:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800f0de:	4b23      	ldr	r3, [pc, #140]	; (800f16c <ScheduleTx+0x104>)
 800f0e0:	881b      	ldrh	r3, [r3, #0]
 800f0e2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800f0e6:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800f0ea:	b92b      	cbnz	r3, 800f0f8 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800f0f8:	4a1c      	ldr	r2, [pc, #112]	; (800f16c <ScheduleTx+0x104>)
 800f0fa:	481b      	ldr	r0, [pc, #108]	; (800f168 <ScheduleTx+0x100>)
 800f0fc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800f106:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800f10a:	a904      	add	r1, sp, #16
 800f10c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800f110:	f003 f921 	bl	8012356 <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800f114:	b1c0      	cbz	r0, 800f148 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800f116:	280b      	cmp	r0, #11
 800f118:	d124      	bne.n	800f164 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800f11a:	4a14      	ldr	r2, [pc, #80]	; (800f16c <ScheduleTx+0x104>)
 800f11c:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800f120:	b191      	cbz	r1, 800f148 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800f122:	b90d      	cbnz	r5, 800f128 <ScheduleTx+0xc0>
                return status;
 800f124:	4604      	mov	r4, r0
 800f126:	e7a7      	b.n	800f078 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800f128:	4615      	mov	r5, r2
 800f12a:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800f12e:	f042 0220 	orr.w	r2, r2, #32
 800f132:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800f136:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800f13a:	4628      	mov	r0, r5
 800f13c:	f007 fe14 	bl	8016d68 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800f140:	4628      	mov	r0, r5
 800f142:	f007 fdcb 	bl	8016cdc <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800f146:	e797      	b.n	800f078 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800f148:	f7ff fe70 	bl	800ee2c <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800f14c:	f7ff feb2 	bl	800eeb4 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800f150:	4604      	mov	r4, r0
 800f152:	2800      	cmp	r0, #0
 800f154:	d190      	bne.n	800f078 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800f156:	4b05      	ldr	r3, [pc, #20]	; (800f16c <ScheduleTx+0x104>)
 800f158:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800f15c:	f7ff ff08 	bl	800ef70 <SendFrameOnChannel>
 800f160:	4604      	mov	r4, r0
 800f162:	e789      	b.n	800f078 <ScheduleTx+0x10>
            return status;
 800f164:	4604      	mov	r4, r0
 800f166:	e787      	b.n	800f078 <ScheduleTx+0x10>
 800f168:	20008000 	.word	0x20008000
 800f16c:	20001264 	.word	0x20001264

0800f170 <OnTxDelayedTimerEvent>:
{
 800f170:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800f172:	4c16      	ldr	r4, [pc, #88]	; (800f1cc <OnTxDelayedTimerEvent+0x5c>)
 800f174:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800f178:	f007 fd56 	bl	8016c28 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f17c:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800f180:	f023 0320 	bic.w	r3, r3, #32
 800f184:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800f188:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800f18c:	4b10      	ldr	r3, [pc, #64]	; (800f1d0 <OnTxDelayedTimerEvent+0x60>)
 800f18e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800f192:	f7ff fde7 	bl	800ed64 <LoRaMacHandleResponseTimeout>
 800f196:	b100      	cbz	r0, 800f19a <OnTxDelayedTimerEvent+0x2a>
}
 800f198:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800f19a:	2001      	movs	r0, #1
 800f19c:	f7ff ff64 	bl	800f068 <ScheduleTx>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	d0f9      	beq.n	800f198 <OnTxDelayedTimerEvent+0x28>
 800f1a4:	280b      	cmp	r0, #11
 800f1a6:	d0f7      	beq.n	800f198 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800f1a8:	4b09      	ldr	r3, [pc, #36]	; (800f1d0 <OnTxDelayedTimerEvent+0x60>)
 800f1aa:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800f1ae:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800f1b2:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800f1b6:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800f1ba:	2009      	movs	r0, #9
 800f1bc:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800f1c0:	f002 fa1a 	bl	80115f8 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800f1c4:	f7fe fcf6 	bl	800dbb4 <StopRetransmission>
            break;
 800f1c8:	e7e6      	b.n	800f198 <OnTxDelayedTimerEvent+0x28>
 800f1ca:	bf00      	nop
 800f1cc:	20001264 	.word	0x20001264
 800f1d0:	20008000 	.word	0x20008000

0800f1d4 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f1d4:	4b1c      	ldr	r3, [pc, #112]	; (800f248 <LoRaMacHandleMcpsRequest+0x74>)
 800f1d6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f1da:	f013 0f01 	tst.w	r3, #1
 800f1de:	d032      	beq.n	800f246 <LoRaMacHandleMcpsRequest+0x72>
{
 800f1e0:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800f1e2:	4b19      	ldr	r3, [pc, #100]	; (800f248 <LoRaMacHandleMcpsRequest+0x74>)
 800f1e4:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800f1e8:	b12b      	cbz	r3, 800f1f6 <LoRaMacHandleMcpsRequest+0x22>
 800f1ea:	2b03      	cmp	r3, #3
 800f1ec:	d003      	beq.n	800f1f6 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800f1ee:	2b01      	cmp	r3, #1
 800f1f0:	d006      	beq.n	800f200 <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800f1f2:	2000      	movs	r0, #0
 800f1f4:	e002      	b.n	800f1fc <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800f1f6:	f7fe fca3 	bl	800db40 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800f1fa:	b940      	cbnz	r0, 800f20e <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800f1fc:	b1b8      	cbz	r0, 800f22e <LoRaMacHandleMcpsRequest+0x5a>
}
 800f1fe:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800f200:	4b11      	ldr	r3, [pc, #68]	; (800f248 <LoRaMacHandleMcpsRequest+0x74>)
 800f202:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800f206:	b183      	cbz	r3, 800f22a <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800f208:	f7fe fcb6 	bl	800db78 <CheckRetransConfirmedUplink>
 800f20c:	e7f5      	b.n	800f1fa <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800f20e:	4c0e      	ldr	r4, [pc, #56]	; (800f248 <LoRaMacHandleMcpsRequest+0x74>)
 800f210:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800f214:	f007 fd08 	bl	8016c28 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800f218:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800f21c:	f023 0320 	bic.w	r3, r3, #32
 800f220:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800f224:	f7fe fcc6 	bl	800dbb4 <StopRetransmission>
 800f228:	e7e9      	b.n	800f1fe <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800f22a:	2001      	movs	r0, #1
 800f22c:	e7e6      	b.n	800f1fc <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800f22e:	4b06      	ldr	r3, [pc, #24]	; (800f248 <LoRaMacHandleMcpsRequest+0x74>)
 800f230:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f234:	f36f 1204 	bfc	r2, #4, #1
 800f238:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800f23c:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800f240:	f7ff ff96 	bl	800f170 <OnTxDelayedTimerEvent>
}
 800f244:	e7db      	b.n	800f1fe <LoRaMacHandleMcpsRequest+0x2a>
 800f246:	4770      	bx	lr
 800f248:	20001264 	.word	0x20001264

0800f24c <LoRaMacHandleRequestEvents>:
{
 800f24c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800f24e:	4b22      	ldr	r3, [pc, #136]	; (800f2d8 <LoRaMacHandleRequestEvents+0x8c>)
 800f250:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f254:	bb7b      	cbnz	r3, 800f2b6 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800f256:	4b20      	ldr	r3, [pc, #128]	; (800f2d8 <LoRaMacHandleRequestEvents+0x8c>)
 800f258:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800f25c:	f014 0501 	ands.w	r5, r4, #1
 800f260:	d005      	beq.n	800f26e <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800f262:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f266:	f36f 0200 	bfc	r2, #0, #1
 800f26a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800f26e:	4b1a      	ldr	r3, [pc, #104]	; (800f2d8 <LoRaMacHandleRequestEvents+0x8c>)
 800f270:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800f274:	f013 0f04 	tst.w	r3, #4
 800f278:	d006      	beq.n	800f288 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800f27a:	4b17      	ldr	r3, [pc, #92]	; (800f2d8 <LoRaMacHandleRequestEvents+0x8c>)
 800f27c:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f280:	f36f 0282 	bfc	r2, #2, #1
 800f284:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800f288:	2001      	movs	r0, #1
 800f28a:	f7fe fbb1 	bl	800d9f0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800f28e:	b135      	cbz	r5, 800f29e <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800f290:	4811      	ldr	r0, [pc, #68]	; (800f2d8 <LoRaMacHandleRequestEvents+0x8c>)
 800f292:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800f29c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800f29e:	f014 0f04 	tst.w	r4, #4
 800f2a2:	d109      	bne.n	800f2b8 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800f2a4:	f001 ff59 	bl	801115a <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800f2a8:	4b0b      	ldr	r3, [pc, #44]	; (800f2d8 <LoRaMacHandleRequestEvents+0x8c>)
 800f2aa:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800f2ae:	f36f 1204 	bfc	r2, #4, #1
 800f2b2:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800f2b6:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800f2b8:	4808      	ldr	r0, [pc, #32]	; (800f2dc <LoRaMacHandleRequestEvents+0x90>)
 800f2ba:	f002 f9c7 	bl	801164c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800f2be:	f002 f9fd 	bl	80116bc <LoRaMacConfirmQueueGetCnt>
 800f2c2:	2800      	cmp	r0, #0
 800f2c4:	d0ee      	beq.n	800f2a4 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800f2c6:	4a04      	ldr	r2, [pc, #16]	; (800f2d8 <LoRaMacHandleRequestEvents+0x8c>)
 800f2c8:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800f2cc:	f043 0304 	orr.w	r3, r3, #4
 800f2d0:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800f2d4:	e7e6      	b.n	800f2a4 <LoRaMacHandleRequestEvents+0x58>
 800f2d6:	bf00      	nop
 800f2d8:	20001264 	.word	0x20001264
 800f2dc:	200016b8 	.word	0x200016b8

0800f2e0 <OpenContinuousRxCWindow>:
{
 800f2e0:	b570      	push	{r4, r5, r6, lr}
 800f2e2:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800f2e4:	4c16      	ldr	r4, [pc, #88]	; (800f340 <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800f2e6:	4d17      	ldr	r5, [pc, #92]	; (800f344 <OpenContinuousRxCWindow+0x64>)
 800f2e8:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800f2ec:	9600      	str	r6, [sp, #0]
 800f2ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800f2f0:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800f2f4:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800f2f8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800f2fc:	f002 ffd0 	bl	80122a0 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f300:	2302      	movs	r3, #2
 800f302:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f306:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800f30a:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f30e:	2301      	movs	r3, #1
 800f310:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f314:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800f318:	4631      	mov	r1, r6
 800f31a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800f31e:	f002 ffca 	bl	80122b6 <RegionRxConfig>
 800f322:	b158      	cbz	r0, 800f33c <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f324:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800f328:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800f32c:	4b06      	ldr	r3, [pc, #24]	; (800f348 <OpenContinuousRxCWindow+0x68>)
 800f32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f330:	2000      	movs	r0, #0
 800f332:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800f334:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800f338:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800f33c:	b002      	add	sp, #8
 800f33e:	bd70      	pop	{r4, r5, r6, pc}
 800f340:	20008000 	.word	0x20008000
 800f344:	20001264 	.word	0x20001264
 800f348:	0801e9c8 	.word	0x0801e9c8

0800f34c <RxWindowSetup>:
{
 800f34c:	b538      	push	{r3, r4, r5, lr}
 800f34e:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800f350:	f007 fc6a 	bl	8016c28 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800f354:	4b0c      	ldr	r3, [pc, #48]	; (800f388 <RxWindowSetup+0x3c>)
 800f356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f358:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800f35a:	4a0c      	ldr	r2, [pc, #48]	; (800f38c <RxWindowSetup+0x40>)
 800f35c:	4621      	mov	r1, r4
 800f35e:	4b0c      	ldr	r3, [pc, #48]	; (800f390 <RxWindowSetup+0x44>)
 800f360:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800f364:	f002 ffa7 	bl	80122b6 <RegionRxConfig>
 800f368:	b160      	cbz	r0, 800f384 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800f36a:	4d0a      	ldr	r5, [pc, #40]	; (800f394 <RxWindowSetup+0x48>)
 800f36c:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800f370:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800f374:	4b04      	ldr	r3, [pc, #16]	; (800f388 <RxWindowSetup+0x3c>)
 800f376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f378:	4a05      	ldr	r2, [pc, #20]	; (800f390 <RxWindowSetup+0x44>)
 800f37a:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800f37c:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800f37e:	7ce3      	ldrb	r3, [r4, #19]
 800f380:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800f384:	bd38      	pop	{r3, r4, r5, pc}
 800f386:	bf00      	nop
 800f388:	0801e9c8 	.word	0x0801e9c8
 800f38c:	20001688 	.word	0x20001688
 800f390:	20008000 	.word	0x20008000
 800f394:	20001264 	.word	0x20001264

0800f398 <OnRxWindow2TimerEvent>:
{
 800f398:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800f39a:	4b13      	ldr	r3, [pc, #76]	; (800f3e8 <OnRxWindow2TimerEvent+0x50>)
 800f39c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800f3a0:	b903      	cbnz	r3, 800f3a4 <OnRxWindow2TimerEvent+0xc>
}
 800f3a2:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f3a4:	4810      	ldr	r0, [pc, #64]	; (800f3e8 <OnRxWindow2TimerEvent+0x50>)
 800f3a6:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800f3aa:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f3ae:	4b0f      	ldr	r3, [pc, #60]	; (800f3ec <OnRxWindow2TimerEvent+0x54>)
 800f3b0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f3b2:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f3b6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f3ba:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f3be:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f3c2:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f3c6:	2200      	movs	r2, #0
 800f3c8:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f3cc:	2201      	movs	r2, #1
 800f3ce:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f3d2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800f3d6:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800f3da:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800f3de:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800f3e2:	f7ff ffb3 	bl	800f34c <RxWindowSetup>
 800f3e6:	e7dc      	b.n	800f3a2 <OnRxWindow2TimerEvent+0xa>
 800f3e8:	20001264 	.word	0x20001264
 800f3ec:	20008000 	.word	0x20008000

0800f3f0 <OnRxWindow1TimerEvent>:
{
 800f3f0:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800f3f2:	4811      	ldr	r0, [pc, #68]	; (800f438 <OnRxWindow1TimerEvent+0x48>)
 800f3f4:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800f3f8:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800f3fc:	4b0f      	ldr	r3, [pc, #60]	; (800f43c <OnRxWindow1TimerEvent+0x4c>)
 800f3fe:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800f402:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f406:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800f40a:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f40e:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800f412:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800f416:	2200      	movs	r2, #0
 800f418:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800f41c:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f420:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800f424:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800f428:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800f42c:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800f430:	f7ff ff8c 	bl	800f34c <RxWindowSetup>
}
 800f434:	bd08      	pop	{r3, pc}
 800f436:	bf00      	nop
 800f438:	20001264 	.word	0x20001264
 800f43c:	20008000 	.word	0x20008000

0800f440 <LoRaMacHandleNvm>:
{
 800f440:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800f442:	4b31      	ldr	r3, [pc, #196]	; (800f508 <LoRaMacHandleNvm+0xc8>)
 800f444:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f448:	b103      	cbz	r3, 800f44c <LoRaMacHandleNvm+0xc>
}
 800f44a:	bd38      	pop	{r3, r4, r5, pc}
 800f44c:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800f44e:	2124      	movs	r1, #36	; 0x24
 800f450:	f005 f9dc 	bl	801480c <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800f454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f456:	4283      	cmp	r3, r0
 800f458:	d053      	beq.n	800f502 <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800f45a:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800f45c:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800f45e:	211c      	movs	r1, #28
 800f460:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f464:	f005 f9d2 	bl	801480c <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800f468:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f46a:	4283      	cmp	r3, r0
 800f46c:	d002      	beq.n	800f474 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800f46e:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800f470:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800f474:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f478:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f47c:	f005 f9c6 	bl	801480c <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800f480:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800f484:	4283      	cmp	r3, r0
 800f486:	d003      	beq.n	800f490 <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800f488:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800f48c:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800f490:	21f4      	movs	r1, #244	; 0xf4
 800f492:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800f496:	f005 f9b9 	bl	801480c <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800f49a:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800f49e:	4283      	cmp	r3, r0
 800f4a0:	d003      	beq.n	800f4aa <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800f4a2:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800f4a6:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800f4aa:	2100      	movs	r1, #0
 800f4ac:	f504 7012 	add.w	r0, r4, #584	; 0x248
 800f4b0:	f005 f9ac 	bl	801480c <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800f4b4:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
 800f4b8:	4283      	cmp	r3, r0
 800f4ba:	d003      	beq.n	800f4c4 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800f4bc:	f8c4 0248 	str.w	r0, [r4, #584]	; 0x248
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800f4c0:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800f4c4:	f44f 7160 	mov.w	r1, #896	; 0x380
 800f4c8:	f504 7013 	add.w	r0, r4, #588	; 0x24c
 800f4cc:	f005 f99e 	bl	801480c <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800f4d0:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800f4d4:	4283      	cmp	r3, r0
 800f4d6:	d003      	beq.n	800f4e0 <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800f4d8:	f8c4 05cc 	str.w	r0, [r4, #1484]	; 0x5cc
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800f4dc:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800f4e0:	2114      	movs	r1, #20
 800f4e2:	f504 60ba 	add.w	r0, r4, #1488	; 0x5d0
 800f4e6:	f005 f991 	bl	801480c <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800f4ea:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800f4ee:	4283      	cmp	r3, r0
 800f4f0:	d003      	beq.n	800f4fa <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800f4f2:	f8c4 05e4 	str.w	r0, [r4, #1508]	; 0x5e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800f4f6:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800f4fa:	4628      	mov	r0, r5
 800f4fc:	f7fe fb9c 	bl	800dc38 <CallNvmDataChangeCallback>
 800f500:	e7a3      	b.n	800f44a <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800f502:	2500      	movs	r5, #0
 800f504:	e7ab      	b.n	800f45e <LoRaMacHandleNvm+0x1e>
 800f506:	bf00      	nop
 800f508:	20001264 	.word	0x20001264

0800f50c <RestoreNvmData>:
{
 800f50c:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800f50e:	4b3d      	ldr	r3, [pc, #244]	; (800f604 <RestoreNvmData+0xf8>)
 800f510:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800f514:	2b01      	cmp	r3, #1
 800f516:	d001      	beq.n	800f51c <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800f518:	2001      	movs	r0, #1
}
 800f51a:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800f51c:	4c3a      	ldr	r4, [pc, #232]	; (800f608 <RestoreNvmData+0xfc>)
 800f51e:	2124      	movs	r1, #36	; 0x24
 800f520:	4620      	mov	r0, r4
 800f522:	f005 f973 	bl	801480c <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800f526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f528:	4283      	cmp	r3, r0
 800f52a:	d001      	beq.n	800f530 <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f52c:	2017      	movs	r0, #23
 800f52e:	e7f4      	b.n	800f51a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800f530:	211c      	movs	r1, #28
 800f532:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800f536:	f005 f969 	bl	801480c <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800f53a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800f53c:	4283      	cmp	r3, r0
 800f53e:	d001      	beq.n	800f544 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f540:	2017      	movs	r0, #23
 800f542:	e7ea      	b.n	800f51a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800f544:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f548:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800f54c:	f005 f95e 	bl	801480c <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800f550:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800f554:	4283      	cmp	r3, r0
 800f556:	d001      	beq.n	800f55c <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f558:	2017      	movs	r0, #23
 800f55a:	e7de      	b.n	800f51a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800f55c:	21f4      	movs	r1, #244	; 0xf4
 800f55e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800f562:	f005 f953 	bl	801480c <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800f566:	f8d4 3224 	ldr.w	r3, [r4, #548]	; 0x224
 800f56a:	4283      	cmp	r3, r0
 800f56c:	d001      	beq.n	800f572 <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f56e:	2017      	movs	r0, #23
 800f570:	e7d3      	b.n	800f51a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800f572:	2100      	movs	r1, #0
 800f574:	f504 7012 	add.w	r0, r4, #584	; 0x248
 800f578:	f005 f948 	bl	801480c <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800f57c:	f8d4 3248 	ldr.w	r3, [r4, #584]	; 0x248
 800f580:	4283      	cmp	r3, r0
 800f582:	d001      	beq.n	800f588 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f584:	2017      	movs	r0, #23
 800f586:	e7c8      	b.n	800f51a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800f588:	f44f 7160 	mov.w	r1, #896	; 0x380
 800f58c:	f504 7013 	add.w	r0, r4, #588	; 0x24c
 800f590:	f005 f93c 	bl	801480c <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800f594:	f8d4 35cc 	ldr.w	r3, [r4, #1484]	; 0x5cc
 800f598:	4283      	cmp	r3, r0
 800f59a:	d001      	beq.n	800f5a0 <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f59c:	2017      	movs	r0, #23
 800f59e:	e7bc      	b.n	800f51a <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800f5a0:	2114      	movs	r1, #20
 800f5a2:	f504 60ba 	add.w	r0, r4, #1488	; 0x5d0
 800f5a6:	f005 f931 	bl	801480c <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800f5aa:	f8d4 35e4 	ldr.w	r3, [r4, #1508]	; 0x5e4
 800f5ae:	4283      	cmp	r3, r0
 800f5b0:	d001      	beq.n	800f5b6 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800f5b2:	2017      	movs	r0, #23
 800f5b4:	e7b1      	b.n	800f51a <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800f5b6:	4625      	mov	r5, r4
 800f5b8:	4c14      	ldr	r4, [pc, #80]	; (800f60c <RestoreNvmData+0x100>)
 800f5ba:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800f5be:	4629      	mov	r1, r5
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f005 f902 	bl	80147ca <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800f5c6:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800f5ca:	2100      	movs	r1, #0
 800f5cc:	4628      	mov	r0, r5
 800f5ce:	f005 f914 	bl	80147fa <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f5d2:	4b0c      	ldr	r3, [pc, #48]	; (800f604 <RestoreNvmData+0xf8>)
 800f5d4:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800f5d8:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f5dc:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800f5de:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f5e2:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800f5e6:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f5f0:	2202      	movs	r2, #2
 800f5f2:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800f5f6:	4b06      	ldr	r3, [pc, #24]	; (800f610 <RestoreNvmData+0x104>)
 800f5f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5fa:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800f5fe:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800f600:	2000      	movs	r0, #0
 800f602:	e78a      	b.n	800f51a <RestoreNvmData+0xe>
 800f604:	20001264 	.word	0x20001264
 800f608:	200085e8 	.word	0x200085e8
 800f60c:	20008000 	.word	0x20008000
 800f610:	0801e9c8 	.word	0x0801e9c8

0800f614 <OnRadioRxTimeout>:
{
 800f614:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800f616:	4a07      	ldr	r2, [pc, #28]	; (800f634 <OnRadioRxTimeout+0x20>)
 800f618:	7813      	ldrb	r3, [r2, #0]
 800f61a:	f043 0302 	orr.w	r3, r3, #2
 800f61e:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800f620:	f7fe faf2 	bl	800dc08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800f624:	4b04      	ldr	r3, [pc, #16]	; (800f638 <OnRadioRxTimeout+0x24>)
 800f626:	2201      	movs	r2, #1
 800f628:	2100      	movs	r1, #0
 800f62a:	2002      	movs	r0, #2
 800f62c:	f006 ffaa 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800f630:	bd08      	pop	{r3, pc}
 800f632:	bf00      	nop
 800f634:	20001260 	.word	0x20001260
 800f638:	0801e160 	.word	0x0801e160

0800f63c <OnRadioTxTimeout>:
{
 800f63c:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800f63e:	4a07      	ldr	r2, [pc, #28]	; (800f65c <OnRadioTxTimeout+0x20>)
 800f640:	7813      	ldrb	r3, [r2, #0]
 800f642:	f043 0308 	orr.w	r3, r3, #8
 800f646:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800f648:	f7fe fade 	bl	800dc08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800f64c:	4b04      	ldr	r3, [pc, #16]	; (800f660 <OnRadioTxTimeout+0x24>)
 800f64e:	2201      	movs	r2, #1
 800f650:	2100      	movs	r1, #0
 800f652:	2002      	movs	r0, #2
 800f654:	f006 ff96 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800f658:	bd08      	pop	{r3, pc}
 800f65a:	bf00      	nop
 800f65c:	20001260 	.word	0x20001260
 800f660:	0801e170 	.word	0x0801e170

0800f664 <OnRadioRxDone>:
{
 800f664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f668:	4680      	mov	r8, r0
 800f66a:	460f      	mov	r7, r1
 800f66c:	4616      	mov	r6, r2
 800f66e:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800f670:	f007 fa9a 	bl	8016ba8 <UTIL_TIMER_GetCurrentTime>
 800f674:	4c16      	ldr	r4, [pc, #88]	; (800f6d0 <OnRadioRxDone+0x6c>)
 800f676:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800f678:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800f67c:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800f67e:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800f680:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800f682:	4b14      	ldr	r3, [pc, #80]	; (800f6d4 <OnRadioRxDone+0x70>)
 800f684:	781a      	ldrb	r2, [r3, #0]
 800f686:	f042 0210 	orr.w	r2, r2, #16
 800f68a:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800f68c:	b2d2      	uxtb	r2, r2
 800f68e:	f042 0201 	orr.w	r2, r2, #1
 800f692:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800f694:	f7fe fab8 	bl	800dc08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800f698:	4b0f      	ldr	r3, [pc, #60]	; (800f6d8 <OnRadioRxDone+0x74>)
 800f69a:	2201      	movs	r2, #1
 800f69c:	2100      	movs	r1, #0
 800f69e:	2002      	movs	r0, #2
 800f6a0:	f006 ff70 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    isTxSuccess = true;
 800f6a4:	4b0d      	ldr	r3, [pc, #52]	; (800f6dc <OnRadioRxDone+0x78>)
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	701a      	strb	r2, [r3, #0]
    if(confUplinkCounter >= MAX_UPLINK_BEFORE_CONFIRMED){
 800f6aa:	4b0d      	ldr	r3, [pc, #52]	; (800f6e0 <OnRadioRxDone+0x7c>)
 800f6ac:	881a      	ldrh	r2, [r3, #0]
 800f6ae:	4b0d      	ldr	r3, [pc, #52]	; (800f6e4 <OnRadioRxDone+0x80>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	da01      	bge.n	800f6ba <OnRadioRxDone+0x56>
}
 800f6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	MW_LOG(TS_ON, VLEVEL_M, "Resetting Uplink Counter\r\n" );
 800f6ba:	4b0b      	ldr	r3, [pc, #44]	; (800f6e8 <OnRadioRxDone+0x84>)
 800f6bc:	2201      	movs	r2, #1
 800f6be:	2100      	movs	r1, #0
 800f6c0:	2002      	movs	r0, #2
 800f6c2:	f006 ff5f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        confUplinkCounter = 0;
 800f6c6:	4b06      	ldr	r3, [pc, #24]	; (800f6e0 <OnRadioRxDone+0x7c>)
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	801a      	strh	r2, [r3, #0]
}
 800f6cc:	e7f3      	b.n	800f6b6 <OnRadioRxDone+0x52>
 800f6ce:	bf00      	nop
 800f6d0:	20001810 	.word	0x20001810
 800f6d4:	20001260 	.word	0x20001260
 800f6d8:	0801e180 	.word	0x0801e180
 800f6dc:	200009e2 	.word	0x200009e2
 800f6e0:	200009e0 	.word	0x200009e0
 800f6e4:	20000040 	.word	0x20000040
 800f6e8:	0801e190 	.word	0x0801e190

0800f6ec <OnRadioTxDone>:
{
 800f6ec:	b510      	push	{r4, lr}
 800f6ee:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800f6f0:	f007 fa5a 	bl	8016ba8 <UTIL_TIMER_GetCurrentTime>
 800f6f4:	4b0c      	ldr	r3, [pc, #48]	; (800f728 <OnRadioTxDone+0x3c>)
 800f6f6:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800f6f8:	466c      	mov	r4, sp
 800f6fa:	4620      	mov	r0, r4
 800f6fc:	f007 f9a6 	bl	8016a4c <SysTimeGet>
 800f700:	4b0a      	ldr	r3, [pc, #40]	; (800f72c <OnRadioTxDone+0x40>)
 800f702:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f706:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800f70a:	4a09      	ldr	r2, [pc, #36]	; (800f730 <OnRadioTxDone+0x44>)
 800f70c:	7813      	ldrb	r3, [r2, #0]
 800f70e:	f043 0320 	orr.w	r3, r3, #32
 800f712:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800f714:	f7fe fa78 	bl	800dc08 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800f718:	4b06      	ldr	r3, [pc, #24]	; (800f734 <OnRadioTxDone+0x48>)
 800f71a:	2201      	movs	r2, #1
 800f71c:	2100      	movs	r1, #0
 800f71e:	2002      	movs	r0, #2
 800f720:	f006 ff30 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 800f724:	b002      	add	sp, #8
 800f726:	bd10      	pop	{r4, pc}
 800f728:	20001820 	.word	0x20001820
 800f72c:	2000159c 	.word	0x2000159c
 800f730:	20001260 	.word	0x20001260
 800f734:	0801e1ac 	.word	0x0801e1ac

0800f738 <ResetMacParameters>:
{
 800f738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f73a:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800f73c:	b918      	cbnz	r0, 800f746 <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800f73e:	4b61      	ldr	r3, [pc, #388]	; (800f8c4 <ResetMacParameters+0x18c>)
 800f740:	2200      	movs	r2, #0
 800f742:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800f746:	4c5f      	ldr	r4, [pc, #380]	; (800f8c4 <ResetMacParameters+0x18c>)
 800f748:	2500      	movs	r5, #0
 800f74a:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800f74c:	4e5e      	ldr	r6, [pc, #376]	; (800f8c8 <ResetMacParameters+0x190>)
 800f74e:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800f752:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800f756:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800f75a:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800f75e:	2701      	movs	r7, #1
 800f760:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800f764:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800f768:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800f76c:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800f770:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800f774:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800f778:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800f77c:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800f780:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800f784:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f788:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800f78c:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800f790:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800f794:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f798:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800f79c:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800f7a0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800f7a4:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800f7a8:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800f7ac:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800f7b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800f7b4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800f7b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800f7bc:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800f7c0:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800f7c4:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800f7c8:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800f7cc:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800f7d0:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800f7d4:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800f7d8:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800f7dc:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800f7e0:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800f7e4:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800f7e8:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800f7ec:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800f7f0:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800f7f4:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800f7f8:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800f7fc:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800f800:	f504 7312 	add.w	r3, r4, #584	; 0x248
 800f804:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800f806:	f504 7313 	add.w	r3, r4, #588	; 0x24c
 800f80a:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800f80c:	4b2f      	ldr	r3, [pc, #188]	; (800f8cc <ResetMacParameters+0x194>)
 800f80e:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800f810:	a901      	add	r1, sp, #4
 800f812:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800f816:	f002 fd23 	bl	8012260 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800f81a:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800f81e:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800f822:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800f824:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f828:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800f82c:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f830:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800f834:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800f838:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800f83c:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800f840:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800f844:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f848:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800f84c:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800f850:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f854:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f856:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f85a:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800f85e:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f862:	2302      	movs	r3, #2
 800f864:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800f868:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800f86a:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800f86c:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800f870:	b11b      	cbz	r3, 800f87a <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800f872:	685a      	ldr	r2, [r3, #4]
 800f874:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800f876:	695b      	ldr	r3, [r3, #20]
 800f878:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800f87a:	4b13      	ldr	r3, [pc, #76]	; (800f8c8 <ResetMacParameters+0x190>)
 800f87c:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800f880:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800f882:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800f886:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800f888:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800f88c:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800f88e:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800f892:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800f894:	4a0b      	ldr	r2, [pc, #44]	; (800f8c4 <ResetMacParameters+0x18c>)
 800f896:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800f89a:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800f89c:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800f8a0:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800f8a2:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800f8a6:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800f8a8:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800f8ac:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800f8ae:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800f8b2:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800f8b4:	f502 62ba 	add.w	r2, r2, #1488	; 0x5d0
 800f8b8:	a90e      	add	r1, sp, #56	; 0x38
 800f8ba:	a805      	add	r0, sp, #20
 800f8bc:	f001 fc38 	bl	8011130 <LoRaMacClassBInit>
}
 800f8c0:	b011      	add	sp, #68	; 0x44
 800f8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8c4:	20008000 	.word	0x20008000
 800f8c8:	20001264 	.word	0x20001264
 800f8cc:	20001780 	.word	0x20001780

0800f8d0 <SwitchClass>:
{
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800f8d4:	4b45      	ldr	r3, [pc, #276]	; (800f9ec <SwitchClass+0x11c>)
 800f8d6:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800f8da:	2d01      	cmp	r5, #1
 800f8dc:	d06e      	beq.n	800f9bc <SwitchClass+0xec>
 800f8de:	2d02      	cmp	r5, #2
 800f8e0:	d074      	beq.n	800f9cc <SwitchClass+0xfc>
 800f8e2:	b10d      	cbz	r5, 800f8e8 <SwitchClass+0x18>
 800f8e4:	2003      	movs	r0, #3
}
 800f8e6:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800f8e8:	bb58      	cbnz	r0, 800f942 <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800f8ea:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800f8ee:	336c      	adds	r3, #108	; 0x6c
 800f8f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f8f4:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800f8f8:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800f8fa:	2c01      	cmp	r4, #1
 800f8fc:	d023      	beq.n	800f946 <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800f8fe:	2c02      	cmp	r4, #2
 800f900:	d1f1      	bne.n	800f8e6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f902:	4b3a      	ldr	r3, [pc, #232]	; (800f9ec <SwitchClass+0x11c>)
 800f904:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f908:	4e39      	ldr	r6, [pc, #228]	; (800f9f0 <SwitchClass+0x120>)
 800f90a:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800f90e:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800f912:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f916:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f918:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800f91c:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f920:	2302      	movs	r3, #2
 800f922:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f926:	2300      	movs	r3, #0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	dd15      	ble.n	800f958 <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800f92c:	4b30      	ldr	r3, [pc, #192]	; (800f9f0 <SwitchClass+0x120>)
 800f92e:	2200      	movs	r2, #0
 800f930:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800f934:	4b2f      	ldr	r3, [pc, #188]	; (800f9f4 <SwitchClass+0x124>)
 800f936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f938:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800f93a:	f7ff fcd1 	bl	800f2e0 <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800f93e:	4628      	mov	r0, r5
 800f940:	e7d1      	b.n	800f8e6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f942:	2003      	movs	r0, #3
 800f944:	e7d9      	b.n	800f8fa <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800f946:	4620      	mov	r0, r4
 800f948:	f001 fc08 	bl	801115c <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d1d6      	bne.n	800f8fe <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800f950:	4b26      	ldr	r3, [pc, #152]	; (800f9ec <SwitchClass+0x11c>)
 800f952:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800f956:	e7d2      	b.n	800f8fe <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f958:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f95c:	4a23      	ldr	r2, [pc, #140]	; (800f9ec <SwitchClass+0x11c>)
 800f95e:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800f962:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800f966:	b132      	cbz	r2, 800f976 <SwitchClass+0xa6>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800f968:	4a20      	ldr	r2, [pc, #128]	; (800f9ec <SwitchClass+0x11c>)
 800f96a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800f96e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800f972:	2a02      	cmp	r2, #2
 800f974:	d002      	beq.n	800f97c <SwitchClass+0xac>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f976:	3301      	adds	r3, #1
 800f978:	b25b      	sxtb	r3, r3
 800f97a:	e7d5      	b.n	800f928 <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800f97c:	4a1b      	ldr	r2, [pc, #108]	; (800f9ec <SwitchClass+0x11c>)
 800f97e:	eb02 1301 	add.w	r3, r2, r1, lsl #4
 800f982:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800f986:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800f988:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800f98c:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f990:	4b17      	ldr	r3, [pc, #92]	; (800f9f0 <SwitchClass+0x120>)
 800f992:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800f996:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f99a:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f99e:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800f9a2:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800f9a6:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800f9aa:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f9ae:	2203      	movs	r2, #3
 800f9b0:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f9b4:	2201      	movs	r2, #1
 800f9b6:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800f9ba:	e7b7      	b.n	800f92c <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f9bc:	f001 fbce 	bl	801115c <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	d190      	bne.n	800f8e6 <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f9c4:	4b09      	ldr	r3, [pc, #36]	; (800f9ec <SwitchClass+0x11c>)
 800f9c6:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800f9ca:	e78c      	b.n	800f8e6 <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800f9cc:	b958      	cbnz	r0, 800f9e6 <SwitchClass+0x116>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800f9ce:	4b08      	ldr	r3, [pc, #32]	; (800f9f0 <SwitchClass+0x120>)
 800f9d0:	2206      	movs	r2, #6
 800f9d2:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f9d6:	4b05      	ldr	r3, [pc, #20]	; (800f9ec <SwitchClass+0x11c>)
 800f9d8:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800f9dc:	4b05      	ldr	r3, [pc, #20]	; (800f9f4 <SwitchClass+0x124>)
 800f9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f9e0:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	e77f      	b.n	800f8e6 <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800f9e6:	2003      	movs	r0, #3
 800f9e8:	e77d      	b.n	800f8e6 <SwitchClass+0x16>
 800f9ea:	bf00      	nop
 800f9ec:	20008000 	.word	0x20008000
 800f9f0:	20001264 	.word	0x20001264
 800f9f4:	0801e9c8 	.word	0x0801e9c8

0800f9f8 <SendReJoinReq>:
{
 800f9f8:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800f9fa:	28ff      	cmp	r0, #255	; 0xff
 800f9fc:	d003      	beq.n	800fa06 <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800f9fe:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800fa00:	f7ff fb32 	bl	800f068 <ScheduleTx>
}
 800fa04:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800fa06:	2000      	movs	r0, #0
 800fa08:	f7ff ff62 	bl	800f8d0 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fa0c:	4d0a      	ldr	r5, [pc, #40]	; (800fa38 <SendReJoinReq+0x40>)
 800fa0e:	2400      	movs	r4, #0
 800fa10:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fa14:	1cab      	adds	r3, r5, #2
 800fa16:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fa1a:	23ff      	movs	r3, #255	; 0xff
 800fa1c:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fa20:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800fa24:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800fa28:	f004 fdb2 	bl	8014590 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800fa2c:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800fa30:	f004 fd90 	bl	8014554 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800fa34:	4620      	mov	r0, r4
            break;
 800fa36:	e7e3      	b.n	800fa00 <SendReJoinReq+0x8>
 800fa38:	20001264 	.word	0x20001264

0800fa3c <PrepareFrame>:
{
 800fa3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa40:	b083      	sub	sp, #12
 800fa42:	4605      	mov	r5, r0
 800fa44:	460e      	mov	r6, r1
 800fa46:	4617      	mov	r7, r2
 800fa48:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800fa4c:	4959      	ldr	r1, [pc, #356]	; (800fbb4 <PrepareFrame+0x178>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800fa52:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800fa56:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800fa58:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800fa5a:	4698      	mov	r8, r3
 800fa5c:	b1cb      	cbz	r3, 800fa92 <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800fa5e:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800fbb4 <PrepareFrame+0x178>
 800fa62:	4622      	mov	r2, r4
 800fa64:	4641      	mov	r1, r8
 800fa66:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800fa6a:	f004 feae 	bl	80147ca <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800fa6e:	b2e0      	uxtb	r0, r4
 800fa70:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800fa74:	782b      	ldrb	r3, [r5, #0]
 800fa76:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800fa7a:	782b      	ldrb	r3, [r5, #0]
 800fa7c:	095b      	lsrs	r3, r3, #5
 800fa7e:	2b04      	cmp	r3, #4
 800fa80:	d009      	beq.n	800fa96 <PrepareFrame+0x5a>
 800fa82:	2b07      	cmp	r3, #7
 800fa84:	d079      	beq.n	800fb7a <PrepareFrame+0x13e>
 800fa86:	2b02      	cmp	r3, #2
 800fa88:	d009      	beq.n	800fa9e <PrepareFrame+0x62>
 800fa8a:	2002      	movs	r0, #2
}
 800fa8c:	b003      	add	sp, #12
 800fa8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800fa92:	4614      	mov	r4, r2
 800fa94:	e7e3      	b.n	800fa5e <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800fa96:	4b47      	ldr	r3, [pc, #284]	; (800fbb4 <PrepareFrame+0x178>)
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800fa9e:	4b45      	ldr	r3, [pc, #276]	; (800fbb4 <PrepareFrame+0x178>)
 800faa0:	2204      	movs	r2, #4
 800faa2:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800faa6:	1c9a      	adds	r2, r3, #2
 800faa8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800faac:	22ff      	movs	r2, #255	; 0xff
 800faae:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800fab2:	782a      	ldrb	r2, [r5, #0]
 800fab4:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800fab8:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800fabc:	4a3e      	ldr	r2, [pc, #248]	; (800fbb8 <PrepareFrame+0x17c>)
 800fabe:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800fac2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fac6:	7832      	ldrb	r2, [r6, #0]
 800fac8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800facc:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800fad0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800fad4:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800fad8:	a801      	add	r0, sp, #4
 800fada:	f002 f84f 	bl	8011b7c <LoRaMacCryptoGetFCntUp>
 800fade:	2800      	cmp	r0, #0
 800fae0:	d15c      	bne.n	800fb9c <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800fae2:	9a01      	ldr	r2, [sp, #4]
 800fae4:	4b33      	ldr	r3, [pc, #204]	; (800fbb4 <PrepareFrame+0x178>)
 800fae6:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800faea:	2100      	movs	r1, #0
 800faec:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800faf0:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800faf4:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800faf8:	4668      	mov	r0, sp
 800fafa:	f001 fc61 	bl	80113c0 <LoRaMacCommandsGetSizeSerializedCmds>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	d14e      	bne.n	800fba0 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800fb02:	9b00      	ldr	r3, [sp, #0]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d0c1      	beq.n	800fa8c <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800fb08:	4b2b      	ldr	r3, [pc, #172]	; (800fbb8 <PrepareFrame+0x17c>)
 800fb0a:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800fb0e:	f7fe f8ab 	bl	800dc68 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fb12:	4b28      	ldr	r3, [pc, #160]	; (800fbb4 <PrepareFrame+0x178>)
 800fb14:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800fb18:	b113      	cbz	r3, 800fb20 <PrepareFrame+0xe4>
 800fb1a:	9a00      	ldr	r2, [sp, #0]
 800fb1c:	2a0f      	cmp	r2, #15
 800fb1e:	d915      	bls.n	800fb4c <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800fb20:	b113      	cbz	r3, 800fb28 <PrepareFrame+0xec>
 800fb22:	9b00      	ldr	r3, [sp, #0]
 800fb24:	2b0f      	cmp	r3, #15
 800fb26:	d821      	bhi.n	800fb6c <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fb28:	4a24      	ldr	r2, [pc, #144]	; (800fbbc <PrepareFrame+0x180>)
 800fb2a:	4669      	mov	r1, sp
 800fb2c:	f001 fc54 	bl	80113d8 <LoRaMacCommandsSerializeCmds>
 800fb30:	2800      	cmp	r0, #0
 800fb32:	d13b      	bne.n	800fbac <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800fb34:	4b1f      	ldr	r3, [pc, #124]	; (800fbb4 <PrepareFrame+0x178>)
 800fb36:	2200      	movs	r2, #0
 800fb38:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800fb3c:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800fb40:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800fb44:	9a00      	ldr	r2, [sp, #0]
 800fb46:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800fb4a:	e79f      	b.n	800fa8c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800fb4c:	4a1c      	ldr	r2, [pc, #112]	; (800fbc0 <PrepareFrame+0x184>)
 800fb4e:	4669      	mov	r1, sp
 800fb50:	200f      	movs	r0, #15
 800fb52:	f001 fc41 	bl	80113d8 <LoRaMacCommandsSerializeCmds>
 800fb56:	bb28      	cbnz	r0, 800fba4 <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800fb58:	7833      	ldrb	r3, [r6, #0]
 800fb5a:	9a00      	ldr	r2, [sp, #0]
 800fb5c:	f362 0303 	bfi	r3, r2, #0, #4
 800fb60:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800fb62:	b2da      	uxtb	r2, r3
 800fb64:	4b13      	ldr	r3, [pc, #76]	; (800fbb4 <PrepareFrame+0x178>)
 800fb66:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800fb6a:	e78f      	b.n	800fa8c <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800fb6c:	4a13      	ldr	r2, [pc, #76]	; (800fbbc <PrepareFrame+0x180>)
 800fb6e:	4669      	mov	r1, sp
 800fb70:	f001 fc32 	bl	80113d8 <LoRaMacCommandsSerializeCmds>
 800fb74:	b1c0      	cbz	r0, 800fba8 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fb76:	2013      	movs	r0, #19
 800fb78:	e788      	b.n	800fa8c <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800fb7a:	f1b8 0f00 	cmp.w	r8, #0
 800fb7e:	d017      	beq.n	800fbb0 <PrepareFrame+0x174>
 800fb80:	2800      	cmp	r0, #0
 800fb82:	d083      	beq.n	800fa8c <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800fb84:	4c0b      	ldr	r4, [pc, #44]	; (800fbb4 <PrepareFrame+0x178>)
 800fb86:	b282      	uxth	r2, r0
 800fb88:	4641      	mov	r1, r8
 800fb8a:	1ce0      	adds	r0, r4, #3
 800fb8c:	f004 fe1d 	bl	80147ca <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800fb90:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800fb94:	3301      	adds	r3, #1
 800fb96:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800fb98:	2000      	movs	r0, #0
 800fb9a:	e777      	b.n	800fa8c <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800fb9c:	2012      	movs	r0, #18
 800fb9e:	e775      	b.n	800fa8c <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fba0:	2013      	movs	r0, #19
 800fba2:	e773      	b.n	800fa8c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fba4:	2013      	movs	r0, #19
 800fba6:	e771      	b.n	800fa8c <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800fba8:	200a      	movs	r0, #10
 800fbaa:	e76f      	b.n	800fa8c <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fbac:	2013      	movs	r0, #19
 800fbae:	e76d      	b.n	800fa8c <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800fbb0:	2000      	movs	r0, #0
 800fbb2:	e76b      	b.n	800fa8c <PrepareFrame+0x50>
 800fbb4:	20001264 	.word	0x20001264
 800fbb8:	20008000 	.word	0x20008000
 800fbbc:	20001700 	.word	0x20001700
 800fbc0:	2000137c 	.word	0x2000137c

0800fbc4 <Send>:
{
 800fbc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbc8:	b08a      	sub	sp, #40	; 0x28
 800fbca:	4617      	mov	r7, r2
 800fbcc:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbce:	4c44      	ldr	r4, [pc, #272]	; (800fce0 <Send+0x11c>)
 800fbd0:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbd4:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fbd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800fbda:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fbdc:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d07a      	beq.n	800fcda <Send+0x116>
 800fbe4:	4605      	mov	r5, r0
 800fbe6:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fbe8:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800fbec:	b90b      	cbnz	r3, 800fbf2 <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fbee:	2100      	movs	r1, #0
 800fbf0:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fbf8:	4839      	ldr	r0, [pc, #228]	; (800fce0 <Send+0x11c>)
 800fbfa:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800fbfe:	f361 13c7 	bfi	r3, r1, #7, #1
 800fc02:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc06:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	d052      	beq.n	800fcb4 <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fc0e:	4b34      	ldr	r3, [pc, #208]	; (800fce0 <Send+0x11c>)
 800fc10:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800fc14:	b12b      	cbz	r3, 800fc22 <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800fc16:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800fc1a:	f043 0320 	orr.w	r3, r3, #32
 800fc1e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800fc22:	2301      	movs	r3, #1
 800fc24:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fc28:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fc2c:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800fc2e:	492c      	ldr	r1, [pc, #176]	; (800fce0 <Send+0x11c>)
 800fc30:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800fc34:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800fc38:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800fc3c:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fc40:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fc44:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fc48:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800fc4c:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800fc50:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800fc54:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fc58:	460b      	mov	r3, r1
 800fc5a:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800fc5e:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fc62:	aa08      	add	r2, sp, #32
 800fc64:	9200      	str	r2, [sp, #0]
 800fc66:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800fc6a:	3139      	adds	r1, #57	; 0x39
 800fc6c:	a803      	add	r0, sp, #12
 800fc6e:	f001 f9e5 	bl	801103c <LoRaMacAdrCalcNext>
 800fc72:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800fc76:	f360 1386 	bfi	r3, r0, #6, #1
 800fc7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fc7e:	f8cd 8000 	str.w	r8, [sp]
 800fc82:	463b      	mov	r3, r7
 800fc84:	4632      	mov	r2, r6
 800fc86:	a909      	add	r1, sp, #36	; 0x24
 800fc88:	4628      	mov	r0, r5
 800fc8a:	f7ff fed7 	bl	800fa3c <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fc8e:	4604      	mov	r4, r0
 800fc90:	b108      	cbz	r0, 800fc96 <Send+0xd2>
 800fc92:	280a      	cmp	r0, #10
 800fc94:	d104      	bne.n	800fca0 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800fc96:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800fc9a:	f7ff f9e5 	bl	800f068 <ScheduleTx>
 800fc9e:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800fca0:	b17c      	cbz	r4, 800fcc2 <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fca2:	4b0f      	ldr	r3, [pc, #60]	; (800fce0 <Send+0x11c>)
 800fca4:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fca8:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800fcac:	4620      	mov	r0, r4
 800fcae:	b00a      	add	sp, #40	; 0x28
 800fcb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800fcb4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800fcb8:	f043 0310 	orr.w	r3, r3, #16
 800fcbc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800fcc0:	e7a5      	b.n	800fc0e <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800fcc2:	4b07      	ldr	r3, [pc, #28]	; (800fce0 <Send+0x11c>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fcca:	9a08      	ldr	r2, [sp, #32]
 800fccc:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fcce:	f001 fb45 	bl	801135c <LoRaMacCommandsRemoveNoneStickyCmds>
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d0ea      	beq.n	800fcac <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fcd6:	2413      	movs	r4, #19
 800fcd8:	e7e8      	b.n	800fcac <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fcda:	2407      	movs	r4, #7
 800fcdc:	e7e6      	b.n	800fcac <Send+0xe8>
 800fcde:	bf00      	nop
 800fce0:	20008000 	.word	0x20008000

0800fce4 <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800fce4:	4b0c      	ldr	r3, [pc, #48]	; (800fd18 <LoRaMacIsBusy+0x34>)
 800fce6:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fcea:	2b01      	cmp	r3, #1
 800fcec:	d00c      	beq.n	800fd08 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800fcee:	4a0b      	ldr	r2, [pc, #44]	; (800fd1c <LoRaMacIsBusy+0x38>)
 800fcf0:	7812      	ldrb	r2, [r2, #0]
 800fcf2:	f012 0f01 	tst.w	r2, #1
 800fcf6:	d109      	bne.n	800fd0c <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fcf8:	b953      	cbnz	r3, 800fd10 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800fcfa:	4b07      	ldr	r3, [pc, #28]	; (800fd18 <LoRaMacIsBusy+0x34>)
 800fcfc:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800fd00:	2b01      	cmp	r3, #1
 800fd02:	d007      	beq.n	800fd14 <LoRaMacIsBusy+0x30>
    return true;
 800fd04:	2001      	movs	r0, #1
 800fd06:	4770      	bx	lr
        return false;
 800fd08:	2000      	movs	r0, #0
 800fd0a:	4770      	bx	lr
        return true;
 800fd0c:	2001      	movs	r0, #1
 800fd0e:	4770      	bx	lr
    return true;
 800fd10:	2001      	movs	r0, #1
 800fd12:	4770      	bx	lr
        return false;
 800fd14:	2000      	movs	r0, #0
}
 800fd16:	4770      	bx	lr
 800fd18:	20001264 	.word	0x20001264
 800fd1c:	20001260 	.word	0x20001260

0800fd20 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800fd20:	4b04      	ldr	r3, [pc, #16]	; (800fd34 <LoRaMacIsStopped+0x14>)
 800fd22:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800fd26:	2b01      	cmp	r3, #1
 800fd28:	d001      	beq.n	800fd2e <LoRaMacIsStopped+0xe>
    return false;
 800fd2a:	2000      	movs	r0, #0
 800fd2c:	4770      	bx	lr
        return true;
 800fd2e:	2001      	movs	r0, #1
}
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop
 800fd34:	20001264 	.word	0x20001264

0800fd38 <LoRaMacProcess>:
{
 800fd38:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800fd3a:	f7fe ffe5 	bl	800ed08 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800fd3e:	f001 fa1e 	bl	801117e <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800fd42:	4b1f      	ldr	r3, [pc, #124]	; (800fdc0 <LoRaMacProcess+0x88>)
 800fd44:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800fd48:	f013 0f10 	tst.w	r3, #16
 800fd4c:	d10d      	bne.n	800fd6a <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800fd4e:	f7fd fe55 	bl	800d9fc <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800fd52:	4b1b      	ldr	r3, [pc, #108]	; (800fdc0 <LoRaMacProcess+0x88>)
 800fd54:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800fd58:	2b02      	cmp	r3, #2
 800fd5a:	d022      	beq.n	800fda2 <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800fd5c:	4b18      	ldr	r3, [pc, #96]	; (800fdc0 <LoRaMacProcess+0x88>)
 800fd5e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800fd62:	f013 0f20 	tst.w	r3, #32
 800fd66:	d11f      	bne.n	800fda8 <LoRaMacProcess+0x70>
}
 800fd68:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800fd6a:	2000      	movs	r0, #0
 800fd6c:	f7fd fe40 	bl	800d9f0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800fd70:	f7fd fe7c 	bl	800da6c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800fd74:	f7fd ff6c 	bl	800dc50 <IsRequestPending>
 800fd78:	b110      	cbz	r0, 800fd80 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800fd7a:	f7fe f85b 	bl	800de34 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800fd7e:	b918      	cbnz	r0, 800fd88 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800fd80:	f7ff f804 	bl	800ed8c <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800fd84:	f7ff fa26 	bl	800f1d4 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800fd88:	f7ff fa60 	bl	800f24c <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800fd8c:	2001      	movs	r0, #1
 800fd8e:	f7fd fe2f 	bl	800d9f0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800fd92:	4a0b      	ldr	r2, [pc, #44]	; (800fdc0 <LoRaMacProcess+0x88>)
 800fd94:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800fd98:	f043 0320 	orr.w	r3, r3, #32
 800fd9c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800fda0:	e7d5      	b.n	800fd4e <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800fda2:	f7ff fa9d 	bl	800f2e0 <OpenContinuousRxCWindow>
 800fda6:	e7d9      	b.n	800fd5c <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800fda8:	4b05      	ldr	r3, [pc, #20]	; (800fdc0 <LoRaMacProcess+0x88>)
 800fdaa:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800fdae:	f36f 1245 	bfc	r2, #5, #1
 800fdb2:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800fdb6:	4803      	ldr	r0, [pc, #12]	; (800fdc4 <LoRaMacProcess+0x8c>)
 800fdb8:	f7ff fb42 	bl	800f440 <LoRaMacHandleNvm>
}
 800fdbc:	e7d4      	b.n	800fd68 <LoRaMacProcess+0x30>
 800fdbe:	bf00      	nop
 800fdc0:	20001264 	.word	0x20001264
 800fdc4:	20008000 	.word	0x20008000

0800fdc8 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800fdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdcc:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800fdce:	2800      	cmp	r0, #0
 800fdd0:	f000 81a3 	beq.w	801011a <LoRaMacInitialization+0x352>
 800fdd4:	4688      	mov	r8, r1
 800fdd6:	4691      	mov	r9, r2
 800fdd8:	4607      	mov	r7, r0
 800fdda:	2900      	cmp	r1, #0
 800fddc:	f000 819f 	beq.w	801011e <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fde0:	6803      	ldr	r3, [r0, #0]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f000 819d 	beq.w	8010122 <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800fde8:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	f000 819b 	beq.w	8010126 <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fdf0:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f000 8199 	beq.w	801012a <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800fdf8:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	f000 8197 	beq.w	801012e <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800fe00:	4610      	mov	r0, r2
 800fe02:	f002 fa11 	bl	8012228 <RegionIsActive>
 800fe06:	2800      	cmp	r0, #0
 800fe08:	f000 8193 	beq.w	8010132 <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800fe0c:	4638      	mov	r0, r7
 800fe0e:	f001 fb77 	bl	8011500 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800fe12:	4ccb      	ldr	r4, [pc, #812]	; (8010140 <LoRaMacInitialization+0x378>)
 800fe14:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800fe18:	2100      	movs	r1, #0
 800fe1a:	4620      	mov	r0, r4
 800fe1c:	f004 fced 	bl	80147fa <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800fe20:	4ec8      	ldr	r6, [pc, #800]	; (8010144 <LoRaMacInitialization+0x37c>)
 800fe22:	f240 521c 	movw	r2, #1308	; 0x51c
 800fe26:	2100      	movs	r1, #0
 800fe28:	4630      	mov	r0, r6
 800fe2a:	f004 fce6 	bl	80147fa <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800fe2e:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800fe32:	2500      	movs	r5, #0
 800fe34:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800fe38:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800fe3c:	4bc2      	ldr	r3, [pc, #776]	; (8010148 <LoRaMacInitialization+0x380>)
 800fe3e:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800fe42:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800fe46:	f504 7312 	add.w	r3, r4, #584	; 0x248
 800fe4a:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800fe4c:	f504 7313 	add.w	r3, r4, #588	; 0x24c
 800fe50:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800fe52:	4bbe      	ldr	r3, [pc, #760]	; (801014c <LoRaMacInitialization+0x384>)
 800fe54:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800fe56:	a905      	add	r1, sp, #20
 800fe58:	4648      	mov	r0, r9
 800fe5a:	f002 fa01 	bl	8012260 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800fe5e:	230f      	movs	r3, #15
 800fe60:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe64:	a90a      	add	r1, sp, #40	; 0x28
 800fe66:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fe6a:	f002 f9e2 	bl	8012232 <RegionGetPhyParam>
 800fe6e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800fe70:	1b40      	subs	r0, r0, r5
 800fe72:	bf18      	it	ne
 800fe74:	2001      	movne	r0, #1
 800fe76:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800fe7a:	f04f 0a0a 	mov.w	sl, #10
 800fe7e:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe82:	a90a      	add	r1, sp, #40	; 0x28
 800fe84:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fe88:	f002 f9d3 	bl	8012232 <RegionGetPhyParam>
 800fe8c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800fe8e:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800fe92:	f04f 0906 	mov.w	r9, #6
 800fe96:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fe9a:	a90a      	add	r1, sp, #40	; 0x28
 800fe9c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fea0:	f002 f9c7 	bl	8012232 <RegionGetPhyParam>
 800fea4:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800fea6:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800feaa:	2310      	movs	r3, #16
 800feac:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800feb0:	a90a      	add	r1, sp, #40	; 0x28
 800feb2:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800feb6:	f002 f9bc 	bl	8012232 <RegionGetPhyParam>
 800feba:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800febc:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800fec0:	2311      	movs	r3, #17
 800fec2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fec6:	a90a      	add	r1, sp, #40	; 0x28
 800fec8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fecc:	f002 f9b1 	bl	8012232 <RegionGetPhyParam>
 800fed0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800fed2:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800fed6:	2312      	movs	r3, #18
 800fed8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fedc:	a90a      	add	r1, sp, #40	; 0x28
 800fede:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fee2:	f002 f9a6 	bl	8012232 <RegionGetPhyParam>
 800fee6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800fee8:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800feec:	2313      	movs	r3, #19
 800feee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800fef2:	a90a      	add	r1, sp, #40	; 0x28
 800fef4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800fef8:	f002 f99b 	bl	8012232 <RegionGetPhyParam>
 800fefc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800fefe:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800ff02:	2314      	movs	r3, #20
 800ff04:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff08:	a90a      	add	r1, sp, #40	; 0x28
 800ff0a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ff0e:	f002 f990 	bl	8012232 <RegionGetPhyParam>
 800ff12:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800ff14:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800ff18:	2316      	movs	r3, #22
 800ff1a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff1e:	a90a      	add	r1, sp, #40	; 0x28
 800ff20:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ff24:	f002 f985 	bl	8012232 <RegionGetPhyParam>
 800ff28:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800ff2a:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800ff2e:	2317      	movs	r3, #23
 800ff30:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff34:	a90a      	add	r1, sp, #40	; 0x28
 800ff36:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ff3a:	f002 f97a 	bl	8012232 <RegionGetPhyParam>
 800ff3e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800ff40:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800ff44:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800ff48:	2318      	movs	r3, #24
 800ff4a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff4e:	a90a      	add	r1, sp, #40	; 0x28
 800ff50:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ff54:	f002 f96d 	bl	8012232 <RegionGetPhyParam>
 800ff58:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800ff5a:	b2c0      	uxtb	r0, r0
 800ff5c:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800ff60:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800ff64:	231d      	movs	r3, #29
 800ff66:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff6a:	a90a      	add	r1, sp, #40	; 0x28
 800ff6c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ff70:	f002 f95f 	bl	8012232 <RegionGetPhyParam>
 800ff74:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800ff76:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800ff7a:	231e      	movs	r3, #30
 800ff7c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff80:	a90a      	add	r1, sp, #40	; 0x28
 800ff82:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ff86:	f002 f954 	bl	8012232 <RegionGetPhyParam>
 800ff8a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800ff8c:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800ff90:	231f      	movs	r3, #31
 800ff92:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ff96:	a90a      	add	r1, sp, #40	; 0x28
 800ff98:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ff9c:	f002 f949 	bl	8012232 <RegionGetPhyParam>
 800ffa0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800ffa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffa4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800ffa8:	2320      	movs	r3, #32
 800ffaa:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffae:	a90a      	add	r1, sp, #40	; 0x28
 800ffb0:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ffb4:	f002 f93d 	bl	8012232 <RegionGetPhyParam>
 800ffb8:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800ffba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffbc:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800ffc0:	230b      	movs	r3, #11
 800ffc2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffc6:	a90a      	add	r1, sp, #40	; 0x28
 800ffc8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ffcc:	f002 f931 	bl	8012232 <RegionGetPhyParam>
 800ffd0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800ffd2:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800ffd6:	230c      	movs	r3, #12
 800ffd8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800ffdc:	a90a      	add	r1, sp, #40	; 0x28
 800ffde:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ffe2:	f002 f926 	bl	8012232 <RegionGetPhyParam>
 800ffe6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800ffe8:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800ffec:	f04f 0b01 	mov.w	fp, #1
 800fff0:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800fff4:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800fff8:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800fffc:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8010000:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8010004:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8010008:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801000a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 801000e:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8010010:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8010014:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 8010016:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 801001a:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 801001c:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8010020:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 8010022:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 8010026:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 801002a:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 801002e:	4628      	mov	r0, r5
 8010030:	f7ff fb82 	bl	800f738 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 8010034:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 8010038:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 801003c:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 8010040:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 8010044:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8010046:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8010048:	9500      	str	r5, [sp, #0]
 801004a:	4b41      	ldr	r3, [pc, #260]	; (8010150 <LoRaMacInitialization+0x388>)
 801004c:	462a      	mov	r2, r5
 801004e:	f04f 31ff 	mov.w	r1, #4294967295
 8010052:	f506 705a 	add.w	r0, r6, #872	; 0x368
 8010056:	f006 fd89 	bl	8016b6c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 801005a:	9500      	str	r5, [sp, #0]
 801005c:	4b3d      	ldr	r3, [pc, #244]	; (8010154 <LoRaMacInitialization+0x38c>)
 801005e:	462a      	mov	r2, r5
 8010060:	f04f 31ff 	mov.w	r1, #4294967295
 8010064:	f506 7060 	add.w	r0, r6, #896	; 0x380
 8010068:	f006 fd80 	bl	8016b6c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 801006c:	9500      	str	r5, [sp, #0]
 801006e:	4b3a      	ldr	r3, [pc, #232]	; (8010158 <LoRaMacInitialization+0x390>)
 8010070:	462a      	mov	r2, r5
 8010072:	f04f 31ff 	mov.w	r1, #4294967295
 8010076:	f506 7066 	add.w	r0, r6, #920	; 0x398
 801007a:	f006 fd77 	bl	8016b6c <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 801007e:	9500      	str	r5, [sp, #0]
 8010080:	4b36      	ldr	r3, [pc, #216]	; (801015c <LoRaMacInitialization+0x394>)
 8010082:	462a      	mov	r2, r5
 8010084:	f04f 31ff 	mov.w	r1, #4294967295
 8010088:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 801008c:	f006 fd6e 	bl	8016b6c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8010090:	af02      	add	r7, sp, #8
 8010092:	4638      	mov	r0, r7
 8010094:	f006 fcfc 	bl	8016a90 <SysTimeGetMcuTime>
 8010098:	f504 7392 	add.w	r3, r4, #292	; 0x124
 801009c:	e897 0003 	ldmia.w	r7, {r0, r1}
 80100a0:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 80100a4:	4b2e      	ldr	r3, [pc, #184]	; (8010160 <LoRaMacInitialization+0x398>)
 80100a6:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 80100a8:	4b2e      	ldr	r3, [pc, #184]	; (8010164 <LoRaMacInitialization+0x39c>)
 80100aa:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 80100ae:	4b2e      	ldr	r3, [pc, #184]	; (8010168 <LoRaMacInitialization+0x3a0>)
 80100b0:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 80100b4:	4b2d      	ldr	r3, [pc, #180]	; (801016c <LoRaMacInitialization+0x3a4>)
 80100b6:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 80100ba:	4b2d      	ldr	r3, [pc, #180]	; (8010170 <LoRaMacInitialization+0x3a8>)
 80100bc:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 80100c0:	4b2c      	ldr	r3, [pc, #176]	; (8010174 <LoRaMacInitialization+0x3ac>)
 80100c2:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 80100c6:	4b2c      	ldr	r3, [pc, #176]	; (8010178 <LoRaMacInitialization+0x3b0>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 80100ce:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 80100d0:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80100d4:	f003 ffa4 	bl	8014020 <SecureElementInit>
 80100d8:	bb80      	cbnz	r0, 801013c <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80100da:	4620      	mov	r0, r4
 80100dc:	f001 fd2a 	bl	8011b34 <LoRaMacCryptoInit>
 80100e0:	2800      	cmp	r0, #0
 80100e2:	d14b      	bne.n	801017c <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80100e4:	f001 f8ce 	bl	8011284 <LoRaMacCommandsInit>
 80100e8:	2800      	cmp	r0, #0
 80100ea:	d149      	bne.n	8010180 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80100ec:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 80100f0:	f001 fd76 	bl	8011be0 <LoRaMacCryptoSetMulticastReference>
 80100f4:	4604      	mov	r4, r0
 80100f6:	2800      	cmp	r0, #0
 80100f8:	d144      	bne.n	8010184 <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80100fa:	4d1f      	ldr	r5, [pc, #124]	; (8010178 <LoRaMacInitialization+0x3b0>)
 80100fc:	696b      	ldr	r3, [r5, #20]
 80100fe:	4798      	blx	r3
 8010100:	f004 fb50 	bl	80147a4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8010104:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8010106:	4a0e      	ldr	r2, [pc, #56]	; (8010140 <LoRaMacInitialization+0x378>)
 8010108:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 801010c:	4798      	blx	r3
    Radio.Sleep( );
 801010e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8010110:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 8010112:	4658      	mov	r0, fp
 8010114:	f7fd fc6c 	bl	800d9f0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8010118:	e00c      	b.n	8010134 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801011a:	2403      	movs	r4, #3
 801011c:	e00a      	b.n	8010134 <LoRaMacInitialization+0x36c>
 801011e:	2403      	movs	r4, #3
 8010120:	e008      	b.n	8010134 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010122:	2403      	movs	r4, #3
 8010124:	e006      	b.n	8010134 <LoRaMacInitialization+0x36c>
 8010126:	2403      	movs	r4, #3
 8010128:	e004      	b.n	8010134 <LoRaMacInitialization+0x36c>
 801012a:	2403      	movs	r4, #3
 801012c:	e002      	b.n	8010134 <LoRaMacInitialization+0x36c>
 801012e:	2403      	movs	r4, #3
 8010130:	e000      	b.n	8010134 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010132:	2409      	movs	r4, #9
}
 8010134:	4620      	mov	r0, r4
 8010136:	b00d      	add	sp, #52	; 0x34
 8010138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801013c:	2411      	movs	r4, #17
 801013e:	e7f9      	b.n	8010134 <LoRaMacInitialization+0x36c>
 8010140:	20008000 	.word	0x20008000
 8010144:	20001264 	.word	0x20001264
 8010148:	01000400 	.word	0x01000400
 801014c:	20001780 	.word	0x20001780
 8010150:	0800f171 	.word	0x0800f171
 8010154:	0800f3f1 	.word	0x0800f3f1
 8010158:	0800f399 	.word	0x0800f399
 801015c:	0800ddd1 	.word	0x0800ddd1
 8010160:	20001260 	.word	0x20001260
 8010164:	0800f6ed 	.word	0x0800f6ed
 8010168:	0800f665 	.word	0x0800f665
 801016c:	0800dc21 	.word	0x0800dc21
 8010170:	0800f63d 	.word	0x0800f63d
 8010174:	0800f615 	.word	0x0800f615
 8010178:	0801e9c8 	.word	0x0801e9c8
        return LORAMAC_STATUS_CRYPTO_ERROR;
 801017c:	2411      	movs	r4, #17
 801017e:	e7d9      	b.n	8010134 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010180:	2413      	movs	r4, #19
 8010182:	e7d7      	b.n	8010134 <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 8010184:	2411      	movs	r4, #17
 8010186:	e7d5      	b.n	8010134 <LoRaMacInitialization+0x36c>

08010188 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 8010188:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 801018a:	2400      	movs	r4, #0
 801018c:	4b03      	ldr	r3, [pc, #12]	; (801019c <LoRaMacStart+0x14>)
 801018e:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 8010192:	f7fd fc19 	bl	800d9c8 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 8010196:	4620      	mov	r0, r4
 8010198:	bd10      	pop	{r4, pc}
 801019a:	bf00      	nop
 801019c:	20001264 	.word	0x20001264

080101a0 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 80101a0:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 80101a2:	f7ff fd9f 	bl	800fce4 <LoRaMacIsBusy>
 80101a6:	b130      	cbz	r0, 80101b6 <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 80101a8:	4b0b      	ldr	r3, [pc, #44]	; (80101d8 <LoRaMacStop+0x38>)
 80101aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 80101ae:	2b01      	cmp	r3, #1
 80101b0:	d010      	beq.n	80101d4 <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 80101b2:	2001      	movs	r0, #1
}
 80101b4:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80101b6:	4b09      	ldr	r3, [pc, #36]	; (80101dc <LoRaMacStop+0x3c>)
 80101b8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80101bc:	2b02      	cmp	r3, #2
 80101be:	d005      	beq.n	80101cc <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 80101c0:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <LoRaMacStop+0x38>)
 80101c2:	2201      	movs	r2, #1
 80101c4:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 80101c8:	2000      	movs	r0, #0
 80101ca:	e7f3      	b.n	80101b4 <LoRaMacStop+0x14>
            Radio.Sleep( );
 80101cc:	4b04      	ldr	r3, [pc, #16]	; (80101e0 <LoRaMacStop+0x40>)
 80101ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101d0:	4798      	blx	r3
 80101d2:	e7f5      	b.n	80101c0 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 80101d4:	2000      	movs	r0, #0
 80101d6:	e7ed      	b.n	80101b4 <LoRaMacStop+0x14>
 80101d8:	20001264 	.word	0x20001264
 80101dc:	20008000 	.word	0x20008000
 80101e0:	0801e9c8 	.word	0x0801e9c8

080101e4 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80101e4:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80101e6:	4c14      	ldr	r4, [pc, #80]	; (8010238 <LoRaMacHalt+0x54>)
 80101e8:	f504 705a 	add.w	r0, r4, #872	; 0x368
 80101ec:	f006 fd1c 	bl	8016c28 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80101f0:	f504 7060 	add.w	r0, r4, #896	; 0x380
 80101f4:	f006 fd18 	bl	8016c28 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80101f8:	f504 7066 	add.w	r0, r4, #920	; 0x398
 80101fc:	f006 fd14 	bl	8016c28 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8010200:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8010204:	f006 fd10 	bl	8016c28 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 8010208:	f000 ffa6 	bl	8011158 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 801020c:	4b0b      	ldr	r3, [pc, #44]	; (801023c <LoRaMacHalt+0x58>)
 801020e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010210:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 8010212:	2500      	movs	r5, #0
 8010214:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 8010218:	4e09      	ldr	r6, [pc, #36]	; (8010240 <LoRaMacHalt+0x5c>)
 801021a:	4630      	mov	r0, r6
 801021c:	f7ff f910 	bl	800f440 <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 8010220:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 8010224:	4631      	mov	r1, r6
 8010226:	4807      	ldr	r0, [pc, #28]	; (8010244 <LoRaMacHalt+0x60>)
 8010228:	f004 facf 	bl	80147ca <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 801022c:	2301      	movs	r3, #1
 801022e:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8010232:	4628      	mov	r0, r5
 8010234:	bd70      	pop	{r4, r5, r6, pc}
 8010236:	bf00      	nop
 8010238:	20001264 	.word	0x20001264
 801023c:	0801e9c8 	.word	0x0801e9c8
 8010240:	20008000 	.word	0x20008000
 8010244:	200085e8 	.word	0x200085e8

08010248 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8010248:	b530      	push	{r4, r5, lr}
 801024a:	b08b      	sub	sp, #44	; 0x2c
 801024c:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801024e:	4b31      	ldr	r3, [pc, #196]	; (8010314 <LoRaMacQueryTxPossible+0xcc>)
 8010250:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010252:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010254:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 8010258:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801025c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8010260:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8010264:	4b2c      	ldr	r3, [pc, #176]	; (8010318 <LoRaMacQueryTxPossible+0xd0>)
 8010266:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801026a:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801026e:	2300      	movs	r3, #0
 8010270:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 8010272:	2900      	cmp	r1, #0
 8010274:	d048      	beq.n	8010308 <LoRaMacQueryTxPossible+0xc0>
 8010276:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8010278:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801027c:	4b25      	ldr	r3, [pc, #148]	; (8010314 <LoRaMacQueryTxPossible+0xcc>)
 801027e:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 8010282:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8010286:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 8010288:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 801028c:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 8010290:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 8010294:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010298:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 801029c:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80102a0:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 80102a4:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 80102a8:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80102ac:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80102b0:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80102b4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80102b8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80102bc:	ab04      	add	r3, sp, #16
 80102be:	9300      	str	r3, [sp, #0]
 80102c0:	f10d 030d 	add.w	r3, sp, #13
 80102c4:	f10d 020e 	add.w	r2, sp, #14
 80102c8:	f10d 010f 	add.w	r1, sp, #15
 80102cc:	a805      	add	r0, sp, #20
 80102ce:	f000 feb5 	bl	801103c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80102d2:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 80102d6:	f7fd fcc7 	bl	800dc68 <GetMaxAppPayloadWithoutFOptsLength>
 80102da:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80102dc:	a802      	add	r0, sp, #8
 80102de:	f001 f86f 	bl	80113c0 <LoRaMacCommandsGetSizeSerializedCmds>
 80102e2:	b998      	cbnz	r0, 801030c <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80102e4:	9b02      	ldr	r3, [sp, #8]
 80102e6:	2b0f      	cmp	r3, #15
 80102e8:	d80a      	bhi.n	8010300 <LoRaMacQueryTxPossible+0xb8>
 80102ea:	786a      	ldrb	r2, [r5, #1]
 80102ec:	4293      	cmp	r3, r2
 80102ee:	d807      	bhi.n	8010300 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80102f0:	1ad3      	subs	r3, r2, r3
 80102f2:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80102f4:	9b02      	ldr	r3, [sp, #8]
 80102f6:	441c      	add	r4, r3
 80102f8:	42a2      	cmp	r2, r4
 80102fa:	d309      	bcc.n	8010310 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 80102fc:	b00b      	add	sp, #44	; 0x2c
 80102fe:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 8010300:	2300      	movs	r3, #0
 8010302:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 8010304:	2008      	movs	r0, #8
 8010306:	e7f9      	b.n	80102fc <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010308:	2003      	movs	r0, #3
 801030a:	e7f7      	b.n	80102fc <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 801030c:	2013      	movs	r0, #19
 801030e:	e7f5      	b.n	80102fc <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 8010310:	2008      	movs	r0, #8
 8010312:	e7f3      	b.n	80102fc <LoRaMacQueryTxPossible+0xb4>
 8010314:	20008000 	.word	0x20008000
 8010318:	20001264 	.word	0x20001264

0801031c <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801031c:	2800      	cmp	r0, #0
 801031e:	f000 817c 	beq.w	801061a <LoRaMacMibGetRequestConfirm+0x2fe>
{
 8010322:	b510      	push	{r4, lr}
 8010324:	b084      	sub	sp, #16
 8010326:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 8010328:	7800      	ldrb	r0, [r0, #0]
 801032a:	2841      	cmp	r0, #65	; 0x41
 801032c:	f200 8171 	bhi.w	8010612 <LoRaMacMibGetRequestConfirm+0x2f6>
 8010330:	e8df f010 	tbh	[pc, r0, lsl #1]
 8010334:	00480042 	.word	0x00480042
 8010338:	0053004e 	.word	0x0053004e
 801033c:	005e0058 	.word	0x005e0058
 8010340:	016f0064 	.word	0x016f0064
 8010344:	016f016f 	.word	0x016f016f
 8010348:	016f016f 	.word	0x016f016f
 801034c:	016f016f 	.word	0x016f016f
 8010350:	006c016f 	.word	0x006c016f
 8010354:	00780072 	.word	0x00780072
 8010358:	008d0085 	.word	0x008d0085
 801035c:	009d0095 	.word	0x009d0095
 8010360:	00a500b2 	.word	0x00a500b2
 8010364:	00c500bf 	.word	0x00c500bf
 8010368:	00cf00ca 	.word	0x00cf00ca
 801036c:	00d900d4 	.word	0x00d900d4
 8010370:	00ef00de 	.word	0x00ef00de
 8010374:	010100f5 	.word	0x010100f5
 8010378:	010700fb 	.word	0x010700fb
 801037c:	0112010c 	.word	0x0112010c
 8010380:	01180120 	.word	0x01180120
 8010384:	016f011c 	.word	0x016f011c
 8010388:	016f0126 	.word	0x016f0126
 801038c:	016f016f 	.word	0x016f016f
 8010390:	016f016f 	.word	0x016f016f
 8010394:	016f016f 	.word	0x016f016f
 8010398:	016f016f 	.word	0x016f016f
 801039c:	016f016f 	.word	0x016f016f
 80103a0:	016f016f 	.word	0x016f016f
 80103a4:	016f016f 	.word	0x016f016f
 80103a8:	0135012f 	.word	0x0135012f
 80103ac:	0141013b 	.word	0x0141013b
 80103b0:	014d0147 	.word	0x014d0147
 80103b4:	01610153 	.word	0x01610153
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 80103b8:	4b99      	ldr	r3, [pc, #612]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80103ba:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 80103be:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 80103c0:	b004      	add	sp, #16
 80103c2:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80103c4:	4b96      	ldr	r3, [pc, #600]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80103c6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80103ca:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103cc:	2000      	movs	r0, #0
            break;
 80103ce:	e7f7      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            SecureElementGetDevEui( mibGet->Param.DevEui );
 80103d0:	6860      	ldr	r0, [r4, #4]
 80103d2:	f004 f8bf 	bl	8014554 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103d6:	2000      	movs	r0, #0
            break;
 80103d8:	e7f2      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 80103da:	6860      	ldr	r0, [r4, #4]
 80103dc:	f004 f8d8 	bl	8014590 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103e0:	2000      	movs	r0, #0
            break;
 80103e2:	e7ed      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 80103e4:	4b8e      	ldr	r3, [pc, #568]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80103e6:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 80103ea:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103ec:	2000      	movs	r0, #0
            break;
 80103ee:	e7e7      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 80103f0:	4b8b      	ldr	r3, [pc, #556]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80103f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80103f6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80103f8:	2000      	movs	r0, #0
            break;
 80103fa:	e7e1      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 80103fc:	1d21      	adds	r1, r4, #4
 80103fe:	4b88      	ldr	r3, [pc, #544]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010400:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 8010404:	f004 f8e0 	bl	80145c8 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010408:	2000      	movs	r0, #0
            break;
 801040a:	e7d9      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 801040c:	4b84      	ldr	r3, [pc, #528]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 801040e:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 8010412:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010414:	2000      	movs	r0, #0
            break;
 8010416:	e7d3      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 8010418:	4b81      	ldr	r3, [pc, #516]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 801041a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 801041e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010420:	2000      	movs	r0, #0
            break;
 8010422:	e7cd      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS;
 8010424:	231c      	movs	r3, #28
 8010426:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801042a:	a902      	add	r1, sp, #8
 801042c:	4b7c      	ldr	r3, [pc, #496]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 801042e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010432:	f001 fefe 	bl	8012232 <RegionGetPhyParam>
 8010436:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelList = phyParam.Channels;
 8010438:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801043a:	2000      	movs	r0, #0
            break;
 801043c:	e7c0      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 801043e:	3404      	adds	r4, #4
 8010440:	4b78      	ldr	r3, [pc, #480]	; (8010624 <LoRaMacMibGetRequestConfirm+0x308>)
 8010442:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010446:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801044a:	2000      	movs	r0, #0
            break;
 801044c:	e7b8      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 801044e:	3404      	adds	r4, #4
 8010450:	4b75      	ldr	r3, [pc, #468]	; (8010628 <LoRaMacMibGetRequestConfirm+0x30c>)
 8010452:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010456:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801045a:	2000      	movs	r0, #0
            break;
 801045c:	e7b0      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 801045e:	3404      	adds	r4, #4
 8010460:	4b72      	ldr	r3, [pc, #456]	; (801062c <LoRaMacMibGetRequestConfirm+0x310>)
 8010462:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010466:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801046a:	2000      	movs	r0, #0
            break;
 801046c:	e7a8      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 801046e:	3404      	adds	r4, #4
 8010470:	4b6f      	ldr	r3, [pc, #444]	; (8010630 <LoRaMacMibGetRequestConfirm+0x314>)
 8010472:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010476:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801047a:	2000      	movs	r0, #0
            break;
 801047c:	e7a0      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 801047e:	231a      	movs	r3, #26
 8010480:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010484:	a902      	add	r1, sp, #8
 8010486:	4b66      	ldr	r3, [pc, #408]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010488:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801048c:	f001 fed1 	bl	8012232 <RegionGetPhyParam>
 8010490:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8010492:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010494:	2000      	movs	r0, #0
            break;
 8010496:	e793      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8010498:	2319      	movs	r3, #25
 801049a:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801049e:	a902      	add	r1, sp, #8
 80104a0:	4b5f      	ldr	r3, [pc, #380]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104a2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80104a6:	f001 fec4 	bl	8012232 <RegionGetPhyParam>
 80104aa:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 80104ac:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104ae:	2000      	movs	r0, #0
            break;
 80104b0:	e786      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80104b2:	4b5b      	ldr	r3, [pc, #364]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104b4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80104b8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104ba:	2000      	movs	r0, #0
            break;
 80104bc:	e780      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80104be:	4b58      	ldr	r3, [pc, #352]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104c2:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104c4:	2000      	movs	r0, #0
            break;
 80104c6:	e77b      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80104c8:	4b55      	ldr	r3, [pc, #340]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104cc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104ce:	2000      	movs	r0, #0
            break;
 80104d0:	e776      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80104d2:	4b53      	ldr	r3, [pc, #332]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80104d6:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104d8:	2000      	movs	r0, #0
            break;
 80104da:	e771      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80104dc:	4b50      	ldr	r3, [pc, #320]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80104e0:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104e2:	2000      	movs	r0, #0
            break;
 80104e4:	e76c      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 80104e6:	4b4e      	ldr	r3, [pc, #312]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80104ea:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80104ec:	2000      	movs	r0, #0
            break;
 80104ee:	e767      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            getPhy.Attribute = PHY_MIN_TX_DR;
 80104f0:	2302      	movs	r3, #2
 80104f2:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80104f6:	4b4a      	ldr	r3, [pc, #296]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80104f8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 80104fc:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010500:	a902      	add	r1, sp, #8
 8010502:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010506:	f001 fe94 	bl	8012232 <RegionGetPhyParam>
 801050a:	9001      	str	r0, [sp, #4]
            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 801050c:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801050e:	2000      	movs	r0, #0
            break;
 8010510:	e756      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8010512:	4b43      	ldr	r3, [pc, #268]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010514:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 8010518:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801051a:	2000      	movs	r0, #0
            break;
 801051c:	e750      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 801051e:	4b40      	ldr	r3, [pc, #256]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010520:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 8010524:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010526:	2000      	movs	r0, #0
            break;
 8010528:	e74a      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801052a:	4b3d      	ldr	r3, [pc, #244]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 801052c:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 8010530:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010532:	2000      	movs	r0, #0
            break;
 8010534:	e744      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8010536:	4b3a      	ldr	r3, [pc, #232]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010538:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 801053c:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801053e:	2000      	movs	r0, #0
            break;
 8010540:	e73e      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8010542:	4b37      	ldr	r3, [pc, #220]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010546:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010548:	2000      	movs	r0, #0
            break;
 801054a:	e739      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801054c:	4b34      	ldr	r3, [pc, #208]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 801054e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8010552:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010554:	2000      	movs	r0, #0
            break;
 8010556:	e733      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8010558:	4b31      	ldr	r3, [pc, #196]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 801055a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801055e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010560:	2000      	movs	r0, #0
            break;
 8010562:	e72d      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.Contexts = &Nvm;
 8010564:	4b2e      	ldr	r3, [pc, #184]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010566:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010568:	2000      	movs	r0, #0
            break;
 801056a:	e729      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.BackupContexts = &NvmBackup;
 801056c:	4b31      	ldr	r3, [pc, #196]	; (8010634 <LoRaMacMibGetRequestConfirm+0x318>)
 801056e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010570:	2000      	movs	r0, #0
            break;
 8010572:	e725      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010574:	4b2a      	ldr	r3, [pc, #168]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010576:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801057a:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801057c:	2000      	movs	r0, #0
            break;
 801057e:	e71f      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8010580:	4b27      	ldr	r3, [pc, #156]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010582:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8010586:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 8010588:	f001 fefc 	bl	8012384 <RegionGetVersion>
 801058c:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801058e:	2000      	movs	r0, #0
            break;
 8010590:	e716      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8010592:	4b23      	ldr	r3, [pc, #140]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010598:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801059a:	2000      	movs	r0, #0
            break;
 801059c:	e710      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 801059e:	4b20      	ldr	r3, [pc, #128]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105a0:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 80105a4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80105a6:	2000      	movs	r0, #0
            break;
 80105a8:	e70a      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 80105aa:	4b1d      	ldr	r3, [pc, #116]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105ac:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80105b0:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80105b2:	2000      	movs	r0, #0
            break;
 80105b4:	e704      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 80105b6:	4b1a      	ldr	r3, [pc, #104]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105b8:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80105bc:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80105be:	2000      	movs	r0, #0
            break;
 80105c0:	e6fe      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 80105c2:	4b17      	ldr	r3, [pc, #92]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105c4:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 80105c8:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80105ca:	2000      	movs	r0, #0
            break;
 80105cc:	e6f8      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 80105ce:	4b14      	ldr	r3, [pc, #80]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105d0:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 80105d4:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80105d6:	2000      	movs	r0, #0
            break;
 80105d8:	e6f2      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 80105da:	4b11      	ldr	r3, [pc, #68]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80105e0:	b11b      	cbz	r3, 80105ea <LoRaMacMibGetRequestConfirm+0x2ce>
 80105e2:	2b06      	cmp	r3, #6
 80105e4:	d001      	beq.n	80105ea <LoRaMacMibGetRequestConfirm+0x2ce>
                status = LORAMAC_STATUS_ERROR;
 80105e6:	2018      	movs	r0, #24
 80105e8:	e6ea      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
                mibGet->Param.RssiFreeThreshold = Nvm.RegionGroup2.RssiFreeThreshold;
 80105ea:	4b0d      	ldr	r3, [pc, #52]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105ec:	f9b3 35c4 	ldrsh.w	r3, [r3, #1476]	; 0x5c4
 80105f0:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80105f2:	2000      	movs	r0, #0
 80105f4:	e6e4      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 80105f6:	4b0a      	ldr	r3, [pc, #40]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 80105f8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80105fc:	b11b      	cbz	r3, 8010606 <LoRaMacMibGetRequestConfirm+0x2ea>
 80105fe:	2b06      	cmp	r3, #6
 8010600:	d001      	beq.n	8010606 <LoRaMacMibGetRequestConfirm+0x2ea>
                status = LORAMAC_STATUS_ERROR;
 8010602:	2018      	movs	r0, #24
 8010604:	e6dc      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
                mibGet->Param.CarrierSenseTime = Nvm.RegionGroup2.CarrierSenseTime;
 8010606:	4b06      	ldr	r3, [pc, #24]	; (8010620 <LoRaMacMibGetRequestConfirm+0x304>)
 8010608:	f8d3 35c8 	ldr.w	r3, [r3, #1480]	; 0x5c8
 801060c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801060e:	2000      	movs	r0, #0
 8010610:	e6d6      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8010612:	4620      	mov	r0, r4
 8010614:	f000 fda4 	bl	8011160 <LoRaMacClassBMibGetRequestConfirm>
            break;
 8010618:	e6d2      	b.n	80103c0 <LoRaMacMibGetRequestConfirm+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801061a:	2003      	movs	r0, #3
}
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	20008000 	.word	0x20008000
 8010624:	2000806c 	.word	0x2000806c
 8010628:	200080b4 	.word	0x200080b4
 801062c:	20008074 	.word	0x20008074
 8010630:	200080bc 	.word	0x200080bc
 8010634:	200085e8 	.word	0x200085e8

08010638 <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8010638:	2800      	cmp	r0, #0
 801063a:	f000 829c 	beq.w	8010b76 <LoRaMacMibSetRequestConfirm+0x53e>
{
 801063e:	b530      	push	{r4, r5, lr}
 8010640:	b085      	sub	sp, #20
 8010642:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8010644:	4b9b      	ldr	r3, [pc, #620]	; (80108b4 <LoRaMacMibSetRequestConfirm+0x27c>)
 8010646:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 801064a:	f013 0f02 	tst.w	r3, #2
 801064e:	f040 8294 	bne.w	8010b7a <LoRaMacMibSetRequestConfirm+0x542>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 8010652:	7805      	ldrb	r5, [r0, #0]
 8010654:	2d41      	cmp	r5, #65	; 0x41
 8010656:	f200 828b 	bhi.w	8010b70 <LoRaMacMibSetRequestConfirm+0x538>
 801065a:	e8df f015 	tbh	[pc, r5, lsl #1]
 801065e:	0042      	.short	0x0042
 8010660:	0058004f 	.word	0x0058004f
 8010664:	0066005f 	.word	0x0066005f
 8010668:	0072006c 	.word	0x0072006c
 801066c:	008b0080 	.word	0x008b0080
 8010670:	00a10096 	.word	0x00a10096
 8010674:	00b700ac 	.word	0x00b700ac
 8010678:	00ce00c2 	.word	0x00ce00c2
 801067c:	00e500da 	.word	0x00e500da
 8010680:	00eb0289 	.word	0x00eb0289
 8010684:	01350111 	.word	0x01350111
 8010688:	018d0163 	.word	0x018d0163
 801068c:	019d017d 	.word	0x019d017d
 8010690:	01ad01a8 	.word	0x01ad01a8
 8010694:	01b701b2 	.word	0x01b701b2
 8010698:	028901bc 	.word	0x028901bc
 801069c:	01d601c1 	.word	0x01d601c1
 80106a0:	01ef0204 	.word	0x01ef0204
 80106a4:	02200219 	.word	0x02200219
 80106a8:	022e0228 	.word	0x022e0228
 80106ac:	02890234 	.word	0x02890234
 80106b0:	02890237 	.word	0x02890237
 80106b4:	02890289 	.word	0x02890289
 80106b8:	02890289 	.word	0x02890289
 80106bc:	02890289 	.word	0x02890289
 80106c0:	02890289 	.word	0x02890289
 80106c4:	02890289 	.word	0x02890289
 80106c8:	02890289 	.word	0x02890289
 80106cc:	02890289 	.word	0x02890289
 80106d0:	02480289 	.word	0x02480289
 80106d4:	0254024e 	.word	0x0254024e
 80106d8:	0260025a 	.word	0x0260025a
 80106dc:	026c0266 	.word	0x026c0266
 80106e0:	027b      	.short	0x027b
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80106e2:	7900      	ldrb	r0, [r0, #4]
 80106e4:	f7ff f8f4 	bl	800f8d0 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 80106e8:	b930      	cbnz	r0, 80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 80106ea:	4a72      	ldr	r2, [pc, #456]	; (80108b4 <LoRaMacMibSetRequestConfirm+0x27c>)
 80106ec:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 80106f0:	f043 0320 	orr.w	r3, r3, #32
 80106f4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 80106f8:	b005      	add	sp, #20
 80106fa:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80106fc:	7903      	ldrb	r3, [r0, #4]
 80106fe:	2b02      	cmp	r3, #2
 8010700:	f000 823d 	beq.w	8010b7e <LoRaMacMibSetRequestConfirm+0x546>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 8010704:	4a6c      	ldr	r2, [pc, #432]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 8010706:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801070a:	2000      	movs	r0, #0
 801070c:	e7ed      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 801070e:	6840      	ldr	r0, [r0, #4]
 8010710:	f003 ff12 	bl	8014538 <SecureElementSetDevEui>
 8010714:	2800      	cmp	r0, #0
 8010716:	d0e8      	beq.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010718:	2003      	movs	r0, #3
 801071a:	e7ed      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 801071c:	6840      	ldr	r0, [r0, #4]
 801071e:	f003 ff27 	bl	8014570 <SecureElementSetJoinEui>
 8010722:	2800      	cmp	r0, #0
 8010724:	d0e1      	beq.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010726:	4628      	mov	r0, r5
 8010728:	e7e6      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 801072a:	7902      	ldrb	r2, [r0, #4]
 801072c:	4b62      	ldr	r3, [pc, #392]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 801072e:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010732:	2000      	movs	r0, #0
 8010734:	e7d9      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8010736:	6842      	ldr	r2, [r0, #4]
 8010738:	4b5f      	ldr	r3, [pc, #380]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 801073a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801073e:	2000      	movs	r0, #0
 8010740:	e7d3      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 8010742:	6841      	ldr	r1, [r0, #4]
 8010744:	4b5c      	ldr	r3, [pc, #368]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 8010746:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 801074a:	f003 ff2f 	bl	80145ac <SecureElementSetDevAddr>
 801074e:	2800      	cmp	r0, #0
 8010750:	f040 8217 	bne.w	8010b82 <LoRaMacMibSetRequestConfirm+0x54a>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8010754:	6862      	ldr	r2, [r4, #4]
 8010756:	4b58      	ldr	r3, [pc, #352]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 8010758:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 801075c:	e7c5      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 801075e:	6841      	ldr	r1, [r0, #4]
 8010760:	2900      	cmp	r1, #0
 8010762:	f000 8210 	beq.w	8010b86 <LoRaMacMibSetRequestConfirm+0x54e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8010766:	2000      	movs	r0, #0
 8010768:	f001 fb48 	bl	8011dfc <LoRaMacCryptoSetKey>
 801076c:	2800      	cmp	r0, #0
 801076e:	d0bc      	beq.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010770:	2011      	movs	r0, #17
 8010772:	e7c1      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 8010774:	6841      	ldr	r1, [r0, #4]
 8010776:	2900      	cmp	r1, #0
 8010778:	f000 8207 	beq.w	8010b8a <LoRaMacMibSetRequestConfirm+0x552>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 801077c:	2001      	movs	r0, #1
 801077e:	f001 fb3d 	bl	8011dfc <LoRaMacCryptoSetKey>
 8010782:	2800      	cmp	r0, #0
 8010784:	d0b0      	beq.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010786:	2011      	movs	r0, #17
 8010788:	e7b6      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 801078a:	6841      	ldr	r1, [r0, #4]
 801078c:	2900      	cmp	r1, #0
 801078e:	f000 81fe 	beq.w	8010b8e <LoRaMacMibSetRequestConfirm+0x556>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8010792:	2008      	movs	r0, #8
 8010794:	f001 fb32 	bl	8011dfc <LoRaMacCryptoSetKey>
 8010798:	2800      	cmp	r0, #0
 801079a:	d0a5      	beq.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801079c:	2011      	movs	r0, #17
 801079e:	e7ab      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 80107a0:	6841      	ldr	r1, [r0, #4]
 80107a2:	2900      	cmp	r1, #0
 80107a4:	f000 81f5 	beq.w	8010b92 <LoRaMacMibSetRequestConfirm+0x55a>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80107a8:	2009      	movs	r0, #9
 80107aa:	f001 fb27 	bl	8011dfc <LoRaMacCryptoSetKey>
 80107ae:	2800      	cmp	r0, #0
 80107b0:	d09a      	beq.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80107b2:	2011      	movs	r0, #17
 80107b4:	e7a0      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 80107b6:	6841      	ldr	r1, [r0, #4]
 80107b8:	2900      	cmp	r1, #0
 80107ba:	f000 81ec 	beq.w	8010b96 <LoRaMacMibSetRequestConfirm+0x55e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80107be:	200c      	movs	r0, #12
 80107c0:	f001 fb1c 	bl	8011dfc <LoRaMacCryptoSetKey>
 80107c4:	2800      	cmp	r0, #0
 80107c6:	d08f      	beq.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80107c8:	2011      	movs	r0, #17
 80107ca:	e795      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 80107cc:	6841      	ldr	r1, [r0, #4]
 80107ce:	2900      	cmp	r1, #0
 80107d0:	f000 81ea 	beq.w	8010ba8 <LoRaMacMibSetRequestConfirm+0x570>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80107d4:	200d      	movs	r0, #13
 80107d6:	f001 fb11 	bl	8011dfc <LoRaMacCryptoSetKey>
 80107da:	2800      	cmp	r0, #0
 80107dc:	d084      	beq.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80107de:	2011      	movs	r0, #17
 80107e0:	e78a      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 80107e2:	6841      	ldr	r1, [r0, #4]
 80107e4:	2900      	cmp	r1, #0
 80107e6:	f000 81e1 	beq.w	8010bac <LoRaMacMibSetRequestConfirm+0x574>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 80107ea:	200e      	movs	r0, #14
 80107ec:	f001 fb06 	bl	8011dfc <LoRaMacCryptoSetKey>
 80107f0:	2800      	cmp	r0, #0
 80107f2:	f43f af79 	beq.w	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80107f6:	2011      	movs	r0, #17
 80107f8:	e77e      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 80107fa:	6841      	ldr	r1, [r0, #4]
 80107fc:	2900      	cmp	r1, #0
 80107fe:	f000 81d7 	beq.w	8010bb0 <LoRaMacMibSetRequestConfirm+0x578>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8010802:	200f      	movs	r0, #15
 8010804:	f001 fafa 	bl	8011dfc <LoRaMacCryptoSetKey>
 8010808:	2800      	cmp	r0, #0
 801080a:	f43f af6d 	beq.w	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801080e:	2011      	movs	r0, #17
 8010810:	e772      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8010812:	7900      	ldrb	r0, [r0, #4]
 8010814:	4b28      	ldr	r3, [pc, #160]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 8010816:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 801081a:	4c28      	ldr	r4, [pc, #160]	; (80108bc <LoRaMacMibSetRequestConfirm+0x284>)
 801081c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801081e:	4798      	blx	r3
            Radio.Sleep( );
 8010820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8010822:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010824:	2000      	movs	r0, #0
 8010826:	e760      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8010828:	7902      	ldrb	r2, [r0, #4]
 801082a:	4b23      	ldr	r3, [pc, #140]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 801082c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010830:	2000      	movs	r0, #0
 8010832:	e75a      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010834:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010838:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801083c:	4b1e      	ldr	r3, [pc, #120]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 801083e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010842:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8010846:	2207      	movs	r2, #7
 8010848:	a901      	add	r1, sp, #4
 801084a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801084e:	f001 fd0e 	bl	801226e <RegionVerify>
 8010852:	b908      	cbnz	r0, 8010858 <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010854:	2003      	movs	r0, #3
 8010856:	e747      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8010858:	6863      	ldr	r3, [r4, #4]
 801085a:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 801085c:	2200      	movs	r2, #0
 801085e:	a901      	add	r1, sp, #4
 8010860:	4b15      	ldr	r3, [pc, #84]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 8010862:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010866:	f001 fd02 	bl	801226e <RegionVerify>
 801086a:	2800      	cmp	r0, #0
 801086c:	f000 81a2 	beq.w	8010bb4 <LoRaMacMibSetRequestConfirm+0x57c>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8010870:	4b13      	ldr	r3, [pc, #76]	; (80108c0 <LoRaMacMibSetRequestConfirm+0x288>)
 8010872:	3404      	adds	r4, #4
 8010874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010878:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 801087c:	2000      	movs	r0, #0
 801087e:	e733      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8010880:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010884:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010888:	4b0b      	ldr	r3, [pc, #44]	; (80108b8 <LoRaMacMibSetRequestConfirm+0x280>)
 801088a:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 801088e:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010892:	2207      	movs	r2, #7
 8010894:	a901      	add	r1, sp, #4
 8010896:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801089a:	f001 fce8 	bl	801226e <RegionVerify>
 801089e:	2800      	cmp	r0, #0
 80108a0:	f000 818a 	beq.w	8010bb8 <LoRaMacMibSetRequestConfirm+0x580>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 80108a4:	4b07      	ldr	r3, [pc, #28]	; (80108c4 <LoRaMacMibSetRequestConfirm+0x28c>)
 80108a6:	3404      	adds	r4, #4
 80108a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80108ac:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80108b0:	2000      	movs	r0, #0
 80108b2:	e719      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
 80108b4:	20001264 	.word	0x20001264
 80108b8:	20008000 	.word	0x20008000
 80108bc:	0801e9c8 	.word	0x0801e9c8
 80108c0:	2000806c 	.word	0x2000806c
 80108c4:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 80108c8:	f990 3008 	ldrsb.w	r3, [r0, #8]
 80108cc:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 80108d0:	4bb2      	ldr	r3, [pc, #712]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80108d2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 80108d6:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 80108da:	2207      	movs	r2, #7
 80108dc:	a901      	add	r1, sp, #4
 80108de:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80108e2:	f001 fcc4 	bl	801226e <RegionVerify>
 80108e6:	2800      	cmp	r0, #0
 80108e8:	f000 8168 	beq.w	8010bbc <LoRaMacMibSetRequestConfirm+0x584>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 80108ec:	4bab      	ldr	r3, [pc, #684]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80108ee:	f103 0274 	add.w	r2, r3, #116	; 0x74
 80108f2:	3404      	adds	r4, #4
 80108f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80108f8:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 80108fc:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010900:	2b02      	cmp	r3, #2
 8010902:	d001      	beq.n	8010908 <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010904:	2000      	movs	r0, #0
 8010906:	e6ef      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8010908:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 801090c:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 8010910:	2800      	cmp	r0, #0
 8010912:	f43f aee9 	beq.w	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 8010916:	4ba2      	ldr	r3, [pc, #648]	; (8010ba0 <LoRaMacMibSetRequestConfirm+0x568>)
 8010918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801091a:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 801091c:	f7fe fce0 	bl	800f2e0 <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010920:	2000      	movs	r0, #0
 8010922:	e6e1      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8010924:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8010928:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801092c:	4b9b      	ldr	r3, [pc, #620]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 801092e:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8010932:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8010936:	2207      	movs	r2, #7
 8010938:	a901      	add	r1, sp, #4
 801093a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801093e:	f001 fc96 	bl	801226e <RegionVerify>
 8010942:	2800      	cmp	r0, #0
 8010944:	f000 813c 	beq.w	8010bc0 <LoRaMacMibSetRequestConfirm+0x588>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8010948:	4b96      	ldr	r3, [pc, #600]	; (8010ba4 <LoRaMacMibSetRequestConfirm+0x56c>)
 801094a:	3404      	adds	r4, #4
 801094c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8010950:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010954:	2000      	movs	r0, #0
 8010956:	e6c7      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8010958:	6843      	ldr	r3, [r0, #4]
 801095a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 801095c:	2301      	movs	r3, #1
 801095e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010962:	a902      	add	r1, sp, #8
 8010964:	4b8d      	ldr	r3, [pc, #564]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010966:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801096a:	f001 fc91 	bl	8012290 <RegionChanMaskSet>
 801096e:	b108      	cbz	r0, 8010974 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010970:	2000      	movs	r0, #0
 8010972:	e6b9      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010974:	2003      	movs	r0, #3
 8010976:	e6bf      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8010978:	6843      	ldr	r3, [r0, #4]
 801097a:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 801097c:	2300      	movs	r3, #0
 801097e:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8010982:	a902      	add	r1, sp, #8
 8010984:	4b85      	ldr	r3, [pc, #532]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010986:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 801098a:	f001 fc81 	bl	8012290 <RegionChanMaskSet>
 801098e:	b108      	cbz	r0, 8010994 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010990:	2000      	movs	r0, #0
 8010992:	e6a9      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010994:	2003      	movs	r0, #3
 8010996:	e6af      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8010998:	7902      	ldrb	r2, [r0, #4]
 801099a:	1e53      	subs	r3, r2, #1
 801099c:	b2db      	uxtb	r3, r3
 801099e:	2b0e      	cmp	r3, #14
 80109a0:	f200 8110 	bhi.w	8010bc4 <LoRaMacMibSetRequestConfirm+0x58c>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 80109a4:	4b7d      	ldr	r3, [pc, #500]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80109a6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109aa:	2000      	movs	r0, #0
 80109ac:	e69c      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 80109ae:	6842      	ldr	r2, [r0, #4]
 80109b0:	4b7a      	ldr	r3, [pc, #488]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80109b2:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109b4:	2000      	movs	r0, #0
 80109b6:	e698      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 80109b8:	6842      	ldr	r2, [r0, #4]
 80109ba:	4b78      	ldr	r3, [pc, #480]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80109bc:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109be:	2000      	movs	r0, #0
 80109c0:	e693      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 80109c2:	6842      	ldr	r2, [r0, #4]
 80109c4:	4b75      	ldr	r3, [pc, #468]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80109c6:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109c8:	2000      	movs	r0, #0
 80109ca:	e68e      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 80109cc:	6842      	ldr	r2, [r0, #4]
 80109ce:	4b73      	ldr	r3, [pc, #460]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80109d0:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109d2:	2000      	movs	r0, #0
 80109d4:	e689      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 80109d6:	6842      	ldr	r2, [r0, #4]
 80109d8:	4b70      	ldr	r3, [pc, #448]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80109da:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 80109dc:	2000      	movs	r0, #0
 80109de:	e684      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 80109e0:	f990 3004 	ldrsb.w	r3, [r0, #4]
 80109e4:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 80109e8:	2206      	movs	r2, #6
 80109ea:	a901      	add	r1, sp, #4
 80109ec:	4b6b      	ldr	r3, [pc, #428]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 80109ee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80109f2:	f001 fc3c 	bl	801226e <RegionVerify>
 80109f6:	2800      	cmp	r0, #0
 80109f8:	f000 80e6 	beq.w	8010bc8 <LoRaMacMibSetRequestConfirm+0x590>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 80109fc:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010a00:	4b66      	ldr	r3, [pc, #408]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a02:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a06:	2000      	movs	r0, #0
 8010a08:	e66e      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8010a0a:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010a0e:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010a12:	4b62      	ldr	r3, [pc, #392]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a14:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8010a18:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010a1c:	2205      	movs	r2, #5
 8010a1e:	a901      	add	r1, sp, #4
 8010a20:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010a24:	f001 fc23 	bl	801226e <RegionVerify>
 8010a28:	2800      	cmp	r0, #0
 8010a2a:	f000 80cf 	beq.w	8010bcc <LoRaMacMibSetRequestConfirm+0x594>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010a2e:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010a32:	4b5a      	ldr	r3, [pc, #360]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a38:	2000      	movs	r0, #0
 8010a3a:	e655      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8010a3c:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010a40:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8010a44:	220a      	movs	r2, #10
 8010a46:	a901      	add	r1, sp, #4
 8010a48:	4b54      	ldr	r3, [pc, #336]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a4a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010a4e:	f001 fc0e 	bl	801226e <RegionVerify>
 8010a52:	2800      	cmp	r0, #0
 8010a54:	f000 80bc 	beq.w	8010bd0 <LoRaMacMibSetRequestConfirm+0x598>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8010a58:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010a5c:	4b4f      	ldr	r3, [pc, #316]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a5e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a62:	2000      	movs	r0, #0
 8010a64:	e640      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8010a66:	f990 3004 	ldrsb.w	r3, [r0, #4]
 8010a6a:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8010a6e:	2209      	movs	r2, #9
 8010a70:	a901      	add	r1, sp, #4
 8010a72:	4b4a      	ldr	r3, [pc, #296]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a74:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010a78:	f001 fbf9 	bl	801226e <RegionVerify>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	f000 80a9 	beq.w	8010bd4 <LoRaMacMibSetRequestConfirm+0x59c>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8010a82:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 8010a86:	4b45      	ldr	r3, [pc, #276]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a8c:	2000      	movs	r0, #0
 8010a8e:	e62b      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8010a90:	6842      	ldr	r2, [r0, #4]
 8010a92:	4b42      	ldr	r3, [pc, #264]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010a94:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8010a98:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010a9a:	2000      	movs	r0, #0
 8010a9c:	e625      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8010a9e:	7902      	ldrb	r2, [r0, #4]
 8010aa0:	4b3e      	ldr	r3, [pc, #248]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010aa2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 8010aa6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010aaa:	2000      	movs	r0, #0
 8010aac:	e61d      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8010aae:	6842      	ldr	r2, [r0, #4]
 8010ab0:	4b3a      	ldr	r3, [pc, #232]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ab6:	2000      	movs	r0, #0
 8010ab8:	e617      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8010aba:	6842      	ldr	r2, [r0, #4]
 8010abc:	4b37      	ldr	r3, [pc, #220]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010abe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010ac2:	2000      	movs	r0, #0
 8010ac4:	e611      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 8010ac6:	f7fe fd21 	bl	800f50c <RestoreNvmData>
            break;
 8010aca:	e60d      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8010acc:	7983      	ldrb	r3, [r0, #6]
 8010ace:	2b01      	cmp	r3, #1
 8010ad0:	d901      	bls.n	8010ad6 <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ad2:	2003      	movs	r0, #3
 8010ad4:	e610      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8010ad6:	6842      	ldr	r2, [r0, #4]
 8010ad8:	4b30      	ldr	r3, [pc, #192]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010ada:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8010ade:	6840      	ldr	r0, [r0, #4]
 8010ae0:	f001 f844 	bl	8011b6c <LoRaMacCryptoSetLrWanVersion>
 8010ae4:	2800      	cmp	r0, #0
 8010ae6:	f43f adff 	beq.w	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8010aea:	2011      	movs	r0, #17
 8010aec:	e604      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8010aee:	6842      	ldr	r2, [r0, #4]
 8010af0:	4b2a      	ldr	r3, [pc, #168]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010af2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010af6:	2000      	movs	r0, #0
 8010af8:	e5f7      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8010afa:	7902      	ldrb	r2, [r0, #4]
 8010afc:	4b27      	ldr	r3, [pc, #156]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010afe:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b02:	2000      	movs	r0, #0
 8010b04:	e5f1      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8010b06:	8882      	ldrh	r2, [r0, #4]
 8010b08:	4b24      	ldr	r3, [pc, #144]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b0a:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b0e:	2000      	movs	r0, #0
 8010b10:	e5eb      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8010b12:	8882      	ldrh	r2, [r0, #4]
 8010b14:	4b21      	ldr	r3, [pc, #132]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b16:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b1a:	2000      	movs	r0, #0
 8010b1c:	e5e5      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 8010b1e:	8882      	ldrh	r2, [r0, #4]
 8010b20:	4b1e      	ldr	r3, [pc, #120]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b22:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b26:	2000      	movs	r0, #0
 8010b28:	e5df      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 8010b2a:	8882      	ldrh	r2, [r0, #4]
 8010b2c:	4b1b      	ldr	r3, [pc, #108]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b2e:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b32:	2000      	movs	r0, #0
 8010b34:	e5d9      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8010b36:	4b19      	ldr	r3, [pc, #100]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b38:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010b3c:	b11b      	cbz	r3, 8010b46 <LoRaMacMibSetRequestConfirm+0x50e>
 8010b3e:	2b06      	cmp	r3, #6
 8010b40:	d001      	beq.n	8010b46 <LoRaMacMibSetRequestConfirm+0x50e>
                status = LORAMAC_STATUS_ERROR;
 8010b42:	2018      	movs	r0, #24
 8010b44:	e5d0      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.RegionGroup2.RssiFreeThreshold = mibSet->Param.RssiFreeThreshold;
 8010b46:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8010b4a:	4b14      	ldr	r3, [pc, #80]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b4c:	f8a3 25c4 	strh.w	r2, [r3, #1476]	; 0x5c4
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b50:	2000      	movs	r0, #0
 8010b52:	e5ca      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            if( Nvm.MacGroup2.Region != LORAMAC_REGION_AS923 && Nvm.MacGroup2.Region != LORAMAC_REGION_KR920 )
 8010b54:	4b11      	ldr	r3, [pc, #68]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8010b5a:	b11b      	cbz	r3, 8010b64 <LoRaMacMibSetRequestConfirm+0x52c>
 8010b5c:	2b06      	cmp	r3, #6
 8010b5e:	d001      	beq.n	8010b64 <LoRaMacMibSetRequestConfirm+0x52c>
                status = LORAMAC_STATUS_ERROR;
 8010b60:	2018      	movs	r0, #24
 8010b62:	e5c1      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
                Nvm.RegionGroup2.CarrierSenseTime = mibSet->Param.CarrierSenseTime;
 8010b64:	6862      	ldr	r2, [r4, #4]
 8010b66:	4b0d      	ldr	r3, [pc, #52]	; (8010b9c <LoRaMacMibSetRequestConfirm+0x564>)
 8010b68:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8010b6c:	2000      	movs	r0, #0
 8010b6e:	e5bc      	b.n	80106ea <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8010b70:	f000 faf8 	bl	8011164 <LoRaMacMibClassBSetRequestConfirm>
            break;
 8010b74:	e5b8      	b.n	80106e8 <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010b76:	2003      	movs	r0, #3
}
 8010b78:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 8010b7a:	2001      	movs	r0, #1
 8010b7c:	e5bc      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b7e:	2003      	movs	r0, #3
 8010b80:	e5ba      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b82:	2003      	movs	r0, #3
 8010b84:	e5b8      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b86:	2003      	movs	r0, #3
 8010b88:	e5b6      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b8a:	2003      	movs	r0, #3
 8010b8c:	e5b4      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b8e:	2003      	movs	r0, #3
 8010b90:	e5b2      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b92:	2003      	movs	r0, #3
 8010b94:	e5b0      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010b96:	2003      	movs	r0, #3
 8010b98:	e5ae      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
 8010b9a:	bf00      	nop
 8010b9c:	20008000 	.word	0x20008000
 8010ba0:	0801e9c8 	.word	0x0801e9c8
 8010ba4:	200080bc 	.word	0x200080bc
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010ba8:	2003      	movs	r0, #3
 8010baa:	e5a5      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bac:	2003      	movs	r0, #3
 8010bae:	e5a3      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bb0:	2003      	movs	r0, #3
 8010bb2:	e5a1      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bb4:	2003      	movs	r0, #3
 8010bb6:	e59f      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bb8:	2003      	movs	r0, #3
 8010bba:	e59d      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bbc:	2003      	movs	r0, #3
 8010bbe:	e59b      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bc0:	2003      	movs	r0, #3
 8010bc2:	e599      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bc4:	2003      	movs	r0, #3
 8010bc6:	e597      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bc8:	2003      	movs	r0, #3
 8010bca:	e595      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bcc:	2003      	movs	r0, #3
 8010bce:	e593      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bd0:	2003      	movs	r0, #3
 8010bd2:	e591      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010bd4:	2003      	movs	r0, #3
 8010bd6:	e58f      	b.n	80106f8 <LoRaMacMibSetRequestConfirm+0xc0>

08010bd8 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8010bd8:	b570      	push	{r4, r5, r6, lr}
 8010bda:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8010bdc:	2300      	movs	r3, #0
 8010bde:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 8010be2:	2800      	cmp	r0, #0
 8010be4:	f000 80f3 	beq.w	8010dce <LoRaMacMlmeRequest+0x1f6>
 8010be8:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8010bea:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8010bec:	f7ff f87a 	bl	800fce4 <LoRaMacIsBusy>
 8010bf0:	b118      	cbz	r0, 8010bfa <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8010bf2:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8010bf4:	4620      	mov	r0, r4
 8010bf6:	b006      	add	sp, #24
 8010bf8:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8010bfa:	f000 fd65 	bl	80116c8 <LoRaMacConfirmQueueIsFull>
 8010bfe:	b108      	cbz	r0, 8010c04 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 8010c00:	2401      	movs	r4, #1
 8010c02:	e7f7      	b.n	8010bf4 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010c04:	f000 fd5a 	bl	80116bc <LoRaMacConfirmQueueGetCnt>
 8010c08:	b308      	cbz	r0, 8010c4e <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c0a:	4b72      	ldr	r3, [pc, #456]	; (8010dd4 <LoRaMacMlmeRequest+0x1fc>)
 8010c0c:	2101      	movs	r1, #1
 8010c0e:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8010c12:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 8010c16:	f042 0204 	orr.w	r2, r2, #4
 8010c1a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 8010c1e:	782b      	ldrb	r3, [r5, #0]
 8010c20:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010c24:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 8010c28:	2200      	movs	r2, #0
 8010c2a:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 8010c2e:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 8010c32:	461c      	mov	r4, r3
 8010c34:	3b01      	subs	r3, #1
 8010c36:	2b0c      	cmp	r3, #12
 8010c38:	f200 80af 	bhi.w	8010d9a <LoRaMacMlmeRequest+0x1c2>
 8010c3c:	e8df f003 	tbb	[pc, r3]
 8010c40:	adadad0d 	.word	0xadadad0d
 8010c44:	adad675d 	.word	0xadad675d
 8010c48:	7f9ead70 	.word	0x7f9ead70
 8010c4c:	95          	.byte	0x95
 8010c4d:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8010c4e:	2214      	movs	r2, #20
 8010c50:	2100      	movs	r1, #0
 8010c52:	4861      	ldr	r0, [pc, #388]	; (8010dd8 <LoRaMacMlmeRequest+0x200>)
 8010c54:	f003 fdd1 	bl	80147fa <memset1>
 8010c58:	e7d7      	b.n	8010c0a <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8010c5a:	4b5e      	ldr	r3, [pc, #376]	; (8010dd4 <LoRaMacMlmeRequest+0x1fc>)
 8010c5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8010c60:	f013 0f20 	tst.w	r3, #32
 8010c64:	d1c6      	bne.n	8010bf4 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8010c66:	792b      	ldrb	r3, [r5, #4]
 8010c68:	2b02      	cmp	r3, #2
 8010c6a:	d003      	beq.n	8010c74 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	d026      	beq.n	8010cbe <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010c70:	2402      	movs	r4, #2
 8010c72:	e093      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 8010c74:	2000      	movs	r0, #0
 8010c76:	f7fe fd5f 	bl	800f738 <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8010c7a:	4c58      	ldr	r4, [pc, #352]	; (8010ddc <LoRaMacMlmeRequest+0x204>)
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f995 1005 	ldrsb.w	r1, [r5, #5]
 8010c82:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8010c86:	f001 fb5c 	bl	8012342 <RegionAlternateDr>
 8010c8a:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 8010c8e:	f995 3006 	ldrsb.w	r3, [r5, #6]
 8010c92:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8010c96:	2307      	movs	r3, #7
 8010c98:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 8010c9c:	20ff      	movs	r0, #255	; 0xff
 8010c9e:	f7fe feab 	bl	800f9f8 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	2800      	cmp	r0, #0
 8010ca6:	d079      	beq.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8010ca8:	4e4c      	ldr	r6, [pc, #304]	; (8010ddc <LoRaMacMlmeRequest+0x204>)
 8010caa:	2201      	movs	r2, #1
 8010cac:	f995 1005 	ldrsb.w	r1, [r5, #5]
 8010cb0:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 8010cb4:	f001 fb45 	bl	8012342 <RegionAlternateDr>
 8010cb8:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 8010cbc:	e06e      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8010cbe:	4e47      	ldr	r6, [pc, #284]	; (8010ddc <LoRaMacMlmeRequest+0x204>)
 8010cc0:	2400      	movs	r4, #0
 8010cc2:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8010cc6:	2302      	movs	r3, #2
 8010cc8:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010ccc:	4669      	mov	r1, sp
 8010cce:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 8010cd2:	f001 fac5 	bl	8012260 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8010cd6:	792b      	ldrb	r3, [r5, #4]
 8010cd8:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8010cdc:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 8010ce0:	2301      	movs	r3, #1
 8010ce2:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 8010ce6:	f7fc ff8f 	bl	800dc08 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8010cea:	4a3a      	ldr	r2, [pc, #232]	; (8010dd4 <LoRaMacMlmeRequest+0x1fc>)
 8010cec:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010cf0:	f043 0310 	orr.w	r3, r3, #16
 8010cf4:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 8010cf8:	e050      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	a904      	add	r1, sp, #16
 8010cfe:	2002      	movs	r0, #2
 8010d00:	f000 fad0 	bl	80112a4 <LoRaMacCommandsAddCmd>
 8010d04:	4604      	mov	r4, r0
 8010d06:	2800      	cmp	r0, #0
 8010d08:	d048      	beq.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d0a:	2413      	movs	r4, #19
 8010d0c:	e046      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 8010d0e:	f995 200c 	ldrsb.w	r2, [r5, #12]
 8010d12:	b2d2      	uxtb	r2, r2
 8010d14:	68a9      	ldr	r1, [r5, #8]
 8010d16:	88a8      	ldrh	r0, [r5, #4]
 8010d18:	f7fc fecc 	bl	800dab4 <SetTxContinuousWave>
 8010d1c:	4604      	mov	r4, r0
            break;
 8010d1e:	e03d      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 8010d20:	4669      	mov	r1, sp
 8010d22:	200d      	movs	r0, #13
 8010d24:	f000 fb0a 	bl	801133c <LoRaMacCommandsGetCmd>
 8010d28:	4604      	mov	r4, r0
 8010d2a:	b3b8      	cbz	r0, 8010d9c <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	a904      	add	r1, sp, #16
 8010d30:	200d      	movs	r0, #13
 8010d32:	f000 fab7 	bl	80112a4 <LoRaMacCommandsAddCmd>
 8010d36:	4604      	mov	r4, r0
 8010d38:	b380      	cbz	r0, 8010d9c <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d3a:	2413      	movs	r4, #19
            break;
 8010d3c:	e02e      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8010d3e:	4b27      	ldr	r3, [pc, #156]	; (8010ddc <LoRaMacMlmeRequest+0x204>)
 8010d40:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8010d44:	b10b      	cbz	r3, 8010d4a <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010d46:	2402      	movs	r4, #2
 8010d48:	e028      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8010d4a:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8010d4c:	f004 0007 	and.w	r0, r4, #7
 8010d50:	f000 fa01 	bl	8011156 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8010d54:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8010d58:	2201      	movs	r2, #1
 8010d5a:	a904      	add	r1, sp, #16
 8010d5c:	2010      	movs	r0, #16
 8010d5e:	f000 faa1 	bl	80112a4 <LoRaMacCommandsAddCmd>
 8010d62:	4604      	mov	r4, r0
 8010d64:	b1d0      	cbz	r0, 8010d9c <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d66:	2413      	movs	r4, #19
 8010d68:	e018      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	a904      	add	r1, sp, #16
 8010d6e:	2012      	movs	r0, #18
 8010d70:	f000 fa98 	bl	80112a4 <LoRaMacCommandsAddCmd>
 8010d74:	4604      	mov	r4, r0
 8010d76:	b188      	cbz	r0, 8010d9c <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010d78:	2413      	movs	r4, #19
 8010d7a:	e00f      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 8010d7c:	2301      	movs	r3, #1
 8010d7e:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8010d82:	f000 f9d9 	bl	8011138 <LoRaMacClassBIsAcquisitionInProgress>
 8010d86:	b108      	cbz	r0, 8010d8c <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 8010d88:	2401      	movs	r4, #1
 8010d8a:	e007      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8010d8c:	f000 f9d1 	bl	8011132 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8010d90:	2000      	movs	r0, #0
 8010d92:	f000 f9d3 	bl	801113c <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8010d96:	2400      	movs	r4, #0
 8010d98:	e000      	b.n	8010d9c <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 8010d9a:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8010d9c:	4b0d      	ldr	r3, [pc, #52]	; (8010dd4 <LoRaMacMlmeRequest+0x1fc>)
 8010d9e:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010da2:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 8010da4:	b17c      	cbz	r4, 8010dc6 <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8010da6:	f000 fc89 	bl	80116bc <LoRaMacConfirmQueueGetCnt>
 8010daa:	2800      	cmp	r0, #0
 8010dac:	f47f af22 	bne.w	8010bf4 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 8010db0:	4b08      	ldr	r3, [pc, #32]	; (8010dd4 <LoRaMacMlmeRequest+0x1fc>)
 8010db2:	2100      	movs	r1, #0
 8010db4:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8010db8:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 8010dbc:	f361 0282 	bfi	r2, r1, #2, #1
 8010dc0:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 8010dc4:	e716      	b.n	8010bf4 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 8010dc6:	a805      	add	r0, sp, #20
 8010dc8:	f000 fbae 	bl	8011528 <LoRaMacConfirmQueueAdd>
 8010dcc:	e712      	b.n	8010bf4 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010dce:	2403      	movs	r4, #3
 8010dd0:	e710      	b.n	8010bf4 <LoRaMacMlmeRequest+0x1c>
 8010dd2:	bf00      	nop
 8010dd4:	20001264 	.word	0x20001264
 8010dd8:	200016b8 	.word	0x200016b8
 8010ddc:	20008000 	.word	0x20008000

08010de0 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8010de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de4:	b091      	sub	sp, #68	; 0x44
 8010de6:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8010de8:	2800      	cmp	r0, #0
 8010dea:	f000 80de 	beq.w	8010faa <LoRaMacMcpsRequest+0x1ca>
 8010dee:	f04f 0a00 	mov.w	sl, #0
 8010df2:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 8010df4:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 8010df8:	f7fe ff74 	bl	800fce4 <LoRaMacIsBusy>
 8010dfc:	4680      	mov	r8, r0
 8010dfe:	b118      	cbz	r0, 8010e08 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 8010e00:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8010e02:	b011      	add	sp, #68	; 0x44
 8010e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 8010e08:	ac06      	add	r4, sp, #24
 8010e0a:	462e      	mov	r6, r5
 8010e0c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010e0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010e10:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 8010e14:	4651      	mov	r1, sl
 8010e16:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8010e1a:	4c66      	ldr	r4, [pc, #408]	; (8010fb4 <LoRaMacMcpsRequest+0x1d4>)
 8010e1c:	2214      	movs	r2, #20
 8010e1e:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 8010e22:	f003 fcea 	bl	80147fa <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8010e26:	2301      	movs	r3, #1
 8010e28:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8010e2c:	4b62      	ldr	r3, [pc, #392]	; (8010fb8 <LoRaMacMcpsRequest+0x1d8>)
 8010e2e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8010e32:	2b02      	cmp	r3, #2
 8010e34:	d065      	beq.n	8010f02 <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 8010e36:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8010e3a:	2f01      	cmp	r7, #1
 8010e3c:	f000 8086 	beq.w	8010f4c <LoRaMacMcpsRequest+0x16c>
 8010e40:	2f03      	cmp	r7, #3
 8010e42:	f000 8096 	beq.w	8010f72 <LoRaMacMcpsRequest+0x192>
 8010e46:	2f00      	cmp	r7, #0
 8010e48:	d06d      	beq.n	8010f26 <LoRaMacMcpsRequest+0x146>
 8010e4a:	f04f 0b00 	mov.w	fp, #0
 8010e4e:	f8cd b014 	str.w	fp, [sp, #20]
 8010e52:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010e56:	2302      	movs	r3, #2
 8010e58:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010e5c:	4e56      	ldr	r6, [pc, #344]	; (8010fb8 <LoRaMacMcpsRequest+0x1d8>)
 8010e5e:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 8010e62:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e66:	a90e      	add	r1, sp, #56	; 0x38
 8010e68:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 8010e6c:	f001 f9e1 	bl	8012232 <RegionGetPhyParam>
 8010e70:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8010e72:	b244      	sxtb	r4, r0
 8010e74:	45a3      	cmp	fp, r4
 8010e76:	bfb8      	it	lt
 8010e78:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8010e7a:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 8010e7e:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 8010e82:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 8010e86:	4648      	mov	r0, r9
 8010e88:	f7fc fde6 	bl	800da58 <CheckForMinimumAbpDatarate>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	b900      	cbnz	r0, 8010e92 <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 8010e90:	465c      	mov	r4, fp
    if( readyToSend == true )
 8010e92:	f1b8 0f00 	cmp.w	r8, #0
 8010e96:	f000 8082 	beq.w	8010f9e <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8010e9a:	f1b9 0f00 	cmp.w	r9, #0
 8010e9e:	d000      	beq.n	8010ea2 <LoRaMacMcpsRequest+0xc2>
 8010ea0:	b19b      	cbz	r3, 8010eca <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 8010ea2:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8010ea6:	4b44      	ldr	r3, [pc, #272]	; (8010fb8 <LoRaMacMcpsRequest+0x1d8>)
 8010ea8:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8010eac:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8010eb0:	2205      	movs	r2, #5
 8010eb2:	a90b      	add	r1, sp, #44	; 0x2c
 8010eb4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010eb8:	f001 f9d9 	bl	801226e <RegionVerify>
 8010ebc:	2800      	cmp	r0, #0
 8010ebe:	d076      	beq.n	8010fae <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8010ec0:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 8010ec4:	4b3c      	ldr	r3, [pc, #240]	; (8010fb8 <LoRaMacMcpsRequest+0x1d8>)
 8010ec6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 8010eca:	4b3a      	ldr	r3, [pc, #232]	; (8010fb4 <LoRaMacMcpsRequest+0x1d4>)
 8010ecc:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 8010ed0:	4b39      	ldr	r3, [pc, #228]	; (8010fb8 <LoRaMacMcpsRequest+0x1d8>)
 8010ed2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8010ed6:	f7fd ff45 	bl	800ed64 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 8010eda:	9b03      	ldr	r3, [sp, #12]
 8010edc:	9300      	str	r3, [sp, #0]
 8010ede:	4653      	mov	r3, sl
 8010ee0:	9a05      	ldr	r2, [sp, #20]
 8010ee2:	9904      	ldr	r1, [sp, #16]
 8010ee4:	a80c      	add	r0, sp, #48	; 0x30
 8010ee6:	f7fe fe6d 	bl	800fbc4 <Send>
        if( status == LORAMAC_STATUS_OK )
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d152      	bne.n	8010f94 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 8010eee:	4b31      	ldr	r3, [pc, #196]	; (8010fb4 <LoRaMacMcpsRequest+0x1d4>)
 8010ef0:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 8010ef4:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 8010ef8:	f042 0201 	orr.w	r2, r2, #1
 8010efc:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 8010f00:	e04e      	b.n	8010fa0 <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8010f02:	4b2d      	ldr	r3, [pc, #180]	; (8010fb8 <LoRaMacMcpsRequest+0x1d8>)
 8010f04:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 8010f08:	2b02      	cmp	r3, #2
 8010f0a:	d194      	bne.n	8010e36 <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8010f0c:	4b2a      	ldr	r3, [pc, #168]	; (8010fb8 <LoRaMacMcpsRequest+0x1d8>)
 8010f0e:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d18f      	bne.n	8010e36 <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 8010f16:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d18b      	bne.n	8010e36 <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	f88d 3018 	strb.w	r3, [sp, #24]
 8010f24:	e787      	b.n	8010e36 <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 8010f26:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010f2a:	2202      	movs	r2, #2
 8010f2c:	f362 1347 	bfi	r3, r2, #5, #3
 8010f30:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 8010f34:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8010f38:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8010f3a:	9b08      	ldr	r3, [sp, #32]
 8010f3c:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8010f3e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 8010f42:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 8010f46:	f04f 0801 	mov.w	r8, #1
            break;
 8010f4a:	e784      	b.n	8010e56 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8010f4c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010f50:	2204      	movs	r2, #4
 8010f52:	f362 1347 	bfi	r3, r2, #5, #3
 8010f56:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 8010f5a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8010f5e:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 8010f60:	9b08      	ldr	r3, [sp, #32]
 8010f62:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8010f64:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 8010f68:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 8010f6c:	f04f 0801 	mov.w	r8, #1
            break;
 8010f70:	e771      	b.n	8010e56 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8010f72:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8010f76:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8010f7a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 8010f7e:	9b07      	ldr	r3, [sp, #28]
 8010f80:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8010f82:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 8010f86:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 8010f8a:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	9304      	str	r3, [sp, #16]
            break;
 8010f92:	e760      	b.n	8010e56 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 8010f94:	4b07      	ldr	r3, [pc, #28]	; (8010fb4 <LoRaMacMcpsRequest+0x1d4>)
 8010f96:	2200      	movs	r2, #0
 8010f98:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 8010f9c:	e000      	b.n	8010fa0 <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010f9e:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8010fa0:	4b04      	ldr	r3, [pc, #16]	; (8010fb4 <LoRaMacMcpsRequest+0x1d4>)
 8010fa2:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 8010fa6:	612b      	str	r3, [r5, #16]
    return status;
 8010fa8:	e72b      	b.n	8010e02 <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010faa:	2003      	movs	r0, #3
 8010fac:	e729      	b.n	8010e02 <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8010fae:	2003      	movs	r0, #3
 8010fb0:	e727      	b.n	8010e02 <LoRaMacMcpsRequest+0x22>
 8010fb2:	bf00      	nop
 8010fb4:	20001264 	.word	0x20001264
 8010fb8:	20008000 	.word	0x20008000

08010fbc <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 8010fbc:	b510      	push	{r4, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 8010fc2:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 8010fc6:	220f      	movs	r2, #15
 8010fc8:	a901      	add	r1, sp, #4
 8010fca:	4b09      	ldr	r3, [pc, #36]	; (8010ff0 <LoRaMacTestSetDutyCycleOn+0x34>)
 8010fcc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8010fd0:	f001 f94d 	bl	801226e <RegionVerify>
 8010fd4:	b148      	cbz	r0, 8010fea <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 8010fd6:	4b06      	ldr	r3, [pc, #24]	; (8010ff0 <LoRaMacTestSetDutyCycleOn+0x34>)
 8010fd8:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8010fdc:	4a05      	ldr	r2, [pc, #20]	; (8010ff4 <LoRaMacTestSetDutyCycleOn+0x38>)
 8010fde:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 8010fe2:	f043 0320 	orr.w	r3, r3, #32
 8010fe6:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 8010fea:	b002      	add	sp, #8
 8010fec:	bd10      	pop	{r4, pc}
 8010fee:	bf00      	nop
 8010ff0:	20008000 	.word	0x20008000
 8010ff4:	20001264 	.word	0x20001264

08010ff8 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8010ff8:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8010ffa:	f7ff f8d1 	bl	80101a0 <LoRaMacStop>
 8010ffe:	b110      	cbz	r0, 8011006 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8011000:	2401      	movs	r4, #1
    }
}
 8011002:	4620      	mov	r0, r4
 8011004:	bd38      	pop	{r3, r4, r5, pc}
 8011006:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 8011008:	4d0a      	ldr	r5, [pc, #40]	; (8011034 <LoRaMacDeInitialization+0x3c>)
 801100a:	f505 705a 	add.w	r0, r5, #872	; 0x368
 801100e:	f005 fe0b 	bl	8016c28 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8011012:	f505 7060 	add.w	r0, r5, #896	; 0x380
 8011016:	f005 fe07 	bl	8016c28 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801101a:	f505 7066 	add.w	r0, r5, #920	; 0x398
 801101e:	f005 fe03 	bl	8016c28 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 8011022:	f000 f899 	bl	8011158 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 8011026:	2000      	movs	r0, #0
 8011028:	f7fe fb86 	bl	800f738 <ResetMacParameters>
        Radio.Sleep( );
 801102c:	4b02      	ldr	r3, [pc, #8]	; (8011038 <LoRaMacDeInitialization+0x40>)
 801102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011030:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 8011032:	e7e6      	b.n	8011002 <LoRaMacDeInitialization+0xa>
 8011034:	20001264 	.word	0x20001264
 8011038:	0801e9c8 	.word	0x0801e9c8

0801103c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 801103c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011040:	b08b      	sub	sp, #44	; 0x2c
 8011042:	460f      	mov	r7, r1
 8011044:	4616      	mov	r6, r2
 8011046:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 8011048:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 801104c:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 8011050:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8011054:	6842      	ldr	r2, [r0, #4]
 8011056:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011058:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 801105a:	f890 8001 	ldrb.w	r8, [r0, #1]
 801105e:	f1b8 0f00 	cmp.w	r8, #0
 8011062:	d109      	bne.n	8011078 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 8011064:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 8011068:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 801106c:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 8011070:	4640      	mov	r0, r8
 8011072:	b00b      	add	sp, #44	; 0x2c
 8011074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011078:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 801107a:	2302      	movs	r3, #2
 801107c:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8011080:	7bc3      	ldrb	r3, [r0, #15]
 8011082:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011086:	a908      	add	r1, sp, #32
 8011088:	7c00      	ldrb	r0, [r0, #16]
 801108a:	f001 f8d2 	bl	8012232 <RegionGetPhyParam>
 801108e:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 8011090:	b243      	sxtb	r3, r0
 8011092:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 8011094:	454b      	cmp	r3, r9
 8011096:	bfb8      	it	lt
 8011098:	464b      	movlt	r3, r9
 801109a:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 801109c:	6862      	ldr	r2, [r4, #4]
 801109e:	8923      	ldrh	r3, [r4, #8]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d201      	bcs.n	80110a8 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 80110a4:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80110a8:	8961      	ldrh	r1, [r4, #10]
 80110aa:	440b      	add	r3, r1
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d224      	bcs.n	80110fa <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 80110b0:	6863      	ldr	r3, [r4, #4]
 80110b2:	8921      	ldrh	r1, [r4, #8]
 80110b4:	8962      	ldrh	r2, [r4, #10]
 80110b6:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 80110ba:	4283      	cmp	r3, r0
 80110bc:	d332      	bcc.n	8011124 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 80110be:	1a5b      	subs	r3, r3, r1
 80110c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80110c4:	fb02 3311 	mls	r3, r2, r1, r3
 80110c8:	bb7b      	cbnz	r3, 801112a <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 80110ca:	9b01      	ldr	r3, [sp, #4]
 80110cc:	4599      	cmp	r9, r3
 80110ce:	dc03      	bgt.n	80110d8 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 80110d0:	7823      	ldrb	r3, [r4, #0]
 80110d2:	b9eb      	cbnz	r3, 8011110 <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 80110d4:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 80110d8:	2321      	movs	r3, #33	; 0x21
 80110da:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 80110de:	9b00      	ldr	r3, [sp, #0]
 80110e0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80110e4:	7be3      	ldrb	r3, [r4, #15]
 80110e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80110ea:	a908      	add	r1, sp, #32
 80110ec:	7c20      	ldrb	r0, [r4, #16]
 80110ee:	f001 f8a0 	bl	8012232 <RegionGetPhyParam>
 80110f2:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 80110f4:	fa4f f980 	sxtb.w	r9, r0
 80110f8:	e7b4      	b.n	8011064 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 80110fa:	230a      	movs	r3, #10
 80110fc:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8011100:	a908      	add	r1, sp, #32
 8011102:	7c20      	ldrb	r0, [r4, #16]
 8011104:	f001 f895 	bl	8012232 <RegionGetPhyParam>
 8011108:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 801110a:	fa4f fa80 	sxtb.w	sl, r0
 801110e:	e7cf      	b.n	80110b0 <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011110:	2302      	movs	r3, #2
 8011112:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 8011116:	a903      	add	r1, sp, #12
 8011118:	7c20      	ldrb	r0, [r4, #16]
 801111a:	f001 f8a1 	bl	8012260 <RegionInitDefaults>
                    nbTrans = 1;
 801111e:	f04f 0b01 	mov.w	fp, #1
 8011122:	e7d9      	b.n	80110d8 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 8011124:	f8dd 9000 	ldr.w	r9, [sp]
 8011128:	e79c      	b.n	8011064 <LoRaMacAdrCalcNext+0x28>
 801112a:	f8dd 9000 	ldr.w	r9, [sp]
 801112e:	e799      	b.n	8011064 <LoRaMacAdrCalcNext+0x28>

08011130 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011130:	4770      	bx	lr

08011132 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011132:	4770      	bx	lr

08011134 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011134:	4770      	bx	lr

08011136 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011136:	4770      	bx	lr

08011138 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011138:	2000      	movs	r0, #0
 801113a:	4770      	bx	lr

0801113c <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801113c:	4770      	bx	lr

0801113e <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801113e:	4770      	bx	lr

08011140 <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011140:	4770      	bx	lr

08011142 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011142:	2000      	movs	r0, #0
 8011144:	4770      	bx	lr

08011146 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011146:	2000      	movs	r0, #0
 8011148:	4770      	bx	lr

0801114a <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801114a:	2000      	movs	r0, #0
 801114c:	4770      	bx	lr

0801114e <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801114e:	2000      	movs	r0, #0
 8011150:	4770      	bx	lr

08011152 <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011152:	2000      	movs	r0, #0
 8011154:	4770      	bx	lr

08011156 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011156:	4770      	bx	lr

08011158 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011158:	4770      	bx	lr

0801115a <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801115a:	4770      	bx	lr

0801115c <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801115c:	2002      	movs	r0, #2
 801115e:	4770      	bx	lr

08011160 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011160:	2002      	movs	r0, #2
 8011162:	4770      	bx	lr

08011164 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011164:	2002      	movs	r0, #2
 8011166:	4770      	bx	lr

08011168 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011168:	4770      	bx	lr

0801116a <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801116a:	2000      	movs	r0, #0
 801116c:	4770      	bx	lr

0801116e <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801116e:	4770      	bx	lr

08011170 <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011170:	4770      	bx	lr

08011172 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011172:	2000      	movs	r0, #0
 8011174:	4770      	bx	lr

08011176 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8011176:	2000      	movs	r0, #0
 8011178:	4770      	bx	lr

0801117a <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801117a:	4770      	bx	lr

0801117c <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801117c:	4770      	bx	lr

0801117e <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801117e:	4770      	bx	lr

08011180 <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 8011180:	2300      	movs	r3, #0
 8011182:	2b0f      	cmp	r3, #15
 8011184:	d804      	bhi.n	8011190 <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 8011186:	5cc2      	ldrb	r2, [r0, r3]
 8011188:	b922      	cbnz	r2, 8011194 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 801118a:	3301      	adds	r3, #1
 801118c:	b29b      	uxth	r3, r3
 801118e:	e7f8      	b.n	8011182 <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 8011190:	2001      	movs	r0, #1
 8011192:	4770      	bx	lr
            return false;
 8011194:	2000      	movs	r0, #0
}
 8011196:	4770      	bx	lr

08011198 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8011198:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 801119a:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 801119c:	0123      	lsls	r3, r4, #4
 801119e:	3308      	adds	r3, #8
 80111a0:	4d06      	ldr	r5, [pc, #24]	; (80111bc <MallocNewMacCommandSlot+0x24>)
 80111a2:	441d      	add	r5, r3
 80111a4:	4628      	mov	r0, r5
 80111a6:	f7ff ffeb 	bl	8011180 <IsSlotFree>
 80111aa:	b920      	cbnz	r0, 80111b6 <MallocNewMacCommandSlot+0x1e>
    {
        itr++;
 80111ac:	3401      	adds	r4, #1
 80111ae:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 80111b0:	2c20      	cmp	r4, #32
 80111b2:	d1f3      	bne.n	801119c <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 80111b4:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 80111b6:	4628      	mov	r0, r5
 80111b8:	bd38      	pop	{r3, r4, r5, pc}
 80111ba:	bf00      	nop
 80111bc:	20001824 	.word	0x20001824

080111c0 <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 80111c0:	b120      	cbz	r0, 80111cc <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 80111c2:	2200      	movs	r2, #0
 80111c4:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 80111c6:	6042      	str	r2, [r0, #4]

    return true;
 80111c8:	2001      	movs	r0, #1
 80111ca:	4770      	bx	lr
        return false;
 80111cc:	2000      	movs	r0, #0
}
 80111ce:	4770      	bx	lr

080111d0 <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 80111d0:	4603      	mov	r3, r0
 80111d2:	b160      	cbz	r0, 80111ee <LinkedListAdd+0x1e>
 80111d4:	b169      	cbz	r1, 80111f2 <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80111d6:	6802      	ldr	r2, [r0, #0]
 80111d8:	b13a      	cbz	r2, 80111ea <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80111da:	685a      	ldr	r2, [r3, #4]
 80111dc:	b102      	cbz	r2, 80111e0 <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 80111de:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80111e0:	2200      	movs	r2, #0
 80111e2:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 80111e4:	6059      	str	r1, [r3, #4]

    return true;
 80111e6:	2001      	movs	r0, #1
 80111e8:	4770      	bx	lr
        list->First = element;
 80111ea:	6001      	str	r1, [r0, #0]
 80111ec:	e7f5      	b.n	80111da <LinkedListAdd+0xa>
        return false;
 80111ee:	2000      	movs	r0, #0
 80111f0:	4770      	bx	lr
 80111f2:	2000      	movs	r0, #0
}
 80111f4:	4770      	bx	lr

080111f6 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 80111f6:	b160      	cbz	r0, 8011212 <LinkedListGetPrevious+0x1c>
 80111f8:	b161      	cbz	r1, 8011214 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 80111fa:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 80111fc:	4281      	cmp	r1, r0
 80111fe:	d102      	bne.n	8011206 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 8011200:	2000      	movs	r0, #0
    }

    return curElement;
}
 8011202:	4770      	bx	lr
            curElement = curElement->Next;
 8011204:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8011206:	2800      	cmp	r0, #0
 8011208:	d0fb      	beq.n	8011202 <LinkedListGetPrevious+0xc>
 801120a:	6803      	ldr	r3, [r0, #0]
 801120c:	428b      	cmp	r3, r1
 801120e:	d1f9      	bne.n	8011204 <LinkedListGetPrevious+0xe>
 8011210:	4770      	bx	lr
 8011212:	4770      	bx	lr
        return NULL;
 8011214:	4608      	mov	r0, r1
 8011216:	4770      	bx	lr

08011218 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 8011218:	b1b8      	cbz	r0, 801124a <LinkedListRemove+0x32>
{
 801121a:	b538      	push	{r3, r4, r5, lr}
 801121c:	460c      	mov	r4, r1
 801121e:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 8011220:	b1a9      	cbz	r1, 801124e <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8011222:	f7ff ffe8 	bl	80111f6 <LinkedListGetPrevious>

    if( list->First == element )
 8011226:	682b      	ldr	r3, [r5, #0]
 8011228:	42a3      	cmp	r3, r4
 801122a:	d009      	beq.n	8011240 <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 801122c:	686b      	ldr	r3, [r5, #4]
 801122e:	42a3      	cmp	r3, r4
 8011230:	d009      	beq.n	8011246 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 8011232:	b108      	cbz	r0, 8011238 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 8011234:	6823      	ldr	r3, [r4, #0]
 8011236:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 8011238:	2300      	movs	r3, #0
 801123a:	6023      	str	r3, [r4, #0]

    return true;
 801123c:	2001      	movs	r0, #1
}
 801123e:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 8011240:	6823      	ldr	r3, [r4, #0]
 8011242:	602b      	str	r3, [r5, #0]
 8011244:	e7f2      	b.n	801122c <LinkedListRemove+0x14>
        list->Last = PrevElement;
 8011246:	6068      	str	r0, [r5, #4]
 8011248:	e7f3      	b.n	8011232 <LinkedListRemove+0x1a>
        return false;
 801124a:	2000      	movs	r0, #0
}
 801124c:	4770      	bx	lr
        return false;
 801124e:	2000      	movs	r0, #0
 8011250:	e7f5      	b.n	801123e <LinkedListRemove+0x26>
	...

08011254 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 8011254:	2811      	cmp	r0, #17
 8011256:	d805      	bhi.n	8011264 <IsSticky+0x10>
 8011258:	4b03      	ldr	r3, [pc, #12]	; (8011268 <IsSticky+0x14>)
 801125a:	fa23 f000 	lsr.w	r0, r3, r0
 801125e:	f000 0001 	and.w	r0, r0, #1
 8011262:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 8011264:	2000      	movs	r0, #0
    }
}
 8011266:	4770      	bx	lr
 8011268:	00020720 	.word	0x00020720

0801126c <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 801126c:	2000      	movs	r0, #0
 801126e:	4770      	bx	lr

08011270 <FreeMacCommandSlot>:
    if( slot == NULL )
 8011270:	b130      	cbz	r0, 8011280 <FreeMacCommandSlot+0x10>
{
 8011272:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 8011274:	2210      	movs	r2, #16
 8011276:	2100      	movs	r1, #0
 8011278:	f003 fabf 	bl	80147fa <memset1>
    return true;
 801127c:	2001      	movs	r0, #1
}
 801127e:	bd08      	pop	{r3, pc}
        return false;
 8011280:	2000      	movs	r0, #0
}
 8011282:	4770      	bx	lr

08011284 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 8011284:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 8011286:	4c06      	ldr	r4, [pc, #24]	; (80112a0 <LoRaMacCommandsInit+0x1c>)
 8011288:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801128c:	2100      	movs	r1, #0
 801128e:	4620      	mov	r0, r4
 8011290:	f003 fab3 	bl	80147fa <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8011294:	4620      	mov	r0, r4
 8011296:	f7ff ff93 	bl	80111c0 <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 801129a:	2000      	movs	r0, #0
 801129c:	bd10      	pop	{r4, pc}
 801129e:	bf00      	nop
 80112a0:	20001824 	.word	0x20001824

080112a4 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 80112a4:	b321      	cbz	r1, 80112f0 <LoRaMacCommandsAddCmd+0x4c>
{
 80112a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80112a8:	4605      	mov	r5, r0
 80112aa:	4614      	mov	r4, r2
 80112ac:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 80112ae:	f7ff ff73 	bl	8011198 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 80112b2:	4606      	mov	r6, r0
 80112b4:	b1f0      	cbz	r0, 80112f4 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 80112b6:	4601      	mov	r1, r0
 80112b8:	4810      	ldr	r0, [pc, #64]	; (80112fc <LoRaMacCommandsAddCmd+0x58>)
 80112ba:	f7ff ff89 	bl	80111d0 <LinkedListAdd>
 80112be:	b1d8      	cbz	r0, 80112f8 <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 80112c0:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 80112c2:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 80112c4:	b2a2      	uxth	r2, r4
 80112c6:	4639      	mov	r1, r7
 80112c8:	1d70      	adds	r0, r6, #5
 80112ca:	f003 fa7e 	bl	80147ca <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 80112ce:	4628      	mov	r0, r5
 80112d0:	f7ff ffc0 	bl	8011254 <IsSticky>
 80112d4:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 80112d6:	4628      	mov	r0, r5
 80112d8:	f7ff ffc8 	bl	801126c <IsConfirmationRequired>
 80112dc:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 80112de:	4b07      	ldr	r3, [pc, #28]	; (80112fc <LoRaMacCommandsAddCmd+0x58>)
 80112e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80112e4:	4414      	add	r4, r2
 80112e6:	3401      	adds	r4, #1
 80112e8:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 80112ec:	2000      	movs	r0, #0
}
 80112ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 80112f0:	2001      	movs	r0, #1
}
 80112f2:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 80112f4:	2002      	movs	r0, #2
 80112f6:	e7fa      	b.n	80112ee <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 80112f8:	2005      	movs	r0, #5
 80112fa:	e7f8      	b.n	80112ee <LoRaMacCommandsAddCmd+0x4a>
 80112fc:	20001824 	.word	0x20001824

08011300 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 8011300:	b1a0      	cbz	r0, 801132c <LoRaMacCommandsRemoveCmd+0x2c>
{
 8011302:	b510      	push	{r4, lr}
 8011304:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8011306:	4601      	mov	r1, r0
 8011308:	480b      	ldr	r0, [pc, #44]	; (8011338 <LoRaMacCommandsRemoveCmd+0x38>)
 801130a:	f7ff ff85 	bl	8011218 <LinkedListRemove>
 801130e:	b178      	cbz	r0, 8011330 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8011310:	68a1      	ldr	r1, [r4, #8]
 8011312:	4a09      	ldr	r2, [pc, #36]	; (8011338 <LoRaMacCommandsRemoveCmd+0x38>)
 8011314:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 8011318:	1a5b      	subs	r3, r3, r1
 801131a:	3b01      	subs	r3, #1
 801131c:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8011320:	4620      	mov	r0, r4
 8011322:	f7ff ffa5 	bl	8011270 <FreeMacCommandSlot>
 8011326:	b128      	cbz	r0, 8011334 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8011328:	2000      	movs	r0, #0
}
 801132a:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 801132c:	2001      	movs	r0, #1
}
 801132e:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011330:	2003      	movs	r0, #3
 8011332:	e7fa      	b.n	801132a <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 8011334:	2005      	movs	r0, #5
 8011336:	e7f8      	b.n	801132a <LoRaMacCommandsRemoveCmd+0x2a>
 8011338:	20001824 	.word	0x20001824

0801133c <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801133c:	4b06      	ldr	r3, [pc, #24]	; (8011358 <LoRaMacCommandsGetCmd+0x1c>)
 801133e:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011340:	e000      	b.n	8011344 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 8011342:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 8011344:	b113      	cbz	r3, 801134c <LoRaMacCommandsGetCmd+0x10>
 8011346:	791a      	ldrb	r2, [r3, #4]
 8011348:	4282      	cmp	r2, r0
 801134a:	d1fa      	bne.n	8011342 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 801134c:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 801134e:	b10b      	cbz	r3, 8011354 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 8011350:	2000      	movs	r0, #0
 8011352:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8011354:	2003      	movs	r0, #3
}
 8011356:	4770      	bx	lr
 8011358:	20001824 	.word	0x20001824

0801135c <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801135c:	4b0a      	ldr	r3, [pc, #40]	; (8011388 <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 801135e:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8011360:	b120      	cbz	r0, 801136c <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 8011362:	7b03      	ldrb	r3, [r0, #12]
 8011364:	b11b      	cbz	r3, 801136e <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 8011366:	6800      	ldr	r0, [r0, #0]
 8011368:	e7fa      	b.n	8011360 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 801136a:	bd10      	pop	{r4, pc}
 801136c:	4770      	bx	lr
{
 801136e:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 8011370:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8011372:	f7ff ffc5 	bl	8011300 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8011376:	4620      	mov	r0, r4
    while( curElement != NULL )
 8011378:	2800      	cmp	r0, #0
 801137a:	d0f6      	beq.n	801136a <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 801137c:	7b03      	ldrb	r3, [r0, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d0f6      	beq.n	8011370 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 8011382:	6800      	ldr	r0, [r0, #0]
 8011384:	e7f8      	b.n	8011378 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 8011386:	bf00      	nop
 8011388:	20001824 	.word	0x20001824

0801138c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 801138c:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 801138e:	4b0b      	ldr	r3, [pc, #44]	; (80113bc <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 8011390:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8011392:	e000      	b.n	8011396 <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 8011394:	4634      	mov	r4, r6
    while( curElement != NULL )
 8011396:	b17c      	cbz	r4, 80113b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 8011398:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 801139a:	7925      	ldrb	r5, [r4, #4]
 801139c:	4628      	mov	r0, r5
 801139e:	f7ff ff59 	bl	8011254 <IsSticky>
 80113a2:	2800      	cmp	r0, #0
 80113a4:	d0f6      	beq.n	8011394 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 80113a6:	4628      	mov	r0, r5
 80113a8:	f7ff ff60 	bl	801126c <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 80113ac:	2800      	cmp	r0, #0
 80113ae:	d1f1      	bne.n	8011394 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 80113b0:	4620      	mov	r0, r4
 80113b2:	f7ff ffa5 	bl	8011300 <LoRaMacCommandsRemoveCmd>
 80113b6:	e7ed      	b.n	8011394 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 80113b8:	2000      	movs	r0, #0
 80113ba:	bd70      	pop	{r4, r5, r6, pc}
 80113bc:	20001824 	.word	0x20001824

080113c0 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 80113c0:	b128      	cbz	r0, 80113ce <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 80113c2:	4a04      	ldr	r2, [pc, #16]	; (80113d4 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 80113c4:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 80113c8:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 80113ca:	2000      	movs	r0, #0
 80113cc:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 80113ce:	2001      	movs	r0, #1
}
 80113d0:	4770      	bx	lr
 80113d2:	bf00      	nop
 80113d4:	20001824 	.word	0x20001824

080113d8 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 80113d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 80113dc:	4b16      	ldr	r3, [pc, #88]	; (8011438 <LoRaMacCommandsSerializeCmds+0x60>)
 80113de:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 80113e0:	b32a      	cbz	r2, 801142e <LoRaMacCommandsSerializeCmds+0x56>
 80113e2:	4607      	mov	r7, r0
 80113e4:	4688      	mov	r8, r1
 80113e6:	4616      	mov	r6, r2
 80113e8:	b319      	cbz	r1, 8011432 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 80113ea:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 80113ec:	b194      	cbz	r4, 8011414 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 80113ee:	1a7a      	subs	r2, r7, r1
 80113f0:	68a3      	ldr	r3, [r4, #8]
 80113f2:	3301      	adds	r3, #1
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d30d      	bcc.n	8011414 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 80113f8:	1c4d      	adds	r5, r1, #1
 80113fa:	b2ed      	uxtb	r5, r5
 80113fc:	7923      	ldrb	r3, [r4, #4]
 80113fe:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8011400:	8922      	ldrh	r2, [r4, #8]
 8011402:	1d61      	adds	r1, r4, #5
 8011404:	1970      	adds	r0, r6, r5
 8011406:	f003 f9e0 	bl	80147ca <memcpy1>
            itr += curElement->PayloadSize;
 801140a:	68a3      	ldr	r3, [r4, #8]
 801140c:	441d      	add	r5, r3
 801140e:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8011410:	6824      	ldr	r4, [r4, #0]
 8011412:	e7eb      	b.n	80113ec <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8011414:	b12c      	cbz	r4, 8011422 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8011416:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 8011418:	4620      	mov	r0, r4
 801141a:	f7ff ff71 	bl	8011300 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 801141e:	462c      	mov	r4, r5
 8011420:	e7f8      	b.n	8011414 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8011422:	4640      	mov	r0, r8
 8011424:	f7ff ffcc 	bl	80113c0 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8011428:	2000      	movs	r0, #0
}
 801142a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 801142e:	2001      	movs	r0, #1
 8011430:	e7fb      	b.n	801142a <LoRaMacCommandsSerializeCmds+0x52>
 8011432:	2001      	movs	r0, #1
 8011434:	e7f9      	b.n	801142a <LoRaMacCommandsSerializeCmds+0x52>
 8011436:	bf00      	nop
 8011438:	20001824 	.word	0x20001824

0801143c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 801143c:	1e83      	subs	r3, r0, #2
 801143e:	2b11      	cmp	r3, #17
 8011440:	d80a      	bhi.n	8011458 <LoRaMacCommandsGetCmdSize+0x1c>
 8011442:	e8df f003 	tbb	[pc, r3]
 8011446:	0b23      	.short	0x0b23
 8011448:	110f240d 	.word	0x110f240d
 801144c:	09171513 	.word	0x09171513
 8011450:	09091909 	.word	0x09091909
 8011454:	211f1d1b 	.word	0x211f1d1b
 8011458:	2000      	movs	r0, #0
 801145a:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 801145c:	2005      	movs	r0, #5
            break;
 801145e:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8011460:	2002      	movs	r0, #2
            break;
 8011462:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8011464:	2001      	movs	r0, #1
            break;
 8011466:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8011468:	2006      	movs	r0, #6
            break;
 801146a:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 801146c:	2002      	movs	r0, #2
            break;
 801146e:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8011470:	2002      	movs	r0, #2
            break;
 8011472:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8011474:	2005      	movs	r0, #5
            break;
 8011476:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8011478:	2006      	movs	r0, #6
            break;
 801147a:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 801147c:	2001      	movs	r0, #1
            break;
 801147e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8011480:	2005      	movs	r0, #5
            break;
 8011482:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8011484:	2004      	movs	r0, #4
            break;
 8011486:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8011488:	2004      	movs	r0, #4
            break;
 801148a:	4770      	bx	lr
            cidSize = 3;
 801148c:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 801148e:	4770      	bx	lr

08011490 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8011490:	4b03      	ldr	r3, [pc, #12]	; (80114a0 <IncreaseBufferPointer+0x10>)
 8011492:	4298      	cmp	r0, r3
 8011494:	d001      	beq.n	801149a <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 8011496:	3004      	adds	r0, #4
 8011498:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801149a:	4802      	ldr	r0, [pc, #8]	; (80114a4 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 801149c:	4770      	bx	lr
 801149e:	bf00      	nop
 80114a0:	20001a4c 	.word	0x20001a4c
 80114a4:	20001a3c 	.word	0x20001a3c

080114a8 <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 80114a8:	b108      	cbz	r0, 80114ae <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 80114aa:	2000      	movs	r0, #0
 80114ac:	4770      	bx	lr
        return true;
 80114ae:	2001      	movs	r0, #1
}
 80114b0:	4770      	bx	lr

080114b2 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 80114b2:	2804      	cmp	r0, #4
 80114b4:	d801      	bhi.n	80114ba <IsListFull+0x8>
    {
        return true;
    }
    return false;
 80114b6:	2000      	movs	r0, #0
 80114b8:	4770      	bx	lr
        return true;
 80114ba:	2001      	movs	r0, #1
}
 80114bc:	4770      	bx	lr
	...

080114c0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 80114c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114c2:	4606      	mov	r6, r0
 80114c4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80114c6:	4b0d      	ldr	r3, [pc, #52]	; (80114fc <GetElement+0x3c>)
 80114c8:	f893 7020 	ldrb.w	r7, [r3, #32]
 80114cc:	4638      	mov	r0, r7
 80114ce:	f7ff ffeb 	bl	80114a8 <IsListEmpty>
 80114d2:	b970      	cbnz	r0, 80114f2 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80114d4:	2500      	movs	r5, #0
 80114d6:	42af      	cmp	r7, r5
 80114d8:	d909      	bls.n	80114ee <GetElement+0x2e>
    {
        if( element->Request == request )
 80114da:	7823      	ldrb	r3, [r4, #0]
 80114dc:	42b3      	cmp	r3, r6
 80114de:	d00a      	beq.n	80114f6 <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 80114e0:	4620      	mov	r0, r4
 80114e2:	f7ff ffd5 	bl	8011490 <IncreaseBufferPointer>
 80114e6:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 80114e8:	3501      	adds	r5, #1
 80114ea:	b2ed      	uxtb	r5, r5
 80114ec:	e7f3      	b.n	80114d6 <GetElement+0x16>
    }

    return NULL;
 80114ee:	2000      	movs	r0, #0
}
 80114f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 80114f2:	2000      	movs	r0, #0
 80114f4:	e7fc      	b.n	80114f0 <GetElement+0x30>
            return element;
 80114f6:	4620      	mov	r0, r4
 80114f8:	e7fa      	b.n	80114f0 <GetElement+0x30>
 80114fa:	bf00      	nop
 80114fc:	20001a30 	.word	0x20001a30

08011500 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8011500:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 8011502:	4c08      	ldr	r4, [pc, #32]	; (8011524 <LoRaMacConfirmQueueInit+0x24>)
 8011504:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8011506:	2300      	movs	r3, #0
 8011508:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 801150c:	f104 000c 	add.w	r0, r4, #12
 8011510:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8011512:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8011514:	2214      	movs	r2, #20
 8011516:	21ff      	movs	r1, #255	; 0xff
 8011518:	f003 f96f 	bl	80147fa <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801151c:	2301      	movs	r3, #1
 801151e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 8011522:	bd10      	pop	{r4, pc}
 8011524:	20001a30 	.word	0x20001a30

08011528 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8011528:	b538      	push	{r3, r4, r5, lr}
 801152a:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 801152c:	4b0f      	ldr	r3, [pc, #60]	; (801156c <LoRaMacConfirmQueueAdd+0x44>)
 801152e:	f893 0020 	ldrb.w	r0, [r3, #32]
 8011532:	f7ff ffbe 	bl	80114b2 <IsListFull>
 8011536:	b9b8      	cbnz	r0, 8011568 <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8011538:	4c0c      	ldr	r4, [pc, #48]	; (801156c <LoRaMacConfirmQueueAdd+0x44>)
 801153a:	68a3      	ldr	r3, [r4, #8]
 801153c:	782a      	ldrb	r2, [r5, #0]
 801153e:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8011540:	68a3      	ldr	r3, [r4, #8]
 8011542:	786a      	ldrb	r2, [r5, #1]
 8011544:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8011546:	68a3      	ldr	r3, [r4, #8]
 8011548:	78ea      	ldrb	r2, [r5, #3]
 801154a:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 801154c:	68a3      	ldr	r3, [r4, #8]
 801154e:	78aa      	ldrb	r2, [r5, #2]
 8011550:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8011552:	f894 3020 	ldrb.w	r3, [r4, #32]
 8011556:	3301      	adds	r3, #1
 8011558:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 801155c:	68a0      	ldr	r0, [r4, #8]
 801155e:	f7ff ff97 	bl	8011490 <IncreaseBufferPointer>
 8011562:	60a0      	str	r0, [r4, #8]

    return true;
 8011564:	2001      	movs	r0, #1
}
 8011566:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8011568:	2000      	movs	r0, #0
 801156a:	e7fc      	b.n	8011566 <LoRaMacConfirmQueueAdd+0x3e>
 801156c:	20001a30 	.word	0x20001a30

08011570 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8011570:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8011572:	4b09      	ldr	r3, [pc, #36]	; (8011598 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8011574:	f893 4020 	ldrb.w	r4, [r3, #32]
 8011578:	4620      	mov	r0, r4
 801157a:	f7ff ff95 	bl	80114a8 <IsListEmpty>
 801157e:	b948      	cbnz	r0, 8011594 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8011580:	4d05      	ldr	r5, [pc, #20]	; (8011598 <LoRaMacConfirmQueueRemoveFirst+0x28>)
 8011582:	3c01      	subs	r4, #1
 8011584:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8011588:	6868      	ldr	r0, [r5, #4]
 801158a:	f7ff ff81 	bl	8011490 <IncreaseBufferPointer>
 801158e:	6068      	str	r0, [r5, #4]

    return true;
 8011590:	2001      	movs	r0, #1
}
 8011592:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 8011594:	2000      	movs	r0, #0
 8011596:	e7fc      	b.n	8011592 <LoRaMacConfirmQueueRemoveFirst+0x22>
 8011598:	20001a30 	.word	0x20001a30

0801159c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 801159c:	b538      	push	{r3, r4, r5, lr}
 801159e:	4605      	mov	r5, r0
 80115a0:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80115a2:	4b08      	ldr	r3, [pc, #32]	; (80115c4 <LoRaMacConfirmQueueSetStatus+0x28>)
 80115a4:	f893 0020 	ldrb.w	r0, [r3, #32]
 80115a8:	f7ff ff7e 	bl	80114a8 <IsListEmpty>
 80115ac:	b948      	cbnz	r0, 80115c2 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80115ae:	4b05      	ldr	r3, [pc, #20]	; (80115c4 <LoRaMacConfirmQueueSetStatus+0x28>)
 80115b0:	689a      	ldr	r2, [r3, #8]
 80115b2:	6859      	ldr	r1, [r3, #4]
 80115b4:	4620      	mov	r0, r4
 80115b6:	f7ff ff83 	bl	80114c0 <GetElement>
        if( element != NULL )
 80115ba:	b110      	cbz	r0, 80115c2 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 80115bc:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 80115be:	2201      	movs	r2, #1
 80115c0:	7082      	strb	r2, [r0, #2]
        }
    }
}
 80115c2:	bd38      	pop	{r3, r4, r5, pc}
 80115c4:	20001a30 	.word	0x20001a30

080115c8 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 80115c8:	b510      	push	{r4, lr}
 80115ca:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 80115cc:	4b09      	ldr	r3, [pc, #36]	; (80115f4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 80115ce:	f893 0020 	ldrb.w	r0, [r3, #32]
 80115d2:	f7ff ff69 	bl	80114a8 <IsListEmpty>
 80115d6:	b940      	cbnz	r0, 80115ea <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 80115d8:	4b06      	ldr	r3, [pc, #24]	; (80115f4 <LoRaMacConfirmQueueGetStatus+0x2c>)
 80115da:	689a      	ldr	r2, [r3, #8]
 80115dc:	6859      	ldr	r1, [r3, #4]
 80115de:	4620      	mov	r0, r4
 80115e0:	f7ff ff6e 	bl	80114c0 <GetElement>
        if( element != NULL )
 80115e4:	b118      	cbz	r0, 80115ee <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 80115e6:	7840      	ldrb	r0, [r0, #1]
 80115e8:	e000      	b.n	80115ec <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80115ea:	2001      	movs	r0, #1
}
 80115ec:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 80115ee:	2001      	movs	r0, #1
 80115f0:	e7fc      	b.n	80115ec <LoRaMacConfirmQueueGetStatus+0x24>
 80115f2:	bf00      	nop
 80115f4:	20001a30 	.word	0x20001a30

080115f8 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 80115f8:	b538      	push	{r3, r4, r5, lr}
 80115fa:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 80115fc:	4b0c      	ldr	r3, [pc, #48]	; (8011630 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 80115fe:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8011600:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8011604:	f893 0020 	ldrb.w	r0, [r3, #32]
 8011608:	f7ff ff4e 	bl	80114a8 <IsListEmpty>
 801160c:	b150      	cbz	r0, 8011624 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 801160e:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 8011610:	2301      	movs	r3, #1
 8011612:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 8011614:	4620      	mov	r0, r4
 8011616:	f7ff ff3b 	bl	8011490 <IncreaseBufferPointer>
 801161a:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 801161c:	4b04      	ldr	r3, [pc, #16]	; (8011630 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 801161e:	689b      	ldr	r3, [r3, #8]
 8011620:	4283      	cmp	r3, r0
 8011622:	d0f4      	beq.n	801160e <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 8011624:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 8011626:	78e3      	ldrb	r3, [r4, #3]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d1f3      	bne.n	8011614 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 801162c:	e7f0      	b.n	8011610 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 801162e:	bf00      	nop
 8011630:	20001a30 	.word	0x20001a30

08011634 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8011634:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8011636:	4b04      	ldr	r3, [pc, #16]	; (8011648 <LoRaMacConfirmQueueIsCmdActive+0x14>)
 8011638:	689a      	ldr	r2, [r3, #8]
 801163a:	6859      	ldr	r1, [r3, #4]
 801163c:	f7ff ff40 	bl	80114c0 <GetElement>
 8011640:	b100      	cbz	r0, 8011644 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 8011642:	2001      	movs	r0, #1
    }
    return false;
}
 8011644:	bd08      	pop	{r3, pc}
 8011646:	bf00      	nop
 8011648:	20001a30 	.word	0x20001a30

0801164c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801164c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801164e:	b083      	sub	sp, #12
 8011650:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8011652:	4b19      	ldr	r3, [pc, #100]	; (80116b8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 8011654:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 8011658:	2204      	movs	r2, #4
 801165a:	2100      	movs	r1, #0
 801165c:	eb0d 0002 	add.w	r0, sp, r2
 8011660:	f003 f8cb 	bl	80147fa <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 8011664:	2400      	movs	r4, #0
 8011666:	e00d      	b.n	8011684 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 8011668:	781a      	ldrb	r2, [r3, #0]
 801166a:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 801166e:	785a      	ldrb	r2, [r3, #1]
 8011670:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 8011674:	78db      	ldrb	r3, [r3, #3]
 8011676:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 801167a:	f7ff ff79 	bl	8011570 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 801167e:	b1a5      	cbz	r5, 80116aa <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 8011680:	3401      	adds	r4, #1
 8011682:	b2e4      	uxtb	r4, r4
 8011684:	42bc      	cmp	r4, r7
 8011686:	d214      	bcs.n	80116b2 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 8011688:	4b0b      	ldr	r3, [pc, #44]	; (80116b8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 801168a:	685a      	ldr	r2, [r3, #4]
 801168c:	7812      	ldrb	r2, [r2, #0]
 801168e:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 8011690:	685a      	ldr	r2, [r3, #4]
 8011692:	7852      	ldrb	r2, [r2, #1]
 8011694:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 801169a:	2d00      	cmp	r5, #0
 801169c:	d0e4      	beq.n	8011668 <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 801169e:	4b06      	ldr	r3, [pc, #24]	; (80116b8 <LoRaMacConfirmQueueHandleCb+0x6c>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	689b      	ldr	r3, [r3, #8]
 80116a4:	4630      	mov	r0, r6
 80116a6:	4798      	blx	r3
 80116a8:	e7e7      	b.n	801167a <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 80116aa:	a801      	add	r0, sp, #4
 80116ac:	f7ff ff3c 	bl	8011528 <LoRaMacConfirmQueueAdd>
 80116b0:	e7e6      	b.n	8011680 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 80116b2:	b003      	add	sp, #12
 80116b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116b6:	bf00      	nop
 80116b8:	20001a30 	.word	0x20001a30

080116bc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 80116bc:	4b01      	ldr	r3, [pc, #4]	; (80116c4 <LoRaMacConfirmQueueGetCnt+0x8>)
 80116be:	f893 0020 	ldrb.w	r0, [r3, #32]
 80116c2:	4770      	bx	lr
 80116c4:	20001a30 	.word	0x20001a30

080116c8 <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 80116c8:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 80116ca:	4b03      	ldr	r3, [pc, #12]	; (80116d8 <LoRaMacConfirmQueueIsFull+0x10>)
 80116cc:	f893 0020 	ldrb.w	r0, [r3, #32]
 80116d0:	f7ff feef 	bl	80114b2 <IsListFull>
    }
    else
    {
        return false;
    }
}
 80116d4:	bd08      	pop	{r3, pc}
 80116d6:	bf00      	nop
 80116d8:	20001a30 	.word	0x20001a30

080116dc <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80116dc:	b410      	push	{r4}
 80116de:	9c01      	ldr	r4, [sp, #4]
 80116e0:	9902      	ldr	r1, [sp, #8]
 80116e2:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 80116e4:	b1da      	cbz	r2, 801171e <PrepareB0+0x42>
 80116e6:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 80116e8:	2049      	movs	r0, #73	; 0x49
 80116ea:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 80116ec:	2000      	movs	r0, #0
 80116ee:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 80116f0:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 80116f2:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 80116f4:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 80116f6:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 80116f8:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 80116fa:	0a23      	lsrs	r3, r4, #8
 80116fc:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 80116fe:	0c23      	lsrs	r3, r4, #16
 8011700:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 8011702:	0e24      	lsrs	r4, r4, #24
 8011704:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 8011706:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8011708:	0a0b      	lsrs	r3, r1, #8
 801170a:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801170c:	0c0b      	lsrs	r3, r1, #16
 801170e:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8011710:	0e09      	lsrs	r1, r1, #24
 8011712:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 8011714:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 8011716:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 801171a:	bc10      	pop	{r4}
 801171c:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 801171e:	2009      	movs	r0, #9
 8011720:	e7fb      	b.n	801171a <PrepareB0+0x3e>
	...

08011724 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011724:	2300      	movs	r3, #0
 8011726:	2b01      	cmp	r3, #1
 8011728:	d80e      	bhi.n	8011748 <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801172a:	469c      	mov	ip, r3
 801172c:	4a07      	ldr	r2, [pc, #28]	; (801174c <GetKeyAddrItem+0x28>)
 801172e:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 8011732:	4282      	cmp	r2, r0
 8011734:	d002      	beq.n	801173c <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8011736:	3301      	adds	r3, #1
 8011738:	b2db      	uxtb	r3, r3
 801173a:	e7f4      	b.n	8011726 <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 801173c:	4b03      	ldr	r3, [pc, #12]	; (801174c <GetKeyAddrItem+0x28>)
 801173e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8011742:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8011744:	2000      	movs	r0, #0
 8011746:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8011748:	200b      	movs	r0, #11
}
 801174a:	4770      	bx	lr
 801174c:	20000150 	.word	0x20000150

08011750 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 8011750:	b1f1      	cbz	r1, 8011790 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 8011752:	3801      	subs	r0, #1
 8011754:	2803      	cmp	r0, #3
 8011756:	d81d      	bhi.n	8011794 <GetLastFcntDown+0x44>
 8011758:	e8df f000 	tbb	[pc, r0]
 801175c:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 8011760:	4a0d      	ldr	r2, [pc, #52]	; (8011798 <GetLastFcntDown+0x48>)
 8011762:	6812      	ldr	r2, [r2, #0]
 8011764:	6912      	ldr	r2, [r2, #16]
 8011766:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8011768:	2000      	movs	r0, #0
            break;
 801176a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 801176c:	4a0a      	ldr	r2, [pc, #40]	; (8011798 <GetLastFcntDown+0x48>)
 801176e:	6812      	ldr	r2, [r2, #0]
 8011770:	6952      	ldr	r2, [r2, #20]
 8011772:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011774:	2000      	movs	r0, #0
            break;
 8011776:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 8011778:	4a07      	ldr	r2, [pc, #28]	; (8011798 <GetLastFcntDown+0x48>)
 801177a:	6812      	ldr	r2, [r2, #0]
 801177c:	6992      	ldr	r2, [r2, #24]
 801177e:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8011780:	2000      	movs	r0, #0
            break;
 8011782:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8011784:	4a04      	ldr	r2, [pc, #16]	; (8011798 <GetLastFcntDown+0x48>)
 8011786:	6812      	ldr	r2, [r2, #0]
 8011788:	69d2      	ldr	r2, [r2, #28]
 801178a:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 801178c:	2000      	movs	r0, #0
            break;
 801178e:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011790:	2009      	movs	r0, #9
 8011792:	4770      	bx	lr
    switch( fCntID )
 8011794:	2005      	movs	r0, #5
}
 8011796:	4770      	bx	lr
 8011798:	20001a54 	.word	0x20001a54

0801179c <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 801179c:	b510      	push	{r4, lr}
 801179e:	b082      	sub	sp, #8
 80117a0:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80117a6:	a901      	add	r1, sp, #4
 80117a8:	f7ff ffd2 	bl	8011750 <GetLastFcntDown>
 80117ac:	b948      	cbnz	r0, 80117c2 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 80117ae:	9b01      	ldr	r3, [sp, #4]
 80117b0:	42a3      	cmp	r3, r4
 80117b2:	d309      	bcc.n	80117c8 <CheckFCntDown+0x2c>
 80117b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b8:	d001      	beq.n	80117be <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 80117ba:	2000      	movs	r0, #0
 80117bc:	e002      	b.n	80117c4 <CheckFCntDown+0x28>
        return true;
 80117be:	2001      	movs	r0, #1
 80117c0:	e000      	b.n	80117c4 <CheckFCntDown+0x28>
        return false;
 80117c2:	2000      	movs	r0, #0
    }
}
 80117c4:	b002      	add	sp, #8
 80117c6:	bd10      	pop	{r4, pc}
        return true;
 80117c8:	2001      	movs	r0, #1
 80117ca:	e7fb      	b.n	80117c4 <CheckFCntDown+0x28>

080117cc <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 80117cc:	3801      	subs	r0, #1
 80117ce:	2803      	cmp	r0, #3
 80117d0:	d815      	bhi.n	80117fe <UpdateFCntDown+0x32>
 80117d2:	e8df f000 	tbb	[pc, r0]
 80117d6:	0702      	.short	0x0702
 80117d8:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 80117da:	4b09      	ldr	r3, [pc, #36]	; (8011800 <UpdateFCntDown+0x34>)
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 80117e0:	6219      	str	r1, [r3, #32]
            break;
 80117e2:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 80117e4:	4b06      	ldr	r3, [pc, #24]	; (8011800 <UpdateFCntDown+0x34>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 80117ea:	6219      	str	r1, [r3, #32]
            break;
 80117ec:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 80117ee:	4b04      	ldr	r3, [pc, #16]	; (8011800 <UpdateFCntDown+0x34>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 80117f4:	6219      	str	r1, [r3, #32]
            break;
 80117f6:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 80117f8:	4b01      	ldr	r3, [pc, #4]	; (8011800 <UpdateFCntDown+0x34>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 80117fe:	4770      	bx	lr
 8011800:	20001a54 	.word	0x20001a54

08011804 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 8011804:	4b0a      	ldr	r3, [pc, #40]	; (8011830 <ResetFCnts+0x2c>)
 8011806:	681a      	ldr	r2, [r3, #0]
 8011808:	2300      	movs	r3, #0
 801180a:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 801180c:	f04f 31ff 	mov.w	r1, #4294967295
 8011810:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011812:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011814:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8011816:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011818:	2b00      	cmp	r3, #0
 801181a:	dd00      	ble.n	801181e <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 801181c:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 801181e:	1d99      	adds	r1, r3, #6
 8011820:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8011824:	f04f 30ff 	mov.w	r0, #4294967295
 8011828:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 801182a:	3301      	adds	r3, #1
 801182c:	e7f4      	b.n	8011818 <ResetFCnts+0x14>
 801182e:	bf00      	nop
 8011830:	20001a54 	.word	0x20001a54

08011834 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 8011834:	4b03      	ldr	r3, [pc, #12]	; (8011844 <IsJoinNonce10xOk+0x10>)
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 801183a:	4283      	cmp	r3, r0
 801183c:	bf2c      	ite	cs
 801183e:	2000      	movcs	r0, #0
 8011840:	2001      	movcc	r0, #1
 8011842:	4770      	bx	lr
 8011844:	20001a54 	.word	0x20001a54

08011848 <ComputeCmacB0>:
{
 8011848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801184c:	b088      	sub	sp, #32
 801184e:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 8011850:	b1f0      	cbz	r0, 8011890 <ComputeCmacB0+0x48>
 8011852:	460c      	mov	r4, r1
 8011854:	4615      	mov	r5, r2
 8011856:	461a      	mov	r2, r3
 8011858:	4680      	mov	r8, r0
 801185a:	b1de      	cbz	r6, 8011894 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801185c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8011860:	d81a      	bhi.n	8011898 <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 8011862:	af04      	add	r7, sp, #16
 8011864:	9702      	str	r7, [sp, #8]
 8011866:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011868:	9301      	str	r3, [sp, #4]
 801186a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801186c:	9300      	str	r3, [sp, #0]
 801186e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8011872:	4629      	mov	r1, r5
 8011874:	4620      	mov	r0, r4
 8011876:	f7ff ff31 	bl	80116dc <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 801187a:	9600      	str	r6, [sp, #0]
 801187c:	462b      	mov	r3, r5
 801187e:	4622      	mov	r2, r4
 8011880:	4641      	mov	r1, r8
 8011882:	4638      	mov	r0, r7
 8011884:	f002 fd5c 	bl	8014340 <SecureElementComputeAesCmac>
 8011888:	b940      	cbnz	r0, 801189c <ComputeCmacB0+0x54>
}
 801188a:	b008      	add	sp, #32
 801188c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011890:	2009      	movs	r0, #9
 8011892:	e7fa      	b.n	801188a <ComputeCmacB0+0x42>
 8011894:	2009      	movs	r0, #9
 8011896:	e7f8      	b.n	801188a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011898:	200d      	movs	r0, #13
 801189a:	e7f6      	b.n	801188a <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801189c:	200e      	movs	r0, #14
 801189e:	e7f4      	b.n	801188a <ComputeCmacB0+0x42>

080118a0 <DeriveSessionKey10x>:
{
 80118a0:	b510      	push	{r4, lr}
 80118a2:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 80118a4:	2400      	movs	r4, #0
 80118a6:	9400      	str	r4, [sp, #0]
 80118a8:	9401      	str	r4, [sp, #4]
 80118aa:	9402      	str	r4, [sp, #8]
 80118ac:	9403      	str	r4, [sp, #12]
    switch( keyID )
 80118ae:	2808      	cmp	r0, #8
 80118b0:	d003      	beq.n	80118ba <DeriveSessionKey10x+0x1a>
 80118b2:	2809      	cmp	r0, #9
 80118b4:	d025      	beq.n	8011902 <DeriveSessionKey10x+0x62>
 80118b6:	200a      	movs	r0, #10
 80118b8:	e021      	b.n	80118fe <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 80118ba:	2401      	movs	r4, #1
 80118bc:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 80118c0:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 80118c4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80118c8:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80118cc:	f3c1 4107 	ubfx	r1, r1, #16, #8
 80118d0:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80118d4:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80118d8:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80118dc:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80118e0:	f3c2 4207 	ubfx	r2, r2, #16, #8
 80118e4:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80118e8:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80118ec:	0a1b      	lsrs	r3, r3, #8
 80118ee:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80118f2:	4602      	mov	r2, r0
 80118f4:	2101      	movs	r1, #1
 80118f6:	4668      	mov	r0, sp
 80118f8:	f002 fdc0 	bl	801447c <SecureElementDeriveAndStoreKey>
 80118fc:	b928      	cbnz	r0, 801190a <DeriveSessionKey10x+0x6a>
}
 80118fe:	b004      	add	sp, #16
 8011900:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 8011902:	2402      	movs	r4, #2
 8011904:	f88d 4000 	strb.w	r4, [sp]
            break;
 8011908:	e7da      	b.n	80118c0 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 801190a:	200e      	movs	r0, #14
 801190c:	e7f7      	b.n	80118fe <DeriveSessionKey10x+0x5e>

0801190e <PayloadEncrypt>:
{
 801190e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011912:	b088      	sub	sp, #32
 8011914:	4690      	mov	r8, r2
 8011916:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 8011918:	2800      	cmp	r0, #0
 801191a:	d052      	beq.n	80119c2 <PayloadEncrypt+0xb4>
 801191c:	460d      	mov	r5, r1
 801191e:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 8011920:	2600      	movs	r6, #0
 8011922:	9604      	str	r6, [sp, #16]
 8011924:	9605      	str	r6, [sp, #20]
 8011926:	9606      	str	r6, [sp, #24]
 8011928:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 801192a:	9600      	str	r6, [sp, #0]
 801192c:	9601      	str	r6, [sp, #4]
 801192e:	9602      	str	r6, [sp, #8]
 8011930:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 8011932:	2701      	movs	r7, #1
 8011934:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 8011938:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 801193c:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 8011940:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 8011944:	0a19      	lsrs	r1, r3, #8
 8011946:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 801194a:	0c19      	lsrs	r1, r3, #16
 801194c:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 8011950:	0e1b      	lsrs	r3, r3, #24
 8011952:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 8011956:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 801195a:	0a13      	lsrs	r3, r2, #8
 801195c:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 8011960:	0c13      	lsrs	r3, r2, #16
 8011962:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 8011966:	0e12      	lsrs	r2, r2, #24
 8011968:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 801196c:	e014      	b.n	8011998 <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801196e:	18f2      	adds	r2, r6, r3
 8011970:	5ca0      	ldrb	r0, [r4, r2]
 8011972:	f103 0120 	add.w	r1, r3, #32
 8011976:	4469      	add	r1, sp
 8011978:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 801197c:	4048      	eors	r0, r1
 801197e:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8011980:	3301      	adds	r3, #1
 8011982:	b2db      	uxtb	r3, r3
 8011984:	462a      	mov	r2, r5
 8011986:	2d10      	cmp	r5, #16
 8011988:	bfa8      	it	ge
 801198a:	2210      	movge	r2, #16
 801198c:	4293      	cmp	r3, r2
 801198e:	dbee      	blt.n	801196e <PayloadEncrypt+0x60>
        size -= 16;
 8011990:	3d10      	subs	r5, #16
 8011992:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 8011994:	3610      	adds	r6, #16
 8011996:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 8011998:	2d00      	cmp	r5, #0
 801199a:	dd0e      	ble.n	80119ba <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 801199c:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 80119a0:	3701      	adds	r7, #1
 80119a2:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 80119a4:	ab04      	add	r3, sp, #16
 80119a6:	4642      	mov	r2, r8
 80119a8:	2110      	movs	r1, #16
 80119aa:	4668      	mov	r0, sp
 80119ac:	f002 fced 	bl	801438a <SecureElementAesEncrypt>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2800      	cmp	r0, #0
 80119b4:	d0e6      	beq.n	8011984 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80119b6:	200e      	movs	r0, #14
 80119b8:	e000      	b.n	80119bc <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 80119ba:	2000      	movs	r0, #0
}
 80119bc:	b008      	add	sp, #32
 80119be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 80119c2:	2009      	movs	r0, #9
 80119c4:	e7fa      	b.n	80119bc <PayloadEncrypt+0xae>

080119c6 <VerifyCmacB0>:
    if( msg == 0 )
 80119c6:	b368      	cbz	r0, 8011a24 <VerifyCmacB0+0x5e>
{
 80119c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119cc:	b0c8      	sub	sp, #288	; 0x120
 80119ce:	460c      	mov	r4, r1
 80119d0:	4615      	mov	r5, r2
 80119d2:	461e      	mov	r6, r3
 80119d4:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 80119d6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80119da:	d825      	bhi.n	8011a28 <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 80119dc:	af04      	add	r7, sp, #16
 80119de:	f44f 7288 	mov.w	r2, #272	; 0x110
 80119e2:	2100      	movs	r1, #0
 80119e4:	4638      	mov	r0, r7
 80119e6:	f002 ff08 	bl	80147fa <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80119ea:	9702      	str	r7, [sp, #8]
 80119ec:	9b50      	ldr	r3, [sp, #320]	; 0x140
 80119ee:	9301      	str	r3, [sp, #4]
 80119f0:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 80119f2:	9300      	str	r3, [sp, #0]
 80119f4:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 80119f8:	4632      	mov	r2, r6
 80119fa:	4629      	mov	r1, r5
 80119fc:	4620      	mov	r0, r4
 80119fe:	f7ff fe6d 	bl	80116dc <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8011a02:	4622      	mov	r2, r4
 8011a04:	4641      	mov	r1, r8
 8011a06:	a808      	add	r0, sp, #32
 8011a08:	f002 fedf 	bl	80147ca <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 8011a0c:	462b      	mov	r3, r5
 8011a0e:	9a51      	ldr	r2, [sp, #324]	; 0x144
 8011a10:	f104 0110 	add.w	r1, r4, #16
 8011a14:	4638      	mov	r0, r7
 8011a16:	f002 fca2 	bl	801435e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 8011a1a:	b130      	cbz	r0, 8011a2a <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 8011a1c:	2801      	cmp	r0, #1
 8011a1e:	d004      	beq.n	8011a2a <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011a20:	200e      	movs	r0, #14
 8011a22:	e002      	b.n	8011a2a <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011a24:	2009      	movs	r0, #9
}
 8011a26:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 8011a28:	200d      	movs	r0, #13
}
 8011a2a:	b048      	add	sp, #288	; 0x120
 8011a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011a30 <read_devnonce_from_flash>:
uint32_t read_devnonce_from_flash() {
 8011a30:	b530      	push	{r4, r5, lr}
 8011a32:	b09d      	sub	sp, #116	; 0x74
	uint32_t devnonce = 0;
 8011a34:	2500      	movs	r5, #0
 8011a36:	951b      	str	r5, [sp, #108]	; 0x6c
	sprintf((char*)msg, "Checking for stored DevNonce on Flash\r\n", devnonce, address);
 8011a38:	462b      	mov	r3, r5
 8011a3a:	462a      	mov	r2, r5
 8011a3c:	4935      	ldr	r1, [pc, #212]	; (8011b14 <read_devnonce_from_flash+0xe4>)
 8011a3e:	a802      	add	r0, sp, #8
 8011a40:	f006 fb38 	bl	80180b4 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8011a44:	a802      	add	r0, sp, #8
 8011a46:	f7ee fbeb 	bl	8000220 <strlen>
 8011a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a4e:	b282      	uxth	r2, r0
 8011a50:	a902      	add	r1, sp, #8
 8011a52:	4831      	ldr	r0, [pc, #196]	; (8011b18 <read_devnonce_from_flash+0xe8>)
 8011a54:	f7fa fcb9 	bl	800c3ca <HAL_UART_Transmit>
	for (address = page_start_address; address < page_start_address + FLASH_PAGE_SIZE; address += sizeof(uint64_t)) {
 8011a58:	4c30      	ldr	r4, [pc, #192]	; (8011b1c <read_devnonce_from_flash+0xec>)
 8011a5a:	e016      	b.n	8011a8a <read_devnonce_from_flash+0x5a>
			status = FLASH_IF_Read((void *)&devnonce, (const void *)address, sizeof(devnonce));
 8011a5c:	2204      	movs	r2, #4
 8011a5e:	4621      	mov	r1, r4
 8011a60:	a81b      	add	r0, sp, #108	; 0x6c
 8011a62:	f7f0 fb47 	bl	80020f4 <FLASH_IF_Read>
			sprintf((char*)msg, "Devnonce %d at address 0x%x\r\n", devnonce, address);
 8011a66:	4623      	mov	r3, r4
 8011a68:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011a6a:	492d      	ldr	r1, [pc, #180]	; (8011b20 <read_devnonce_from_flash+0xf0>)
 8011a6c:	a802      	add	r0, sp, #8
 8011a6e:	f006 fb21 	bl	80180b4 <siprintf>
			HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8011a72:	a802      	add	r0, sp, #8
 8011a74:	f7ee fbd4 	bl	8000220 <strlen>
 8011a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011a7c:	b282      	uxth	r2, r0
 8011a7e:	a902      	add	r1, sp, #8
 8011a80:	4825      	ldr	r0, [pc, #148]	; (8011b18 <read_devnonce_from_flash+0xe8>)
 8011a82:	f7fa fca2 	bl	800c3ca <HAL_UART_Transmit>
			gotLatest = true;
 8011a86:	2501      	movs	r5, #1
	for (address = page_start_address; address < page_start_address + FLASH_PAGE_SIZE; address += sizeof(uint64_t)) {
 8011a88:	3408      	adds	r4, #8
 8011a8a:	4926      	ldr	r1, [pc, #152]	; (8011b24 <read_devnonce_from_flash+0xf4>)
 8011a8c:	428c      	cmp	r4, r1
 8011a8e:	d22f      	bcs.n	8011af0 <read_devnonce_from_flash+0xc0>
		FLASH_IF_StatusTypedef status = FLASH_IF_Read(&data, (const void *)address, sizeof(uint64_t));
 8011a90:	2208      	movs	r2, #8
 8011a92:	4621      	mov	r1, r4
 8011a94:	4668      	mov	r0, sp
 8011a96:	f7f0 fb2d 	bl	80020f4 <FLASH_IF_Read>
		if (data != UINT64_MAX) {
 8011a9a:	9800      	ldr	r0, [sp, #0]
 8011a9c:	9901      	ldr	r1, [sp, #4]
 8011a9e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8011aa2:	bf08      	it	eq
 8011aa4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
 8011aa8:	d1d8      	bne.n	8011a5c <read_devnonce_from_flash+0x2c>
		} else if (data == UINT64_MAX && gotLatest == true) {
 8011aaa:	b97d      	cbnz	r5, 8011acc <read_devnonce_from_flash+0x9c>
			sprintf((char*)msg, "No devnonce at address 0x%x\r\n", address);
 8011aac:	4622      	mov	r2, r4
 8011aae:	491e      	ldr	r1, [pc, #120]	; (8011b28 <read_devnonce_from_flash+0xf8>)
 8011ab0:	a802      	add	r0, sp, #8
 8011ab2:	f006 faff 	bl	80180b4 <siprintf>
			HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8011ab6:	a802      	add	r0, sp, #8
 8011ab8:	f7ee fbb2 	bl	8000220 <strlen>
 8011abc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011ac0:	b282      	uxth	r2, r0
 8011ac2:	a902      	add	r1, sp, #8
 8011ac4:	4814      	ldr	r0, [pc, #80]	; (8011b18 <read_devnonce_from_flash+0xe8>)
 8011ac6:	f7fa fc80 	bl	800c3ca <HAL_UART_Transmit>
 8011aca:	e7dd      	b.n	8011a88 <read_devnonce_from_flash+0x58>
			sprintf((char*)msg, "Free address at 0x%x\r\n", address);
 8011acc:	4622      	mov	r2, r4
 8011ace:	4917      	ldr	r1, [pc, #92]	; (8011b2c <read_devnonce_from_flash+0xfc>)
 8011ad0:	a802      	add	r0, sp, #8
 8011ad2:	f006 faef 	bl	80180b4 <siprintf>
			HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8011ad6:	a802      	add	r0, sp, #8
 8011ad8:	f7ee fba2 	bl	8000220 <strlen>
 8011adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011ae0:	b282      	uxth	r2, r0
 8011ae2:	a902      	add	r1, sp, #8
 8011ae4:	480c      	ldr	r0, [pc, #48]	; (8011b18 <read_devnonce_from_flash+0xe8>)
 8011ae6:	f7fa fc70 	bl	800c3ca <HAL_UART_Transmit>
			return devnonce;
 8011aea:	981b      	ldr	r0, [sp, #108]	; 0x6c
}
 8011aec:	b01d      	add	sp, #116	; 0x74
 8011aee:	bd30      	pop	{r4, r5, pc}
	sprintf((char*)msg, "Devnonce %d fetched at address 0x%x\r\n", devnonce, address);
 8011af0:	4623      	mov	r3, r4
 8011af2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011af4:	490e      	ldr	r1, [pc, #56]	; (8011b30 <read_devnonce_from_flash+0x100>)
 8011af6:	a802      	add	r0, sp, #8
 8011af8:	f006 fadc 	bl	80180b4 <siprintf>
	HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), 1000);
 8011afc:	a802      	add	r0, sp, #8
 8011afe:	f7ee fb8f 	bl	8000220 <strlen>
 8011b02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8011b06:	b282      	uxth	r2, r0
 8011b08:	a902      	add	r1, sp, #8
 8011b0a:	4803      	ldr	r0, [pc, #12]	; (8011b18 <read_devnonce_from_flash+0xe8>)
 8011b0c:	f7fa fc5d 	bl	800c3ca <HAL_UART_Transmit>
	return devnonce;
 8011b10:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8011b12:	e7eb      	b.n	8011aec <read_devnonce_from_flash+0xbc>
 8011b14:	0801e1cc 	.word	0x0801e1cc
 8011b18:	20000c60 	.word	0x20000c60
 8011b1c:	0803b000 	.word	0x0803b000
 8011b20:	0801e1f4 	.word	0x0801e1f4
 8011b24:	0803b800 	.word	0x0803b800
 8011b28:	0801e22c 	.word	0x0801e22c
 8011b2c:	0801e214 	.word	0x0801e214
 8011b30:	0801e24c 	.word	0x0801e24c

08011b34 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 8011b34:	b1a8      	cbz	r0, 8011b62 <LoRaMacCryptoInit+0x2e>
{
 8011b36:	b538      	push	{r3, r4, r5, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 8011b38:	4d0b      	ldr	r5, [pc, #44]	; (8011b68 <LoRaMacCryptoInit+0x34>)
 8011b3a:	6028      	str	r0, [r5, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 8011b3c:	2228      	movs	r2, #40	; 0x28
 8011b3e:	2100      	movs	r1, #0
 8011b40:	f002 fe5b 	bl	80147fa <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 8011b44:	682b      	ldr	r3, [r5, #0]
 8011b46:	2201      	movs	r2, #1
 8011b48:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 8011b4a:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 8011b4c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 8011b4e:	2400      	movs	r4, #0
 8011b50:	701c      	strb	r4, [r3, #0]
    CryptoNvm->DevNonce = read_devnonce_from_flash();
 8011b52:	f7ff ff6d 	bl	8011a30 <read_devnonce_from_flash>
 8011b56:	682b      	ldr	r3, [r5, #0]
 8011b58:	8098      	strh	r0, [r3, #4]

    // Reset frame counters
    ResetFCnts( );
 8011b5a:	f7ff fe53 	bl	8011804 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 8011b5e:	4620      	mov	r0, r4
}
 8011b60:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 8011b62:	2008      	movs	r0, #8
}
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop
 8011b68:	20001a54 	.word	0x20001a54

08011b6c <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 8011b6c:	4b02      	ldr	r3, [pc, #8]	; (8011b78 <LoRaMacCryptoSetLrWanVersion+0xc>)
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 8011b72:	2000      	movs	r0, #0
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	20001a54 	.word	0x20001a54

08011b7c <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 8011b7c:	b130      	cbz	r0, 8011b8c <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8011b7e:	4b04      	ldr	r3, [pc, #16]	; (8011b90 <LoRaMacCryptoGetFCntUp+0x14>)
 8011b80:	681b      	ldr	r3, [r3, #0]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	3301      	adds	r3, #1
 8011b86:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8011b88:	2000      	movs	r0, #0
 8011b8a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011b8c:	2009      	movs	r0, #9
}
 8011b8e:	4770      	bx	lr
 8011b90:	20001a54 	.word	0x20001a54

08011b94 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8011b94:	b530      	push	{r4, r5, lr}
 8011b96:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 8011b9c:	b1f2      	cbz	r2, 8011bdc <LoRaMacCryptoGetFCntDown+0x48>
 8011b9e:	460c      	mov	r4, r1
 8011ba0:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8011ba2:	a901      	add	r1, sp, #4
 8011ba4:	f7ff fdd4 	bl	8011750 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8011ba8:	b948      	cbnz	r0, 8011bbe <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 8011baa:	9b01      	ldr	r3, [sp, #4]
 8011bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bb0:	d007      	beq.n	8011bc2 <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 8011bb6:	2a00      	cmp	r2, #0
 8011bb8:	dd05      	ble.n	8011bc6 <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 8011bba:	4413      	add	r3, r2
 8011bbc:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011bbe:	b003      	add	sp, #12
 8011bc0:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 8011bc2:	602c      	str	r4, [r5, #0]
 8011bc4:	e7fb      	b.n	8011bbe <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 8011bc6:	b132      	cbz	r2, 8011bd6 <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 8011bc8:	0c1b      	lsrs	r3, r3, #16
 8011bca:	041b      	lsls	r3, r3, #16
 8011bcc:	4423      	add	r3, r4
 8011bce:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8011bd2:	602b      	str	r3, [r5, #0]
 8011bd4:	e7f3      	b.n	8011bbe <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 8011bd6:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 8011bd8:	2007      	movs	r0, #7
 8011bda:	e7f0      	b.n	8011bbe <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011bdc:	2009      	movs	r0, #9
 8011bde:	e7ee      	b.n	8011bbe <LoRaMacCryptoGetFCntDown+0x2a>

08011be0 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 8011be0:	4601      	mov	r1, r0
 8011be2:	b908      	cbnz	r0, 8011be8 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011be4:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011be6:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011be8:	2300      	movs	r3, #0
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	dd01      	ble.n	8011bf2 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 8011bee:	2000      	movs	r0, #0
 8011bf0:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8011bf2:	4a07      	ldr	r2, [pc, #28]	; (8011c10 <LoRaMacCryptoSetMulticastReference+0x30>)
 8011bf4:	6812      	ldr	r2, [r2, #0]
 8011bf6:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 8011bfa:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8011bfe:	f103 0c06 	add.w	ip, r3, #6
 8011c02:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 8011c06:	3204      	adds	r2, #4
 8011c08:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8011c0a:	3301      	adds	r3, #1
 8011c0c:	e7ed      	b.n	8011bea <LoRaMacCryptoSetMulticastReference+0xa>
 8011c0e:	bf00      	nop
 8011c10:	20001a54 	.word	0x20001a54

08011c14 <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 8011c14:	b1e8      	cbz	r0, 8011c52 <LoRaMacCryptoPrepareJoinRequest+0x3e>
{
 8011c16:	b510      	push	{r4, lr}
 8011c18:	b082      	sub	sp, #8
 8011c1a:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 8011c1c:	4b10      	ldr	r3, [pc, #64]	; (8011c60 <LoRaMacCryptoPrepareJoinRequest+0x4c>)
 8011c1e:	681a      	ldr	r2, [r3, #0]
 8011c20:	8893      	ldrh	r3, [r2, #4]
 8011c22:	3301      	adds	r3, #1
 8011c24:	b29b      	uxth	r3, r3
 8011c26:	8093      	strh	r3, [r2, #4]
    getDevnonce = CryptoNvm->DevNonce;
 8011c28:	4a0e      	ldr	r2, [pc, #56]	; (8011c64 <LoRaMacCryptoPrepareJoinRequest+0x50>)
 8011c2a:	6013      	str	r3, [r2, #0]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 8011c2c:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011c2e:	f000 fa34 	bl	801209a <LoRaMacSerializerJoinRequest>
 8011c32:	b980      	cbnz	r0, 8011c56 <LoRaMacCryptoPrepareJoinRequest+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 8011c34:	4623      	mov	r3, r4
 8011c36:	f853 1b18 	ldr.w	r1, [r3], #24
 8011c3a:	9300      	str	r3, [sp, #0]
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	2213      	movs	r2, #19
 8011c40:	f002 fb7e 	bl	8014340 <SecureElementComputeAesCmac>
 8011c44:	b950      	cbnz	r0, 8011c5c <LoRaMacCryptoPrepareJoinRequest+0x48>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011c46:	4620      	mov	r0, r4
 8011c48:	f000 fa27 	bl	801209a <LoRaMacSerializerJoinRequest>
 8011c4c:	b120      	cbz	r0, 8011c58 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011c4e:	2010      	movs	r0, #16
 8011c50:	e002      	b.n	8011c58 <LoRaMacCryptoPrepareJoinRequest+0x44>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011c52:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011c54:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011c56:	2010      	movs	r0, #16
}
 8011c58:	b002      	add	sp, #8
 8011c5a:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011c5c:	200e      	movs	r0, #14
 8011c5e:	e7fb      	b.n	8011c58 <LoRaMacCryptoPrepareJoinRequest+0x44>
 8011c60:	20001a54 	.word	0x20001a54
 8011c64:	20001030 	.word	0x20001030

08011c68 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d036      	beq.n	8011cda <LoRaMacCryptoSecureMessage+0x72>
{
 8011c6c:	b530      	push	{r4, r5, lr}
 8011c6e:	b085      	sub	sp, #20
 8011c70:	4604      	mov	r4, r0
 8011c72:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8011c74:	4b1d      	ldr	r3, [pc, #116]	; (8011cec <LoRaMacCryptoSecureMessage+0x84>)
 8011c76:	681b      	ldr	r3, [r3, #0]
 8011c78:	68db      	ldr	r3, [r3, #12]
 8011c7a:	4283      	cmp	r3, r0
 8011c7c:	d82f      	bhi.n	8011cde <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8011c7e:	f895 2020 	ldrb.w	r2, [r5, #32]
 8011c82:	b342      	cbz	r2, 8011cd6 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8011c84:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8011c86:	42a3      	cmp	r3, r4
 8011c88:	d209      	bcs.n	8011c9e <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8011c8a:	9401      	str	r4, [sp, #4]
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	9300      	str	r3, [sp, #0]
 8011c90:	68ab      	ldr	r3, [r5, #8]
 8011c92:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 8011c96:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8011c98:	f7ff fe39 	bl	801190e <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011c9c:	bb10      	cbnz	r0, 8011ce4 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f000 fa31 	bl	8012106 <LoRaMacSerializerData>
 8011ca4:	b9e8      	cbnz	r0, 8011ce2 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8011ca6:	7929      	ldrb	r1, [r5, #4]
 8011ca8:	3904      	subs	r1, #4
 8011caa:	462b      	mov	r3, r5
 8011cac:	f853 0b2c 	ldr.w	r0, [r3], #44
 8011cb0:	9303      	str	r3, [sp, #12]
 8011cb2:	9402      	str	r4, [sp, #8]
 8011cb4:	68ab      	ldr	r3, [r5, #8]
 8011cb6:	9301      	str	r3, [sp, #4]
 8011cb8:	2300      	movs	r3, #0
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	2208      	movs	r2, #8
 8011cbe:	b289      	uxth	r1, r1
 8011cc0:	f7ff fdc2 	bl	8011848 <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011cc4:	b970      	cbnz	r0, 8011ce4 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8011cc6:	4628      	mov	r0, r5
 8011cc8:	f000 fa1d 	bl	8012106 <LoRaMacSerializerData>
 8011ccc:	b960      	cbnz	r0, 8011ce8 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8011cce:	4b07      	ldr	r3, [pc, #28]	; (8011cec <LoRaMacCryptoSecureMessage+0x84>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8011cd4:	e006      	b.n	8011ce4 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 8011cd6:	2208      	movs	r2, #8
 8011cd8:	e7d5      	b.n	8011c86 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011cda:	2009      	movs	r0, #9
}
 8011cdc:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8011cde:	2006      	movs	r0, #6
 8011ce0:	e000      	b.n	8011ce4 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011ce2:	2010      	movs	r0, #16
}
 8011ce4:	b005      	add	sp, #20
 8011ce6:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8011ce8:	2010      	movs	r0, #16
 8011cea:	e7fb      	b.n	8011ce4 <LoRaMacCryptoSecureMessage+0x7c>
 8011cec:	20001a54 	.word	0x20001a54

08011cf0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8011cf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011cf4:	b087      	sub	sp, #28
 8011cf6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 8011cf8:	2e00      	cmp	r6, #0
 8011cfa:	d049      	beq.n	8011d90 <LoRaMacCryptoUnsecureMessage+0xa0>
 8011cfc:	4605      	mov	r5, r0
 8011cfe:	4688      	mov	r8, r1
 8011d00:	4617      	mov	r7, r2
 8011d02:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8011d04:	4619      	mov	r1, r3
 8011d06:	4610      	mov	r0, r2
 8011d08:	f7ff fd48 	bl	801179c <CheckFCntDown>
 8011d0c:	2800      	cmp	r0, #0
 8011d0e:	d041      	beq.n	8011d94 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011d10:	4630      	mov	r0, r6
 8011d12:	f000 f963 	bl	8011fdc <LoRaMacParserData>
 8011d16:	2800      	cmp	r0, #0
 8011d18:	d141      	bne.n	8011d9e <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8011d1a:	a905      	add	r1, sp, #20
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	f7ff fd01 	bl	8011724 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d22:	4605      	mov	r5, r0
 8011d24:	2800      	cmp	r0, #0
 8011d26:	d136      	bne.n	8011d96 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8011d28:	9b05      	ldr	r3, [sp, #20]
 8011d2a:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 8011d2e:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8011d30:	68b3      	ldr	r3, [r6, #8]
 8011d32:	4543      	cmp	r3, r8
 8011d34:	d135      	bne.n	8011da2 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8011d36:	7b33      	ldrb	r3, [r6, #12]
 8011d38:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8011d3c:	491a      	ldr	r1, [pc, #104]	; (8011da8 <LoRaMacCryptoUnsecureMessage+0xb8>)
 8011d3e:	6809      	ldr	r1, [r1, #0]
 8011d40:	7889      	ldrb	r1, [r1, #2]
 8011d42:	b901      	cbnz	r1, 8011d46 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8011d44:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8011d46:	7931      	ldrb	r1, [r6, #4]
 8011d48:	3904      	subs	r1, #4
 8011d4a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8011d4c:	9003      	str	r0, [sp, #12]
 8011d4e:	9402      	str	r4, [sp, #8]
 8011d50:	f8cd 8004 	str.w	r8, [sp, #4]
 8011d54:	2001      	movs	r0, #1
 8011d56:	9000      	str	r0, [sp, #0]
 8011d58:	b289      	uxth	r1, r1
 8011d5a:	6830      	ldr	r0, [r6, #0]
 8011d5c:	f7ff fe33 	bl	80119c6 <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d60:	4605      	mov	r5, r0
 8011d62:	b9c0      	cbnz	r0, 8011d96 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8011d64:	f896 3020 	ldrb.w	r3, [r6, #32]
 8011d68:	b90b      	cbnz	r3, 8011d6e <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 8011d6a:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8011d6e:	9401      	str	r4, [sp, #4]
 8011d70:	2301      	movs	r3, #1
 8011d72:	9300      	str	r3, [sp, #0]
 8011d74:	4643      	mov	r3, r8
 8011d76:	464a      	mov	r2, r9
 8011d78:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8011d7c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 8011d7e:	f7ff fdc6 	bl	801190e <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011d82:	4605      	mov	r5, r0
 8011d84:	b938      	cbnz	r0, 8011d96 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 8011d86:	4621      	mov	r1, r4
 8011d88:	4638      	mov	r0, r7
 8011d8a:	f7ff fd1f 	bl	80117cc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8011d8e:	e002      	b.n	8011d96 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011d90:	2509      	movs	r5, #9
 8011d92:	e000      	b.n	8011d96 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8011d94:	2506      	movs	r5, #6
}
 8011d96:	4628      	mov	r0, r5
 8011d98:	b007      	add	sp, #28
 8011d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011d9e:	250f      	movs	r5, #15
 8011da0:	e7f9      	b.n	8011d96 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8011da2:	2502      	movs	r5, #2
 8011da4:	e7f7      	b.n	8011d96 <LoRaMacCryptoUnsecureMessage+0xa6>
 8011da6:	bf00      	nop
 8011da8:	20001a54 	.word	0x20001a54

08011dac <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8011dac:	b500      	push	{lr}
 8011dae:	b085      	sub	sp, #20
 8011db0:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 8011db2:	2300      	movs	r3, #0
 8011db4:	9300      	str	r3, [sp, #0]
 8011db6:	9301      	str	r3, [sp, #4]
 8011db8:	9302      	str	r3, [sp, #8]
 8011dba:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 8011dbc:	290b      	cmp	r1, #11
 8011dbe:	d007      	beq.n	8011dd0 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 8011dc0:	290c      	cmp	r1, #12
 8011dc2:	d013      	beq.n	8011dec <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 8011dc4:	290a      	cmp	r1, #10
 8011dc6:	d00c      	beq.n	8011de2 <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 8011dc8:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 8011dca:	b005      	add	sp, #20
 8011dcc:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 8011dd0:	2801      	cmp	r0, #1
 8011dd2:	d001      	beq.n	8011dd8 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 8011dd4:	2100      	movs	r1, #0
 8011dd6:	e00a      	b.n	8011dee <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 8011dd8:	2320      	movs	r3, #32
 8011dda:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8011dde:	2100      	movs	r1, #0
 8011de0:	e005      	b.n	8011dee <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 8011de2:	2330      	movs	r3, #48	; 0x30
 8011de4:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 8011de8:	2100      	movs	r1, #0
            break;
 8011dea:	e000      	b.n	8011dee <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 8011dec:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 8011dee:	4668      	mov	r0, sp
 8011df0:	f002 fb44 	bl	801447c <SecureElementDeriveAndStoreKey>
 8011df4:	2800      	cmp	r0, #0
 8011df6:	d0e8      	beq.n	8011dca <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011df8:	200e      	movs	r0, #14
 8011dfa:	e7e6      	b.n	8011dca <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

08011dfc <LoRaMacCryptoSetKey>:
{
 8011dfc:	b510      	push	{r4, lr}
 8011dfe:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8011e00:	f002 fafa 	bl	80143f8 <SecureElementSetKey>
 8011e04:	b998      	cbnz	r0, 8011e2e <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 8011e06:	b104      	cbz	r4, 8011e0a <LoRaMacCryptoSetKey+0xe>
}
 8011e08:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8011e0a:	4b0c      	ldr	r3, [pc, #48]	; (8011e3c <LoRaMacCryptoSetKey+0x40>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	210b      	movs	r1, #11
 8011e10:	7898      	ldrb	r0, [r3, #2]
 8011e12:	f7ff ffcb 	bl	8011dac <LoRaMacCryptoDeriveLifeTimeKey>
 8011e16:	b960      	cbnz	r0, 8011e32 <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8011e18:	210c      	movs	r1, #12
 8011e1a:	f7ff ffc7 	bl	8011dac <LoRaMacCryptoDeriveLifeTimeKey>
 8011e1e:	b950      	cbnz	r0, 8011e36 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 8011e20:	210a      	movs	r1, #10
 8011e22:	f7ff ffc3 	bl	8011dac <LoRaMacCryptoDeriveLifeTimeKey>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	d0ee      	beq.n	8011e08 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e2a:	200e      	movs	r0, #14
 8011e2c:	e7ec      	b.n	8011e08 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e2e:	200e      	movs	r0, #14
 8011e30:	e7ea      	b.n	8011e08 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e32:	200e      	movs	r0, #14
 8011e34:	e7e8      	b.n	8011e08 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011e36:	200e      	movs	r0, #14
 8011e38:	e7e6      	b.n	8011e08 <LoRaMacCryptoSetKey+0xc>
 8011e3a:	bf00      	nop
 8011e3c:	20001a54 	.word	0x20001a54

08011e40 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8011e40:	2a00      	cmp	r2, #0
 8011e42:	d06c      	beq.n	8011f1e <LoRaMacCryptoHandleJoinAccept+0xde>
{
 8011e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e46:	b08f      	sub	sp, #60	; 0x3c
 8011e48:	4607      	mov	r7, r0
 8011e4a:	460d      	mov	r5, r1
 8011e4c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8011e4e:	2900      	cmp	r1, #0
 8011e50:	d067      	beq.n	8011f22 <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8011e52:	2600      	movs	r6, #0
 8011e54:	9605      	str	r6, [sp, #20]
 8011e56:	221d      	movs	r2, #29
 8011e58:	4631      	mov	r1, r6
 8011e5a:	a806      	add	r0, sp, #24
 8011e5c:	f006 fa4e 	bl	80182fc <memset>
    uint8_t versionMinor         = 0;
 8011e60:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8011e64:	4b33      	ldr	r3, [pc, #204]	; (8011f34 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8011e6a:	f10d 0313 	add.w	r3, sp, #19
 8011e6e:	9302      	str	r3, [sp, #8]
 8011e70:	ab05      	add	r3, sp, #20
 8011e72:	9301      	str	r3, [sp, #4]
 8011e74:	7923      	ldrb	r3, [r4, #4]
 8011e76:	9300      	str	r3, [sp, #0]
 8011e78:	6823      	ldr	r3, [r4, #0]
 8011e7a:	4632      	mov	r2, r6
 8011e7c:	4629      	mov	r1, r5
 8011e7e:	4638      	mov	r0, r7
 8011e80:	f002 fb1c 	bl	80144bc <SecureElementProcessJoinAccept>
 8011e84:	2800      	cmp	r0, #0
 8011e86:	d14e      	bne.n	8011f26 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8011e88:	7922      	ldrb	r2, [r4, #4]
 8011e8a:	a905      	add	r1, sp, #20
 8011e8c:	6820      	ldr	r0, [r4, #0]
 8011e8e:	f002 fc9c 	bl	80147ca <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8011e92:	4620      	mov	r0, r4
 8011e94:	f000 f850 	bl	8011f38 <LoRaMacParserJoinAccept>
 8011e98:	2800      	cmp	r0, #0
 8011e9a:	d147      	bne.n	8011f2c <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8011e9c:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8011e9e:	79e3      	ldrb	r3, [r4, #7]
 8011ea0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8011ea4:	7a23      	ldrb	r3, [r4, #8]
 8011ea6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 8011eaa:	4628      	mov	r0, r5
 8011eac:	f7ff fcc2 	bl	8011834 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 8011eb0:	2800      	cmp	r0, #0
 8011eb2:	d03d      	beq.n	8011f30 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 8011eb4:	4b1f      	ldr	r3, [pc, #124]	; (8011f34 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 8011eb6:	681b      	ldr	r3, [r3, #0]
 8011eb8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 8011eba:	210b      	movs	r1, #11
 8011ebc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 8011ec0:	f7ff ff74 	bl	8011dac <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ec4:	bb80      	cbnz	r0, 8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 8011ec6:	210c      	movs	r1, #12
 8011ec8:	2000      	movs	r0, #0
 8011eca:	f7ff ff6f 	bl	8011dac <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ece:	bb58      	cbnz	r0, 8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 8011ed0:	210a      	movs	r1, #10
 8011ed2:	2000      	movs	r0, #0
 8011ed4:	f7ff ff6a 	bl	8011dac <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ed8:	bb30      	cbnz	r0, 8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 8011eda:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8011edc:	7aa2      	ldrb	r2, [r4, #10]
 8011ede:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8011ee2:	7ae2      	ldrb	r2, [r4, #11]
 8011ee4:	ea43 4402 	orr.w	r4, r3, r2, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8011ee8:	4633      	mov	r3, r6
 8011eea:	4622      	mov	r2, r4
 8011eec:	4629      	mov	r1, r5
 8011eee:	2009      	movs	r0, #9
 8011ef0:	f7ff fcd6 	bl	80118a0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011ef4:	b9c0      	cbnz	r0, 8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8011ef6:	4633      	mov	r3, r6
 8011ef8:	4622      	mov	r2, r4
 8011efa:	4629      	mov	r1, r5
 8011efc:	2008      	movs	r0, #8
 8011efe:	f7ff fccf 	bl	80118a0 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8011f02:	b988      	cbnz	r0, 8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8011f04:	4b0b      	ldr	r3, [pc, #44]	; (8011f34 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	f89d 2013 	ldrb.w	r2, [sp, #19]
 8011f0c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 8011f0e:	2200      	movs	r2, #0
 8011f10:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011f12:	f04f 32ff 	mov.w	r2, #4294967295
 8011f16:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011f18:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 8011f1a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 8011f1c:	e004      	b.n	8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011f1e:	2009      	movs	r0, #9
}
 8011f20:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 8011f22:	2009      	movs	r0, #9
 8011f24:	e000      	b.n	8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8011f26:	200e      	movs	r0, #14
}
 8011f28:	b00f      	add	sp, #60	; 0x3c
 8011f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8011f2c:	200f      	movs	r0, #15
 8011f2e:	e7fb      	b.n	8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8011f30:	2003      	movs	r0, #3
 8011f32:	e7f9      	b.n	8011f28 <LoRaMacCryptoHandleJoinAccept+0xe8>
 8011f34:	20001a54 	.word	0x20001a54

08011f38 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011f38:	2800      	cmp	r0, #0
 8011f3a:	d049      	beq.n	8011fd0 <LoRaMacParserJoinAccept+0x98>
{
 8011f3c:	b510      	push	{r4, lr}
 8011f3e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011f40:	6801      	ldr	r1, [r0, #0]
 8011f42:	2900      	cmp	r1, #0
 8011f44:	d046      	beq.n	8011fd4 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f4a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8011f4c:	2203      	movs	r2, #3
 8011f4e:	3006      	adds	r0, #6
 8011f50:	f002 fc3b 	bl	80147ca <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8011f54:	4620      	mov	r0, r4
 8011f56:	f850 1b09 	ldr.w	r1, [r0], #9
 8011f5a:	2203      	movs	r2, #3
 8011f5c:	3104      	adds	r1, #4
 8011f5e:	f002 fc34 	bl	80147ca <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011f62:	6821      	ldr	r1, [r4, #0]
 8011f64:	79cb      	ldrb	r3, [r1, #7]
 8011f66:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011f68:	7a0a      	ldrb	r2, [r1, #8]
 8011f6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011f6e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011f70:	7a4a      	ldrb	r2, [r1, #9]
 8011f72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f76:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011f78:	7a8a      	ldrb	r2, [r1, #10]
 8011f7a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011f7e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8011f80:	7acb      	ldrb	r3, [r1, #11]
 8011f82:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8011f84:	7b0b      	ldrb	r3, [r1, #12]
 8011f86:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8011f88:	7923      	ldrb	r3, [r4, #4]
 8011f8a:	2b21      	cmp	r3, #33	; 0x21
 8011f8c:	d018      	beq.n	8011fc0 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8011f8e:	2b11      	cmp	r3, #17
 8011f90:	dc22      	bgt.n	8011fd8 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8011f92:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8011f94:	6821      	ldr	r1, [r4, #0]
 8011f96:	f102 0c01 	add.w	ip, r2, #1
 8011f9a:	5c8b      	ldrb	r3, [r1, r2]
 8011f9c:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011f9e:	1c90      	adds	r0, r2, #2
 8011fa0:	f811 c00c 	ldrb.w	ip, [r1, ip]
 8011fa4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8011fa8:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011faa:	3203      	adds	r2, #3
 8011fac:	5c08      	ldrb	r0, [r1, r0]
 8011fae:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011fb2:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8011fb4:	5c8a      	ldrb	r2, [r1, r2]
 8011fb6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8011fba:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 8011fbc:	2000      	movs	r0, #0
}
 8011fbe:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8011fc0:	2210      	movs	r2, #16
 8011fc2:	310d      	adds	r1, #13
 8011fc4:	f104 0012 	add.w	r0, r4, #18
 8011fc8:	f002 fbff 	bl	80147ca <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8011fcc:	221d      	movs	r2, #29
 8011fce:	e7e1      	b.n	8011f94 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 8011fd0:	2002      	movs	r0, #2
}
 8011fd2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8011fd4:	2002      	movs	r0, #2
 8011fd6:	e7f2      	b.n	8011fbe <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 8011fd8:	2001      	movs	r0, #1
 8011fda:	e7f0      	b.n	8011fbe <LoRaMacParserJoinAccept+0x86>

08011fdc <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011fdc:	2800      	cmp	r0, #0
 8011fde:	d058      	beq.n	8012092 <LoRaMacParserData+0xb6>
{
 8011fe0:	b510      	push	{r4, lr}
 8011fe2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8011fe4:	6801      	ldr	r1, [r0, #0]
 8011fe6:	2900      	cmp	r1, #0
 8011fe8:	d055      	beq.n	8012096 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8011fea:	780b      	ldrb	r3, [r1, #0]
 8011fec:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8011fee:	784b      	ldrb	r3, [r1, #1]
 8011ff0:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8011ff2:	788a      	ldrb	r2, [r1, #2]
 8011ff4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8011ff8:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8011ffa:	78ca      	ldrb	r2, [r1, #3]
 8011ffc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012000:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8012002:	790a      	ldrb	r2, [r1, #4]
 8012004:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8012008:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 801200a:	794b      	ldrb	r3, [r1, #5]
 801200c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 801200e:	798b      	ldrb	r3, [r1, #6]
 8012010:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 8012012:	79ca      	ldrb	r2, [r1, #7]
 8012014:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8012018:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 801201a:	7b02      	ldrb	r2, [r0, #12]
 801201c:	f002 020f 	and.w	r2, r2, #15
 8012020:	3108      	adds	r1, #8
 8012022:	3010      	adds	r0, #16
 8012024:	f002 fbd1 	bl	80147ca <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012028:	7b23      	ldrb	r3, [r4, #12]
 801202a:	f003 030f 	and.w	r3, r3, #15
 801202e:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 8012032:	2200      	movs	r2, #0
 8012034:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 8012038:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801203c:	7922      	ldrb	r2, [r4, #4]
 801203e:	1a11      	subs	r1, r2, r0
 8012040:	2904      	cmp	r1, #4
 8012042:	dc16      	bgt.n	8012072 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 8012044:	6822      	ldr	r2, [r4, #0]
 8012046:	7923      	ldrb	r3, [r4, #4]
 8012048:	441a      	add	r2, r3
 801204a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 801204e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 8012050:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012054:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8012058:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 801205a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801205e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8012062:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 8012064:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8012068:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801206c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 801206e:	2000      	movs	r0, #0
}
 8012070:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 8012072:	6821      	ldr	r1, [r4, #0]
 8012074:	3309      	adds	r3, #9
 8012076:	5c08      	ldrb	r0, [r1, r0]
 8012078:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801207c:	1ad2      	subs	r2, r2, r3
 801207e:	b2d2      	uxtb	r2, r2
 8012080:	3a04      	subs	r2, #4
 8012082:	b2d2      	uxtb	r2, r2
 8012084:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8012088:	4419      	add	r1, r3
 801208a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801208c:	f002 fb9d 	bl	80147ca <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 8012090:	e7d8      	b.n	8012044 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 8012092:	2002      	movs	r0, #2
}
 8012094:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 8012096:	2002      	movs	r0, #2
 8012098:	e7ea      	b.n	8012070 <LoRaMacParserData+0x94>

0801209a <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801209a:	b370      	cbz	r0, 80120fa <LoRaMacSerializerJoinRequest+0x60>
{
 801209c:	b510      	push	{r4, lr}
 801209e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80120a0:	6803      	ldr	r3, [r0, #0]
 80120a2:	b363      	cbz	r3, 80120fe <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 80120a4:	7902      	ldrb	r2, [r0, #4]
 80120a6:	2a16      	cmp	r2, #22
 80120a8:	d92b      	bls.n	8012102 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 80120aa:	7942      	ldrb	r2, [r0, #5]
 80120ac:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 80120ae:	4601      	mov	r1, r0
 80120b0:	f851 0b06 	ldr.w	r0, [r1], #6
 80120b4:	2208      	movs	r2, #8
 80120b6:	3001      	adds	r0, #1
 80120b8:	f002 fb92 	bl	80147e0 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 80120bc:	4621      	mov	r1, r4
 80120be:	f851 0b0e 	ldr.w	r0, [r1], #14
 80120c2:	2208      	movs	r2, #8
 80120c4:	3009      	adds	r0, #9
 80120c6:	f002 fb8b 	bl	80147e0 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 80120ca:	8ae2      	ldrh	r2, [r4, #22]
 80120cc:	6823      	ldr	r3, [r4, #0]
 80120ce:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 80120d0:	8ae3      	ldrh	r3, [r4, #22]
 80120d2:	6822      	ldr	r2, [r4, #0]
 80120d4:	0a1b      	lsrs	r3, r3, #8
 80120d6:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80120d8:	69a2      	ldr	r2, [r4, #24]
 80120da:	6823      	ldr	r3, [r4, #0]
 80120dc:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80120de:	69a3      	ldr	r3, [r4, #24]
 80120e0:	0a1b      	lsrs	r3, r3, #8
 80120e2:	6822      	ldr	r2, [r4, #0]
 80120e4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80120e6:	8b62      	ldrh	r2, [r4, #26]
 80120e8:	6823      	ldr	r3, [r4, #0]
 80120ea:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80120ec:	7ee2      	ldrb	r2, [r4, #27]
 80120ee:	6823      	ldr	r3, [r4, #0]
 80120f0:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 80120f2:	2317      	movs	r3, #23
 80120f4:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80120f6:	2000      	movs	r0, #0
}
 80120f8:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80120fa:	2001      	movs	r0, #1
}
 80120fc:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80120fe:	2001      	movs	r0, #1
 8012100:	e7fa      	b.n	80120f8 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 8012102:	2002      	movs	r0, #2
 8012104:	e7f8      	b.n	80120f8 <LoRaMacSerializerJoinRequest+0x5e>

08012106 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8012106:	2800      	cmp	r0, #0
 8012108:	d066      	beq.n	80121d8 <LoRaMacSerializerData+0xd2>
{
 801210a:	b538      	push	{r3, r4, r5, lr}
 801210c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801210e:	6801      	ldr	r1, [r0, #0]
 8012110:	2900      	cmp	r1, #0
 8012112:	d063      	beq.n	80121dc <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012114:	7b02      	ldrb	r2, [r0, #12]
 8012116:	f002 020f 	and.w	r2, r2, #15
 801211a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 801211e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8012122:	b10b      	cbz	r3, 8012128 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8012124:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 8012128:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801212a:	3304      	adds	r3, #4
 801212c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 801212e:	7922      	ldrb	r2, [r4, #4]
 8012130:	429a      	cmp	r2, r3
 8012132:	d355      	bcc.n	80121e0 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8012134:	7963      	ldrb	r3, [r4, #5]
 8012136:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8012138:	68a2      	ldr	r2, [r4, #8]
 801213a:	6823      	ldr	r3, [r4, #0]
 801213c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 801213e:	68a3      	ldr	r3, [r4, #8]
 8012140:	0a1b      	lsrs	r3, r3, #8
 8012142:	6822      	ldr	r2, [r4, #0]
 8012144:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 8012146:	8962      	ldrh	r2, [r4, #10]
 8012148:	6823      	ldr	r3, [r4, #0]
 801214a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 801214c:	7ae2      	ldrb	r2, [r4, #11]
 801214e:	6823      	ldr	r3, [r4, #0]
 8012150:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 8012152:	6823      	ldr	r3, [r4, #0]
 8012154:	7b22      	ldrb	r2, [r4, #12]
 8012156:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 8012158:	89e2      	ldrh	r2, [r4, #14]
 801215a:	6823      	ldr	r3, [r4, #0]
 801215c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 801215e:	89e3      	ldrh	r3, [r4, #14]
 8012160:	6822      	ldr	r2, [r4, #0]
 8012162:	0a1b      	lsrs	r3, r3, #8
 8012164:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8012166:	4621      	mov	r1, r4
 8012168:	f851 0b10 	ldr.w	r0, [r1], #16
 801216c:	7b22      	ldrb	r2, [r4, #12]
 801216e:	f002 020f 	and.w	r2, r2, #15
 8012172:	3008      	adds	r0, #8
 8012174:	f002 fb29 	bl	80147ca <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8012178:	7b23      	ldrb	r3, [r4, #12]
 801217a:	f003 030f 	and.w	r3, r3, #15
 801217e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 8012182:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8012186:	b12a      	cbz	r2, 8012194 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8012188:	6822      	ldr	r2, [r4, #0]
 801218a:	f894 1020 	ldrb.w	r1, [r4, #32]
 801218e:	5551      	strb	r1, [r2, r5]
 8012190:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8012194:	6820      	ldr	r0, [r4, #0]
 8012196:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 801219a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801219c:	4428      	add	r0, r5
 801219e:	f002 fb14 	bl	80147ca <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 80121a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80121a6:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 80121a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80121aa:	6821      	ldr	r1, [r4, #0]
 80121ac:	1c5a      	adds	r2, r3, #1
 80121ae:	b292      	uxth	r2, r2
 80121b0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80121b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80121b4:	0a08      	lsrs	r0, r1, #8
 80121b6:	6825      	ldr	r5, [r4, #0]
 80121b8:	1c99      	adds	r1, r3, #2
 80121ba:	b289      	uxth	r1, r1
 80121bc:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80121be:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 80121c0:	6820      	ldr	r0, [r4, #0]
 80121c2:	1cda      	adds	r2, r3, #3
 80121c4:	b292      	uxth	r2, r2
 80121c6:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80121c8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80121cc:	6821      	ldr	r1, [r4, #0]
 80121ce:	3304      	adds	r3, #4
 80121d0:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 80121d2:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80121d4:	2000      	movs	r0, #0
}
 80121d6:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80121d8:	2001      	movs	r0, #1
}
 80121da:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 80121dc:	2001      	movs	r0, #1
 80121de:	e7fa      	b.n	80121d6 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 80121e0:	2002      	movs	r0, #2
 80121e2:	e7f8      	b.n	80121d6 <LoRaMacSerializerData+0xd0>

080121e4 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 80121e4:	4b02      	ldr	r3, [pc, #8]	; (80121f0 <NvmDataMgmtEvent+0xc>)
 80121e6:	881a      	ldrh	r2, [r3, #0]
 80121e8:	4310      	orrs	r0, r2
 80121ea:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop
 80121f0:	20001a58 	.word	0x20001a58

080121f4 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 80121f4:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 80121f6:	4b06      	ldr	r3, [pc, #24]	; (8012210 <NvmDataMgmtStoreBegin+0x1c>)
 80121f8:	881b      	ldrh	r3, [r3, #0]
 80121fa:	b11b      	cbz	r3, 8012204 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 80121fc:	f7fd ffd0 	bl	80101a0 <LoRaMacStop>
 8012200:	b918      	cbnz	r0, 801220a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8012202:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 8012204:	f06f 0001 	mvn.w	r0, #1
 8012208:	e7fb      	b.n	8012202 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 801220a:	f06f 0002 	mvn.w	r0, #2
 801220e:	e7f8      	b.n	8012202 <NvmDataMgmtStoreBegin+0xe>
 8012210:	20001a58 	.word	0x20001a58

08012214 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 8012214:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 8012216:	2400      	movs	r4, #0
 8012218:	4b02      	ldr	r3, [pc, #8]	; (8012224 <NvmDataMgmtStoreEnd+0x10>)
 801221a:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 801221c:	f7fd ffb4 	bl	8010188 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8012220:	4620      	mov	r0, r4
 8012222:	bd10      	pop	{r4, pc}
 8012224:	20001a58 	.word	0x20001a58

08012228 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 8012228:	b908      	cbnz	r0, 801222e <RegionIsActive+0x6>
    {
        AS923_IS_ACTIVE( );
 801222a:	2001      	movs	r0, #1
 801222c:	4770      	bx	lr
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 801222e:	2000      	movs	r0, #0
        }
    }
}
 8012230:	4770      	bx	lr

08012232 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8012232:	b500      	push	{lr}
 8012234:	b083      	sub	sp, #12
    PhyParam_t phyParam = { 0 };
 8012236:	2300      	movs	r3, #0
 8012238:	9300      	str	r3, [sp, #0]
    switch( region )
 801223a:	b128      	cbz	r0, 8012248 <RegionGetPhyParam+0x16>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 801223c:	9b00      	ldr	r3, [sp, #0]
 801223e:	9301      	str	r3, [sp, #4]
        }
    }
}
 8012240:	9801      	ldr	r0, [sp, #4]
 8012242:	b003      	add	sp, #12
 8012244:	f85d fb04 	ldr.w	pc, [sp], #4
        AS923_GET_PHY_PARAM( );
 8012248:	4608      	mov	r0, r1
 801224a:	f000 f8e5 	bl	8012418 <RegionAS923GetPhyParam>
 801224e:	9001      	str	r0, [sp, #4]
 8012250:	e7f6      	b.n	8012240 <RegionGetPhyParam+0xe>

08012252 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
    switch( region )
 8012252:	b100      	cbz	r0, 8012256 <RegionSetBandTxDone+0x4>
 8012254:	4770      	bx	lr
{
 8012256:	b508      	push	{r3, lr}
    {
        AS923_SET_BAND_TX_DONE( );
 8012258:	4608      	mov	r0, r1
 801225a:	f000 f9e1 	bl	8012620 <RegionAS923SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 801225e:	bd08      	pop	{r3, pc}

08012260 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
    switch( region )
 8012260:	b100      	cbz	r0, 8012264 <RegionInitDefaults+0x4>
 8012262:	4770      	bx	lr
{
 8012264:	b508      	push	{r3, lr}
    {
        AS923_INIT_DEFAULTS( );
 8012266:	4608      	mov	r0, r1
 8012268:	f000 f9f8 	bl	801265c <RegionAS923InitDefaults>
        default:
        {
            break;
        }
    }
}
 801226c:	bd08      	pop	{r3, pc}

0801226e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
    switch( region )
 801226e:	b108      	cbz	r0, 8012274 <RegionVerify+0x6>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 8012270:	2000      	movs	r0, #0
        }
    }
}
 8012272:	4770      	bx	lr
{
 8012274:	b508      	push	{r3, lr}
 8012276:	460b      	mov	r3, r1
        AS923_VERIFY( );
 8012278:	4611      	mov	r1, r2
 801227a:	4618      	mov	r0, r3
 801227c:	f000 fa52 	bl	8012724 <RegionAS923Verify>
}
 8012280:	bd08      	pop	{r3, pc}

08012282 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
    switch( region )
 8012282:	b100      	cbz	r0, 8012286 <RegionApplyCFList+0x4>
 8012284:	4770      	bx	lr
{
 8012286:	b508      	push	{r3, lr}
    {
        AS923_APPLY_CF_LIST( );
 8012288:	4608      	mov	r0, r1
 801228a:	f000 fe13 	bl	8012eb4 <RegionAS923ApplyCFList>
        default:
        {
            break;
        }
    }
}
 801228e:	bd08      	pop	{r3, pc}

08012290 <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
    switch( region )
 8012290:	b108      	cbz	r0, 8012296 <RegionChanMaskSet+0x6>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 8012292:	2000      	movs	r0, #0
        }
    }
}
 8012294:	4770      	bx	lr
{
 8012296:	b508      	push	{r3, lr}
        AS923_CHAN_MASK_SET( );
 8012298:	4608      	mov	r0, r1
 801229a:	f000 fa95 	bl	80127c8 <RegionAS923ChanMaskSet>
}
 801229e:	bd08      	pop	{r3, pc}

080122a0 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
    switch( region )
 80122a0:	b100      	cbz	r0, 80122a4 <RegionComputeRxWindowParameters+0x4>
 80122a2:	4770      	bx	lr
{
 80122a4:	b508      	push	{r3, lr}
 80122a6:	468c      	mov	ip, r1
 80122a8:	4611      	mov	r1, r2
 80122aa:	461a      	mov	r2, r3
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
 80122ac:	9b02      	ldr	r3, [sp, #8]
 80122ae:	4660      	mov	r0, ip
 80122b0:	f000 faa8 	bl	8012804 <RegionAS923ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 80122b4:	bd08      	pop	{r3, pc}

080122b6 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
    switch( region )
 80122b6:	b108      	cbz	r0, 80122bc <RegionRxConfig+0x6>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 80122b8:	2000      	movs	r0, #0
        }
    }
}
 80122ba:	4770      	bx	lr
{
 80122bc:	b508      	push	{r3, lr}
 80122be:	460b      	mov	r3, r1
        AS923_RX_CONFIG( );
 80122c0:	4611      	mov	r1, r2
 80122c2:	4618      	mov	r0, r3
 80122c4:	f000 fad4 	bl	8012870 <RegionAS923RxConfig>
}
 80122c8:	bd08      	pop	{r3, pc}

080122ca <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
    switch( region )
 80122ca:	b108      	cbz	r0, 80122d0 <RegionTxConfig+0x6>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 80122cc:	2000      	movs	r0, #0
        }
    }
}
 80122ce:	4770      	bx	lr
{
 80122d0:	b508      	push	{r3, lr}
 80122d2:	468c      	mov	ip, r1
 80122d4:	4611      	mov	r1, r2
        AS923_TX_CONFIG( );
 80122d6:	461a      	mov	r2, r3
 80122d8:	4660      	mov	r0, ip
 80122da:	f000 fb4d 	bl	8012978 <RegionAS923TxConfig>
}
 80122de:	bd08      	pop	{r3, pc}

080122e0 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
    switch( region )
 80122e0:	b108      	cbz	r0, 80122e6 <RegionLinkAdrReq+0x6>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80122e2:	2000      	movs	r0, #0
        }
    }
}
 80122e4:	4770      	bx	lr
{
 80122e6:	b500      	push	{lr}
 80122e8:	b083      	sub	sp, #12
 80122ea:	468c      	mov	ip, r1
 80122ec:	4611      	mov	r1, r2
 80122ee:	461a      	mov	r2, r3
        AS923_LINK_ADR_REQ( );
 80122f0:	9b05      	ldr	r3, [sp, #20]
 80122f2:	9300      	str	r3, [sp, #0]
 80122f4:	9b04      	ldr	r3, [sp, #16]
 80122f6:	4660      	mov	r0, ip
 80122f8:	f000 fbd6 	bl	8012aa8 <RegionAS923LinkAdrReq>
}
 80122fc:	b003      	add	sp, #12
 80122fe:	f85d fb04 	ldr.w	pc, [sp], #4

08012302 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
    switch( region )
 8012302:	b108      	cbz	r0, 8012308 <RegionRxParamSetupReq+0x6>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012304:	2000      	movs	r0, #0
        }
    }
}
 8012306:	4770      	bx	lr
{
 8012308:	b508      	push	{r3, lr}
        AS923_RX_PARAM_SETUP_REQ( );
 801230a:	4608      	mov	r0, r1
 801230c:	f000 fc92 	bl	8012c34 <RegionAS923RxParamSetupReq>
}
 8012310:	bd08      	pop	{r3, pc}

08012312 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
    switch( region )
 8012312:	b108      	cbz	r0, 8012318 <RegionNewChannelReq+0x6>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012314:	2000      	movs	r0, #0
        }
    }
}
 8012316:	4770      	bx	lr
{
 8012318:	b508      	push	{r3, lr}
        AS923_NEW_CHANNEL_REQ( );
 801231a:	4608      	mov	r0, r1
 801231c:	f000 fe0b 	bl	8012f36 <RegionAS923NewChannelReq>
}
 8012320:	bd08      	pop	{r3, pc}

08012322 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
    switch( region )
 8012322:	b108      	cbz	r0, 8012328 <RegionTxParamSetupReq+0x6>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 8012324:	2000      	movs	r0, #0
        }
    }
}
 8012326:	4770      	bx	lr
{
 8012328:	b508      	push	{r3, lr}
        AS923_TX_PARAM_SETUP_REQ( );
 801232a:	4608      	mov	r0, r1
 801232c:	f000 fc9f 	bl	8012c6e <RegionAS923TxParamSetupReq>
}
 8012330:	bd08      	pop	{r3, pc}

08012332 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
    switch( region )
 8012332:	b108      	cbz	r0, 8012338 <RegionDlChannelReq+0x6>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8012334:	2000      	movs	r0, #0
        }
    }
}
 8012336:	4770      	bx	lr
{
 8012338:	b508      	push	{r3, lr}
        AS923_DL_CHANNEL_REQ( );
 801233a:	4608      	mov	r0, r1
 801233c:	f000 fc9a 	bl	8012c74 <RegionAS923DlChannelReq>
}
 8012340:	bd08      	pop	{r3, pc}

08012342 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
    switch( region )
 8012342:	b108      	cbz	r0, 8012348 <RegionAlternateDr+0x6>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8012344:	2000      	movs	r0, #0
        }
    }
}
 8012346:	4770      	bx	lr
{
 8012348:	b508      	push	{r3, lr}
 801234a:	460b      	mov	r3, r1
        AS923_ALTERNATE_DR( );
 801234c:	4611      	mov	r1, r2
 801234e:	4618      	mov	r0, r3
 8012350:	f000 fcb6 	bl	8012cc0 <RegionAS923AlternateDr>
}
 8012354:	bd08      	pop	{r3, pc}

08012356 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
    switch( region )
 8012356:	b108      	cbz	r0, 801235c <RegionNextChannel+0x6>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8012358:	2009      	movs	r0, #9
        }
    }
}
 801235a:	4770      	bx	lr
{
 801235c:	b508      	push	{r3, lr}
 801235e:	468c      	mov	ip, r1
 8012360:	4611      	mov	r1, r2
 8012362:	461a      	mov	r2, r3
        AS923_NEXT_CHANNEL( );
 8012364:	9b02      	ldr	r3, [sp, #8]
 8012366:	4660      	mov	r0, ip
 8012368:	f000 fcac 	bl	8012cc4 <RegionAS923NextChannel>
}
 801236c:	bd08      	pop	{r3, pc}

0801236e <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801236e:	468c      	mov	ip, r1
 8012370:	4611      	mov	r1, r2
    switch( region )
 8012372:	b108      	cbz	r0, 8012378 <RegionApplyDrOffset+0xa>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 8012374:	b2d0      	uxtb	r0, r2
        }
    }
}
 8012376:	4770      	bx	lr
{
 8012378:	b508      	push	{r3, lr}
        AS923_APPLY_DR_OFFSET( );
 801237a:	461a      	mov	r2, r3
 801237c:	4660      	mov	r0, ip
 801237e:	f000 fe05 	bl	8012f8c <RegionAS923ApplyDrOffset>
}
 8012382:	bd08      	pop	{r3, pc}

08012384 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 8012384:	4800      	ldr	r0, [pc, #0]	; (8012388 <RegionGetVersion+0x4>)
 8012386:	4770      	bx	lr
 8012388:	02010001 	.word	0x02010001

0801238c <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 801238c:	b510      	push	{r4, lr}
 801238e:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 8012390:	4b05      	ldr	r3, [pc, #20]	; (80123a8 <VerifyRfFreq+0x1c>)
 8012392:	6a1b      	ldr	r3, [r3, #32]
 8012394:	4798      	blx	r3
 8012396:	b120      	cbz	r0, 80123a2 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < AS923_MIN_RF_FREQUENCY ) || ( freq > AS923_MAX_RF_FREQUENCY ) )
 8012398:	4b04      	ldr	r3, [pc, #16]	; (80123ac <VerifyRfFreq+0x20>)
 801239a:	4423      	add	r3, r4
 801239c:	4a04      	ldr	r2, [pc, #16]	; (80123b0 <VerifyRfFreq+0x24>)
 801239e:	4293      	cmp	r3, r2
 80123a0:	d800      	bhi.n	80123a4 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 80123a2:	bd10      	pop	{r4, pc}
        return false;
 80123a4:	2000      	movs	r0, #0
 80123a6:	e7fc      	b.n	80123a2 <VerifyRfFreq+0x16>
 80123a8:	0801e9c8 	.word	0x0801e9c8
 80123ac:	c9763540 	.word	0xc9763540
 80123b0:	00c65d40 	.word	0x00c65d40

080123b4 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 80123b4:	b570      	push	{r4, r5, r6, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	4605      	mov	r5, r0
 80123ba:	460c      	mov	r4, r1
    int8_t phyDr = DataratesAS923[datarate];
 80123bc:	4b13      	ldr	r3, [pc, #76]	; (801240c <GetTimeOnAir+0x58>)
 80123be:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsAS923 );
 80123c0:	4913      	ldr	r1, [pc, #76]	; (8012410 <GetTimeOnAir+0x5c>)
 80123c2:	f001 f98b 	bl	80136dc <RegionCommonGetBandwidth>
 80123c6:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 80123c8:	2d07      	cmp	r5, #7
 80123ca:	d00e      	beq.n	80123ea <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80123cc:	4b11      	ldr	r3, [pc, #68]	; (8012414 <GetTimeOnAir+0x60>)
 80123ce:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80123d0:	2001      	movs	r0, #1
 80123d2:	9003      	str	r0, [sp, #12]
 80123d4:	b2e4      	uxtb	r4, r4
 80123d6:	9402      	str	r4, [sp, #8]
 80123d8:	2300      	movs	r3, #0
 80123da:	9301      	str	r3, [sp, #4]
 80123dc:	2308      	movs	r3, #8
 80123de:	9300      	str	r3, [sp, #0]
 80123e0:	4603      	mov	r3, r0
 80123e2:	4632      	mov	r2, r6
 80123e4:	47a8      	blx	r5
    }
    return timeOnAir;
}
 80123e6:	b004      	add	sp, #16
 80123e8:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80123ea:	4b0a      	ldr	r3, [pc, #40]	; (8012414 <GetTimeOnAir+0x60>)
 80123ec:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80123ee:	2301      	movs	r3, #1
 80123f0:	9303      	str	r3, [sp, #12]
 80123f2:	b2e4      	uxtb	r4, r4
 80123f4:	9402      	str	r4, [sp, #8]
 80123f6:	2000      	movs	r0, #0
 80123f8:	9001      	str	r0, [sp, #4]
 80123fa:	2305      	movs	r3, #5
 80123fc:	9300      	str	r3, [sp, #0]
 80123fe:	4603      	mov	r3, r0
 8012400:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012404:	fb06 f202 	mul.w	r2, r6, r2
 8012408:	47a8      	blx	r5
 801240a:	e7ec      	b.n	80123e6 <GetTimeOnAir+0x32>
 801240c:	0801e294 	.word	0x0801e294
 8012410:	0801e274 	.word	0x0801e274
 8012414:	0801e9c8 	.word	0x0801e9c8

08012418 <RegionAS923GetPhyParam>:
#endif /* REGION_AS923 */

PhyParam_t RegionAS923GetPhyParam( GetPhyParams_t* getPhy )
{
 8012418:	b500      	push	{lr}
 801241a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 801241c:	2300      	movs	r3, #0
 801241e:	9304      	str	r3, [sp, #16]

#if defined( REGION_AS923 )
    switch( getPhy->Attribute )
 8012420:	7803      	ldrb	r3, [r0, #0]
 8012422:	3b01      	subs	r3, #1
 8012424:	2b37      	cmp	r3, #55	; 0x37
 8012426:	d845      	bhi.n	80124b4 <RegionAS923GetPhyParam+0x9c>
 8012428:	e8df f013 	tbh	[pc, r3, lsl #1]
 801242c:	003d0038 	.word	0x003d0038
 8012430:	00440044 	.word	0x00440044
 8012434:	00420044 	.word	0x00420044
 8012438:	00440044 	.word	0x00440044
 801243c:	00440044 	.word	0x00440044
 8012440:	00660063 	.word	0x00660063
 8012444:	00770069 	.word	0x00770069
 8012448:	00850044 	.word	0x00850044
 801244c:	008d0089 	.word	0x008d0089
 8012450:	00950091 	.word	0x00950091
 8012454:	00440099 	.word	0x00440099
 8012458:	00a500a2 	.word	0x00a500a2
 801245c:	00ae00a8 	.word	0x00ae00a8
 8012460:	00b700b4 	.word	0x00b700b4
 8012464:	004400bb 	.word	0x004400bb
 8012468:	00c100be 	.word	0x00c100be
 801246c:	00440049 	.word	0x00440049
 8012470:	00440044 	.word	0x00440044
 8012474:	00440044 	.word	0x00440044
 8012478:	00440044 	.word	0x00440044
 801247c:	00440044 	.word	0x00440044
 8012480:	00440044 	.word	0x00440044
 8012484:	00440044 	.word	0x00440044
 8012488:	00c700c4 	.word	0x00c700c4
 801248c:	004400ce 	.word	0x004400ce
 8012490:	00d10044 	.word	0x00d10044
 8012494:	004400d4 	.word	0x004400d4
 8012498:	00dd00d7 	.word	0x00dd00d7
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0 )
 801249c:	78c3      	ldrb	r3, [r0, #3]
 801249e:	b14b      	cbz	r3, 80124b4 <RegionAS923GetPhyParam+0x9c>
            {
                phyParam.Value = AS923_RX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 80124a0:	2304      	movs	r3, #4
 80124a2:	9304      	str	r3, [sp, #16]
 80124a4:	e006      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            }
            break;
        }
        case PHY_MIN_TX_DR:
        {
            if( getPhy->UplinkDwellTime == 0 )
 80124a6:	7883      	ldrb	r3, [r0, #2]
 80124a8:	b123      	cbz	r3, 80124b4 <RegionAS923GetPhyParam+0x9c>
            {
                phyParam.Value = AS923_TX_MIN_DATARATE;
            }
            else
            {
                phyParam.Value = AS923_DWELL_LIMIT_DATARATE;
 80124aa:	2304      	movs	r3, #4
 80124ac:	9304      	str	r3, [sp, #16]
 80124ae:	e001      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            }
            break;
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = AS923_DEFAULT_DATARATE;
 80124b0:	2304      	movs	r3, #4
 80124b2:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_AS923 */
    return phyParam;
 80124b4:	9804      	ldr	r0, [sp, #16]
 80124b6:	9005      	str	r0, [sp, #20]
}
 80124b8:	b007      	add	sp, #28
 80124ba:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 80124be:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80124c2:	f88d 3004 	strb.w	r3, [sp, #4]
 80124c6:	2307      	movs	r3, #7
 80124c8:	f88d 3005 	strb.w	r3, [sp, #5]
                .MinDr = ( int8_t )( ( getPhy->UplinkDwellTime == 0 ) ? AS923_TX_MIN_DATARATE : AS923_DWELL_LIMIT_DATARATE ),
 80124cc:	7883      	ldrb	r3, [r0, #2]
 80124ce:	b103      	cbz	r3, 80124d2 <RegionAS923GetPhyParam+0xba>
 80124d0:	2304      	movs	r3, #4
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80124d2:	f88d 3006 	strb.w	r3, [sp, #6]
 80124d6:	2310      	movs	r3, #16
 80124d8:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 80124dc:	4b45      	ldr	r3, [pc, #276]	; (80125f4 <RegionAS923GetPhyParam+0x1dc>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 80124e4:	9202      	str	r2, [sp, #8]
 80124e6:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 80124e8:	a801      	add	r0, sp, #4
 80124ea:	f001 f8d4 	bl	8013696 <RegionCommonGetNextLowerTxDr>
 80124ee:	9004      	str	r0, [sp, #16]
            break;
 80124f0:	e7e0      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 80124f2:	2340      	movs	r3, #64	; 0x40
 80124f4:	9304      	str	r3, [sp, #16]
            break;
 80124f6:	e7dd      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 80124f8:	2320      	movs	r3, #32
 80124fa:	9304      	str	r3, [sp, #16]
            break;
 80124fc:	e7da      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            if( getPhy->UplinkDwellTime == 0 )
 80124fe:	7883      	ldrb	r3, [r0, #2]
 8012500:	b92b      	cbnz	r3, 801250e <RegionAS923GetPhyParam+0xf6>
                phyParam.Value = MaxPayloadOfDatarateDwell0AS923[getPhy->Datarate];
 8012502:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012506:	4a3c      	ldr	r2, [pc, #240]	; (80125f8 <RegionAS923GetPhyParam+0x1e0>)
 8012508:	5cd3      	ldrb	r3, [r2, r3]
 801250a:	9304      	str	r3, [sp, #16]
 801250c:	e7d2      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 801250e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012512:	4a3a      	ldr	r2, [pc, #232]	; (80125fc <RegionAS923GetPhyParam+0x1e4>)
 8012514:	5cd3      	ldrb	r3, [r2, r3]
 8012516:	9304      	str	r3, [sp, #16]
 8012518:	e7cc      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            if( getPhy->UplinkDwellTime == 0 )
 801251a:	7883      	ldrb	r3, [r0, #2]
 801251c:	b92b      	cbnz	r3, 801252a <RegionAS923GetPhyParam+0x112>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AS923[getPhy->Datarate];
 801251e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012522:	4a37      	ldr	r2, [pc, #220]	; (8012600 <RegionAS923GetPhyParam+0x1e8>)
 8012524:	5cd3      	ldrb	r3, [r2, r3]
 8012526:	9304      	str	r3, [sp, #16]
 8012528:	e7c4      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
                phyParam.Value = MaxPayloadOfDatarateDwell1AS923[getPhy->Datarate];
 801252a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801252e:	4a33      	ldr	r2, [pc, #204]	; (80125fc <RegionAS923GetPhyParam+0x1e4>)
 8012530:	5cd3      	ldrb	r3, [r2, r3]
 8012532:	9304      	str	r3, [sp, #16]
 8012534:	e7be      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_MAX_RX_WINDOW;
 8012536:	f640 33b8 	movw	r3, #3000	; 0xbb8
 801253a:	9304      	str	r3, [sp, #16]
            break;
 801253c:	e7ba      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 801253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012542:	9304      	str	r3, [sp, #16]
            break;
 8012544:	e7b6      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 8012546:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801254a:	9304      	str	r3, [sp, #16]
            break;
 801254c:	e7b2      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 801254e:	f241 3388 	movw	r3, #5000	; 0x1388
 8012552:	9304      	str	r3, [sp, #16]
            break;
 8012554:	e7ae      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 8012556:	f241 7370 	movw	r3, #6000	; 0x1770
 801255a:	9304      	str	r3, [sp, #16]
            break;
 801255c:	e7aa      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 801255e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012562:	4828      	ldr	r0, [pc, #160]	; (8012604 <RegionAS923GetPhyParam+0x1ec>)
 8012564:	f002 f924 	bl	80147b0 <randr>
 8012568:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 801256c:	9004      	str	r0, [sp, #16]
            break;
 801256e:	e7a1      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_RX_WND_2_FREQ - REGION_AS923_FREQ_OFFSET;
 8012570:	4b25      	ldr	r3, [pc, #148]	; (8012608 <RegionAS923GetPhyParam+0x1f0>)
 8012572:	9304      	str	r3, [sp, #16]
            break;
 8012574:	e79e      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_RX_WND_2_DR;
 8012576:	2302      	movs	r3, #2
 8012578:	9304      	str	r3, [sp, #16]
            break;
 801257a:	e79b      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801257c:	4b1d      	ldr	r3, [pc, #116]	; (80125f4 <RegionAS923GetPhyParam+0x1dc>)
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8012584:	9304      	str	r3, [sp, #16]
            break;
 8012586:	e795      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8012588:	4b1a      	ldr	r3, [pc, #104]	; (80125f4 <RegionAS923GetPhyParam+0x1dc>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 8012590:	9304      	str	r3, [sp, #16]
            break;
 8012592:	e78f      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_MAX_NB_CHANNELS;
 8012594:	2310      	movs	r3, #16
 8012596:	9304      	str	r3, [sp, #16]
            break;
 8012598:	e78c      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Channels = RegionNvmGroup2->Channels;
 801259a:	4b16      	ldr	r3, [pc, #88]	; (80125f4 <RegionAS923GetPhyParam+0x1dc>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	9304      	str	r3, [sp, #16]
            break;
 80125a0:	e788      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_DEFAULT_UPLINK_DWELL_TIME;
 80125a2:	2301      	movs	r3, #1
 80125a4:	9304      	str	r3, [sp, #16]
            break;
 80125a6:	e785      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.fValue = AS923_DEFAULT_MAX_EIRP;
 80125a8:	4b18      	ldr	r3, [pc, #96]	; (801260c <RegionAS923GetPhyParam+0x1f4>)
 80125aa:	9304      	str	r3, [sp, #16]
            break;
 80125ac:	e782      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.fValue = AS923_DEFAULT_ANTENNA_GAIN;
 80125ae:	4b18      	ldr	r3, [pc, #96]	; (8012610 <RegionAS923GetPhyParam+0x1f8>)
 80125b0:	9304      	str	r3, [sp, #16]
            break;
 80125b2:	e77f      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_BEACON_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80125b4:	4b17      	ldr	r3, [pc, #92]	; (8012614 <RegionAS923GetPhyParam+0x1fc>)
 80125b6:	9304      	str	r3, [sp, #16]
            break;
 80125b8:	e77c      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.BeaconFormat.BeaconSize = AS923_BEACON_SIZE;
 80125ba:	2311      	movs	r3, #17
 80125bc:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = AS923_RFU1_SIZE;
 80125c0:	2301      	movs	r3, #1
 80125c2:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 80125c6:	e775      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_BEACON_CHANNEL_DR;
 80125c8:	2303      	movs	r3, #3
 80125ca:	9304      	str	r3, [sp, #16]
            break;
 80125cc:	e772      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_FREQ - REGION_AS923_FREQ_OFFSET;
 80125ce:	4b11      	ldr	r3, [pc, #68]	; (8012614 <RegionAS923GetPhyParam+0x1fc>)
 80125d0:	9304      	str	r3, [sp, #16]
            break;
 80125d2:	e76f      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = AS923_PING_SLOT_CHANNEL_DR;
 80125d4:	2303      	movs	r3, #3
 80125d6:	9304      	str	r3, [sp, #16]
            break;
 80125d8:	e76c      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = DataratesAS923[getPhy->Datarate];
 80125da:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80125de:	4a0e      	ldr	r2, [pc, #56]	; (8012618 <RegionAS923GetPhyParam+0x200>)
 80125e0:	5cd3      	ldrb	r3, [r2, r3]
 80125e2:	9304      	str	r3, [sp, #16]
            break;
 80125e4:	e766      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsAS923 );
 80125e6:	490d      	ldr	r1, [pc, #52]	; (801261c <RegionAS923GetPhyParam+0x204>)
 80125e8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 80125ec:	f001 f876 	bl	80136dc <RegionCommonGetBandwidth>
 80125f0:	9004      	str	r0, [sp, #16]
            break;
 80125f2:	e75f      	b.n	80124b4 <RegionAS923GetPhyParam+0x9c>
 80125f4:	20001a60 	.word	0x20001a60
 80125f8:	0801e31c 	.word	0x0801e31c
 80125fc:	0801e324 	.word	0x0801e324
 8012600:	0801e32c 	.word	0x0801e32c
 8012604:	fffffc18 	.word	0xfffffc18
 8012608:	36a234c0 	.word	0x36a234c0
 801260c:	41b00000 	.word	0x41b00000
 8012610:	4009999a 	.word	0x4009999a
 8012614:	36a54200 	.word	0x36a54200
 8012618:	0801e294 	.word	0x0801e294
 801261c:	0801e274 	.word	0x0801e274

08012620 <RegionAS923SetBandTxDone>:

void RegionAS923SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8012620:	b510      	push	{r4, lr}
 8012622:	b082      	sub	sp, #8
#if defined( REGION_AS923 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8012624:	4b0b      	ldr	r3, [pc, #44]	; (8012654 <RegionAS923SetBandTxDone+0x34>)
 8012626:	681a      	ldr	r2, [r3, #0]
 8012628:	7803      	ldrb	r3, [r0, #0]
 801262a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801262e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012632:	7a5b      	ldrb	r3, [r3, #9]
 8012634:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 8012638:	4b07      	ldr	r3, [pc, #28]	; (8012658 <RegionAS923SetBandTxDone+0x38>)
 801263a:	681c      	ldr	r4, [r3, #0]
 801263c:	6903      	ldr	r3, [r0, #16]
 801263e:	9300      	str	r3, [sp, #0]
 8012640:	68c3      	ldr	r3, [r0, #12]
 8012642:	7842      	ldrb	r2, [r0, #1]
 8012644:	6881      	ldr	r1, [r0, #8]
 8012646:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 801264a:	f000 fdfd 	bl	8013248 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_AS923 */
}
 801264e:	b002      	add	sp, #8
 8012650:	bd10      	pop	{r4, pc}
 8012652:	bf00      	nop
 8012654:	20001a60 	.word	0x20001a60
 8012658:	20001a5c 	.word	0x20001a5c

0801265c <RegionAS923InitDefaults>:

void RegionAS923InitDefaults( InitDefaultsParams_t* params )
{
 801265c:	b510      	push	{r4, lr}
 801265e:	b086      	sub	sp, #24
#if defined( REGION_AS923 )
    Band_t bands[AS923_MAX_NB_BANDS] =
 8012660:	2364      	movs	r3, #100	; 0x64
 8012662:	f8ad 3000 	strh.w	r3, [sp]
 8012666:	2300      	movs	r3, #0
 8012668:	f88d 3002 	strb.w	r3, [sp, #2]
 801266c:	9301      	str	r3, [sp, #4]
 801266e:	9302      	str	r3, [sp, #8]
 8012670:	9303      	str	r3, [sp, #12]
 8012672:	9304      	str	r3, [sp, #16]
 8012674:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        AS923_BAND0
    };

    switch( params->Type )
 8012678:	7b03      	ldrb	r3, [r0, #12]
 801267a:	2b01      	cmp	r3, #1
 801267c:	d032      	beq.n	80126e4 <RegionAS923InitDefaults+0x88>
 801267e:	2b02      	cmp	r3, #2
 8012680:	d03d      	beq.n	80126fe <RegionAS923InitDefaults+0xa2>
 8012682:	b10b      	cbz	r3, 8012688 <RegionAS923InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_AS923 */
}
 8012684:	b006      	add	sp, #24
 8012686:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8012688:	6803      	ldr	r3, [r0, #0]
 801268a:	2b00      	cmp	r3, #0
 801268c:	d0fa      	beq.n	8012684 <RegionAS923InitDefaults+0x28>
 801268e:	6843      	ldr	r3, [r0, #4]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d0f7      	beq.n	8012684 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8012694:	4c1f      	ldr	r4, [pc, #124]	; (8012714 <RegionAS923InitDefaults+0xb8>)
 8012696:	6023      	str	r3, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 8012698:	6880      	ldr	r0, [r0, #8]
 801269a:	4b1f      	ldr	r3, [pc, #124]	; (8012718 <RegionAS923InitDefaults+0xbc>)
 801269c:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * AS923_MAX_NB_BANDS );
 801269e:	2218      	movs	r2, #24
 80126a0:	4669      	mov	r1, sp
 80126a2:	f002 f892 	bl	80147ca <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) AS923_LC1;
 80126a6:	6823      	ldr	r3, [r4, #0]
 80126a8:	4c1c      	ldr	r4, [pc, #112]	; (801271c <RegionAS923InitDefaults+0xc0>)
 80126aa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80126ae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) AS923_LC2;
 80126b2:	f103 0c0c 	add.w	ip, r3, #12
 80126b6:	340c      	adds	r4, #12
 80126b8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80126bc:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[0].Frequency -= REGION_AS923_FREQ_OFFSET;
 80126c0:	4a17      	ldr	r2, [pc, #92]	; (8012720 <RegionAS923InitDefaults+0xc4>)
 80126c2:	601a      	str	r2, [r3, #0]
            RegionNvmGroup2->Channels[1].Frequency -= REGION_AS923_FREQ_OFFSET;
 80126c4:	f502 3243 	add.w	r2, r2, #199680	; 0x30c00
 80126c8:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80126cc:	60da      	str	r2, [r3, #12]
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 );
 80126ce:	2203      	movs	r2, #3
 80126d0:	f8a3 236c 	strh.w	r2, [r3, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80126d4:	2201      	movs	r2, #1
 80126d6:	f503 715b 	add.w	r1, r3, #876	; 0x36c
 80126da:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80126de:	f000 fda4 	bl	801322a <RegionCommonChanMaskCopy>
            break;
 80126e2:	e7cf      	b.n	8012684 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 80126e4:	4b0b      	ldr	r3, [pc, #44]	; (8012714 <RegionAS923InitDefaults+0xb8>)
 80126e6:	6818      	ldr	r0, [r3, #0]
 80126e8:	2300      	movs	r3, #0
 80126ea:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 80126ec:	6103      	str	r3, [r0, #16]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 80126ee:	2201      	movs	r2, #1
 80126f0:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 80126f4:	f500 7058 	add.w	r0, r0, #864	; 0x360
 80126f8:	f000 fd97 	bl	801322a <RegionCommonChanMaskCopy>
            break;
 80126fc:	e7c2      	b.n	8012684 <RegionAS923InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 80126fe:	4b05      	ldr	r3, [pc, #20]	; (8012714 <RegionAS923InitDefaults+0xb8>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 8012706:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 801270a:	430a      	orrs	r2, r1
 801270c:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 8012710:	e7b8      	b.n	8012684 <RegionAS923InitDefaults+0x28>
 8012712:	bf00      	nop
 8012714:	20001a60 	.word	0x20001a60
 8012718:	20001a5c 	.word	0x20001a5c
 801271c:	0801c200 	.word	0x0801c200
 8012720:	36a234c0 	.word	0x36a234c0

08012724 <RegionAS923Verify>:

bool RegionAS923Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8012724:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( phyAttribute )
 8012726:	290a      	cmp	r1, #10
 8012728:	d84b      	bhi.n	80127c2 <RegionAS923Verify+0x9e>
 801272a:	e8df f001 	tbb	[pc, r1]
 801272e:	4a06      	.short	0x4a06
 8012730:	0a4a4a4a 	.word	0x0a4a4a4a
 8012734:	404a2a20 	.word	0x404a2a20
 8012738:	40          	.byte	0x40
 8012739:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 801273a:	6800      	ldr	r0, [r0, #0]
 801273c:	f7ff fe26 	bl	801238c <VerifyRfFreq>
 8012740:	e040      	b.n	80127c4 <RegionAS923Verify+0xa0>
        }
        case PHY_TX_DR:
        {
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 8012742:	7883      	ldrb	r3, [r0, #2]
 8012744:	b94b      	cbnz	r3, 801275a <RegionAS923Verify+0x36>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE );
 8012746:	2207      	movs	r2, #7
 8012748:	2100      	movs	r1, #0
 801274a:	f990 0000 	ldrsb.w	r0, [r0]
 801274e:	f000 fcf8 	bl	8013142 <RegionCommonValueInRange>
 8012752:	3800      	subs	r0, #0
 8012754:	bf18      	it	ne
 8012756:	2001      	movne	r0, #1
 8012758:	e034      	b.n	80127c4 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_TX_MAX_DATARATE );
 801275a:	2207      	movs	r2, #7
 801275c:	2104      	movs	r1, #4
 801275e:	f990 0000 	ldrsb.w	r0, [r0]
 8012762:	f000 fcee 	bl	8013142 <RegionCommonValueInRange>
 8012766:	3800      	subs	r0, #0
 8012768:	bf18      	it	ne
 801276a:	2001      	movne	r0, #1
 801276c:	e02a      	b.n	80127c4 <RegionAS923Verify+0xa0>
            }
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 801276e:	2205      	movs	r2, #5
 8012770:	2100      	movs	r1, #0
 8012772:	f990 0000 	ldrsb.w	r0, [r0]
 8012776:	f000 fce4 	bl	8013142 <RegionCommonValueInRange>
 801277a:	3800      	subs	r0, #0
 801277c:	bf18      	it	ne
 801277e:	2001      	movne	r0, #1
 8012780:	e020      	b.n	80127c4 <RegionAS923Verify+0xa0>
        }
        case PHY_RX_DR:
        {
            if( verify->DatarateParams.DownlinkDwellTime == 0 )
 8012782:	7843      	ldrb	r3, [r0, #1]
 8012784:	b94b      	cbnz	r3, 801279a <RegionAS923Verify+0x76>
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE );
 8012786:	2207      	movs	r2, #7
 8012788:	2100      	movs	r1, #0
 801278a:	f990 0000 	ldrsb.w	r0, [r0]
 801278e:	f000 fcd8 	bl	8013142 <RegionCommonValueInRange>
 8012792:	3800      	subs	r0, #0
 8012794:	bf18      	it	ne
 8012796:	2001      	movne	r0, #1
 8012798:	e014      	b.n	80127c4 <RegionAS923Verify+0xa0>
            }
            else
            {
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AS923_DWELL_LIMIT_DATARATE, AS923_RX_MAX_DATARATE );
 801279a:	2207      	movs	r2, #7
 801279c:	2104      	movs	r1, #4
 801279e:	f990 0000 	ldrsb.w	r0, [r0]
 80127a2:	f000 fcce 	bl	8013142 <RegionCommonValueInRange>
 80127a6:	3800      	subs	r0, #0
 80127a8:	bf18      	it	ne
 80127aa:	2001      	movne	r0, #1
 80127ac:	e00a      	b.n	80127c4 <RegionAS923Verify+0xa0>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, AS923_MAX_TX_POWER, AS923_MIN_TX_POWER );
 80127ae:	2207      	movs	r2, #7
 80127b0:	2100      	movs	r1, #0
 80127b2:	f990 0000 	ldrsb.w	r0, [r0]
 80127b6:	f000 fcc4 	bl	8013142 <RegionCommonValueInRange>
 80127ba:	3800      	subs	r0, #0
 80127bc:	bf18      	it	ne
 80127be:	2001      	movne	r0, #1
 80127c0:	e000      	b.n	80127c4 <RegionAS923Verify+0xa0>
    switch( phyAttribute )
 80127c2:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_AS923 */
}
 80127c4:	bd08      	pop	{r3, pc}
	...

080127c8 <RegionAS923ChanMaskSet>:
    }
#endif /* REGION_AS923 */
}

bool RegionAS923ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 80127c8:	b508      	push	{r3, lr}
#if defined( REGION_AS923 )
    switch( chanMaskSet->ChannelsMaskType )
 80127ca:	7903      	ldrb	r3, [r0, #4]
 80127cc:	b11b      	cbz	r3, 80127d6 <RegionAS923ChanMaskSet+0xe>
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d00b      	beq.n	80127ea <RegionAS923ChanMaskSet+0x22>
 80127d2:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 80127d4:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 80127d6:	4b0a      	ldr	r3, [pc, #40]	; (8012800 <RegionAS923ChanMaskSet+0x38>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	2201      	movs	r2, #1
 80127dc:	6801      	ldr	r1, [r0, #0]
 80127de:	f503 7058 	add.w	r0, r3, #864	; 0x360
 80127e2:	f000 fd22 	bl	801322a <RegionCommonChanMaskCopy>
    return true;
 80127e6:	2001      	movs	r0, #1
            break;
 80127e8:	e7f4      	b.n	80127d4 <RegionAS923ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 80127ea:	4b05      	ldr	r3, [pc, #20]	; (8012800 <RegionAS923ChanMaskSet+0x38>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	2201      	movs	r2, #1
 80127f0:	6801      	ldr	r1, [r0, #0]
 80127f2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 80127f6:	f000 fd18 	bl	801322a <RegionCommonChanMaskCopy>
    return true;
 80127fa:	2001      	movs	r0, #1
            break;
 80127fc:	e7ea      	b.n	80127d4 <RegionAS923ChanMaskSet+0xc>
 80127fe:	bf00      	nop
 8012800:	20001a60 	.word	0x20001a60

08012804 <RegionAS923ComputeRxWindowParameters>:

void RegionAS923ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8012804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012806:	b083      	sub	sp, #12
 8012808:	460e      	mov	r6, r1
 801280a:	4617      	mov	r7, r2
 801280c:	461c      	mov	r4, r3
#if defined( REGION_AS923 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AS923_RX_MAX_DATARATE );
 801280e:	2807      	cmp	r0, #7
 8012810:	bfa8      	it	ge
 8012812:	2007      	movge	r0, #7
 8012814:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsAS923 );
 8012816:	4913      	ldr	r1, [pc, #76]	; (8012864 <RegionAS923ComputeRxWindowParameters+0x60>)
 8012818:	f000 ff60 	bl	80136dc <RegionCommonGetBandwidth>
 801281c:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 801281e:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8012822:	2b07      	cmp	r3, #7
 8012824:	d017      	beq.n	8012856 <RegionAS923ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesAS923[rxConfigParams->Datarate], BandwidthsAS923[rxConfigParams->Datarate] );
 8012826:	4a0f      	ldr	r2, [pc, #60]	; (8012864 <RegionAS923ComputeRxWindowParameters+0x60>)
 8012828:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801282c:	4a0e      	ldr	r2, [pc, #56]	; (8012868 <RegionAS923ComputeRxWindowParameters+0x64>)
 801282e:	5cd0      	ldrb	r0, [r2, r3]
 8012830:	f000 fe22 	bl	8013478 <RegionCommonComputeSymbolTimeLoRa>
 8012834:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8012836:	4b0d      	ldr	r3, [pc, #52]	; (801286c <RegionAS923ComputeRxWindowParameters+0x68>)
 8012838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801283a:	4798      	blx	r3
 801283c:	4603      	mov	r3, r0
 801283e:	f104 020c 	add.w	r2, r4, #12
 8012842:	9201      	str	r2, [sp, #4]
 8012844:	3408      	adds	r4, #8
 8012846:	9400      	str	r4, [sp, #0]
 8012848:	463a      	mov	r2, r7
 801284a:	4631      	mov	r1, r6
 801284c:	4628      	mov	r0, r5
 801284e:	f000 fe21 	bl	8013494 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_AS923 */
}
 8012852:	b003      	add	sp, #12
 8012854:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesAS923[rxConfigParams->Datarate] );
 8012856:	4a04      	ldr	r2, [pc, #16]	; (8012868 <RegionAS923ComputeRxWindowParameters+0x64>)
 8012858:	5cd0      	ldrb	r0, [r2, r3]
 801285a:	f000 fe15 	bl	8013488 <RegionCommonComputeSymbolTimeFsk>
 801285e:	4605      	mov	r5, r0
 8012860:	e7e9      	b.n	8012836 <RegionAS923ComputeRxWindowParameters+0x32>
 8012862:	bf00      	nop
 8012864:	0801e274 	.word	0x0801e274
 8012868:	0801e294 	.word	0x0801e294
 801286c:	0801e9c8 	.word	0x0801e9c8

08012870 <RegionAS923RxConfig>:

bool RegionAS923RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8012870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012874:	b08a      	sub	sp, #40	; 0x28
 8012876:	4604      	mov	r4, r0
 8012878:	460f      	mov	r7, r1
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 801287a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801287e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 8012882:	4b37      	ldr	r3, [pc, #220]	; (8012960 <RegionAS923RxConfig+0xf0>)
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	4798      	blx	r3
 8012888:	2800      	cmp	r0, #0
 801288a:	d167      	bne.n	801295c <RegionAS923RxConfig+0xec>
 801288c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 801288e:	7ce3      	ldrb	r3, [r4, #19]
 8012890:	b983      	cbnz	r3, 80128b4 <RegionAS923RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8012892:	4b34      	ldr	r3, [pc, #208]	; (8012964 <RegionAS923RxConfig+0xf4>)
 8012894:	681a      	ldr	r2, [r3, #0]
 8012896:	7823      	ldrb	r3, [r4, #0]
 8012898:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 801289c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 80128a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80128a4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80128a8:	f8d2 8004 	ldr.w	r8, [r2, #4]
 80128ac:	f1b8 0f00 	cmp.w	r8, #0
 80128b0:	d100      	bne.n	80128b4 <RegionAS923RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 80128b2:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAS923[dr];
 80128b4:	4b2c      	ldr	r3, [pc, #176]	; (8012968 <RegionAS923RxConfig+0xf8>)
 80128b6:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 80128ba:	4b29      	ldr	r3, [pc, #164]	; (8012960 <RegionAS923RxConfig+0xf0>)
 80128bc:	68db      	ldr	r3, [r3, #12]
 80128be:	4640      	mov	r0, r8
 80128c0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 80128c2:	2d07      	cmp	r5, #7
 80128c4:	d02b      	beq.n	801291e <RegionAS923RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 80128c6:	4b26      	ldr	r3, [pc, #152]	; (8012960 <RegionAS923RxConfig+0xf0>)
 80128c8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 80128cc:	7ca3      	ldrb	r3, [r4, #18]
 80128ce:	9309      	str	r3, [sp, #36]	; 0x24
 80128d0:	2601      	movs	r6, #1
 80128d2:	9608      	str	r6, [sp, #32]
 80128d4:	2300      	movs	r3, #0
 80128d6:	9307      	str	r3, [sp, #28]
 80128d8:	9306      	str	r3, [sp, #24]
 80128da:	9305      	str	r3, [sp, #20]
 80128dc:	9304      	str	r3, [sp, #16]
 80128de:	9303      	str	r3, [sp, #12]
 80128e0:	8922      	ldrh	r2, [r4, #8]
 80128e2:	9202      	str	r2, [sp, #8]
 80128e4:	2208      	movs	r2, #8
 80128e6:	9201      	str	r2, [sp, #4]
 80128e8:	9300      	str	r3, [sp, #0]
 80128ea:	4633      	mov	r3, r6
 80128ec:	464a      	mov	r2, r9
 80128ee:	78a1      	ldrb	r1, [r4, #2]
 80128f0:	4630      	mov	r0, r6
 80128f2:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 80128f4:	7c63      	ldrb	r3, [r4, #17]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d02d      	beq.n	8012956 <RegionAS923RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AS923[dr];
 80128fa:	4b1c      	ldr	r3, [pc, #112]	; (801296c <RegionAS923RxConfig+0xfc>)
 80128fc:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80128fe:	4b18      	ldr	r3, [pc, #96]	; (8012960 <RegionAS923RxConfig+0xf0>)
 8012900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012902:	310d      	adds	r1, #13
 8012904:	b2c9      	uxtb	r1, r1
 8012906:	4630      	mov	r0, r6
 8012908:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 801290a:	462a      	mov	r2, r5
 801290c:	4641      	mov	r1, r8
 801290e:	7ce0      	ldrb	r0, [r4, #19]
 8012910:	f000 fef6 	bl	8013700 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 8012914:	703d      	strb	r5, [r7, #0]
    return true;
 8012916:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_AS923 */
}
 8012918:	b00a      	add	sp, #40	; 0x28
 801291a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 801291e:	4b10      	ldr	r3, [pc, #64]	; (8012960 <RegionAS923RxConfig+0xf0>)
 8012920:	f8d3 a018 	ldr.w	sl, [r3, #24]
 8012924:	7ca3      	ldrb	r3, [r4, #18]
 8012926:	9309      	str	r3, [sp, #36]	; 0x24
 8012928:	2000      	movs	r0, #0
 801292a:	9008      	str	r0, [sp, #32]
 801292c:	9007      	str	r0, [sp, #28]
 801292e:	9006      	str	r0, [sp, #24]
 8012930:	2301      	movs	r3, #1
 8012932:	9305      	str	r3, [sp, #20]
 8012934:	9004      	str	r0, [sp, #16]
 8012936:	9003      	str	r0, [sp, #12]
 8012938:	8923      	ldrh	r3, [r4, #8]
 801293a:	9302      	str	r3, [sp, #8]
 801293c:	2305      	movs	r3, #5
 801293e:	9301      	str	r3, [sp, #4]
 8012940:	4b0b      	ldr	r3, [pc, #44]	; (8012970 <RegionAS923RxConfig+0x100>)
 8012942:	9300      	str	r3, [sp, #0]
 8012944:	4603      	mov	r3, r0
 8012946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801294a:	fb02 f209 	mul.w	r2, r2, r9
 801294e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8012952:	47d0      	blx	sl
 8012954:	e7ce      	b.n	80128f4 <RegionAS923RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateDwell0AS923[dr];
 8012956:	4b07      	ldr	r3, [pc, #28]	; (8012974 <RegionAS923RxConfig+0x104>)
 8012958:	5d59      	ldrb	r1, [r3, r5]
 801295a:	e7d0      	b.n	80128fe <RegionAS923RxConfig+0x8e>
        return false;
 801295c:	2000      	movs	r0, #0
 801295e:	e7db      	b.n	8012918 <RegionAS923RxConfig+0xa8>
 8012960:	0801e9c8 	.word	0x0801e9c8
 8012964:	20001a60 	.word	0x20001a60
 8012968:	0801e294 	.word	0x0801e294
 801296c:	0801e32c 	.word	0x0801e32c
 8012970:	00014585 	.word	0x00014585
 8012974:	0801e31c 	.word	0x0801e31c

08012978 <RegionAS923TxConfig>:

bool RegionAS923TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8012978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801297c:	b08d      	sub	sp, #52	; 0x34
 801297e:	4604      	mov	r4, r0
 8012980:	460f      	mov	r7, r1
 8012982:	4690      	mov	r8, r2
#if defined( REGION_AS923 )
    RadioModems_t modem;
    int8_t phyDr = DataratesAS923[txConfig->Datarate];
 8012984:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8012988:	4a42      	ldr	r2, [pc, #264]	; (8012a94 <RegionAS923TxConfig+0x11c>)
 801298a:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 801298e:	4d42      	ldr	r5, [pc, #264]	; (8012a98 <RegionAS923TxConfig+0x120>)
 8012990:	682a      	ldr	r2, [r5, #0]
 8012992:	7803      	ldrb	r3, [r0, #0]
 8012994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012998:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801299c:	7a53      	ldrb	r3, [r2, #9]
 801299e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80129a2:	4a3e      	ldr	r2, [pc, #248]	; (8012a9c <RegionAS923TxConfig+0x124>)
 80129a4:	6812      	ldr	r2, [r2, #0]
 80129a6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80129aa:	f993 1002 	ldrsb.w	r1, [r3, #2]
 80129ae:	f990 0002 	ldrsb.w	r0, [r0, #2]
 80129b2:	f000 fe8f 	bl	80136d4 <RegionCommonLimitTxPower>
 80129b6:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsAS923 );
 80129b8:	4939      	ldr	r1, [pc, #228]	; (8012aa0 <RegionAS923TxConfig+0x128>)
 80129ba:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80129be:	f000 fe8d 	bl	80136dc <RegionCommonGetBandwidth>
 80129c2:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 80129c4:	68a2      	ldr	r2, [r4, #8]
 80129c6:	6861      	ldr	r1, [r4, #4]
 80129c8:	4630      	mov	r0, r6
 80129ca:	f000 fd9f 	bl	801350c <RegionCommonComputeTxPower>
 80129ce:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 80129d0:	4b34      	ldr	r3, [pc, #208]	; (8012aa4 <RegionAS923TxConfig+0x12c>)
 80129d2:	68da      	ldr	r2, [r3, #12]
 80129d4:	6829      	ldr	r1, [r5, #0]
 80129d6:	7823      	ldrb	r3, [r4, #0]
 80129d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80129dc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80129e0:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 80129e2:	f994 3001 	ldrsb.w	r3, [r4, #1]
 80129e6:	2b07      	cmp	r3, #7
 80129e8:	d031      	beq.n	8012a4e <RegionAS923TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80129ea:	4b2e      	ldr	r3, [pc, #184]	; (8012aa4 <RegionAS923TxConfig+0x12c>)
 80129ec:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 80129f0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80129f4:	9308      	str	r3, [sp, #32]
 80129f6:	2200      	movs	r2, #0
 80129f8:	9207      	str	r2, [sp, #28]
 80129fa:	9206      	str	r2, [sp, #24]
 80129fc:	9205      	str	r2, [sp, #20]
 80129fe:	2501      	movs	r5, #1
 8012a00:	9504      	str	r5, [sp, #16]
 8012a02:	9203      	str	r2, [sp, #12]
 8012a04:	2308      	movs	r3, #8
 8012a06:	9302      	str	r3, [sp, #8]
 8012a08:	9501      	str	r5, [sp, #4]
 8012a0a:	f8cd a000 	str.w	sl, [sp]
 8012a0e:	464b      	mov	r3, r9
 8012a10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a12:	4628      	mov	r0, r5
 8012a14:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 8012a16:	4b20      	ldr	r3, [pc, #128]	; (8012a98 <RegionAS923TxConfig+0x120>)
 8012a18:	681a      	ldr	r2, [r3, #0]
 8012a1a:	7823      	ldrb	r3, [r4, #0]
 8012a1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012a20:	f994 1001 	ldrsb.w	r1, [r4, #1]
 8012a24:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012a28:	f000 fe8c 	bl	8013744 <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 8012a2c:	89a1      	ldrh	r1, [r4, #12]
 8012a2e:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012a32:	f7ff fcbf 	bl	80123b4 <GetTimeOnAir>
 8012a36:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8012a3a:	4b1a      	ldr	r3, [pc, #104]	; (8012aa4 <RegionAS923TxConfig+0x12c>)
 8012a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a3e:	7b21      	ldrb	r1, [r4, #12]
 8012a40:	4628      	mov	r0, r5
 8012a42:	4798      	blx	r3

    *txPower = txPowerLimited;
 8012a44:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_AS923 */
}
 8012a46:	2001      	movs	r0, #1
 8012a48:	b00d      	add	sp, #52	; 0x34
 8012a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8012a4e:	4b15      	ldr	r3, [pc, #84]	; (8012aa4 <RegionAS923TxConfig+0x12c>)
 8012a50:	69dd      	ldr	r5, [r3, #28]
 8012a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012a56:	fb03 f30a 	mul.w	r3, r3, sl
 8012a5a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8012a5e:	9208      	str	r2, [sp, #32]
 8012a60:	f04f 0a00 	mov.w	sl, #0
 8012a64:	f8cd a01c 	str.w	sl, [sp, #28]
 8012a68:	f8cd a018 	str.w	sl, [sp, #24]
 8012a6c:	f8cd a014 	str.w	sl, [sp, #20]
 8012a70:	2201      	movs	r2, #1
 8012a72:	9204      	str	r2, [sp, #16]
 8012a74:	f8cd a00c 	str.w	sl, [sp, #12]
 8012a78:	2205      	movs	r2, #5
 8012a7a:	9202      	str	r2, [sp, #8]
 8012a7c:	f8cd a004 	str.w	sl, [sp, #4]
 8012a80:	9300      	str	r3, [sp, #0]
 8012a82:	464b      	mov	r3, r9
 8012a84:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8012a88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a8a:	4650      	mov	r0, sl
 8012a8c:	47a8      	blx	r5
        modem = MODEM_FSK;
 8012a8e:	4655      	mov	r5, sl
 8012a90:	e7c1      	b.n	8012a16 <RegionAS923TxConfig+0x9e>
 8012a92:	bf00      	nop
 8012a94:	0801e294 	.word	0x0801e294
 8012a98:	20001a60 	.word	0x20001a60
 8012a9c:	20001a5c 	.word	0x20001a5c
 8012aa0:	0801e274 	.word	0x0801e274
 8012aa4:	0801e9c8 	.word	0x0801e9c8

08012aa8 <RegionAS923LinkAdrReq>:

uint8_t RegionAS923LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 8012aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012aac:	b08f      	sub	sp, #60	; 0x3c
 8012aae:	4605      	mov	r5, r0
 8012ab0:	4689      	mov	r9, r1
 8012ab2:	4690      	mov	r8, r2
 8012ab4:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_AS923 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8012ab6:	2400      	movs	r4, #0
 8012ab8:	940c      	str	r4, [sp, #48]	; 0x30
 8012aba:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 8012abe:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 8012ac2:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012ac4:	e030      	b.n	8012b28 <RegionAS923LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8012ac6:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 8012aca:	2607      	movs	r6, #7
 8012acc:	e012      	b.n	8012af4 <RegionAS923LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 8012ace:	4a58      	ldr	r2, [pc, #352]	; (8012c30 <RegionAS923LinkAdrReq+0x188>)
 8012ad0:	6812      	ldr	r2, [r2, #0]
 8012ad2:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8012ad6:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8012ada:	b13a      	cbz	r2, 8012aec <RegionAS923LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 8012adc:	2201      	movs	r2, #1
 8012ade:	fa02 f20c 	lsl.w	r2, r2, ip
 8012ae2:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 8012ae6:	430a      	orrs	r2, r1
 8012ae8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < AS923_MAX_NB_CHANNELS; i++ )
 8012aec:	f10c 0c01 	add.w	ip, ip, #1
 8012af0:	fa5f fc8c 	uxtb.w	ip, ip
 8012af4:	f1bc 0f0f 	cmp.w	ip, #15
 8012af8:	d816      	bhi.n	8012b28 <RegionAS923LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 8012afa:	2b06      	cmp	r3, #6
 8012afc:	d0e7      	beq.n	8012ace <RegionAS923LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8012afe:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 8012b02:	fa4e fe0c 	asr.w	lr, lr, ip
 8012b06:	f01e 0f01 	tst.w	lr, #1
 8012b0a:	d0ef      	beq.n	8012aec <RegionAS923LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8012b0c:	4a48      	ldr	r2, [pc, #288]	; (8012c30 <RegionAS923LinkAdrReq+0x188>)
 8012b0e:	6812      	ldr	r2, [r2, #0]
 8012b10:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 8012b14:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8012b18:	2a00      	cmp	r2, #0
 8012b1a:	d1e7      	bne.n	8012aec <RegionAS923LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 8012b1c:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8012b20:	e7e4      	b.n	8012aec <RegionAS923LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 8012b22:	2606      	movs	r6, #6
 8012b24:	e000      	b.n	8012b28 <RegionAS923LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 8012b26:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 8012b28:	7a2b      	ldrb	r3, [r5, #8]
 8012b2a:	42a3      	cmp	r3, r4
 8012b2c:	d919      	bls.n	8012b62 <RegionAS923LinkAdrReq+0xba>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8012b2e:	6868      	ldr	r0, [r5, #4]
 8012b30:	a90c      	add	r1, sp, #48	; 0x30
 8012b32:	4420      	add	r0, r4
 8012b34:	f000 fc2a 	bl	801338c <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8012b38:	4603      	mov	r3, r0
 8012b3a:	b190      	cbz	r0, 8012b62 <RegionAS923LinkAdrReq+0xba>
        bytesProcessed += nextIndex;
 8012b3c:	4423      	add	r3, r4
 8012b3e:	b2dc      	uxtb	r4, r3
        chMask = linkAdrParams.ChMask;
 8012b40:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8012b44:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 8012b48:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8012b4c:	b90b      	cbnz	r3, 8012b52 <RegionAS923LinkAdrReq+0xaa>
 8012b4e:	2a00      	cmp	r2, #0
 8012b50:	d0e7      	beq.n	8012b22 <RegionAS923LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 8012b52:	1e5a      	subs	r2, r3, #1
 8012b54:	b2d2      	uxtb	r2, r2
 8012b56:	2a04      	cmp	r2, #4
 8012b58:	d9e5      	bls.n	8012b26 <RegionAS923LinkAdrReq+0x7e>
 8012b5a:	2b06      	cmp	r3, #6
 8012b5c:	d9b3      	bls.n	8012ac6 <RegionAS923LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 8012b5e:	2606      	movs	r6, #6
 8012b60:	e7e2      	b.n	8012b28 <RegionAS923LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8012b62:	2302      	movs	r3, #2
 8012b64:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 8012b68:	7a6b      	ldrb	r3, [r5, #9]
 8012b6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionAS923GetPhyParam( &getPhy );
 8012b6e:	a80a      	add	r0, sp, #40	; 0x28
 8012b70:	f7ff fc52 	bl	8012418 <RegionAS923GetPhyParam>
 8012b74:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 8012b76:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 8012b7a:	7aab      	ldrb	r3, [r5, #10]
 8012b7c:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8012b80:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8012b84:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 8012b88:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8012b8c:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8012b90:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8012b94:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 8012b98:	f995 300b 	ldrsb.w	r3, [r5, #11]
 8012b9c:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8012ba0:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8012ba4:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8012ba8:	f995 300d 	ldrsb.w	r3, [r5, #13]
 8012bac:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = AS923_MAX_NB_CHANNELS;
 8012bb0:	2310      	movs	r3, #16
 8012bb2:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8012bb6:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8012bba:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8012bbc:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = AS923_TX_MAX_DATARATE;
 8012bc0:	2307      	movs	r3, #7
 8012bc2:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8012bc6:	4a1a      	ldr	r2, [pc, #104]	; (8012c30 <RegionAS923LinkAdrReq+0x188>)
 8012bc8:	6812      	ldr	r2, [r2, #0]
 8012bca:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = AS923_MIN_TX_POWER;
 8012bcc:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = AS923_MAX_TX_POWER;
 8012bd0:	2300      	movs	r3, #0
 8012bd2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8012bd6:	682b      	ldr	r3, [r5, #0]
 8012bd8:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 8012bda:	ab0c      	add	r3, sp, #48	; 0x30
 8012bdc:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 8012be0:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 8012be4:	a801      	add	r0, sp, #4
 8012be6:	f000 fbef 	bl	80133c8 <RegionCommonLinkAdrReqVerifyParams>
 8012bea:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 8012bec:	2807      	cmp	r0, #7
 8012bee:	d010      	beq.n	8012c12 <RegionAS923LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8012bf0:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 8012bf4:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 8012bf8:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 8012bfc:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 8012c00:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8012c04:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 8012c06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8012c08:	701c      	strb	r4, [r3, #0]

#endif /* REGION_AS923 */
    return status;
}
 8012c0a:	4628      	mov	r0, r5
 8012c0c:	b00f      	add	sp, #60	; 0x3c
 8012c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8012c12:	4e07      	ldr	r6, [pc, #28]	; (8012c30 <RegionAS923LinkAdrReq+0x188>)
 8012c14:	6830      	ldr	r0, [r6, #0]
 8012c16:	220c      	movs	r2, #12
 8012c18:	2100      	movs	r1, #0
 8012c1a:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8012c1e:	f001 fdec 	bl	80147fa <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8012c22:	6833      	ldr	r3, [r6, #0]
 8012c24:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 8012c28:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 8012c2c:	e7e0      	b.n	8012bf0 <RegionAS923LinkAdrReq+0x148>
 8012c2e:	bf00      	nop
 8012c30:	20001a60 	.word	0x20001a60

08012c34 <RegionAS923RxParamSetupReq>:

uint8_t RegionAS923RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8012c34:	b538      	push	{r3, r4, r5, lr}
 8012c36:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_AS923 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 8012c38:	6840      	ldr	r0, [r0, #4]
 8012c3a:	f7ff fba7 	bl	801238c <VerifyRfFreq>
 8012c3e:	b1a0      	cbz	r0, 8012c6a <RegionAS923RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 8012c40:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AS923_RX_MIN_DATARATE, AS923_RX_MAX_DATARATE ) == false )
 8012c42:	2207      	movs	r2, #7
 8012c44:	2100      	movs	r1, #0
 8012c46:	f994 0000 	ldrsb.w	r0, [r4]
 8012c4a:	f000 fa7a 	bl	8013142 <RegionCommonValueInRange>
 8012c4e:	b908      	cbnz	r0, 8012c54 <RegionAS923RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8012c50:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AS923_MIN_RX1_DR_OFFSET, AS923_MAX_RX1_DR_OFFSET ) == false )
 8012c54:	2207      	movs	r2, #7
 8012c56:	2100      	movs	r1, #0
 8012c58:	f994 0001 	ldrsb.w	r0, [r4, #1]
 8012c5c:	f000 fa71 	bl	8013142 <RegionCommonValueInRange>
 8012c60:	b908      	cbnz	r0, 8012c66 <RegionAS923RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8012c62:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_AS923 */
    return status;
}
 8012c66:	4628      	mov	r0, r5
 8012c68:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 8012c6a:	2506      	movs	r5, #6
 8012c6c:	e7e9      	b.n	8012c42 <RegionAS923RxParamSetupReq+0xe>

08012c6e <RegionAS923TxParamSetupReq>:

int8_t RegionAS923TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 8012c6e:	2000      	movs	r0, #0
 8012c70:	4770      	bx	lr
	...

08012c74 <RegionAS923DlChannelReq>:
int8_t RegionAS923DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    uint8_t status = 0x03;

#if defined( REGION_AS923 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 8012c74:	7803      	ldrb	r3, [r0, #0]
 8012c76:	2b0f      	cmp	r3, #15
 8012c78:	d901      	bls.n	8012c7e <RegionAS923DlChannelReq+0xa>
    {
        return 0;
 8012c7a:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_AS923 */
    return status;
}
 8012c7c:	4770      	bx	lr
{
 8012c7e:	b510      	push	{r4, lr}
 8012c80:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 8012c82:	6840      	ldr	r0, [r0, #4]
 8012c84:	f7ff fb82 	bl	801238c <VerifyRfFreq>
 8012c88:	b170      	cbz	r0, 8012ca8 <RegionAS923DlChannelReq+0x34>
    uint8_t status = 0x03;
 8012c8a:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8012c8c:	4b0b      	ldr	r3, [pc, #44]	; (8012cbc <RegionAS923DlChannelReq+0x48>)
 8012c8e:	681a      	ldr	r2, [r3, #0]
 8012c90:	7823      	ldrb	r3, [r4, #0]
 8012c92:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8012c96:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8012c9a:	b909      	cbnz	r1, 8012ca0 <RegionAS923DlChannelReq+0x2c>
        status &= 0xFD;
 8012c9c:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 8012ca0:	2803      	cmp	r0, #3
 8012ca2:	d003      	beq.n	8012cac <RegionAS923DlChannelReq+0x38>
    return status;
 8012ca4:	b240      	sxtb	r0, r0
}
 8012ca6:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 8012ca8:	2002      	movs	r0, #2
 8012caa:	e7ef      	b.n	8012c8c <RegionAS923DlChannelReq+0x18>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 8012cac:	6861      	ldr	r1, [r4, #4]
 8012cae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012cb2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8012cb6:	6051      	str	r1, [r2, #4]
 8012cb8:	e7f4      	b.n	8012ca4 <RegionAS923DlChannelReq+0x30>
 8012cba:	bf00      	nop
 8012cbc:	20001a60 	.word	0x20001a60

08012cc0 <RegionAS923AlternateDr>:
    // Only AS923_DWELL_LIMIT_DATARATE is supported
    return AS923_DWELL_LIMIT_DATARATE;
#else
    return -1;
#endif /* REGION_AS923 */
}
 8012cc0:	2004      	movs	r0, #4
 8012cc2:	4770      	bx	lr

08012cc4 <RegionAS923NextChannel>:

LoRaMacStatus_t RegionAS923NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8012cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012cc6:	b097      	sub	sp, #92	; 0x5c
 8012cc8:	4604      	mov	r4, r0
 8012cca:	460f      	mov	r7, r1
 8012ccc:	4616      	mov	r6, r2
 8012cce:	461d      	mov	r5, r3
#if defined( REGION_AS923 )
    uint8_t nbEnabledChannels = 0;
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 8012cd6:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[AS923_MAX_NB_CHANNELS] = { 0 };
 8012cda:	9111      	str	r1, [sp, #68]	; 0x44
 8012cdc:	9112      	str	r1, [sp, #72]	; 0x48
 8012cde:	9113      	str	r1, [sp, #76]	; 0x4c
 8012ce0:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = AS923_JOIN_CHANNELS;
 8012ce2:	2303      	movs	r3, #3
 8012ce4:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 8012ce8:	4b34      	ldr	r3, [pc, #208]	; (8012dbc <RegionAS923NextChannel+0xf8>)
 8012cea:	6818      	ldr	r0, [r3, #0]
 8012cec:	2201      	movs	r2, #1
 8012cee:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8012cf2:	f000 fa84 	bl	80131fe <RegionCommonCountChannels>
 8012cf6:	b938      	cbnz	r0, 8012d08 <RegionAS923NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8012cf8:	4b30      	ldr	r3, [pc, #192]	; (8012dbc <RegionAS923NextChannel+0xf8>)
 8012cfa:	681a      	ldr	r2, [r3, #0]
 8012cfc:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8012d00:	f043 0303 	orr.w	r3, r3, #3
 8012d04:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8012d08:	7a63      	ldrb	r3, [r4, #9]
 8012d0a:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8012d0e:	7a23      	ldrb	r3, [r4, #8]
 8012d10:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 8012d14:	4b29      	ldr	r3, [pc, #164]	; (8012dbc <RegionAS923NextChannel+0xf8>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	f503 7258 	add.w	r2, r3, #864	; 0x360
 8012d1c:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8012d1e:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 8012d20:	4b27      	ldr	r3, [pc, #156]	; (8012dc0 <RegionAS923NextChannel+0xfc>)
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = AS923_MAX_NB_CHANNELS;
 8012d26:	2310      	movs	r3, #16
 8012d28:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 8012d2c:	f10d 030a 	add.w	r3, sp, #10
 8012d30:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 8012d32:	6823      	ldr	r3, [r4, #0]
 8012d34:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8012d36:	6863      	ldr	r3, [r4, #4]
 8012d38:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8012d3a:	7aa3      	ldrb	r3, [r4, #10]
 8012d3c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = AS923_MAX_NB_BANDS;
 8012d40:	2301      	movs	r3, #1
 8012d42:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8012d46:	ab0c      	add	r3, sp, #48	; 0x30
 8012d48:	f104 020c 	add.w	r2, r4, #12
 8012d4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012d50:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8012d54:	7d23      	ldrb	r3, [r4, #20]
 8012d56:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 8012d5a:	8ae1      	ldrh	r1, [r4, #22]
 8012d5c:	f994 0008 	ldrsb.w	r0, [r4, #8]
 8012d60:	f7ff fb28 	bl	80123b4 <GetTimeOnAir>
 8012d64:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8012d66:	ab03      	add	r3, sp, #12
 8012d68:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8012d6a:	9601      	str	r6, [sp, #4]
 8012d6c:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 8012d70:	9300      	str	r3, [sp, #0]
 8012d72:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 8012d76:	aa11      	add	r2, sp, #68	; 0x44
 8012d78:	4629      	mov	r1, r5
 8012d7a:	a809      	add	r0, sp, #36	; 0x24
 8012d7c:	f000 fc41 	bl	8013602 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 8012d80:	4604      	mov	r4, r0
 8012d82:	b120      	cbz	r0, 8012d8e <RegionAS923NextChannel+0xca>
#else
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
#endif
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 8012d84:	280c      	cmp	r0, #12
 8012d86:	d00f      	beq.n	8012da8 <RegionAS923NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8012d88:	4620      	mov	r0, r4
 8012d8a:	b017      	add	sp, #92	; 0x5c
 8012d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8012d8e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 8012d92:	3901      	subs	r1, #1
 8012d94:	f001 fd0c 	bl	80147b0 <randr>
 8012d98:	f100 0358 	add.w	r3, r0, #88	; 0x58
 8012d9c:	eb0d 0003 	add.w	r0, sp, r3
 8012da0:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 8012da4:	703b      	strb	r3, [r7, #0]
 8012da6:	e7ef      	b.n	8012d88 <RegionAS923NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 );
 8012da8:	4b04      	ldr	r3, [pc, #16]	; (8012dbc <RegionAS923NextChannel+0xf8>)
 8012daa:	681a      	ldr	r2, [r3, #0]
 8012dac:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 8012db0:	f043 0303 	orr.w	r3, r3, #3
 8012db4:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 8012db8:	e7e6      	b.n	8012d88 <RegionAS923NextChannel+0xc4>
 8012dba:	bf00      	nop
 8012dbc:	20001a60 	.word	0x20001a60
 8012dc0:	20001a5c 	.word	0x20001a5c

08012dc4 <RegionAS923ChannelAdd>:

LoRaMacStatus_t RegionAS923ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8012dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_AS923 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 8012dc6:	7905      	ldrb	r5, [r0, #4]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8012dc8:	2d01      	cmp	r5, #1
 8012dca:	d94a      	bls.n	8012e62 <RegionAS923ChannelAdd+0x9e>
 8012dcc:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= AS923_MAX_NB_CHANNELS )
 8012dce:	2d0f      	cmp	r5, #15
 8012dd0:	d849      	bhi.n	8012e66 <RegionAS923ChannelAdd+0xa2>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8012dd2:	6803      	ldr	r3, [r0, #0]
 8012dd4:	7a18      	ldrb	r0, [r3, #8]
 8012dd6:	f340 0003 	sbfx	r0, r0, #0, #4
 8012dda:	2207      	movs	r2, #7
 8012ddc:	2100      	movs	r1, #0
 8012dde:	b240      	sxtb	r0, r0
 8012de0:	f000 f9af 	bl	8013142 <RegionCommonValueInRange>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	d038      	beq.n	8012e5a <RegionAS923ChannelAdd+0x96>
    bool drInvalid = false;
 8012de8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, AS923_TX_MIN_DATARATE, AS923_TX_MAX_DATARATE ) == false )
 8012dea:	6823      	ldr	r3, [r4, #0]
 8012dec:	7a18      	ldrb	r0, [r3, #8]
 8012dee:	f340 1003 	sbfx	r0, r0, #4, #4
 8012df2:	2207      	movs	r2, #7
 8012df4:	2100      	movs	r1, #0
 8012df6:	b240      	sxtb	r0, r0
 8012df8:	f000 f9a3 	bl	8013142 <RegionCommonValueInRange>
 8012dfc:	b900      	cbnz	r0, 8012e00 <RegionAS923ChannelAdd+0x3c>
    {
        drInvalid = true;
 8012dfe:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8012e00:	6821      	ldr	r1, [r4, #0]
 8012e02:	7a0b      	ldrb	r3, [r1, #8]
 8012e04:	f343 0203 	sbfx	r2, r3, #0, #4
 8012e08:	b252      	sxtb	r2, r2
 8012e0a:	f343 1303 	sbfx	r3, r3, #4, #4
 8012e0e:	b25b      	sxtb	r3, r3
 8012e10:	429a      	cmp	r2, r3
 8012e12:	dd00      	ble.n	8012e16 <RegionAS923ChannelAdd+0x52>
    {
        drInvalid = true;
 8012e14:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 8012e16:	6808      	ldr	r0, [r1, #0]
 8012e18:	f7ff fab8 	bl	801238c <VerifyRfFreq>
 8012e1c:	b1f8      	cbz	r0, 8012e5e <RegionAS923ChannelAdd+0x9a>
    bool freqInvalid = false;
 8012e1e:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 8012e20:	b106      	cbz	r6, 8012e24 <RegionAS923ChannelAdd+0x60>
 8012e22:	bb13      	cbnz	r3, 8012e6a <RegionAS923ChannelAdd+0xa6>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 8012e24:	bb1e      	cbnz	r6, 8012e6e <RegionAS923ChannelAdd+0xaa>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 8012e26:	bb23      	cbnz	r3, 8012e72 <RegionAS923ChannelAdd+0xae>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 8012e28:	4f13      	ldr	r7, [pc, #76]	; (8012e78 <RegionAS923ChannelAdd+0xb4>)
 8012e2a:	683b      	ldr	r3, [r7, #0]
 8012e2c:	006e      	lsls	r6, r5, #1
 8012e2e:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 8012e32:	220c      	movs	r2, #12
 8012e34:	6821      	ldr	r1, [r4, #0]
 8012e36:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012e3a:	f001 fcc6 	bl	80147ca <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 8012e3e:	683a      	ldr	r2, [r7, #0]
 8012e40:	442e      	add	r6, r5
 8012e42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8012e46:	2000      	movs	r0, #0
 8012e48:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8012e4a:	2301      	movs	r3, #1
 8012e4c:	40ab      	lsls	r3, r5
 8012e4e:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 8012e52:	430b      	orrs	r3, r1
 8012e54:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 8012e58:	e006      	b.n	8012e68 <RegionAS923ChannelAdd+0xa4>
        drInvalid = true;
 8012e5a:	2601      	movs	r6, #1
 8012e5c:	e7c5      	b.n	8012dea <RegionAS923ChannelAdd+0x26>
            freqInvalid = true;
 8012e5e:	2301      	movs	r3, #1
 8012e60:	e7de      	b.n	8012e20 <RegionAS923ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8012e62:	2006      	movs	r0, #6
 8012e64:	e000      	b.n	8012e68 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8012e66:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_AS923 */
}
 8012e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8012e6a:	2006      	movs	r0, #6
 8012e6c:	e7fc      	b.n	8012e68 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_DATARATE_INVALID;
 8012e6e:	2005      	movs	r0, #5
 8012e70:	e7fa      	b.n	8012e68 <RegionAS923ChannelAdd+0xa4>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 8012e72:	2004      	movs	r0, #4
 8012e74:	e7f8      	b.n	8012e68 <RegionAS923ChannelAdd+0xa4>
 8012e76:	bf00      	nop
 8012e78:	20001a60 	.word	0x20001a60

08012e7c <RegionAS923ChannelsRemove>:

bool RegionAS923ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_AS923 )
    uint8_t id = channelRemove->ChannelId;
 8012e7c:	7801      	ldrb	r1, [r0, #0]

    if( id < AS923_NUMB_DEFAULT_CHANNELS )
 8012e7e:	2901      	cmp	r1, #1
 8012e80:	d913      	bls.n	8012eaa <RegionAS923ChannelsRemove+0x2e>
{
 8012e82:	b508      	push	{r3, lr}
    {
        return false;
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8012e84:	4b0a      	ldr	r3, [pc, #40]	; (8012eb0 <RegionAS923ChannelsRemove+0x34>)
 8012e86:	6818      	ldr	r0, [r3, #0]
 8012e88:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 8012e8c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8012e90:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012e94:	2200      	movs	r2, #0
 8012e96:	f840 200c 	str.w	r2, [r0, ip]
 8012e9a:	605a      	str	r2, [r3, #4]
 8012e9c:	609a      	str	r2, [r3, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, AS923_MAX_NB_CHANNELS );
 8012e9e:	2210      	movs	r2, #16
 8012ea0:	f500 7058 	add.w	r0, r0, #864	; 0x360
 8012ea4:	f000 f98f 	bl	80131c6 <RegionCommonChanDisable>
#else
    return false;
#endif /* REGION_AS923 */
}
 8012ea8:	bd08      	pop	{r3, pc}
        return false;
 8012eaa:	2000      	movs	r0, #0
}
 8012eac:	4770      	bx	lr
 8012eae:	bf00      	nop
 8012eb0:	20001a60 	.word	0x20001a60

08012eb4 <RegionAS923ApplyCFList>:
{
 8012eb4:	b570      	push	{r4, r5, r6, lr}
 8012eb6:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8012eb8:	2350      	movs	r3, #80	; 0x50
 8012eba:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 8012ebe:	7a03      	ldrb	r3, [r0, #8]
 8012ec0:	2b10      	cmp	r3, #16
 8012ec2:	d136      	bne.n	8012f32 <RegionAS923ApplyCFList+0x7e>
 8012ec4:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 8012ec6:	6843      	ldr	r3, [r0, #4]
 8012ec8:	7bdd      	ldrb	r5, [r3, #15]
 8012eca:	2d00      	cmp	r5, #0
 8012ecc:	d131      	bne.n	8012f32 <RegionAS923ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012ece:	2402      	movs	r4, #2
 8012ed0:	e01b      	b.n	8012f0a <RegionAS923ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8012ed2:	6872      	ldr	r2, [r6, #4]
 8012ed4:	5d53      	ldrb	r3, [r2, r5]
 8012ed6:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8012ed8:	442a      	add	r2, r5
 8012eda:	7851      	ldrb	r1, [r2, #1]
 8012edc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8012ee0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8012ee2:	7892      	ldrb	r2, [r2, #2]
 8012ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ee8:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 8012eea:	2264      	movs	r2, #100	; 0x64
 8012eec:	fb02 f303 	mul.w	r3, r2, r3
 8012ef0:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	9304      	str	r3, [sp, #16]
 8012ef6:	e011      	b.n	8012f1c <RegionAS923ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 8012ef8:	f88d 4000 	strb.w	r4, [sp]
            RegionAS923ChannelsRemove( &channelRemove );
 8012efc:	4668      	mov	r0, sp
 8012efe:	f7ff ffbd 	bl	8012e7c <RegionAS923ChannelsRemove>
    for( uint8_t i = 0, chanIdx = AS923_NUMB_DEFAULT_CHANNELS; chanIdx < AS923_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8012f02:	3503      	adds	r5, #3
 8012f04:	b2ed      	uxtb	r5, r5
 8012f06:	3401      	adds	r4, #1
 8012f08:	b2e4      	uxtb	r4, r4
 8012f0a:	2c0f      	cmp	r4, #15
 8012f0c:	d811      	bhi.n	8012f32 <RegionAS923ApplyCFList+0x7e>
        if( chanIdx < ( AS923_NUMB_CHANNELS_CF_LIST + AS923_NUMB_DEFAULT_CHANNELS ) )
 8012f0e:	2c06      	cmp	r4, #6
 8012f10:	d9df      	bls.n	8012ed2 <RegionAS923ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 8012f12:	2300      	movs	r3, #0
 8012f14:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 8012f16:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 8012f1a:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 8012f1c:	9b03      	ldr	r3, [sp, #12]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d0ea      	beq.n	8012ef8 <RegionAS923ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 8012f22:	ab03      	add	r3, sp, #12
 8012f24:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 8012f26:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionAS923ChannelAdd( &channelAdd );
 8012f2a:	a801      	add	r0, sp, #4
 8012f2c:	f7ff ff4a 	bl	8012dc4 <RegionAS923ChannelAdd>
 8012f30:	e7e7      	b.n	8012f02 <RegionAS923ApplyCFList+0x4e>
}
 8012f32:	b006      	add	sp, #24
 8012f34:	bd70      	pop	{r4, r5, r6, pc}

08012f36 <RegionAS923NewChannelReq>:
{
 8012f36:	b500      	push	{lr}
 8012f38:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 8012f3a:	6803      	ldr	r3, [r0, #0]
 8012f3c:	681a      	ldr	r2, [r3, #0]
 8012f3e:	b952      	cbnz	r2, 8012f56 <RegionAS923NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8012f40:	7903      	ldrb	r3, [r0, #4]
 8012f42:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionAS923ChannelsRemove( &channelRemove ) == false )
 8012f46:	a801      	add	r0, sp, #4
 8012f48:	f7ff ff98 	bl	8012e7c <RegionAS923ChannelsRemove>
 8012f4c:	b1d0      	cbz	r0, 8012f84 <RegionAS923NewChannelReq+0x4e>
    uint8_t status = 0x03;
 8012f4e:	2003      	movs	r0, #3
}
 8012f50:	b005      	add	sp, #20
 8012f52:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 8012f56:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8012f58:	7903      	ldrb	r3, [r0, #4]
 8012f5a:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionAS923ChannelAdd( &channelAdd ) )
 8012f5e:	a802      	add	r0, sp, #8
 8012f60:	f7ff ff30 	bl	8012dc4 <RegionAS923ChannelAdd>
 8012f64:	2806      	cmp	r0, #6
 8012f66:	d80b      	bhi.n	8012f80 <RegionAS923NewChannelReq+0x4a>
 8012f68:	e8df f000 	tbb	[pc, r0]
 8012f6c:	0a0a0a04 	.word	0x0a0a0a04
 8012f70:	060e      	.short	0x060e
 8012f72:	08          	.byte	0x08
 8012f73:	00          	.byte	0x00
 8012f74:	2003      	movs	r0, #3
 8012f76:	e7eb      	b.n	8012f50 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFD;
 8012f78:	2001      	movs	r0, #1
                break;
 8012f7a:	e7e9      	b.n	8012f50 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 8012f7c:	2000      	movs	r0, #0
                break;
 8012f7e:	e7e7      	b.n	8012f50 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFC;
 8012f80:	2000      	movs	r0, #0
                break;
 8012f82:	e7e5      	b.n	8012f50 <RegionAS923NewChannelReq+0x1a>
            status &= 0xFC;
 8012f84:	2000      	movs	r0, #0
 8012f86:	e7e3      	b.n	8012f50 <RegionAS923NewChannelReq+0x1a>
                status &= 0xFE;
 8012f88:	2002      	movs	r0, #2
 8012f8a:	e7e1      	b.n	8012f50 <RegionAS923NewChannelReq+0x1a>

08012f8c <RegionAS923ApplyDrOffset>:
{
#if defined( REGION_AS923 )
    // Initialize minDr
    int8_t minDr;

    if( downlinkDwellTime == 0 )
 8012f8c:	b928      	cbnz	r0, 8012f9a <RegionAS923ApplyDrOffset+0xe>
    {
        // Update the minDR for a downlink dwell time configuration of 0
        minDr = EffectiveRx1DrOffsetDownlinkDwell0AS923[dr][drOffset];
 8012f8e:	4b05      	ldr	r3, [pc, #20]	; (8012fa4 <RegionAS923ApplyDrOffset+0x18>)
 8012f90:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012f94:	5698      	ldrsb	r0, [r3, r2]
    return minDr;
#else
    return 0;
#endif /* REGION_AS923 */

}
 8012f96:	b2c0      	uxtb	r0, r0
 8012f98:	4770      	bx	lr
        minDr = EffectiveRx1DrOffsetDownlinkDwell1AS923[dr][drOffset];
 8012f9a:	4b03      	ldr	r3, [pc, #12]	; (8012fa8 <RegionAS923ApplyDrOffset+0x1c>)
 8012f9c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8012fa0:	5698      	ldrsb	r0, [r3, r2]
 8012fa2:	e7f8      	b.n	8012f96 <RegionAS923ApplyDrOffset+0xa>
 8012fa4:	0801e29c 	.word	0x0801e29c
 8012fa8:	0801e2dc 	.word	0x0801e2dc

08012fac <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8012fac:	b082      	sub	sp, #8
 8012fae:	f10d 0c08 	add.w	ip, sp, #8
 8012fb2:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 8012fb6:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 8012fb8:	b971      	cbnz	r1, 8012fd8 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8012fba:	4613      	mov	r3, r2
 8012fbc:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 8012fc0:	d306      	bcc.n	8012fd0 <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8012fc2:	f649 22af 	movw	r2, #39599	; 0x9aaf
 8012fc6:	4293      	cmp	r3, r2
 8012fc8:	d80a      	bhi.n	8012fe0 <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8012fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012fce:	e000      	b.n	8012fd2 <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8012fd0:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 8012fd2:	4298      	cmp	r0, r3
 8012fd4:	bf38      	it	cc
 8012fd6:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 8012fd8:	b900      	cbnz	r0, 8012fdc <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 8012fda:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 8012fdc:	b002      	add	sp, #8
 8012fde:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8012fe0:	f242 7310 	movw	r3, #10000	; 0x2710
 8012fe4:	e7f5      	b.n	8012fd2 <GetDutyCycle+0x26>

08012fe6 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8012fe6:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 8012fe8:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 8012fea:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 8012fec:	e001      	b.n	8012ff2 <CountChannels+0xc>
 8012fee:	3301      	adds	r3, #1
 8012ff0:	b2db      	uxtb	r3, r3
 8012ff2:	428b      	cmp	r3, r1
 8012ff4:	d207      	bcs.n	8013006 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8012ff6:	2201      	movs	r2, #1
 8012ff8:	409a      	lsls	r2, r3
 8012ffa:	ea32 020c 	bics.w	r2, r2, ip
 8012ffe:	d1f6      	bne.n	8012fee <CountChannels+0x8>
        {
            nbActiveBits++;
 8013000:	3001      	adds	r0, #1
 8013002:	b2c0      	uxtb	r0, r0
 8013004:	e7f3      	b.n	8012fee <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 8013006:	4770      	bx	lr

08013008 <SetMaxTimeCredits>:
{
 8013008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801300c:	b089      	sub	sp, #36	; 0x24
 801300e:	4604      	mov	r4, r0
 8013010:	460e      	mov	r6, r1
 8013012:	ad02      	add	r5, sp, #8
 8013014:	e885 000c 	stmia.w	r5, {r2, r3}
 8013018:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 801301c:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 8013020:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013024:	f003 fd4a 	bl	8016abc <SysTimeToMs>
 8013028:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 801302a:	2300      	movs	r3, #0
 801302c:	9304      	str	r3, [sp, #16]
 801302e:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013030:	e895 000c 	ldmia.w	r5, {r2, r3}
 8013034:	4631      	mov	r1, r6
 8013036:	4620      	mov	r0, r4
 8013038:	f7ff ffb8 	bl	8012fac <GetDutyCycle>
 801303c:	4605      	mov	r5, r0
    if( joined == false )
 801303e:	2e00      	cmp	r6, #0
 8013040:	d14c      	bne.n	80130dc <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 8013042:	2864      	cmp	r0, #100	; 0x64
 8013044:	d025      	beq.n	8013092 <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013046:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 801304a:	d025      	beq.n	8013098 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 801304c:	4e27      	ldr	r6, [pc, #156]	; (80130ec <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 801304e:	68a1      	ldr	r1, [r4, #8]
 8013050:	a806      	add	r0, sp, #24
 8013052:	f003 fd53 	bl	8016afc <SysTimeFromMs>
 8013056:	9b07      	ldr	r3, [sp, #28]
 8013058:	9300      	str	r3, [sp, #0]
 801305a:	9b06      	ldr	r3, [sp, #24]
 801305c:	aa02      	add	r2, sp, #8
 801305e:	ca06      	ldmia	r2, {r1, r2}
 8013060:	a804      	add	r0, sp, #16
 8013062:	f003 fcb2 	bl	80169ca <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8013066:	f1b8 0f00 	cmp.w	r8, #0
 801306a:	d102      	bne.n	8013072 <SetMaxTimeCredits+0x6a>
 801306c:	f1b9 0f00 	cmp.w	r9, #0
 8013070:	d002      	beq.n	8013078 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 8013072:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 8013074:	42b3      	cmp	r3, r6
 8013076:	d012      	beq.n	801309e <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 8013078:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801307a:	9b02      	ldr	r3, [sp, #8]
 801307c:	4a1c      	ldr	r2, [pc, #112]	; (80130f0 <SetMaxTimeCredits+0xe8>)
 801307e:	4293      	cmp	r3, r2
 8013080:	d812      	bhi.n	80130a8 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 8013082:	6863      	ldr	r3, [r4, #4]
 8013084:	b903      	cbnz	r3, 8013088 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 8013086:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 8013088:	6126      	str	r6, [r4, #16]
}
 801308a:	4628      	mov	r0, r5
 801308c:	b009      	add	sp, #36	; 0x24
 801308e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 8013092:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 8013094:	4e17      	ldr	r6, [pc, #92]	; (80130f4 <SetMaxTimeCredits+0xec>)
 8013096:	e7da      	b.n	801304e <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 8013098:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 801309a:	4e17      	ldr	r6, [pc, #92]	; (80130f8 <SetMaxTimeCredits+0xf0>)
 801309c:	e7d7      	b.n	801304e <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 801309e:	9a04      	ldr	r2, [sp, #16]
 80130a0:	4b16      	ldr	r3, [pc, #88]	; (80130fc <SetMaxTimeCredits+0xf4>)
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d9ed      	bls.n	8013082 <SetMaxTimeCredits+0x7a>
 80130a6:	e7e7      	b.n	8013078 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 80130a8:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 80130ac:	3b30      	subs	r3, #48	; 0x30
 80130ae:	4a14      	ldr	r2, [pc, #80]	; (8013100 <SetMaxTimeCredits+0xf8>)
 80130b0:	fba2 2303 	umull	r2, r3, r2, r3
 80130b4:	0c1b      	lsrs	r3, r3, #16
 80130b6:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 80130b8:	4a12      	ldr	r2, [pc, #72]	; (8013104 <SetMaxTimeCredits+0xfc>)
 80130ba:	fb02 f303 	mul.w	r3, r2, r3
 80130be:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 80130c0:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 80130c4:	3330      	adds	r3, #48	; 0x30
 80130c6:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 80130c8:	2300      	movs	r3, #0
 80130ca:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 80130ce:	ab04      	add	r3, sp, #16
 80130d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80130d4:	f003 fcf2 	bl	8016abc <SysTimeToMs>
 80130d8:	60a0      	str	r0, [r4, #8]
 80130da:	e7d2      	b.n	8013082 <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 80130dc:	f1b8 0f00 	cmp.w	r8, #0
 80130e0:	d102      	bne.n	80130e8 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 80130e2:	4e04      	ldr	r6, [pc, #16]	; (80130f4 <SetMaxTimeCredits+0xec>)
 80130e4:	60e6      	str	r6, [r4, #12]
 80130e6:	e7cc      	b.n	8013082 <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80130e8:	4e02      	ldr	r6, [pc, #8]	; (80130f4 <SetMaxTimeCredits+0xec>)
 80130ea:	e7ca      	b.n	8013082 <SetMaxTimeCredits+0x7a>
 80130ec:	02932e00 	.word	0x02932e00
 80130f0:	0001ec2f 	.word	0x0001ec2f
 80130f4:	001b7740 	.word	0x001b7740
 80130f8:	0112a880 	.word	0x0112a880
 80130fc:	0001517f 	.word	0x0001517f
 8013100:	c22e4507 	.word	0xc22e4507
 8013104:	00015180 	.word	0x00015180

08013108 <UpdateTimeCredits>:
{
 8013108:	b570      	push	{r4, r5, r6, lr}
 801310a:	b082      	sub	sp, #8
 801310c:	4604      	mov	r4, r0
 801310e:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 8013110:	9301      	str	r3, [sp, #4]
 8013112:	9200      	str	r2, [sp, #0]
 8013114:	ab06      	add	r3, sp, #24
 8013116:	cb0c      	ldmia	r3, {r2, r3}
 8013118:	f7ff ff76 	bl	8013008 <SetMaxTimeCredits>
 801311c:	4605      	mov	r5, r0
    if( joined == true )
 801311e:	b94e      	cbnz	r6, 8013134 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 8013120:	68e2      	ldr	r2, [r4, #12]
 8013122:	6923      	ldr	r3, [r4, #16]
 8013124:	429a      	cmp	r2, r3
 8013126:	d900      	bls.n	801312a <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 8013128:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 801312a:	9b08      	ldr	r3, [sp, #32]
 801312c:	6063      	str	r3, [r4, #4]
}
 801312e:	4628      	mov	r0, r5
 8013130:	b002      	add	sp, #8
 8013132:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8013134:	6860      	ldr	r0, [r4, #4]
 8013136:	f003 fd41 	bl	8016bbc <UTIL_TIMER_GetElapsedTime>
 801313a:	68e3      	ldr	r3, [r4, #12]
 801313c:	4403      	add	r3, r0
 801313e:	60e3      	str	r3, [r4, #12]
 8013140:	e7ee      	b.n	8013120 <UpdateTimeCredits+0x18>

08013142 <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 8013142:	4288      	cmp	r0, r1
 8013144:	db03      	blt.n	801314e <RegionCommonValueInRange+0xc>
 8013146:	4290      	cmp	r0, r2
 8013148:	dd03      	ble.n	8013152 <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 801314a:	2000      	movs	r0, #0
 801314c:	4770      	bx	lr
 801314e:	2000      	movs	r0, #0
 8013150:	4770      	bx	lr
        return 1;
 8013152:	2001      	movs	r0, #1
}
 8013154:	4770      	bx	lr

08013156 <RegionCommonChanVerifyDr>:
{
 8013156:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801315a:	4682      	mov	sl, r0
 801315c:	460e      	mov	r6, r1
 801315e:	4690      	mov	r8, r2
 8013160:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8013164:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 8013168:	4619      	mov	r1, r3
 801316a:	4640      	mov	r0, r8
 801316c:	f7ff ffe9 	bl	8013142 <RegionCommonValueInRange>
 8013170:	b338      	cbz	r0, 80131c2 <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8013172:	2500      	movs	r5, #0
 8013174:	462f      	mov	r7, r5
 8013176:	e01e      	b.n	80131b6 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 8013178:	3401      	adds	r4, #1
 801317a:	b2e4      	uxtb	r4, r4
 801317c:	2c0f      	cmp	r4, #15
 801317e:	d816      	bhi.n	80131ae <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8013180:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 8013184:	4123      	asrs	r3, r4
 8013186:	f013 0f01 	tst.w	r3, #1
 801318a:	d0f5      	beq.n	8013178 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 801318c:	193b      	adds	r3, r7, r4
 801318e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013192:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8013196:	7a19      	ldrb	r1, [r3, #8]
 8013198:	090a      	lsrs	r2, r1, #4
 801319a:	f001 010f 	and.w	r1, r1, #15
 801319e:	4640      	mov	r0, r8
 80131a0:	f7ff ffcf 	bl	8013142 <RegionCommonValueInRange>
 80131a4:	2801      	cmp	r0, #1
 80131a6:	d1e7      	bne.n	8013178 <RegionCommonChanVerifyDr+0x22>
                    return true;
 80131a8:	2001      	movs	r0, #1
}
 80131aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 80131ae:	3710      	adds	r7, #16
 80131b0:	b2ff      	uxtb	r7, r7
 80131b2:	3501      	adds	r5, #1
 80131b4:	b2ed      	uxtb	r5, r5
 80131b6:	4557      	cmp	r7, sl
 80131b8:	d201      	bcs.n	80131be <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 80131ba:	2400      	movs	r4, #0
 80131bc:	e7de      	b.n	801317c <RegionCommonChanVerifyDr+0x26>
    return false;
 80131be:	2000      	movs	r0, #0
 80131c0:	e7f3      	b.n	80131aa <RegionCommonChanVerifyDr+0x54>
        return false;
 80131c2:	2000      	movs	r0, #0
 80131c4:	e7f1      	b.n	80131aa <RegionCommonChanVerifyDr+0x54>

080131c6 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80131c6:	0913      	lsrs	r3, r2, #4
 80131c8:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 80131cc:	d313      	bcc.n	80131f6 <RegionCommonChanDisable+0x30>
{
 80131ce:	b500      	push	{lr}
 80131d0:	4684      	mov	ip, r0
 80131d2:	ea4f 1e11 	mov.w	lr, r1, lsr #4
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 80131d6:	4291      	cmp	r1, r2
 80131d8:	d20f      	bcs.n	80131fa <RegionCommonChanDisable+0x34>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 80131da:	f001 030f 	and.w	r3, r1, #15
 80131de:	2001      	movs	r0, #1
 80131e0:	fa00 f303 	lsl.w	r3, r0, r3
 80131e4:	43db      	mvns	r3, r3
 80131e6:	b21b      	sxth	r3, r3
 80131e8:	f83c 201e 	ldrh.w	r2, [ip, lr, lsl #1]
 80131ec:	4013      	ands	r3, r2
 80131ee:	f82c 301e 	strh.w	r3, [ip, lr, lsl #1]

    return true;
}
 80131f2:	f85d fb04 	ldr.w	pc, [sp], #4
        return false;
 80131f6:	2000      	movs	r0, #0
}
 80131f8:	4770      	bx	lr
        return false;
 80131fa:	2000      	movs	r0, #0
 80131fc:	e7f9      	b.n	80131f2 <RegionCommonChanDisable+0x2c>

080131fe <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 80131fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 8013200:	b188      	cbz	r0, 8013226 <RegionCommonCountChannels+0x28>
 8013202:	460c      	mov	r4, r1
 8013204:	4616      	mov	r6, r2
 8013206:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 8013208:	2500      	movs	r5, #0
 801320a:	e008      	b.n	801321e <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 801320c:	2110      	movs	r1, #16
 801320e:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8013212:	f7ff fee8 	bl	8012fe6 <CountChannels>
 8013216:	4405      	add	r5, r0
 8013218:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 801321a:	3401      	adds	r4, #1
 801321c:	b2e4      	uxtb	r4, r4
 801321e:	42b4      	cmp	r4, r6
 8013220:	d3f4      	bcc.n	801320c <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 8013222:	4628      	mov	r0, r5
 8013224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 8013226:	2500      	movs	r5, #0
 8013228:	e7fb      	b.n	8013222 <RegionCommonCountChannels+0x24>

0801322a <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 801322a:	4684      	mov	ip, r0
 801322c:	b158      	cbz	r0, 8013246 <RegionCommonChanMaskCopy+0x1c>
 801322e:	b109      	cbz	r1, 8013234 <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 8013230:	2300      	movs	r3, #0
 8013232:	e006      	b.n	8013242 <RegionCommonChanMaskCopy+0x18>
 8013234:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8013236:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 801323a:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 801323e:	3301      	adds	r3, #1
 8013240:	b2db      	uxtb	r3, r3
 8013242:	4293      	cmp	r3, r2
 8013244:	d3f7      	bcc.n	8013236 <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 8013246:	4770      	bx	lr

08013248 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8013248:	b082      	sub	sp, #8
 801324a:	b538      	push	{r3, r4, r5, lr}
 801324c:	4604      	mov	r4, r0
 801324e:	460d      	mov	r5, r1
 8013250:	4611      	mov	r1, r2
 8013252:	aa04      	add	r2, sp, #16
 8013254:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8013258:	ca0c      	ldmia	r2, {r2, r3}
 801325a:	f7ff fea7 	bl	8012fac <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 801325e:	68e3      	ldr	r3, [r4, #12]
 8013260:	fb05 f100 	mul.w	r1, r5, r0
 8013264:	428b      	cmp	r3, r1
 8013266:	d905      	bls.n	8013274 <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8013268:	1a5b      	subs	r3, r3, r1
 801326a:	60e3      	str	r3, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 801326c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013270:	b002      	add	sp, #8
 8013272:	4770      	bx	lr
        band->TimeCredits = 0;
 8013274:	2300      	movs	r3, #0
 8013276:	60e3      	str	r3, [r4, #12]
}
 8013278:	e7f8      	b.n	801326c <RegionCommonSetBandTxDone+0x24>
	...

0801327c <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 801327c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013280:	b089      	sub	sp, #36	; 0x24
 8013282:	4607      	mov	r7, r0
 8013284:	468b      	mov	fp, r1
 8013286:	4691      	mov	r9, r2
 8013288:	4698      	mov	r8, r3
 801328a:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 801328e:	f003 fc8b 	bl	8016ba8 <UTIL_TIMER_GetCurrentTime>
 8013292:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 8013294:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 8013296:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8013298:	f04f 33ff 	mov.w	r3, #4294967295
 801329c:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 801329e:	e005      	b.n	80132ac <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 80132a0:	2301      	movs	r3, #1
 80132a2:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 80132a4:	441e      	add	r6, r3
 80132a6:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 80132a8:	3401      	adds	r4, #1
 80132aa:	b2e4      	uxtb	r4, r4
 80132ac:	454c      	cmp	r4, r9
 80132ae:	d25d      	bcs.n	801336c <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 80132b0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80132b4:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 80132b8:	9b04      	ldr	r3, [sp, #16]
 80132ba:	9302      	str	r3, [sp, #8]
 80132bc:	ab13      	add	r3, sp, #76	; 0x4c
 80132be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80132c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80132c6:	4653      	mov	r3, sl
 80132c8:	4642      	mov	r2, r8
 80132ca:	4639      	mov	r1, r7
 80132cc:	4628      	mov	r0, r5
 80132ce:	f7ff ff1b 	bl	8013108 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 80132d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132d4:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 80132d8:	68ea      	ldr	r2, [r5, #12]
 80132da:	429a      	cmp	r2, r3
 80132dc:	d2e0      	bcs.n	80132a0 <RegionCommonUpdateBandTimeOff+0x24>
 80132de:	f1b8 0f00 	cmp.w	r8, #0
 80132e2:	d101      	bne.n	80132e8 <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 80132e4:	2f00      	cmp	r7, #0
 80132e6:	d1db      	bne.n	80132a0 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 80132e8:	2100      	movs	r1, #0
 80132ea:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 80132ec:	6929      	ldr	r1, [r5, #16]
 80132ee:	4299      	cmp	r1, r3
 80132f0:	d307      	bcc.n	8013302 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 80132f2:	1a9b      	subs	r3, r3, r2
 80132f4:	9a05      	ldr	r2, [sp, #20]
 80132f6:	429a      	cmp	r2, r3
 80132f8:	bf28      	it	cs
 80132fa:	461a      	movcs	r2, r3
 80132fc:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 80132fe:	3601      	adds	r6, #1
 8013300:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8013302:	2f00      	cmp	r7, #0
 8013304:	d1d0      	bne.n	80132a8 <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 8013306:	2300      	movs	r3, #0
 8013308:	9306      	str	r3, [sp, #24]
 801330a:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 801330e:	2864      	cmp	r0, #100	; 0x64
 8013310:	d024      	beq.n	801335c <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8013312:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8013316:	d025      	beq.n	8013364 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8013318:	4b19      	ldr	r3, [pc, #100]	; (8013380 <RegionCommonUpdateBandTimeOff+0x104>)
 801331a:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 801331c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801331e:	4a18      	ldr	r2, [pc, #96]	; (8013380 <RegionCommonUpdateBandTimeOff+0x104>)
 8013320:	4293      	cmp	r3, r2
 8013322:	d90c      	bls.n	801333e <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8013324:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 8013328:	3b30      	subs	r3, #48	; 0x30
 801332a:	4a16      	ldr	r2, [pc, #88]	; (8013384 <RegionCommonUpdateBandTimeOff+0x108>)
 801332c:	fba2 2303 	umull	r2, r3, r2, r3
 8013330:	0c1b      	lsrs	r3, r3, #16
 8013332:	4a15      	ldr	r2, [pc, #84]	; (8013388 <RegionCommonUpdateBandTimeOff+0x10c>)
 8013334:	fb03 2202 	mla	r2, r3, r2, r2
 8013338:	9b06      	ldr	r3, [sp, #24]
 801333a:	4413      	add	r3, r2
 801333c:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 801333e:	ad06      	add	r5, sp, #24
 8013340:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013342:	9300      	str	r3, [sp, #0]
 8013344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013346:	e895 0006 	ldmia.w	r5, {r1, r2}
 801334a:	4628      	mov	r0, r5
 801334c:	f003 fb3d 	bl	80169ca <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8013350:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013354:	f003 fbb2 	bl	8016abc <SysTimeToMs>
 8013358:	9005      	str	r0, [sp, #20]
 801335a:	e7a5      	b.n	80132a8 <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 801335c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8013360:	9306      	str	r3, [sp, #24]
 8013362:	e7db      	b.n	801331c <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8013364:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 8013368:	9306      	str	r3, [sp, #24]
 801336a:	e7d7      	b.n	801331c <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 801336c:	b11e      	cbz	r6, 8013376 <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 801336e:	9805      	ldr	r0, [sp, #20]
 8013370:	b009      	add	sp, #36	; 0x24
 8013372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 8013376:	f04f 33ff 	mov.w	r3, #4294967295
 801337a:	9305      	str	r3, [sp, #20]
 801337c:	e7f7      	b.n	801336e <RegionCommonUpdateBandTimeOff+0xf2>
 801337e:	bf00      	nop
 8013380:	0001ec30 	.word	0x0001ec30
 8013384:	c22e4507 	.word	0xc22e4507
 8013388:	00015180 	.word	0x00015180

0801338c <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 801338c:	7803      	ldrb	r3, [r0, #0]
 801338e:	2b03      	cmp	r3, #3
 8013390:	d001      	beq.n	8013396 <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 8013392:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 8013394:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 8013396:	7842      	ldrb	r2, [r0, #1]
 8013398:	f990 3001 	ldrsb.w	r3, [r0, #1]
 801339c:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 801339e:	f003 030f 	and.w	r3, r3, #15
 80133a2:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 80133a4:	0913      	lsrs	r3, r2, #4
 80133a6:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 80133a8:	7883      	ldrb	r3, [r0, #2]
 80133aa:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 80133ac:	78c2      	ldrb	r2, [r0, #3]
 80133ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80133b2:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 80133b4:	7903      	ldrb	r3, [r0, #4]
 80133b6:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 80133b8:	f3c3 1202 	ubfx	r2, r3, #4, #3
 80133bc:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 80133be:	f003 030f 	and.w	r3, r3, #15
 80133c2:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 80133c4:	2005      	movs	r0, #5
 80133c6:	4770      	bx	lr

080133c8 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 80133c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133cc:	b085      	sub	sp, #20
 80133ce:	4604      	mov	r4, r0
 80133d0:	4688      	mov	r8, r1
 80133d2:	4617      	mov	r7, r2
 80133d4:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 80133d6:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 80133d8:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 80133dc:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 80133e0:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 80133e4:	7943      	ldrb	r3, [r0, #5]
 80133e6:	b92b      	cbnz	r3, 80133f4 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 80133e8:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 80133ec:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 80133f0:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 80133f4:	b355      	cbz	r5, 801344c <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 80133f6:	f1ba 0f0f 	cmp.w	sl, #15
 80133fa:	d114      	bne.n	8013426 <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 80133fc:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 8013400:	f1b9 0f0f 	cmp.w	r9, #15
 8013404:	d020      	beq.n	8013448 <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 8013406:	f994 301d 	ldrsb.w	r3, [r4, #29]
 801340a:	9303      	str	r3, [sp, #12]
 801340c:	f994 201c 	ldrsb.w	r2, [r4, #28]
 8013410:	461c      	mov	r4, r3
 8013412:	4619      	mov	r1, r3
 8013414:	4648      	mov	r0, r9
 8013416:	f7ff fe94 	bl	8013142 <RegionCommonValueInRange>
 801341a:	b9b8      	cbnz	r0, 801344c <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 801341c:	454c      	cmp	r4, r9
 801341e:	dc21      	bgt.n	8013464 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 8013420:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 8013424:	e012      	b.n	801344c <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 8013426:	69a3      	ldr	r3, [r4, #24]
 8013428:	9301      	str	r3, [sp, #4]
 801342a:	f994 3015 	ldrsb.w	r3, [r4, #21]
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8013434:	4652      	mov	r2, sl
 8013436:	6921      	ldr	r1, [r4, #16]
 8013438:	7b20      	ldrb	r0, [r4, #12]
 801343a:	f7ff fe8c 	bl	8013156 <RegionCommonChanVerifyDr>
 801343e:	2800      	cmp	r0, #0
 8013440:	d1de      	bne.n	8013400 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 8013442:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8013446:	e7db      	b.n	8013400 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 8013448:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 801344c:	2d07      	cmp	r5, #7
 801344e:	d00c      	beq.n	801346a <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 8013450:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 8013454:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 8013458:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 801345c:	4628      	mov	r0, r5
 801345e:	b005      	add	sp, #20
 8013460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 8013464:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013468:	e7f0      	b.n	801344c <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 801346a:	f1bb 0f00 	cmp.w	fp, #0
 801346e:	d1ef      	bne.n	8013450 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 8013470:	f04f 0b01 	mov.w	fp, #1
 8013474:	e7ec      	b.n	8013450 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

08013478 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 8013478:	4b02      	ldr	r3, [pc, #8]	; (8013484 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 801347a:	fa03 f000 	lsl.w	r0, r3, r0
}
 801347e:	fbb0 f0f1 	udiv	r0, r0, r1
 8013482:	4770      	bx	lr
 8013484:	000f4240 	.word	0x000f4240

08013488 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 8013488:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801348c:	fbb3 f0f0 	udiv	r0, r3, r0
 8013490:	4770      	bx	lr
	...

08013494 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8013494:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8013496:	f1a1 0c04 	sub.w	ip, r1, #4
 801349a:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 801349e:	fb0e f202 	mul.w	r2, lr, r2
 80134a2:	fb00 220c 	mla	r2, r0, ip, r2
 80134a6:	0052      	lsls	r2, r2, #1
 80134a8:	d021      	beq.n	80134ee <RegionCommonComputeRxWindowParameters+0x5a>
 80134aa:	4402      	add	r2, r0
 80134ac:	3a01      	subs	r2, #1
 80134ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80134b2:	4291      	cmp	r1, r2
 80134b4:	bf38      	it	cc
 80134b6:	4611      	movcc	r1, r2
 80134b8:	9a01      	ldr	r2, [sp, #4]
 80134ba:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80134bc:	0082      	lsls	r2, r0, #2
 80134be:	fb01 f000 	mul.w	r0, r1, r0
 80134c2:	b1b8      	cbz	r0, 80134f4 <RegionCommonComputeRxWindowParameters+0x60>
 80134c4:	3001      	adds	r0, #1
 80134c6:	0840      	lsrs	r0, r0, #1
 80134c8:	1a12      	subs	r2, r2, r0
 80134ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80134ce:	fb01 2313 	mls	r3, r1, r3, r2
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	dd10      	ble.n	80134f8 <RegionCommonComputeRxWindowParameters+0x64>
 80134d6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80134da:	4a0b      	ldr	r2, [pc, #44]	; (8013508 <RegionCommonComputeRxWindowParameters+0x74>)
 80134dc:	fb82 1203 	smull	r1, r2, r2, r3
 80134e0:	17db      	asrs	r3, r3, #31
 80134e2:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 80134e6:	9a02      	ldr	r2, [sp, #8]
 80134e8:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 80134ea:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 80134ee:	fbb2 f2f0 	udiv	r2, r2, r0
 80134f2:	e7de      	b.n	80134b2 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 80134f4:	0840      	lsrs	r0, r0, #1
 80134f6:	e7e7      	b.n	80134c8 <RegionCommonComputeRxWindowParameters+0x34>
 80134f8:	4a03      	ldr	r2, [pc, #12]	; (8013508 <RegionCommonComputeRxWindowParameters+0x74>)
 80134fa:	fb82 1203 	smull	r1, r2, r2, r3
 80134fe:	17db      	asrs	r3, r3, #31
 8013500:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8013504:	e7ef      	b.n	80134e6 <RegionCommonComputeRxWindowParameters+0x52>
 8013506:	bf00      	nop
 8013508:	10624dd3 	.word	0x10624dd3

0801350c <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 801350c:	b538      	push	{r3, r4, r5, lr}
 801350e:	460d      	mov	r5, r1
 8013510:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8013512:	0040      	lsls	r0, r0, #1
 8013514:	f7ed fc46 	bl	8000da4 <__aeabi_ui2f>
 8013518:	4601      	mov	r1, r0
 801351a:	4628      	mov	r0, r5
 801351c:	f7ed fb90 	bl	8000c40 <__aeabi_fsub>
 8013520:	4621      	mov	r1, r4
 8013522:	f7ed fb8d 	bl	8000c40 <__aeabi_fsub>
 8013526:	f7ec ffe7 	bl	80004f8 <__aeabi_f2d>
 801352a:	f008 fdb1 	bl	801c090 <floor>
 801352e:	f7ed faeb 	bl	8000b08 <__aeabi_d2iz>

    return phyTxPower;
}
 8013532:	b240      	sxtb	r0, r0
 8013534:	bd38      	pop	{r3, r4, r5, pc}

08013536 <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 8013536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801353a:	b083      	sub	sp, #12
 801353c:	4605      	mov	r5, r0
 801353e:	468b      	mov	fp, r1
 8013540:	9200      	str	r2, [sp, #0]
 8013542:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8013544:	2600      	movs	r6, #0
 8013546:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 8013548:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 801354a:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 801354c:	e049      	b.n	80135e2 <RegionCommonCountNbOfEnabledChannels+0xac>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 801354e:	7a3a      	ldrb	r2, [r7, #8]
 8013550:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8013554:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8013558:	b252      	sxtb	r2, r2
 801355a:	b249      	sxtb	r1, r1
 801355c:	f995 0001 	ldrsb.w	r0, [r5, #1]
 8013560:	f7ff fdef 	bl	8013142 <RegionCommonValueInRange>
 8013564:	b178      	cbz	r0, 8013586 <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 8013566:	68ea      	ldr	r2, [r5, #12]
 8013568:	7a7b      	ldrb	r3, [r7, #9]
 801356a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801356e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8013572:	7d13      	ldrb	r3, [r2, #20]
 8013574:	b353      	cbz	r3, 80135cc <RegionCommonCountNbOfEnabledChannels+0x96>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 8013576:	f109 0301 	add.w	r3, r9, #1
 801357a:	eb08 0204 	add.w	r2, r8, r4
 801357e:	f80b 2009 	strb.w	r2, [fp, r9]
 8013582:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 8013586:	3401      	adds	r4, #1
 8013588:	b2e4      	uxtb	r4, r4
 801358a:	2c0f      	cmp	r4, #15
 801358c:	d823      	bhi.n	80135d6 <RegionCommonCountNbOfEnabledChannels+0xa0>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 801358e:	686b      	ldr	r3, [r5, #4]
 8013590:	0072      	lsls	r2, r6, #1
 8013592:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 8013596:	4123      	asrs	r3, r4
 8013598:	f013 0f01 	tst.w	r3, #1
 801359c:	d0f3      	beq.n	8013586 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 801359e:	68a8      	ldr	r0, [r5, #8]
 80135a0:	eb08 0304 	add.w	r3, r8, r4
 80135a4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80135a8:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 80135ac:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d0e8      	beq.n	8013586 <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80135b4:	782b      	ldrb	r3, [r5, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d1c9      	bne.n	801354e <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 80135ba:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d0c6      	beq.n	801354e <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 80135c0:	5a9b      	ldrh	r3, [r3, r2]
 80135c2:	4123      	asrs	r3, r4
 80135c4:	f013 0f01 	tst.w	r3, #1
 80135c8:	d1c1      	bne.n	801354e <RegionCommonCountNbOfEnabledChannels+0x18>
 80135ca:	e7dc      	b.n	8013586 <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 80135cc:	f10a 0a01 	add.w	sl, sl, #1
 80135d0:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 80135d4:	e7d7      	b.n	8013586 <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80135d6:	f108 0810 	add.w	r8, r8, #16
 80135da:	fa5f f888 	uxtb.w	r8, r8
 80135de:	3601      	adds	r6, #1
 80135e0:	b2f6      	uxtb	r6, r6
 80135e2:	8a2b      	ldrh	r3, [r5, #16]
 80135e4:	fa1f f288 	uxth.w	r2, r8
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d201      	bcs.n	80135f0 <RegionCommonCountNbOfEnabledChannels+0xba>
        for( uint8_t j = 0; j < 16; j++ )
 80135ec:	2400      	movs	r4, #0
 80135ee:	e7cc      	b.n	801358a <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 80135f0:	9b00      	ldr	r3, [sp, #0]
 80135f2:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 80135f6:	9b01      	ldr	r3, [sp, #4]
 80135f8:	f883 a000 	strb.w	sl, [r3]
}
 80135fc:	b003      	add	sp, #12
 80135fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013602 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 8013602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013606:	b085      	sub	sp, #20
 8013608:	4604      	mov	r4, r0
 801360a:	460f      	mov	r7, r1
 801360c:	4616      	mov	r6, r2
 801360e:	461d      	mov	r5, r3
 8013610:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8013614:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 8013618:	6840      	ldr	r0, [r0, #4]
 801361a:	f003 facf 	bl	8016bbc <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 801361e:	6823      	ldr	r3, [r4, #0]
 8013620:	1a1b      	subs	r3, r3, r0
 8013622:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 8013626:	2301      	movs	r3, #1
 8013628:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 801362c:	2300      	movs	r3, #0
 801362e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013630:	6863      	ldr	r3, [r4, #4]
 8013632:	b113      	cbz	r3, 801363a <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8013634:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8013636:	4283      	cmp	r3, r0
 8013638:	d81e      	bhi.n	8013678 <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 801363a:	2300      	movs	r3, #0
 801363c:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 801363e:	69e3      	ldr	r3, [r4, #28]
 8013640:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8013644:	781f      	ldrb	r7, [r3, #0]
 8013646:	69a3      	ldr	r3, [r4, #24]
 8013648:	9303      	str	r3, [sp, #12]
 801364a:	ab01      	add	r3, sp, #4
 801364c:	f104 020c 	add.w	r2, r4, #12
 8013650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013654:	e883 0003 	stmia.w	r3, {r0, r1}
 8013658:	7d23      	ldrb	r3, [r4, #20]
 801365a:	9300      	str	r3, [sp, #0]
 801365c:	7a23      	ldrb	r3, [r4, #8]
 801365e:	7a62      	ldrb	r2, [r4, #9]
 8013660:	4661      	mov	r1, ip
 8013662:	4638      	mov	r0, r7
 8013664:	f7ff fe0a 	bl	801327c <RegionCommonUpdateBandTimeOff>
 8013668:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 801366c:	4643      	mov	r3, r8
 801366e:	462a      	mov	r2, r5
 8013670:	4631      	mov	r1, r6
 8013672:	69e0      	ldr	r0, [r4, #28]
 8013674:	f7ff ff5f 	bl	8013536 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 8013678:	782b      	ldrb	r3, [r5, #0]
 801367a:	b923      	cbnz	r3, 8013686 <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 801367c:	f898 3000 	ldrb.w	r3, [r8]
 8013680:	b13b      	cbz	r3, 8013692 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8013682:	200b      	movs	r0, #11
 8013684:	e002      	b.n	801368c <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 8013686:	2000      	movs	r0, #0
 8013688:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 801368c:	b005      	add	sp, #20
 801368e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8013692:	200c      	movs	r0, #12
 8013694:	e7fa      	b.n	801368c <RegionCommonIdentifyChannels+0x8a>

08013696 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8013696:	b570      	push	{r4, r5, r6, lr}
 8013698:	b082      	sub	sp, #8
 801369a:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 801369c:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 80136a0:	f990 6002 	ldrsb.w	r6, [r0, #2]
 80136a4:	42a6      	cmp	r6, r4
 80136a6:	d011      	beq.n	80136cc <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 80136a8:	3c01      	subs	r4, #1
 80136aa:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 80136ac:	42a6      	cmp	r6, r4
 80136ae:	d00e      	beq.n	80136ce <RegionCommonGetNextLowerTxDr+0x38>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 80136b0:	68ab      	ldr	r3, [r5, #8]
 80136b2:	9301      	str	r3, [sp, #4]
 80136b4:	f995 3001 	ldrsb.w	r3, [r5, #1]
 80136b8:	9300      	str	r3, [sp, #0]
 80136ba:	4633      	mov	r3, r6
 80136bc:	4622      	mov	r2, r4
 80136be:	6869      	ldr	r1, [r5, #4]
 80136c0:	78e8      	ldrb	r0, [r5, #3]
 80136c2:	f7ff fd48 	bl	8013156 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 80136c6:	2800      	cmp	r0, #0
 80136c8:	d0ee      	beq.n	80136a8 <RegionCommonGetNextLowerTxDr+0x12>
 80136ca:	e000      	b.n	80136ce <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 80136cc:	4634      	mov	r4, r6

        return drLocal;
    }
}
 80136ce:	4620      	mov	r0, r4
 80136d0:	b002      	add	sp, #8
 80136d2:	bd70      	pop	{r4, r5, r6, pc}

080136d4 <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 80136d4:	4288      	cmp	r0, r1
 80136d6:	bfb8      	it	lt
 80136d8:	4608      	movlt	r0, r1
 80136da:	4770      	bx	lr

080136dc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 80136dc:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 80136e0:	4a05      	ldr	r2, [pc, #20]	; (80136f8 <RegionCommonGetBandwidth+0x1c>)
 80136e2:	4293      	cmp	r3, r2
 80136e4:	d004      	beq.n	80136f0 <RegionCommonGetBandwidth+0x14>
 80136e6:	4a05      	ldr	r2, [pc, #20]	; (80136fc <RegionCommonGetBandwidth+0x20>)
 80136e8:	4293      	cmp	r3, r2
 80136ea:	d103      	bne.n	80136f4 <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 80136ec:	2002      	movs	r0, #2
 80136ee:	4770      	bx	lr
            return 1;
 80136f0:	2001      	movs	r0, #1
 80136f2:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 80136f4:	2000      	movs	r0, #0
    }
}
 80136f6:	4770      	bx	lr
 80136f8:	0003d090 	.word	0x0003d090
 80136fc:	0007a120 	.word	0x0007a120

08013700 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8013700:	b500      	push	{lr}
 8013702:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 8013704:	2805      	cmp	r0, #5
 8013706:	d80e      	bhi.n	8013726 <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 8013708:	9202      	str	r2, [sp, #8]
 801370a:	9101      	str	r1, [sp, #4]
 801370c:	4b0a      	ldr	r3, [pc, #40]	; (8013738 <RegionCommonRxConfigPrint+0x38>)
 801370e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8013712:	9300      	str	r3, [sp, #0]
 8013714:	4b09      	ldr	r3, [pc, #36]	; (801373c <RegionCommonRxConfigPrint+0x3c>)
 8013716:	2201      	movs	r2, #1
 8013718:	2100      	movs	r1, #0
 801371a:	2002      	movs	r0, #2
 801371c:	f002 ff32 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 8013720:	b005      	add	sp, #20
 8013722:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 8013726:	9201      	str	r2, [sp, #4]
 8013728:	9100      	str	r1, [sp, #0]
 801372a:	4b05      	ldr	r3, [pc, #20]	; (8013740 <RegionCommonRxConfigPrint+0x40>)
 801372c:	2201      	movs	r2, #1
 801372e:	2100      	movs	r1, #0
 8013730:	2002      	movs	r0, #2
 8013732:	f002 ff27 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8013736:	e7f3      	b.n	8013720 <RegionCommonRxConfigPrint+0x20>
 8013738:	0801e39c 	.word	0x0801e39c
 801373c:	0801e334 	.word	0x0801e334
 8013740:	0801e354 	.word	0x0801e354

08013744 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8013744:	b500      	push	{lr}
 8013746:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8013748:	9101      	str	r1, [sp, #4]
 801374a:	9000      	str	r0, [sp, #0]
 801374c:	4b04      	ldr	r3, [pc, #16]	; (8013760 <RegionCommonTxConfigPrint+0x1c>)
 801374e:	2201      	movs	r2, #1
 8013750:	2100      	movs	r1, #0
 8013752:	2002      	movs	r0, #2
 8013754:	f002 ff16 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8013758:	b003      	add	sp, #12
 801375a:	f85d fb04 	ldr.w	pc, [sp], #4
 801375e:	bf00      	nop
 8013760:	0801e370 	.word	0x0801e370

08013764 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8013764:	b510      	push	{r4, lr}
 8013766:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8013768:	2210      	movs	r2, #16
 801376a:	2100      	movs	r1, #0
 801376c:	30f1      	adds	r0, #241	; 0xf1
 801376e:	f001 f844 	bl	80147fa <memset1>
    ctx->M_n = 0;
 8013772:	2100      	movs	r1, #0
 8013774:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8013778:	22f0      	movs	r2, #240	; 0xf0
 801377a:	4620      	mov	r0, r4
 801377c:	f001 f83d 	bl	80147fa <memset1>
}
 8013780:	bd10      	pop	{r4, pc}

08013782 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8013782:	b508      	push	{r3, lr}
 8013784:	4602      	mov	r2, r0
 8013786:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8013788:	2110      	movs	r1, #16
 801378a:	f000 fb3b 	bl	8013e04 <lorawan_aes_set_key>
}
 801378e:	bd08      	pop	{r3, pc}

08013790 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 8013790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013794:	b084      	sub	sp, #16
 8013796:	4604      	mov	r4, r0
 8013798:	460d      	mov	r5, r1
 801379a:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 801379c:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d054      	beq.n	801384e <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80137a4:	f1c3 0810 	rsb	r8, r3, #16
 80137a8:	4647      	mov	r7, r8
 80137aa:	4590      	cmp	r8, r2
 80137ac:	bf28      	it	cs
 80137ae:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80137b0:	f200 1001 	addw	r0, r0, #257	; 0x101
 80137b4:	b2ba      	uxth	r2, r7
 80137b6:	4418      	add	r0, r3
 80137b8:	f001 f807 	bl	80147ca <memcpy1>
        ctx->M_n += mlen;
 80137bc:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80137c0:	443b      	add	r3, r7
 80137c2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 80137c6:	2b0f      	cmp	r3, #15
 80137c8:	d94d      	bls.n	8013866 <AES_CMAC_Update+0xd6>
 80137ca:	45b0      	cmp	r8, r6
 80137cc:	d24b      	bcs.n	8013866 <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 80137ce:	2300      	movs	r3, #0
 80137d0:	e008      	b.n	80137e4 <AES_CMAC_Update+0x54>
 80137d2:	18e2      	adds	r2, r4, r3
 80137d4:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 80137d8:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 80137dc:	4041      	eors	r1, r0
 80137de:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 80137e2:	3301      	adds	r3, #1
 80137e4:	2b0f      	cmp	r3, #15
 80137e6:	ddf4      	ble.n	80137d2 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80137e8:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 80137ec:	2210      	movs	r2, #16
 80137ee:	4641      	mov	r1, r8
 80137f0:	4668      	mov	r0, sp
 80137f2:	f000 ffea 	bl	80147ca <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80137f6:	4622      	mov	r2, r4
 80137f8:	4669      	mov	r1, sp
 80137fa:	4668      	mov	r0, sp
 80137fc:	f000 fb86 	bl	8013f0c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8013800:	2210      	movs	r2, #16
 8013802:	4669      	mov	r1, sp
 8013804:	4640      	mov	r0, r8
 8013806:	f000 ffe0 	bl	80147ca <memcpy1>

        data += mlen;
 801380a:	443d      	add	r5, r7
        len -= mlen;
 801380c:	1bf6      	subs	r6, r6, r7
 801380e:	e01e      	b.n	801384e <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8013810:	eb04 0e03 	add.w	lr, r4, r3
 8013814:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 8013818:	5cea      	ldrb	r2, [r5, r3]
 801381a:	ea8c 0c02 	eor.w	ip, ip, r2
 801381e:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 8013822:	3301      	adds	r3, #1
 8013824:	2b0f      	cmp	r3, #15
 8013826:	ddf3      	ble.n	8013810 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013828:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 801382c:	2210      	movs	r2, #16
 801382e:	4639      	mov	r1, r7
 8013830:	4668      	mov	r0, sp
 8013832:	f000 ffca 	bl	80147ca <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8013836:	4622      	mov	r2, r4
 8013838:	4669      	mov	r1, sp
 801383a:	4668      	mov	r0, sp
 801383c:	f000 fb66 	bl	8013f0c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8013840:	2210      	movs	r2, #16
 8013842:	4669      	mov	r1, sp
 8013844:	4638      	mov	r0, r7
 8013846:	f000 ffc0 	bl	80147ca <memcpy1>

        data += 16;
 801384a:	3510      	adds	r5, #16
        len -= 16;
 801384c:	3e10      	subs	r6, #16
    while( len > 16 )
 801384e:	2e10      	cmp	r6, #16
 8013850:	d901      	bls.n	8013856 <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 8013852:	2300      	movs	r3, #0
 8013854:	e7e6      	b.n	8013824 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8013856:	b2b2      	uxth	r2, r6
 8013858:	4629      	mov	r1, r5
 801385a:	f204 1001 	addw	r0, r4, #257	; 0x101
 801385e:	f000 ffb4 	bl	80147ca <memcpy1>
    ctx->M_n = len;
 8013862:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 8013866:	b004      	add	sp, #16
 8013868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801386c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 801386c:	b530      	push	{r4, r5, lr}
 801386e:	b089      	sub	sp, #36	; 0x24
 8013870:	4605      	mov	r5, r0
 8013872:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8013874:	2210      	movs	r2, #16
 8013876:	2100      	movs	r1, #0
 8013878:	eb0d 0002 	add.w	r0, sp, r2
 801387c:	f000 ffbd 	bl	80147fa <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8013880:	4622      	mov	r2, r4
 8013882:	a904      	add	r1, sp, #16
 8013884:	4608      	mov	r0, r1
 8013886:	f000 fb41 	bl	8013f0c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 801388a:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 801388e:	2b00      	cmp	r3, #0
 8013890:	db01      	blt.n	8013896 <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8013892:	2300      	movs	r3, #0
 8013894:	e030      	b.n	80138f8 <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 8013896:	2300      	movs	r3, #0
 8013898:	2b0e      	cmp	r3, #14
 801389a:	dc11      	bgt.n	80138c0 <AES_CMAC_Final+0x54>
 801389c:	f103 0220 	add.w	r2, r3, #32
 80138a0:	eb0d 0102 	add.w	r1, sp, r2
 80138a4:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80138a8:	3301      	adds	r3, #1
 80138aa:	f103 0220 	add.w	r2, r3, #32
 80138ae:	446a      	add	r2, sp
 80138b0:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80138b4:	09d2      	lsrs	r2, r2, #7
 80138b6:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80138ba:	f801 2c10 	strb.w	r2, [r1, #-16]
 80138be:	e7eb      	b.n	8013898 <AES_CMAC_Final+0x2c>
 80138c0:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80138c4:	005b      	lsls	r3, r3, #1
 80138c6:	b2db      	uxtb	r3, r3
 80138c8:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 80138cc:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80138d0:	f88d 301f 	strb.w	r3, [sp, #31]
 80138d4:	e017      	b.n	8013906 <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 80138d6:	f103 0220 	add.w	r2, r3, #32
 80138da:	eb0d 0102 	add.w	r1, sp, r2
 80138de:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80138e2:	3301      	adds	r3, #1
 80138e4:	f103 0220 	add.w	r2, r3, #32
 80138e8:	446a      	add	r2, sp
 80138ea:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80138ee:	09d2      	lsrs	r2, r2, #7
 80138f0:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80138f4:	f801 2c10 	strb.w	r2, [r1, #-16]
 80138f8:	2b0e      	cmp	r3, #14
 80138fa:	ddec      	ble.n	80138d6 <AES_CMAC_Final+0x6a>
 80138fc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013900:	005b      	lsls	r3, r3, #1
 8013902:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 8013906:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 801390a:	2810      	cmp	r0, #16
 801390c:	d014      	beq.n	8013938 <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 801390e:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8013912:	2b00      	cmp	r3, #0
 8013914:	db30      	blt.n	8013978 <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 8013916:	2300      	movs	r3, #0
 8013918:	e041      	b.n	801399e <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 801391a:	18e1      	adds	r1, r4, r3
 801391c:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8013920:	f103 0020 	add.w	r0, r3, #32
 8013924:	4468      	add	r0, sp
 8013926:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801392a:	4042      	eors	r2, r0
 801392c:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8013930:	3301      	adds	r3, #1
 8013932:	2b0f      	cmp	r3, #15
 8013934:	ddf1      	ble.n	801391a <AES_CMAC_Final+0xae>
 8013936:	e059      	b.n	80139ec <AES_CMAC_Final+0x180>
 8013938:	2300      	movs	r3, #0
 801393a:	e7fa      	b.n	8013932 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 801393c:	f103 0220 	add.w	r2, r3, #32
 8013940:	eb0d 0102 	add.w	r1, sp, r2
 8013944:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8013948:	3301      	adds	r3, #1
 801394a:	f103 0220 	add.w	r2, r3, #32
 801394e:	446a      	add	r2, sp
 8013950:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013954:	09d2      	lsrs	r2, r2, #7
 8013956:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801395a:	f801 2c10 	strb.w	r2, [r1, #-16]
 801395e:	2b0e      	cmp	r3, #14
 8013960:	ddec      	ble.n	801393c <AES_CMAC_Final+0xd0>
 8013962:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013966:	005b      	lsls	r3, r3, #1
 8013968:	b2db      	uxtb	r3, r3
 801396a:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 801396e:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8013972:	f88d 301f 	strb.w	r3, [sp, #31]
 8013976:	e019      	b.n	80139ac <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 8013978:	2300      	movs	r3, #0
 801397a:	e7f0      	b.n	801395e <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 801397c:	f103 0220 	add.w	r2, r3, #32
 8013980:	eb0d 0102 	add.w	r1, sp, r2
 8013984:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 8013988:	3301      	adds	r3, #1
 801398a:	f103 0220 	add.w	r2, r3, #32
 801398e:	446a      	add	r2, sp
 8013990:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8013994:	09d2      	lsrs	r2, r2, #7
 8013996:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801399a:	f801 2c10 	strb.w	r2, [r1, #-16]
 801399e:	2b0e      	cmp	r3, #14
 80139a0:	ddec      	ble.n	801397c <AES_CMAC_Final+0x110>
 80139a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80139a6:	005b      	lsls	r3, r3, #1
 80139a8:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80139ac:	4420      	add	r0, r4
 80139ae:	2380      	movs	r3, #128	; 0x80
 80139b0:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80139b4:	e003      	b.n	80139be <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80139b6:	4423      	add	r3, r4
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80139be:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80139c2:	3301      	adds	r3, #1
 80139c4:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80139c8:	2b0f      	cmp	r3, #15
 80139ca:	d9f4      	bls.n	80139b6 <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 80139cc:	2300      	movs	r3, #0
 80139ce:	e00b      	b.n	80139e8 <AES_CMAC_Final+0x17c>
 80139d0:	18e1      	adds	r1, r4, r3
 80139d2:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 80139d6:	f103 0020 	add.w	r0, r3, #32
 80139da:	4468      	add	r0, sp
 80139dc:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 80139e0:	4042      	eors	r2, r0
 80139e2:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 80139e6:	3301      	adds	r3, #1
 80139e8:	2b0f      	cmp	r3, #15
 80139ea:	ddf1      	ble.n	80139d0 <AES_CMAC_Final+0x164>
 80139ec:	2300      	movs	r3, #0
 80139ee:	e009      	b.n	8013a04 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 80139f0:	18e2      	adds	r2, r4, r3
 80139f2:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 80139f6:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 80139fa:	ea8c 0c01 	eor.w	ip, ip, r1
 80139fe:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8013a02:	3301      	adds	r3, #1
 8013a04:	2b0f      	cmp	r3, #15
 8013a06:	ddf3      	ble.n	80139f0 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8013a08:	2210      	movs	r2, #16
 8013a0a:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8013a0e:	4668      	mov	r0, sp
 8013a10:	f000 fedb 	bl	80147ca <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8013a14:	4622      	mov	r2, r4
 8013a16:	4629      	mov	r1, r5
 8013a18:	4668      	mov	r0, sp
 8013a1a:	f000 fa77 	bl	8013f0c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8013a1e:	2210      	movs	r2, #16
 8013a20:	2100      	movs	r1, #0
 8013a22:	eb0d 0002 	add.w	r0, sp, r2
 8013a26:	f000 fee8 	bl	80147fa <memset1>
}
 8013a2a:	b009      	add	sp, #36	; 0x24
 8013a2c:	bd30      	pop	{r4, r5, pc}

08013a2e <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8013a2e:	780b      	ldrb	r3, [r1, #0]
 8013a30:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8013a32:	784b      	ldrb	r3, [r1, #1]
 8013a34:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 8013a36:	788b      	ldrb	r3, [r1, #2]
 8013a38:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 8013a3a:	78cb      	ldrb	r3, [r1, #3]
 8013a3c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8013a3e:	790b      	ldrb	r3, [r1, #4]
 8013a40:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8013a42:	794b      	ldrb	r3, [r1, #5]
 8013a44:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 8013a46:	798b      	ldrb	r3, [r1, #6]
 8013a48:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 8013a4a:	79cb      	ldrb	r3, [r1, #7]
 8013a4c:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8013a4e:	7a0b      	ldrb	r3, [r1, #8]
 8013a50:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8013a52:	7a4b      	ldrb	r3, [r1, #9]
 8013a54:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 8013a56:	7a8b      	ldrb	r3, [r1, #10]
 8013a58:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 8013a5a:	7acb      	ldrb	r3, [r1, #11]
 8013a5c:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8013a5e:	7b0b      	ldrb	r3, [r1, #12]
 8013a60:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8013a62:	7b4b      	ldrb	r3, [r1, #13]
 8013a64:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 8013a66:	7b8b      	ldrb	r3, [r1, #14]
 8013a68:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 8013a6a:	7bcb      	ldrb	r3, [r1, #15]
 8013a6c:	73c3      	strb	r3, [r0, #15]
#endif
}
 8013a6e:	4770      	bx	lr

08013a70 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 8013a70:	e004      	b.n	8013a7c <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 8013a72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013a76:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 8013a7a:	461a      	mov	r2, r3
 8013a7c:	1e53      	subs	r3, r2, #1
 8013a7e:	b2db      	uxtb	r3, r3
 8013a80:	2a00      	cmp	r2, #0
 8013a82:	d1f6      	bne.n	8013a72 <copy_block_nn+0x2>
}
 8013a84:	4770      	bx	lr

08013a86 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8013a86:	780b      	ldrb	r3, [r1, #0]
 8013a88:	7802      	ldrb	r2, [r0, #0]
 8013a8a:	4053      	eors	r3, r2
 8013a8c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8013a8e:	784b      	ldrb	r3, [r1, #1]
 8013a90:	7842      	ldrb	r2, [r0, #1]
 8013a92:	4053      	eors	r3, r2
 8013a94:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8013a96:	788b      	ldrb	r3, [r1, #2]
 8013a98:	7882      	ldrb	r2, [r0, #2]
 8013a9a:	4053      	eors	r3, r2
 8013a9c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8013a9e:	78cb      	ldrb	r3, [r1, #3]
 8013aa0:	78c2      	ldrb	r2, [r0, #3]
 8013aa2:	4053      	eors	r3, r2
 8013aa4:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8013aa6:	790b      	ldrb	r3, [r1, #4]
 8013aa8:	7902      	ldrb	r2, [r0, #4]
 8013aaa:	4053      	eors	r3, r2
 8013aac:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8013aae:	794b      	ldrb	r3, [r1, #5]
 8013ab0:	7942      	ldrb	r2, [r0, #5]
 8013ab2:	4053      	eors	r3, r2
 8013ab4:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8013ab6:	798b      	ldrb	r3, [r1, #6]
 8013ab8:	7982      	ldrb	r2, [r0, #6]
 8013aba:	4053      	eors	r3, r2
 8013abc:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8013abe:	79cb      	ldrb	r3, [r1, #7]
 8013ac0:	79c2      	ldrb	r2, [r0, #7]
 8013ac2:	4053      	eors	r3, r2
 8013ac4:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8013ac6:	7a0b      	ldrb	r3, [r1, #8]
 8013ac8:	7a02      	ldrb	r2, [r0, #8]
 8013aca:	4053      	eors	r3, r2
 8013acc:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8013ace:	7a4b      	ldrb	r3, [r1, #9]
 8013ad0:	7a42      	ldrb	r2, [r0, #9]
 8013ad2:	4053      	eors	r3, r2
 8013ad4:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8013ad6:	7a8b      	ldrb	r3, [r1, #10]
 8013ad8:	7a82      	ldrb	r2, [r0, #10]
 8013ada:	4053      	eors	r3, r2
 8013adc:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8013ade:	7acb      	ldrb	r3, [r1, #11]
 8013ae0:	7ac2      	ldrb	r2, [r0, #11]
 8013ae2:	4053      	eors	r3, r2
 8013ae4:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8013ae6:	7b0b      	ldrb	r3, [r1, #12]
 8013ae8:	7b02      	ldrb	r2, [r0, #12]
 8013aea:	4053      	eors	r3, r2
 8013aec:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8013aee:	7b4b      	ldrb	r3, [r1, #13]
 8013af0:	7b42      	ldrb	r2, [r0, #13]
 8013af2:	4053      	eors	r3, r2
 8013af4:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8013af6:	7b8b      	ldrb	r3, [r1, #14]
 8013af8:	7b82      	ldrb	r2, [r0, #14]
 8013afa:	4053      	eors	r3, r2
 8013afc:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8013afe:	7bcb      	ldrb	r3, [r1, #15]
 8013b00:	7bc2      	ldrb	r2, [r0, #15]
 8013b02:	4053      	eors	r3, r2
 8013b04:	73c3      	strb	r3, [r0, #15]
#endif
}
 8013b06:	4770      	bx	lr

08013b08 <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8013b08:	780b      	ldrb	r3, [r1, #0]
 8013b0a:	f892 c000 	ldrb.w	ip, [r2]
 8013b0e:	ea83 030c 	eor.w	r3, r3, ip
 8013b12:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8013b14:	784b      	ldrb	r3, [r1, #1]
 8013b16:	f892 c001 	ldrb.w	ip, [r2, #1]
 8013b1a:	ea83 030c 	eor.w	r3, r3, ip
 8013b1e:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8013b20:	788b      	ldrb	r3, [r1, #2]
 8013b22:	f892 c002 	ldrb.w	ip, [r2, #2]
 8013b26:	ea83 030c 	eor.w	r3, r3, ip
 8013b2a:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8013b2c:	78cb      	ldrb	r3, [r1, #3]
 8013b2e:	f892 c003 	ldrb.w	ip, [r2, #3]
 8013b32:	ea83 030c 	eor.w	r3, r3, ip
 8013b36:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8013b38:	790b      	ldrb	r3, [r1, #4]
 8013b3a:	f892 c004 	ldrb.w	ip, [r2, #4]
 8013b3e:	ea83 030c 	eor.w	r3, r3, ip
 8013b42:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8013b44:	794b      	ldrb	r3, [r1, #5]
 8013b46:	f892 c005 	ldrb.w	ip, [r2, #5]
 8013b4a:	ea83 030c 	eor.w	r3, r3, ip
 8013b4e:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8013b50:	798b      	ldrb	r3, [r1, #6]
 8013b52:	f892 c006 	ldrb.w	ip, [r2, #6]
 8013b56:	ea83 030c 	eor.w	r3, r3, ip
 8013b5a:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8013b5c:	79cb      	ldrb	r3, [r1, #7]
 8013b5e:	f892 c007 	ldrb.w	ip, [r2, #7]
 8013b62:	ea83 030c 	eor.w	r3, r3, ip
 8013b66:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8013b68:	7a0b      	ldrb	r3, [r1, #8]
 8013b6a:	f892 c008 	ldrb.w	ip, [r2, #8]
 8013b6e:	ea83 030c 	eor.w	r3, r3, ip
 8013b72:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8013b74:	7a4b      	ldrb	r3, [r1, #9]
 8013b76:	f892 c009 	ldrb.w	ip, [r2, #9]
 8013b7a:	ea83 030c 	eor.w	r3, r3, ip
 8013b7e:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8013b80:	7a8b      	ldrb	r3, [r1, #10]
 8013b82:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8013b86:	ea83 030c 	eor.w	r3, r3, ip
 8013b8a:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8013b8c:	7acb      	ldrb	r3, [r1, #11]
 8013b8e:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8013b92:	ea83 030c 	eor.w	r3, r3, ip
 8013b96:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8013b98:	7b0b      	ldrb	r3, [r1, #12]
 8013b9a:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8013b9e:	ea83 030c 	eor.w	r3, r3, ip
 8013ba2:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8013ba4:	7b4b      	ldrb	r3, [r1, #13]
 8013ba6:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8013baa:	ea83 030c 	eor.w	r3, r3, ip
 8013bae:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8013bb0:	7b8b      	ldrb	r3, [r1, #14]
 8013bb2:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8013bb6:	ea83 030c 	eor.w	r3, r3, ip
 8013bba:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8013bbc:	7bcb      	ldrb	r3, [r1, #15]
 8013bbe:	7bd2      	ldrb	r2, [r2, #15]
 8013bc0:	4053      	eors	r3, r2
 8013bc2:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8013bc4:	4770      	bx	lr

08013bc6 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8013bc6:	b508      	push	{r3, lr}
    xor_block(d, k);
 8013bc8:	f7ff ff5d 	bl	8013a86 <xor_block>
}
 8013bcc:	bd08      	pop	{r3, pc}
	...

08013bd0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8013bd0:	7802      	ldrb	r2, [r0, #0]
 8013bd2:	4b18      	ldr	r3, [pc, #96]	; (8013c34 <shift_sub_rows+0x64>)
 8013bd4:	5c9a      	ldrb	r2, [r3, r2]
 8013bd6:	7002      	strb	r2, [r0, #0]
 8013bd8:	7902      	ldrb	r2, [r0, #4]
 8013bda:	5c9a      	ldrb	r2, [r3, r2]
 8013bdc:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8013bde:	7a02      	ldrb	r2, [r0, #8]
 8013be0:	5c9a      	ldrb	r2, [r3, r2]
 8013be2:	7202      	strb	r2, [r0, #8]
 8013be4:	7b02      	ldrb	r2, [r0, #12]
 8013be6:	5c9a      	ldrb	r2, [r3, r2]
 8013be8:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8013bea:	7842      	ldrb	r2, [r0, #1]
 8013bec:	7941      	ldrb	r1, [r0, #5]
 8013bee:	5c59      	ldrb	r1, [r3, r1]
 8013bf0:	7041      	strb	r1, [r0, #1]
 8013bf2:	7a41      	ldrb	r1, [r0, #9]
 8013bf4:	5c59      	ldrb	r1, [r3, r1]
 8013bf6:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8013bf8:	7b41      	ldrb	r1, [r0, #13]
 8013bfa:	5c59      	ldrb	r1, [r3, r1]
 8013bfc:	7241      	strb	r1, [r0, #9]
 8013bfe:	5c9a      	ldrb	r2, [r3, r2]
 8013c00:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8013c02:	7882      	ldrb	r2, [r0, #2]
 8013c04:	7a81      	ldrb	r1, [r0, #10]
 8013c06:	5c59      	ldrb	r1, [r3, r1]
 8013c08:	7081      	strb	r1, [r0, #2]
 8013c0a:	5c9a      	ldrb	r2, [r3, r2]
 8013c0c:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8013c0e:	7982      	ldrb	r2, [r0, #6]
 8013c10:	7b81      	ldrb	r1, [r0, #14]
 8013c12:	5c59      	ldrb	r1, [r3, r1]
 8013c14:	7181      	strb	r1, [r0, #6]
 8013c16:	5c9a      	ldrb	r2, [r3, r2]
 8013c18:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8013c1a:	7bc2      	ldrb	r2, [r0, #15]
 8013c1c:	7ac1      	ldrb	r1, [r0, #11]
 8013c1e:	5c59      	ldrb	r1, [r3, r1]
 8013c20:	73c1      	strb	r1, [r0, #15]
 8013c22:	79c1      	ldrb	r1, [r0, #7]
 8013c24:	5c59      	ldrb	r1, [r3, r1]
 8013c26:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8013c28:	78c1      	ldrb	r1, [r0, #3]
 8013c2a:	5c59      	ldrb	r1, [r3, r1]
 8013c2c:	71c1      	strb	r1, [r0, #7]
 8013c2e:	5c9b      	ldrb	r3, [r3, r2]
 8013c30:	70c3      	strb	r3, [r0, #3]
}
 8013c32:	4770      	bx	lr
 8013c34:	0801e5b4 	.word	0x0801e5b4

08013c38 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8013c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c3c:	b084      	sub	sp, #16
 8013c3e:	4604      	mov	r4, r0
    block_copy(st, dt);
 8013c40:	4601      	mov	r1, r0
 8013c42:	4668      	mov	r0, sp
 8013c44:	f7ff fef3 	bl	8013a2e <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8013c48:	f89d c000 	ldrb.w	ip, [sp]
 8013c4c:	4b6a      	ldr	r3, [pc, #424]	; (8013df8 <mix_sub_columns+0x1c0>)
 8013c4e:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013c52:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8013c56:	4a69      	ldr	r2, [pc, #420]	; (8013dfc <mix_sub_columns+0x1c4>)
 8013c58:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013c5c:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8013c60:	4967      	ldr	r1, [pc, #412]	; (8013e00 <mix_sub_columns+0x1c8>)
 8013c62:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013c66:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8013c6a:	5dce      	ldrb	r6, [r1, r7]
 8013c6c:	ea80 0009 	eor.w	r0, r0, r9
 8013c70:	4068      	eors	r0, r5
 8013c72:	4070      	eors	r0, r6
 8013c74:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8013c76:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013c7a:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013c7e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013c82:	ea80 0a0a 	eor.w	sl, r0, sl
 8013c86:	ea89 090a 	eor.w	r9, r9, sl
 8013c8a:	ea86 0609 	eor.w	r6, r6, r9
 8013c8e:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8013c90:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013c94:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013c98:	5dd6      	ldrb	r6, [r2, r7]
 8013c9a:	ea80 0008 	eor.w	r0, r0, r8
 8013c9e:	ea8e 0000 	eor.w	r0, lr, r0
 8013ca2:	4070      	eors	r0, r6
 8013ca4:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8013ca6:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013caa:	5dd8      	ldrb	r0, [r3, r7]
 8013cac:	ea86 0608 	eor.w	r6, r6, r8
 8013cb0:	4075      	eors	r5, r6
 8013cb2:	4068      	eors	r0, r5
 8013cb4:	70e0      	strb	r0, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8013cb6:	f89d c004 	ldrb.w	ip, [sp, #4]
 8013cba:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013cbe:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8013cc2:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013cc6:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8013cca:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013cce:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8013cd2:	5dce      	ldrb	r6, [r1, r7]
 8013cd4:	ea80 0009 	eor.w	r0, r0, r9
 8013cd8:	4068      	eors	r0, r5
 8013cda:	4070      	eors	r0, r6
 8013cdc:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8013cde:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013ce2:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013ce6:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013cea:	ea80 0a0a 	eor.w	sl, r0, sl
 8013cee:	ea89 090a 	eor.w	r9, r9, sl
 8013cf2:	ea86 0609 	eor.w	r6, r6, r9
 8013cf6:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8013cf8:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013cfc:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013d00:	5dd6      	ldrb	r6, [r2, r7]
 8013d02:	ea80 0008 	eor.w	r0, r0, r8
 8013d06:	ea8e 0000 	eor.w	r0, lr, r0
 8013d0a:	4070      	eors	r0, r6
 8013d0c:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8013d0e:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013d12:	5dd8      	ldrb	r0, [r3, r7]
 8013d14:	ea86 0608 	eor.w	r6, r6, r8
 8013d18:	4075      	eors	r5, r6
 8013d1a:	4068      	eors	r0, r5
 8013d1c:	71e0      	strb	r0, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8013d1e:	f89d c008 	ldrb.w	ip, [sp, #8]
 8013d22:	f813 000c 	ldrb.w	r0, [r3, ip]
 8013d26:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8013d2a:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013d2e:	f89d e002 	ldrb.w	lr, [sp, #2]
 8013d32:	f811 500e 	ldrb.w	r5, [r1, lr]
 8013d36:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8013d3a:	5dce      	ldrb	r6, [r1, r7]
 8013d3c:	ea80 0009 	eor.w	r0, r0, r9
 8013d40:	4068      	eors	r0, r5
 8013d42:	4070      	eors	r0, r6
 8013d44:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8013d46:	f811 000c 	ldrb.w	r0, [r1, ip]
 8013d4a:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013d4e:	f812 900e 	ldrb.w	r9, [r2, lr]
 8013d52:	ea80 0a0a 	eor.w	sl, r0, sl
 8013d56:	ea89 090a 	eor.w	r9, r9, sl
 8013d5a:	ea86 0609 	eor.w	r6, r6, r9
 8013d5e:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8013d60:	f811 8008 	ldrb.w	r8, [r1, r8]
 8013d64:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8013d68:	5dd6      	ldrb	r6, [r2, r7]
 8013d6a:	ea80 0008 	eor.w	r0, r0, r8
 8013d6e:	ea8e 0000 	eor.w	r0, lr, r0
 8013d72:	4070      	eors	r0, r6
 8013d74:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8013d76:	f812 600c 	ldrb.w	r6, [r2, ip]
 8013d7a:	5dd8      	ldrb	r0, [r3, r7]
 8013d7c:	ea86 0608 	eor.w	r6, r6, r8
 8013d80:	4075      	eors	r5, r6
 8013d82:	4068      	eors	r0, r5
 8013d84:	72e0      	strb	r0, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8013d86:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8013d8a:	5d98      	ldrb	r0, [r3, r6]
 8013d8c:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8013d90:	f812 9008 	ldrb.w	r9, [r2, r8]
 8013d94:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8013d98:	f811 c007 	ldrb.w	ip, [r1, r7]
 8013d9c:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8013da0:	f811 e005 	ldrb.w	lr, [r1, r5]
 8013da4:	ea80 0009 	eor.w	r0, r0, r9
 8013da8:	ea8c 0000 	eor.w	r0, ip, r0
 8013dac:	ea8e 0000 	eor.w	r0, lr, r0
 8013db0:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8013db2:	5d88      	ldrb	r0, [r1, r6]
 8013db4:	f813 a008 	ldrb.w	sl, [r3, r8]
 8013db8:	f812 9007 	ldrb.w	r9, [r2, r7]
 8013dbc:	ea80 0a0a 	eor.w	sl, r0, sl
 8013dc0:	ea89 090a 	eor.w	r9, r9, sl
 8013dc4:	ea8e 0e09 	eor.w	lr, lr, r9
 8013dc8:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8013dcc:	f811 1008 	ldrb.w	r1, [r1, r8]
 8013dd0:	f813 e007 	ldrb.w	lr, [r3, r7]
 8013dd4:	5d57      	ldrb	r7, [r2, r5]
 8013dd6:	4048      	eors	r0, r1
 8013dd8:	ea8e 0000 	eor.w	r0, lr, r0
 8013ddc:	4078      	eors	r0, r7
 8013dde:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8013de0:	5d92      	ldrb	r2, [r2, r6]
 8013de2:	5d5b      	ldrb	r3, [r3, r5]
 8013de4:	4051      	eors	r1, r2
 8013de6:	ea8c 0c01 	eor.w	ip, ip, r1
 8013dea:	ea83 030c 	eor.w	r3, r3, ip
 8013dee:	73e3      	strb	r3, [r4, #15]
  }
 8013df0:	b004      	add	sp, #16
 8013df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013df6:	bf00      	nop
 8013df8:	0801e3b4 	.word	0x0801e3b4
 8013dfc:	0801e4b4 	.word	0x0801e4b4
 8013e00:	0801e5b4 	.word	0x0801e5b4

08013e04 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8013e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e08:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8013e0a:	f1a1 0310 	sub.w	r3, r1, #16
 8013e0e:	b2db      	uxtb	r3, r3
 8013e10:	2b10      	cmp	r3, #16
 8013e12:	d806      	bhi.n	8013e22 <lorawan_aes_set_key+0x1e>
 8013e14:	460d      	mov	r5, r1
 8013e16:	4a3b      	ldr	r2, [pc, #236]	; (8013f04 <lorawan_aes_set_key+0x100>)
 8013e18:	fa22 f303 	lsr.w	r3, r2, r3
 8013e1c:	f013 0f01 	tst.w	r3, #1
 8013e20:	d105      	bne.n	8013e2e <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8013e22:	2300      	movs	r3, #0
 8013e24:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8013e28:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8013e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8013e2e:	460a      	mov	r2, r1
 8013e30:	4601      	mov	r1, r0
 8013e32:	4620      	mov	r0, r4
 8013e34:	f7ff fe1c 	bl	8013a70 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8013e38:	f105 031c 	add.w	r3, r5, #28
 8013e3c:	b2db      	uxtb	r3, r3
 8013e3e:	009b      	lsls	r3, r3, #2
 8013e40:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8013e44:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8013e48:	3b01      	subs	r3, #1
 8013e4a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8013e4e:	462b      	mov	r3, r5
 8013e50:	f04f 0c01 	mov.w	ip, #1
 8013e54:	e023      	b.n	8013e9e <lorawan_aes_set_key+0x9a>
        else if( keylen > 24 && cc % keylen == 16 )
 8013e56:	2d18      	cmp	r5, #24
 8013e58:	d901      	bls.n	8013e5e <lorawan_aes_set_key+0x5a>
 8013e5a:	2a10      	cmp	r2, #16
 8013e5c:	d048      	beq.n	8013ef0 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8013e5e:	1b5a      	subs	r2, r3, r5
 8013e60:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8013e62:	f814 9002 	ldrb.w	r9, [r4, r2]
 8013e66:	ea89 0808 	eor.w	r8, r9, r8
 8013e6a:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8013e6e:	f102 0801 	add.w	r8, r2, #1
 8013e72:	f814 8008 	ldrb.w	r8, [r4, r8]
 8013e76:	f100 0901 	add.w	r9, r0, #1
 8013e7a:	ea88 0707 	eor.w	r7, r8, r7
 8013e7e:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8013e82:	1c97      	adds	r7, r2, #2
 8013e84:	5de7      	ldrb	r7, [r4, r7]
 8013e86:	f100 0802 	add.w	r8, r0, #2
 8013e8a:	407e      	eors	r6, r7
 8013e8c:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8013e90:	3203      	adds	r2, #3
 8013e92:	5ca6      	ldrb	r6, [r4, r2]
 8013e94:	1cc2      	adds	r2, r0, #3
 8013e96:	4071      	eors	r1, r6
 8013e98:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8013e9a:	3304      	adds	r3, #4
 8013e9c:	b2db      	uxtb	r3, r3
 8013e9e:	4573      	cmp	r3, lr
 8013ea0:	d22d      	bcs.n	8013efe <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	1f1a      	subs	r2, r3, #4
 8013ea6:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8013eaa:	1eda      	subs	r2, r3, #3
 8013eac:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8013eae:	1e9a      	subs	r2, r3, #2
 8013eb0:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8013eb2:	1e5a      	subs	r2, r3, #1
 8013eb4:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8013eb6:	fbb3 f2f5 	udiv	r2, r3, r5
 8013eba:	fb05 3212 	mls	r2, r5, r2, r3
 8013ebe:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8013ec2:	d1c8      	bne.n	8013e56 <lorawan_aes_set_key+0x52>
            t0 = s_box(t1) ^ rc;
 8013ec4:	4a10      	ldr	r2, [pc, #64]	; (8013f08 <lorawan_aes_set_key+0x104>)
 8013ec6:	f812 9007 	ldrb.w	r9, [r2, r7]
 8013eca:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8013ece:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8013ed0:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8013ed2:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8013ed6:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8013eda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8013ede:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8013ee2:	b2d2      	uxtb	r2, r2
 8013ee4:	ea82 024c 	eor.w	r2, r2, ip, lsl #1
 8013ee8:	fa5f fc82 	uxtb.w	ip, r2
            t0 = s_box(t1) ^ rc;
 8013eec:	46c8      	mov	r8, r9
 8013eee:	e7b6      	b.n	8013e5e <lorawan_aes_set_key+0x5a>
            t0 = s_box(t0);
 8013ef0:	4a05      	ldr	r2, [pc, #20]	; (8013f08 <lorawan_aes_set_key+0x104>)
 8013ef2:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8013ef6:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8013ef8:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8013efa:	5c51      	ldrb	r1, [r2, r1]
 8013efc:	e7af      	b.n	8013e5e <lorawan_aes_set_key+0x5a>
    return 0;
 8013efe:	2000      	movs	r0, #0
 8013f00:	e793      	b.n	8013e2a <lorawan_aes_set_key+0x26>
 8013f02:	bf00      	nop
 8013f04:	00010101 	.word	0x00010101
 8013f08:	0801e5b4 	.word	0x0801e5b4

08013f0c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8013f0c:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8013f10:	b31b      	cbz	r3, 8013f5a <lorawan_aes_encrypt+0x4e>
{
 8013f12:	b570      	push	{r4, r5, r6, lr}
 8013f14:	b084      	sub	sp, #16
 8013f16:	460e      	mov	r6, r1
 8013f18:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8013f1a:	4601      	mov	r1, r0
 8013f1c:	4668      	mov	r0, sp
 8013f1e:	f7ff fdf3 	bl	8013b08 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8013f22:	2401      	movs	r4, #1
 8013f24:	e009      	b.n	8013f3a <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8013f26:	4668      	mov	r0, sp
 8013f28:	f7ff fe86 	bl	8013c38 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8013f2c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8013f30:	4668      	mov	r0, sp
 8013f32:	f7ff fe48 	bl	8013bc6 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8013f36:	3401      	adds	r4, #1
 8013f38:	b2e4      	uxtb	r4, r4
 8013f3a:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8013f3e:	42a3      	cmp	r3, r4
 8013f40:	d8f1      	bhi.n	8013f26 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8013f42:	4668      	mov	r0, sp
 8013f44:	f7ff fe44 	bl	8013bd0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8013f48:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8013f4c:	4669      	mov	r1, sp
 8013f4e:	4630      	mov	r0, r6
 8013f50:	f7ff fdda 	bl	8013b08 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8013f54:	2000      	movs	r0, #0
}
 8013f56:	b004      	add	sp, #16
 8013f58:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8013f5a:	20ff      	movs	r0, #255	; 0xff
}
 8013f5c:	4770      	bx	lr
	...

08013f60 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013f60:	2300      	movs	r3, #0
 8013f62:	2b0a      	cmp	r3, #10
 8013f64:	d817      	bhi.n	8013f96 <GetKeyByID+0x36>
{
 8013f66:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8013f68:	4a0c      	ldr	r2, [pc, #48]	; (8013f9c <GetKeyByID+0x3c>)
 8013f6a:	6814      	ldr	r4, [r2, #0]
 8013f6c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8013f70:	4422      	add	r2, r4
 8013f72:	7e12      	ldrb	r2, [r2, #24]
 8013f74:	4282      	cmp	r2, r0
 8013f76:	d006      	beq.n	8013f86 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8013f78:	3301      	adds	r3, #1
 8013f7a:	b2db      	uxtb	r3, r3
 8013f7c:	2b0a      	cmp	r3, #10
 8013f7e:	d9f3      	bls.n	8013f68 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013f80:	2003      	movs	r0, #3
}
 8013f82:	bc10      	pop	{r4}
 8013f84:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8013f86:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8013f8a:	f10c 0c18 	add.w	ip, ip, #24
 8013f8e:	4464      	add	r4, ip
 8013f90:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8013f92:	2000      	movs	r0, #0
 8013f94:	e7f5      	b.n	8013f82 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8013f96:	2003      	movs	r0, #3
}
 8013f98:	4770      	bx	lr
 8013f9a:	bf00      	nop
 8013f9c:	20001a64 	.word	0x20001a64

08013fa0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8013fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa4:	b0cc      	sub	sp, #304	; 0x130
 8013fa6:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8013fa8:	b3a9      	cbz	r1, 8014016 <ComputeCmac+0x76>
 8013faa:	4607      	mov	r7, r0
 8013fac:	4616      	mov	r6, r2
 8013fae:	461c      	mov	r4, r3
 8013fb0:	4688      	mov	r8, r1
 8013fb2:	b395      	cbz	r5, 801401a <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8013fb4:	a802      	add	r0, sp, #8
 8013fb6:	f7ff fbd5 	bl	8013764 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8013fba:	a901      	add	r1, sp, #4
 8013fbc:	4620      	mov	r0, r4
 8013fbe:	f7ff ffcf 	bl	8013f60 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8013fc2:	4604      	mov	r4, r0
 8013fc4:	b118      	cbz	r0, 8013fce <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8013fc6:	4620      	mov	r0, r4
 8013fc8:	b04c      	add	sp, #304	; 0x130
 8013fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8013fce:	9901      	ldr	r1, [sp, #4]
 8013fd0:	3101      	adds	r1, #1
 8013fd2:	a802      	add	r0, sp, #8
 8013fd4:	f7ff fbd5 	bl	8013782 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8013fd8:	b127      	cbz	r7, 8013fe4 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8013fda:	2210      	movs	r2, #16
 8013fdc:	4639      	mov	r1, r7
 8013fde:	a802      	add	r0, sp, #8
 8013fe0:	f7ff fbd6 	bl	8013790 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8013fe4:	4632      	mov	r2, r6
 8013fe6:	4641      	mov	r1, r8
 8013fe8:	a802      	add	r0, sp, #8
 8013fea:	f7ff fbd1 	bl	8013790 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8013fee:	a902      	add	r1, sp, #8
 8013ff0:	a848      	add	r0, sp, #288	; 0x120
 8013ff2:	f7ff fc3b 	bl	801386c <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8013ff6:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8013ffa:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8013ffe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8014002:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 8014006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801400a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 801400e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8014012:	602b      	str	r3, [r5, #0]
 8014014:	e7d7      	b.n	8013fc6 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8014016:	2402      	movs	r4, #2
 8014018:	e7d5      	b.n	8013fc6 <ComputeCmac+0x26>
 801401a:	2402      	movs	r4, #2
 801401c:	e7d3      	b.n	8013fc6 <ComputeCmac+0x26>
	...

08014020 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8014020:	2800      	cmp	r0, #0
 8014022:	f000 80e6 	beq.w	80141f2 <SecureElementInit+0x1d2>
{
 8014026:	b510      	push	{r4, lr}
 8014028:	b0c0      	sub	sp, #256	; 0x100
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 801402a:	4a73      	ldr	r2, [pc, #460]	; (80141f8 <SecureElementInit+0x1d8>)
 801402c:	6010      	str	r0, [r2, #0]
//    //memcpy1(seNvmInit.KeyList->KeyValue, app_key_bytes, SE_KEY_SIZE);


#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ));
 801402e:	22f8      	movs	r2, #248	; 0xf8
 8014030:	4972      	ldr	r1, [pc, #456]	; (80141fc <SecureElementInit+0x1dc>)
 8014032:	f000 fbca 	bl	80147ca <memcpy1>
	#define LORAWAN_NVM_BASE_ADDRESS                    ((void *)0x0803F000UL)

    SecureElementNvmData_t FlashNVM; // Note: Declaring FlashNVM directly, not as a pointer

	if (FLASH_IF_Read(&FlashNVM, LORAWAN_NVM_BASE_ADDRESS, sizeof(FlashNVM)) == FLASH_IF_OK) {
 8014036:	22f8      	movs	r2, #248	; 0xf8
 8014038:	4971      	ldr	r1, [pc, #452]	; (8014200 <SecureElementInit+0x1e0>)
 801403a:	a802      	add	r0, sp, #8
 801403c:	f7ee f85a 	bl	80020f4 <FLASH_IF_Read>
 8014040:	2800      	cmp	r0, #0
 8014042:	f040 80cf 	bne.w	80141e4 <SecureElementInit+0x1c4>
		MW_LOG(TS_OFF, VLEVEL_M, "SUCCESS READING FLASH \r\n");
 8014046:	4b6f      	ldr	r3, [pc, #444]	; (8014204 <SecureElementInit+0x1e4>)
 8014048:	2200      	movs	r2, #0
 801404a:	4611      	mov	r1, r2
 801404c:	2002      	movs	r0, #2
 801404e:	f002 fa99 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 8014052:	2064      	movs	r0, #100	; 0x64
 8014054:	f7ee fc44 	bl	80028e0 <HAL_Delay>
		//memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&FlashNVM, sizeof(seNvmInit));
		memcpy1( ( uint8_t * )SeNvm->SeNvmDevJoinKey.DevEui,  ( uint8_t * )&FlashNVM.SeNvmDevJoinKey.DevEui,  sizeof(FlashNVM.SeNvmDevJoinKey.DevEui));
 8014058:	4c67      	ldr	r4, [pc, #412]	; (80141f8 <SecureElementInit+0x1d8>)
 801405a:	2208      	movs	r2, #8
 801405c:	eb0d 0102 	add.w	r1, sp, r2
 8014060:	6820      	ldr	r0, [r4, #0]
 8014062:	f000 fbb2 	bl	80147ca <memcpy1>
		memcpy1( ( uint8_t * )SeNvm->SeNvmDevJoinKey.JoinEui, ( uint8_t * )&FlashNVM.SeNvmDevJoinKey.JoinEui, sizeof(FlashNVM.SeNvmDevJoinKey.JoinEui));
 8014066:	6820      	ldr	r0, [r4, #0]
 8014068:	2208      	movs	r2, #8
 801406a:	a904      	add	r1, sp, #16
 801406c:	4410      	add	r0, r2
 801406e:	f000 fbac 	bl	80147ca <memcpy1>
		memcpy1( ( uint8_t * )SeNvm->KeyList[0].KeyValue,     ( uint8_t * )&FlashNVM.KeyList[0].KeyValue, sizeof(FlashNVM.KeyList[0].KeyValue));
 8014072:	6820      	ldr	r0, [r4, #0]
 8014074:	2210      	movs	r2, #16
 8014076:	f10d 0121 	add.w	r1, sp, #33	; 0x21
 801407a:	3019      	adds	r0, #25
 801407c:	f000 fba5 	bl	80147ca <memcpy1>
		memcpy1( ( uint8_t * )SeNvm->KeyList[1].KeyValue,     ( uint8_t * )&FlashNVM.KeyList[1].KeyValue, sizeof(FlashNVM.KeyList[1].KeyValue));
 8014080:	6820      	ldr	r0, [r4, #0]
 8014082:	2210      	movs	r2, #16
 8014084:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 8014088:	302a      	adds	r0, #42	; 0x2a
 801408a:	f000 fb9e 	bl	80147ca <memcpy1>
		memcpy1( ( uint8_t * )SeNvm->KeyList[2].KeyValue,     ( uint8_t * )&FlashNVM.KeyList[2].KeyValue, sizeof(FlashNVM.KeyList[2].KeyValue));
 801408e:	6820      	ldr	r0, [r4, #0]
 8014090:	2210      	movs	r2, #16
 8014092:	f10d 0143 	add.w	r1, sp, #67	; 0x43
 8014096:	303b      	adds	r0, #59	; 0x3b
 8014098:	f000 fb97 	bl	80147ca <memcpy1>
		memcpy1( ( uint8_t * )SeNvm->KeyList[3].KeyValue,     ( uint8_t * )&FlashNVM.KeyList[3].KeyValue, sizeof(FlashNVM.KeyList[3].KeyValue));
 801409c:	6820      	ldr	r0, [r4, #0]
 801409e:	2210      	movs	r2, #16
 80140a0:	a915      	add	r1, sp, #84	; 0x54
 80140a2:	304c      	adds	r0, #76	; 0x4c
 80140a4:	f000 fb91 	bl	80147ca <memcpy1>

		if(FlashNVM.pwxTxInterval != 0 && FlashNVM.pwxTxInterval != 65535){
 80140a8:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80140aa:	9a39      	ldr	r2, [sp, #228]	; 0xe4
 80140ac:	ea53 0102 	orrs.w	r1, r3, r2
 80140b0:	d006      	beq.n	80140c0 <SecureElementInit+0xa0>
 80140b2:	f5a3 417f 	sub.w	r1, r3, #65280	; 0xff00
 80140b6:	39ff      	subs	r1, #255	; 0xff
 80140b8:	4311      	orrs	r1, r2
 80140ba:	d001      	beq.n	80140c0 <SecureElementInit+0xa0>
			TRANSMIT_INTERVAL_MS = FlashNVM.pwxTxInterval;
 80140bc:	4a52      	ldr	r2, [pc, #328]	; (8014208 <SecureElementInit+0x1e8>)
 80140be:	6013      	str	r3, [r2, #0]
		}
		MW_LOG( TS_OFF, VLEVEL_M, "###### TX Interval: %u \r\n", TRANSMIT_INTERVAL_MS);
 80140c0:	4b51      	ldr	r3, [pc, #324]	; (8014208 <SecureElementInit+0x1e8>)
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	9300      	str	r3, [sp, #0]
 80140c6:	4b51      	ldr	r3, [pc, #324]	; (801420c <SecureElementInit+0x1ec>)
 80140c8:	2200      	movs	r2, #0
 80140ca:	4611      	mov	r1, r2
 80140cc:	2002      	movs	r0, #2
 80140ce:	f002 fa59 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 80140d2:	2064      	movs	r0, #100	; 0x64
 80140d4:	f7ee fc04 	bl	80028e0 <HAL_Delay>

		if(FlashNVM.pwxCnfUplinkCount != 0 && FlashNVM.pwxCnfUplinkCount != 65535){
 80140d8:	f8bd 20f0 	ldrh.w	r2, [sp, #240]	; 0xf0
 80140dc:	1e53      	subs	r3, r2, #1
 80140de:	b29b      	uxth	r3, r3
 80140e0:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 80140e4:	428b      	cmp	r3, r1
 80140e6:	d801      	bhi.n	80140ec <SecureElementInit+0xcc>
			MAX_UPLINK_BEFORE_CONFIRMED = FlashNVM.pwxCnfUplinkCount;
 80140e8:	4b49      	ldr	r3, [pc, #292]	; (8014210 <SecureElementInit+0x1f0>)
 80140ea:	601a      	str	r2, [r3, #0]
		}
		MW_LOG( TS_OFF, VLEVEL_M, "###### Uplinks before Confirmed Uplink: %u \r\n", MAX_UPLINK_BEFORE_CONFIRMED);
 80140ec:	4b48      	ldr	r3, [pc, #288]	; (8014210 <SecureElementInit+0x1f0>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	4b48      	ldr	r3, [pc, #288]	; (8014214 <SecureElementInit+0x1f4>)
 80140f4:	2200      	movs	r2, #0
 80140f6:	4611      	mov	r1, r2
 80140f8:	2002      	movs	r0, #2
 80140fa:	f002 fa43 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 80140fe:	2064      	movs	r0, #100	; 0x64
 8014100:	f7ee fbee 	bl	80028e0 <HAL_Delay>

		if(FlashNVM.pwxSamplingCount != 0 && FlashNVM.pwxSamplingCount < 8192){
 8014104:	f8bd 20fa 	ldrh.w	r2, [sp, #250]	; 0xfa
 8014108:	1e53      	subs	r3, r2, #1
 801410a:	b29b      	uxth	r3, r3
 801410c:	f641 71fe 	movw	r1, #8190	; 0x1ffe
 8014110:	428b      	cmp	r3, r1
 8014112:	d859      	bhi.n	80141c8 <SecureElementInit+0x1a8>
			MAX_WATER_LEVEL_SAMPLES = FlashNVM.pwxSamplingCount;
 8014114:	4b40      	ldr	r3, [pc, #256]	; (8014218 <SecureElementInit+0x1f8>)
 8014116:	601a      	str	r2, [r3, #0]
		} else {
			MAX_WATER_LEVEL_SAMPLES = 5;
		}
		MW_LOG( TS_OFF, VLEVEL_M, "###### Sampling Counts before TX: %u \r\n", MAX_WATER_LEVEL_SAMPLES);
 8014118:	4b3f      	ldr	r3, [pc, #252]	; (8014218 <SecureElementInit+0x1f8>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	9300      	str	r3, [sp, #0]
 801411e:	4b3f      	ldr	r3, [pc, #252]	; (801421c <SecureElementInit+0x1fc>)
 8014120:	2200      	movs	r2, #0
 8014122:	4611      	mov	r1, r2
 8014124:	2002      	movs	r0, #2
 8014126:	f002 fa2d 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 801412a:	2064      	movs	r0, #100	; 0x64
 801412c:	f7ee fbd8 	bl	80028e0 <HAL_Delay>

		if(FlashNVM.pwxSamplingMethod != 65535){
			samplingMethod = FlashNVM.pwxSamplingMethod;
 8014130:	f89d 30f7 	ldrb.w	r3, [sp, #247]	; 0xf7
 8014134:	4a3a      	ldr	r2, [pc, #232]	; (8014220 <SecureElementInit+0x200>)
 8014136:	6013      	str	r3, [r2, #0]
		} else {
			samplingMethod = 0;
		}
		MW_LOG( TS_OFF, VLEVEL_M, "###### Sampling Method: %u \r\n", samplingMethod);
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	4b3a      	ldr	r3, [pc, #232]	; (8014224 <SecureElementInit+0x204>)
 801413c:	2200      	movs	r2, #0
 801413e:	4611      	mov	r1, r2
 8014140:	2002      	movs	r0, #2
 8014142:	f002 fa1f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 8014146:	2064      	movs	r0, #100	; 0x64
 8014148:	f7ee fbca 	bl	80028e0 <HAL_Delay>

		if(FlashNVM.pwxMeasurementMethod != 65535){
			measurementMethod = FlashNVM.pwxMeasurementMethod;
 801414c:	f89d 30f8 	ldrb.w	r3, [sp, #248]	; 0xf8
 8014150:	4a35      	ldr	r2, [pc, #212]	; (8014228 <SecureElementInit+0x208>)
 8014152:	6013      	str	r3, [r2, #0]
		} else {
			measurementMethod = 0;
		}
		MW_LOG( TS_OFF, VLEVEL_M, "###### Measurement Method: %u \r\n", measurementMethod);
 8014154:	9300      	str	r3, [sp, #0]
 8014156:	4b35      	ldr	r3, [pc, #212]	; (801422c <SecureElementInit+0x20c>)
 8014158:	2200      	movs	r2, #0
 801415a:	4611      	mov	r1, r2
 801415c:	2002      	movs	r0, #2
 801415e:	f002 fa11 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 8014162:	2064      	movs	r0, #100	; 0x64
 8014164:	f7ee fbbc 	bl	80028e0 <HAL_Delay>
//		if(FlashNVM.pwxWaterLevelThreshold != 0 && FlashNVM.pwxWaterLevelThreshold != 65535){
//			thresholdLevel = FlashNVM.pwxWaterLevelThreshold;
//		}
//		MW_LOG( TS_OFF, VLEVEL_M, "###### Water Level Threshold: %u \r\n", thresholdLevel);

		if(FlashNVM.pwxWaterLevelThresholdHigh > 0 && FlashNVM.pwxWaterLevelThresholdHigh != 65535 && FlashNVM.pwxWaterLevelThresholdHigh < 255){
 8014168:	f8bd 40f2 	ldrh.w	r4, [sp, #242]	; 0xf2
 801416c:	1e63      	subs	r3, r4, #1
 801416e:	b29b      	uxth	r3, r3
 8014170:	2bfd      	cmp	r3, #253	; 0xfd
 8014172:	d82d      	bhi.n	80141d0 <SecureElementInit+0x1b0>
			thresholdLevelHigh = FlashNVM.pwxWaterLevelThresholdHigh;
 8014174:	4620      	mov	r0, r4
 8014176:	f7ec fe15 	bl	8000da4 <__aeabi_ui2f>
 801417a:	4b2d      	ldr	r3, [pc, #180]	; (8014230 <SecureElementInit+0x210>)
 801417c:	6018      	str	r0, [r3, #0]
		}else{
			thresholdLevelHigh = 2.0;
		}
		MW_LOG( TS_OFF, VLEVEL_M, "###### Water Level High Threshold: %u \r\n", FlashNVM.pwxWaterLevelThresholdHigh);
 801417e:	9400      	str	r4, [sp, #0]
 8014180:	4b2c      	ldr	r3, [pc, #176]	; (8014234 <SecureElementInit+0x214>)
 8014182:	2200      	movs	r2, #0
 8014184:	4611      	mov	r1, r2
 8014186:	2002      	movs	r0, #2
 8014188:	f002 f9fc 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 801418c:	2064      	movs	r0, #100	; 0x64
 801418e:	f7ee fba7 	bl	80028e0 <HAL_Delay>

		if(FlashNVM.pwxWaterLevelThresholdLow > 0 && FlashNVM.pwxWaterLevelThresholdLow != 65535 && FlashNVM.pwxWaterLevelThresholdLow < 255){
 8014192:	f8bd 40f4 	ldrh.w	r4, [sp, #244]	; 0xf4
 8014196:	1e63      	subs	r3, r4, #1
 8014198:	b29b      	uxth	r3, r3
 801419a:	2bfd      	cmp	r3, #253	; 0xfd
 801419c:	d81d      	bhi.n	80141da <SecureElementInit+0x1ba>
			thresholdLevelLow = FlashNVM.pwxWaterLevelThresholdLow;
 801419e:	4620      	mov	r0, r4
 80141a0:	f7ec fe00 	bl	8000da4 <__aeabi_ui2f>
 80141a4:	4b24      	ldr	r3, [pc, #144]	; (8014238 <SecureElementInit+0x218>)
 80141a6:	6018      	str	r0, [r3, #0]
		}else{
			thresholdLevelLow = 1.5;
		}
		MW_LOG( TS_OFF, VLEVEL_M, "###### Water Level Low Threshold: %u \r\n", FlashNVM.pwxWaterLevelThresholdLow);
 80141a8:	9400      	str	r4, [sp, #0]
 80141aa:	4b24      	ldr	r3, [pc, #144]	; (801423c <SecureElementInit+0x21c>)
 80141ac:	2200      	movs	r2, #0
 80141ae:	4611      	mov	r1, r2
 80141b0:	2002      	movs	r0, #2
 80141b2:	f002 f9e7 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
		HAL_Delay(100);
 80141b6:	2064      	movs	r0, #100	; 0x64
 80141b8:	f7ee fb92 	bl	80028e0 <HAL_Delay>
	} else {
		MW_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
	}


	HAL_Delay(10);
 80141bc:	200a      	movs	r0, #10
 80141be:	f7ee fb8f 	bl	80028e0 <HAL_Delay>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 80141c2:	2000      	movs	r0, #0
}
 80141c4:	b040      	add	sp, #256	; 0x100
 80141c6:	bd10      	pop	{r4, pc}
			MAX_WATER_LEVEL_SAMPLES = 5;
 80141c8:	4b13      	ldr	r3, [pc, #76]	; (8014218 <SecureElementInit+0x1f8>)
 80141ca:	2205      	movs	r2, #5
 80141cc:	601a      	str	r2, [r3, #0]
 80141ce:	e7a3      	b.n	8014118 <SecureElementInit+0xf8>
			thresholdLevelHigh = 2.0;
 80141d0:	4b17      	ldr	r3, [pc, #92]	; (8014230 <SecureElementInit+0x210>)
 80141d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80141d6:	601a      	str	r2, [r3, #0]
 80141d8:	e7d1      	b.n	801417e <SecureElementInit+0x15e>
			thresholdLevelLow = 1.5;
 80141da:	4b17      	ldr	r3, [pc, #92]	; (8014238 <SecureElementInit+0x218>)
 80141dc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80141e0:	601a      	str	r2, [r3, #0]
 80141e2:	e7e1      	b.n	80141a8 <SecureElementInit+0x188>
		MW_LOG(TS_OFF, VLEVEL_M, "FAILED READING FLASH \r\n");
 80141e4:	4b16      	ldr	r3, [pc, #88]	; (8014240 <SecureElementInit+0x220>)
 80141e6:	2200      	movs	r2, #0
 80141e8:	4611      	mov	r1, r2
 80141ea:	2002      	movs	r0, #2
 80141ec:	f002 f9ca 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 80141f0:	e7e4      	b.n	80141bc <SecureElementInit+0x19c>
        return SECURE_ELEMENT_ERROR_NPE;
 80141f2:	2002      	movs	r0, #2
}
 80141f4:	4770      	bx	lr
 80141f6:	bf00      	nop
 80141f8:	20001a64 	.word	0x20001a64
 80141fc:	0803e500 	.word	0x0803e500
 8014200:	0803f000 	.word	0x0803f000
 8014204:	0801e6b4 	.word	0x0801e6b4
 8014208:	2000004c 	.word	0x2000004c
 801420c:	0801e6d0 	.word	0x0801e6d0
 8014210:	20000040 	.word	0x20000040
 8014214:	0801e6ec 	.word	0x0801e6ec
 8014218:	20000044 	.word	0x20000044
 801421c:	0801e71c 	.word	0x0801e71c
 8014220:	20000b14 	.word	0x20000b14
 8014224:	0801d164 	.word	0x0801d164
 8014228:	200009e4 	.word	0x200009e4
 801422c:	0801e744 	.word	0x0801e744
 8014230:	20000050 	.word	0x20000050
 8014234:	0801e768 	.word	0x0801e768
 8014238:	20000054 	.word	0x20000054
 801423c:	0801e794 	.word	0x0801e794
 8014240:	0801c4cc 	.word	0x0801c4cc

08014244 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8014244:	2300      	movs	r3, #0
 8014246:	2b0a      	cmp	r3, #10
 8014248:	d817      	bhi.n	801427a <SecureElementGetKeyByID+0x36>
{
 801424a:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 801424c:	4a0c      	ldr	r2, [pc, #48]	; (8014280 <SecureElementGetKeyByID+0x3c>)
 801424e:	6814      	ldr	r4, [r2, #0]
 8014250:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8014254:	4422      	add	r2, r4
 8014256:	7e12      	ldrb	r2, [r2, #24]
 8014258:	4282      	cmp	r2, r0
 801425a:	d006      	beq.n	801426a <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801425c:	3301      	adds	r3, #1
 801425e:	b2db      	uxtb	r3, r3
 8014260:	2b0a      	cmp	r3, #10
 8014262:	d9f3      	bls.n	801424c <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8014264:	2003      	movs	r0, #3
}
 8014266:	bc10      	pop	{r4}
 8014268:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 801426a:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 801426e:	f10c 0c18 	add.w	ip, ip, #24
 8014272:	4464      	add	r4, ip
 8014274:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8014276:	2000      	movs	r0, #0
 8014278:	e7f5      	b.n	8014266 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801427a:	2003      	movs	r0, #3
}
 801427c:	4770      	bx	lr
 801427e:	bf00      	nop
 8014280:	20001a64 	.word	0x20001a64

08014284 <PrintKey>:
{
 8014284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014288:	b099      	sub	sp, #100	; 0x64
 801428a:	4604      	mov	r4, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 801428c:	a917      	add	r1, sp, #92	; 0x5c
 801428e:	f7ff ffd9 	bl	8014244 <SecureElementGetKeyByID>
 8014292:	4603      	mov	r3, r0
 8014294:	2800      	cmp	r0, #0
 8014296:	d042      	beq.n	801431e <PrintKey+0x9a>
}
 8014298:	b019      	add	sp, #100	; 0x64
 801429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 801429e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 80142a2:	eb01 0380 	add.w	r3, r1, r0, lsl #2
 80142a6:	689b      	ldr	r3, [r3, #8]
 80142a8:	9313      	str	r3, [sp, #76]	; 0x4c
 80142aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80142ac:	785a      	ldrb	r2, [r3, #1]
 80142ae:	9214      	str	r2, [sp, #80]	; 0x50
 80142b0:	7899      	ldrb	r1, [r3, #2]
 80142b2:	9115      	str	r1, [sp, #84]	; 0x54
 80142b4:	78da      	ldrb	r2, [r3, #3]
 80142b6:	7919      	ldrb	r1, [r3, #4]
 80142b8:	7958      	ldrb	r0, [r3, #5]
 80142ba:	799c      	ldrb	r4, [r3, #6]
 80142bc:	79dd      	ldrb	r5, [r3, #7]
 80142be:	7a1e      	ldrb	r6, [r3, #8]
 80142c0:	7a5f      	ldrb	r7, [r3, #9]
 80142c2:	f893 c00a 	ldrb.w	ip, [r3, #10]
 80142c6:	f893 e00b 	ldrb.w	lr, [r3, #11]
 80142ca:	f893 800c 	ldrb.w	r8, [r3, #12]
 80142ce:	f893 900d 	ldrb.w	r9, [r3, #13]
 80142d2:	f893 a00e 	ldrb.w	sl, [r3, #14]
 80142d6:	f893 b00f 	ldrb.w	fp, [r3, #15]
 80142da:	7c1b      	ldrb	r3, [r3, #16]
 80142dc:	9310      	str	r3, [sp, #64]	; 0x40
 80142de:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 80142e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80142e6:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80142ea:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 80142ee:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80142f2:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 80142f6:	9709      	str	r7, [sp, #36]	; 0x24
 80142f8:	9608      	str	r6, [sp, #32]
 80142fa:	9507      	str	r5, [sp, #28]
 80142fc:	9406      	str	r4, [sp, #24]
 80142fe:	9005      	str	r0, [sp, #20]
 8014300:	9104      	str	r1, [sp, #16]
 8014302:	9203      	str	r2, [sp, #12]
 8014304:	9915      	ldr	r1, [sp, #84]	; 0x54
 8014306:	9102      	str	r1, [sp, #8]
 8014308:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801430a:	9201      	str	r2, [sp, #4]
 801430c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801430e:	9300      	str	r3, [sp, #0]
 8014310:	4b09      	ldr	r3, [pc, #36]	; (8014338 <PrintKey+0xb4>)
 8014312:	2200      	movs	r2, #0
 8014314:	4611      	mov	r1, r2
 8014316:	2002      	movs	r0, #2
 8014318:	f002 f934 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
                return;
 801431c:	e7bc      	b.n	8014298 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801431e:	2b0a      	cmp	r3, #10
 8014320:	d8ba      	bhi.n	8014298 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8014322:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8014326:	4905      	ldr	r1, [pc, #20]	; (801433c <PrintKey+0xb8>)
 8014328:	f811 2022 	ldrb.w	r2, [r1, r2, lsl #2]
 801432c:	42a2      	cmp	r2, r4
 801432e:	d0b6      	beq.n	801429e <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8014330:	3301      	adds	r3, #1
 8014332:	b2db      	uxtb	r3, r3
 8014334:	e7f3      	b.n	801431e <PrintKey+0x9a>
 8014336:	bf00      	nop
 8014338:	0801e7bc 	.word	0x0801e7bc
 801433c:	0801e8d4 	.word	0x0801e8d4

08014340 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8014340:	2b0b      	cmp	r3, #11
 8014342:	d80a      	bhi.n	801435a <SecureElementComputeAesCmac+0x1a>
{
 8014344:	b500      	push	{lr}
 8014346:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8014348:	f8dd c010 	ldr.w	ip, [sp, #16]
 801434c:	f8cd c000 	str.w	ip, [sp]
 8014350:	f7ff fe26 	bl	8013fa0 <ComputeCmac>
}
 8014354:	b003      	add	sp, #12
 8014356:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801435a:	2003      	movs	r0, #3
}
 801435c:	4770      	bx	lr

0801435e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 801435e:	b190      	cbz	r0, 8014386 <SecureElementVerifyAesCmac+0x28>
{
 8014360:	b510      	push	{r4, lr}
 8014362:	b084      	sub	sp, #16
 8014364:	468c      	mov	ip, r1
 8014366:	4614      	mov	r4, r2
 8014368:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 801436a:	2000      	movs	r0, #0
 801436c:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801436e:	aa03      	add	r2, sp, #12
 8014370:	9200      	str	r2, [sp, #0]
 8014372:	4662      	mov	r2, ip
 8014374:	f7ff fe14 	bl	8013fa0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8014378:	b918      	cbnz	r0, 8014382 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 801437a:	9b03      	ldr	r3, [sp, #12]
 801437c:	42a3      	cmp	r3, r4
 801437e:	d000      	beq.n	8014382 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 8014380:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8014382:	b004      	add	sp, #16
 8014384:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014386:	2002      	movs	r0, #2
}
 8014388:	4770      	bx	lr

0801438a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 801438a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801438e:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 8014390:	b348      	cbz	r0, 80143e6 <SecureElementAesEncrypt+0x5c>
 8014392:	460d      	mov	r5, r1
 8014394:	4614      	mov	r4, r2
 8014396:	461e      	mov	r6, r3
 8014398:	4607      	mov	r7, r0
 801439a:	b33b      	cbz	r3, 80143ec <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 801439c:	f011 0f0f 	tst.w	r1, #15
 80143a0:	d127      	bne.n	80143f2 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80143a2:	22f0      	movs	r2, #240	; 0xf0
 80143a4:	2100      	movs	r1, #0
 80143a6:	a801      	add	r0, sp, #4
 80143a8:	f000 fa27 	bl	80147fa <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80143ac:	4669      	mov	r1, sp
 80143ae:	4620      	mov	r0, r4
 80143b0:	f7ff fdd6 	bl	8013f60 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80143b4:	4680      	mov	r8, r0
 80143b6:	b118      	cbz	r0, 80143c0 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 80143b8:	4640      	mov	r0, r8
 80143ba:	b03e      	add	sp, #248	; 0xf8
 80143bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80143c0:	aa01      	add	r2, sp, #4
 80143c2:	2110      	movs	r1, #16
 80143c4:	9800      	ldr	r0, [sp, #0]
 80143c6:	3001      	adds	r0, #1
 80143c8:	f7ff fd1c 	bl	8013e04 <lorawan_aes_set_key>
        uint8_t block = 0;
 80143cc:	4644      	mov	r4, r8
        while( size != 0 )
 80143ce:	e007      	b.n	80143e0 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 80143d0:	aa01      	add	r2, sp, #4
 80143d2:	1931      	adds	r1, r6, r4
 80143d4:	1938      	adds	r0, r7, r4
 80143d6:	f7ff fd99 	bl	8013f0c <lorawan_aes_encrypt>
            block = block + 16;
 80143da:	3410      	adds	r4, #16
 80143dc:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 80143de:	3d10      	subs	r5, #16
        while( size != 0 )
 80143e0:	2d00      	cmp	r5, #0
 80143e2:	d1f5      	bne.n	80143d0 <SecureElementAesEncrypt+0x46>
 80143e4:	e7e8      	b.n	80143b8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 80143e6:	f04f 0802 	mov.w	r8, #2
 80143ea:	e7e5      	b.n	80143b8 <SecureElementAesEncrypt+0x2e>
 80143ec:	f04f 0802 	mov.w	r8, #2
 80143f0:	e7e2      	b.n	80143b8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 80143f2:	f04f 0805 	mov.w	r8, #5
 80143f6:	e7df      	b.n	80143b8 <SecureElementAesEncrypt+0x2e>

080143f8 <SecureElementSetKey>:
{
 80143f8:	b530      	push	{r4, r5, lr}
 80143fa:	b085      	sub	sp, #20
    if( key == NULL )
 80143fc:	2900      	cmp	r1, #0
 80143fe:	d038      	beq.n	8014472 <SecureElementSetKey+0x7a>
 8014400:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8014402:	2300      	movs	r3, #0
 8014404:	2b0a      	cmp	r3, #10
 8014406:	d830      	bhi.n	801446a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8014408:	4a1b      	ldr	r2, [pc, #108]	; (8014478 <SecureElementSetKey+0x80>)
 801440a:	6811      	ldr	r1, [r2, #0]
 801440c:	461c      	mov	r4, r3
 801440e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8014412:	440a      	add	r2, r1
 8014414:	7e12      	ldrb	r2, [r2, #24]
 8014416:	4282      	cmp	r2, r0
 8014418:	d002      	beq.n	8014420 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801441a:	3301      	adds	r3, #1
 801441c:	b2db      	uxtb	r3, r3
 801441e:	e7f1      	b.n	8014404 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8014420:	280d      	cmp	r0, #13
 8014422:	d00a      	beq.n	801443a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8014424:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 8014428:	3418      	adds	r4, #24
 801442a:	1908      	adds	r0, r1, r4
 801442c:	2210      	movs	r2, #16
 801442e:	4661      	mov	r1, ip
 8014430:	3001      	adds	r0, #1
 8014432:	f000 f9ca 	bl	80147ca <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8014436:	2500      	movs	r5, #0
 8014438:	e018      	b.n	801446c <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 801443a:	2300      	movs	r3, #0
 801443c:	9300      	str	r3, [sp, #0]
 801443e:	9301      	str	r3, [sp, #4]
 8014440:	9302      	str	r3, [sp, #8]
 8014442:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8014444:	466b      	mov	r3, sp
 8014446:	220c      	movs	r2, #12
 8014448:	2110      	movs	r1, #16
 801444a:	4660      	mov	r0, ip
 801444c:	f7ff ff9d 	bl	801438a <SecureElementAesEncrypt>
 8014450:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8014452:	4b09      	ldr	r3, [pc, #36]	; (8014478 <SecureElementSetKey+0x80>)
 8014454:	6818      	ldr	r0, [r3, #0]
 8014456:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801445a:	3418      	adds	r4, #24
 801445c:	4420      	add	r0, r4
 801445e:	2210      	movs	r2, #16
 8014460:	4669      	mov	r1, sp
 8014462:	3001      	adds	r0, #1
 8014464:	f000 f9b1 	bl	80147ca <memcpy1>
                return retval;
 8014468:	e000      	b.n	801446c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801446a:	2503      	movs	r5, #3
}
 801446c:	4628      	mov	r0, r5
 801446e:	b005      	add	sp, #20
 8014470:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014472:	2502      	movs	r5, #2
 8014474:	e7fa      	b.n	801446c <SecureElementSetKey+0x74>
 8014476:	bf00      	nop
 8014478:	20001a64 	.word	0x20001a64

0801447c <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 801447c:	b1d0      	cbz	r0, 80144b4 <SecureElementDeriveAndStoreKey+0x38>
{
 801447e:	b510      	push	{r4, lr}
 8014480:	b084      	sub	sp, #16
 8014482:	4614      	mov	r4, r2
 8014484:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 8014486:	2a0c      	cmp	r2, #12
 8014488:	d101      	bne.n	801448e <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 801448a:	290b      	cmp	r1, #11
 801448c:	d114      	bne.n	80144b8 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 801448e:	2300      	movs	r3, #0
 8014490:	9300      	str	r3, [sp, #0]
 8014492:	9301      	str	r3, [sp, #4]
 8014494:	9302      	str	r3, [sp, #8]
 8014496:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 8014498:	466b      	mov	r3, sp
 801449a:	460a      	mov	r2, r1
 801449c:	2110      	movs	r1, #16
 801449e:	4660      	mov	r0, ip
 80144a0:	f7ff ff73 	bl	801438a <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80144a4:	b108      	cbz	r0, 80144aa <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80144a6:	b004      	add	sp, #16
 80144a8:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 80144aa:	4669      	mov	r1, sp
 80144ac:	4620      	mov	r0, r4
 80144ae:	f7ff ffa3 	bl	80143f8 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80144b2:	e7f8      	b.n	80144a6 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 80144b4:	2002      	movs	r0, #2
}
 80144b6:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80144b8:	2003      	movs	r0, #3
 80144ba:	e7f4      	b.n	80144a6 <SecureElementDeriveAndStoreKey+0x2a>

080144bc <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80144bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144be:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80144c2:	9c07      	ldr	r4, [sp, #28]
 80144c4:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80144c6:	b35b      	cbz	r3, 8014520 <SecureElementProcessJoinAccept+0x64>
 80144c8:	461f      	mov	r7, r3
 80144ca:	b35c      	cbz	r4, 8014524 <SecureElementProcessJoinAccept+0x68>
 80144cc:	b366      	cbz	r6, 8014528 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80144ce:	2d21      	cmp	r5, #33	; 0x21
 80144d0:	d82c      	bhi.n	801452c <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 80144d2:	462a      	mov	r2, r5
 80144d4:	4619      	mov	r1, r3
 80144d6:	4620      	mov	r0, r4
 80144d8:	f000 f977 	bl	80147ca <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80144dc:	1c63      	adds	r3, r4, #1
 80144de:	2201      	movs	r2, #1
 80144e0:	1e69      	subs	r1, r5, #1
 80144e2:	18b8      	adds	r0, r7, r2
 80144e4:	f7ff ff51 	bl	801438a <SecureElementAesEncrypt>
 80144e8:	bb10      	cbnz	r0, 8014530 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 80144ea:	7ae3      	ldrb	r3, [r4, #11]
 80144ec:	09db      	lsrs	r3, r3, #7
 80144ee:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 80144f0:	1961      	adds	r1, r4, r5
 80144f2:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 80144f6:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 80144fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80144fe:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8014502:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8014506:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 801450a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 801450e:	b98b      	cbnz	r3, 8014534 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8014510:	2301      	movs	r3, #1
 8014512:	1f29      	subs	r1, r5, #4
 8014514:	4620      	mov	r0, r4
 8014516:	f7ff ff22 	bl	801435e <SecureElementVerifyAesCmac>
 801451a:	b140      	cbz	r0, 801452e <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801451c:	2001      	movs	r0, #1
 801451e:	e006      	b.n	801452e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8014520:	2002      	movs	r0, #2
 8014522:	e004      	b.n	801452e <SecureElementProcessJoinAccept+0x72>
 8014524:	2002      	movs	r0, #2
 8014526:	e002      	b.n	801452e <SecureElementProcessJoinAccept+0x72>
 8014528:	2002      	movs	r0, #2
 801452a:	e000      	b.n	801452e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801452c:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 801452e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8014530:	2007      	movs	r0, #7
 8014532:	e7fc      	b.n	801452e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8014534:	2004      	movs	r0, #4
 8014536:	e7fa      	b.n	801452e <SecureElementProcessJoinAccept+0x72>

08014538 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8014538:	b140      	cbz	r0, 801454c <SecureElementSetDevEui+0x14>
{
 801453a:	b508      	push	{r3, lr}
 801453c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 801453e:	2208      	movs	r2, #8
 8014540:	4b03      	ldr	r3, [pc, #12]	; (8014550 <SecureElementSetDevEui+0x18>)
 8014542:	6818      	ldr	r0, [r3, #0]
 8014544:	f000 f941 	bl	80147ca <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8014548:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801454a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801454c:	2002      	movs	r0, #2
}
 801454e:	4770      	bx	lr
 8014550:	20001a64 	.word	0x20001a64

08014554 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8014554:	b138      	cbz	r0, 8014566 <SecureElementGetDevEui+0x12>
{
 8014556:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8014558:	2208      	movs	r2, #8
 801455a:	4904      	ldr	r1, [pc, #16]	; (801456c <SecureElementGetDevEui+0x18>)
 801455c:	6809      	ldr	r1, [r1, #0]
 801455e:	f000 f934 	bl	80147ca <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8014562:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8014564:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014566:	2002      	movs	r0, #2
}
 8014568:	4770      	bx	lr
 801456a:	bf00      	nop
 801456c:	20001a64 	.word	0x20001a64

08014570 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8014570:	b148      	cbz	r0, 8014586 <SecureElementSetJoinEui+0x16>
{
 8014572:	b508      	push	{r3, lr}
 8014574:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 8014576:	4b05      	ldr	r3, [pc, #20]	; (801458c <SecureElementSetJoinEui+0x1c>)
 8014578:	6818      	ldr	r0, [r3, #0]
 801457a:	2208      	movs	r2, #8
 801457c:	4410      	add	r0, r2
 801457e:	f000 f924 	bl	80147ca <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8014582:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8014584:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8014586:	2002      	movs	r0, #2
}
 8014588:	4770      	bx	lr
 801458a:	bf00      	nop
 801458c:	20001a64 	.word	0x20001a64

08014590 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 8014590:	b140      	cbz	r0, 80145a4 <SecureElementGetJoinEui+0x14>
{
 8014592:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 8014594:	4a04      	ldr	r2, [pc, #16]	; (80145a8 <SecureElementGetJoinEui+0x18>)
 8014596:	6811      	ldr	r1, [r2, #0]
 8014598:	2208      	movs	r2, #8
 801459a:	4411      	add	r1, r2
 801459c:	f000 f915 	bl	80147ca <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80145a0:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80145a2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80145a4:	2002      	movs	r0, #2
}
 80145a6:	4770      	bx	lr
 80145a8:	20001a64 	.word	0x20001a64

080145ac <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 80145ac:	2802      	cmp	r0, #2
 80145ae:	d004      	beq.n	80145ba <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 80145b0:	4b04      	ldr	r3, [pc, #16]	; (80145c4 <SecureElementSetDevAddr+0x18>)
 80145b2:	681b      	ldr	r3, [r3, #0]
 80145b4:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80145b6:	2000      	movs	r0, #0
 80145b8:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80145ba:	4b02      	ldr	r3, [pc, #8]	; (80145c4 <SecureElementSetDevAddr+0x18>)
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	6119      	str	r1, [r3, #16]
 80145c0:	e7f9      	b.n	80145b6 <SecureElementSetDevAddr+0xa>
 80145c2:	bf00      	nop
 80145c4:	20001a64 	.word	0x20001a64

080145c8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 80145c8:	b169      	cbz	r1, 80145e6 <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80145ca:	2802      	cmp	r0, #2
 80145cc:	d005      	beq.n	80145da <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80145ce:	4a07      	ldr	r2, [pc, #28]	; (80145ec <SecureElementGetDevAddr+0x24>)
 80145d0:	6812      	ldr	r2, [r2, #0]
 80145d2:	6952      	ldr	r2, [r2, #20]
 80145d4:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 80145d6:	2000      	movs	r0, #0
 80145d8:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 80145da:	4a04      	ldr	r2, [pc, #16]	; (80145ec <SecureElementGetDevAddr+0x24>)
 80145dc:	6812      	ldr	r2, [r2, #0]
 80145de:	6912      	ldr	r2, [r2, #16]
 80145e0:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 80145e2:	2000      	movs	r0, #0
 80145e4:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 80145e6:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80145e8:	4770      	bx	lr
 80145ea:	bf00      	nop
 80145ec:	20001a64 	.word	0x20001a64

080145f0 <SecureElementInitMcuID>:
{
 80145f0:	b530      	push	{r4, r5, lr}
 80145f2:	b085      	sub	sp, #20
 80145f4:	4605      	mov	r5, r0
 80145f6:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 80145f8:	2300      	movs	r3, #0
 80145fa:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 80145fc:	a802      	add	r0, sp, #8
 80145fe:	f7ff ffa9 	bl	8014554 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8014602:	a901      	add	r1, sp, #4
 8014604:	2001      	movs	r0, #1
 8014606:	f7ff ffdf 	bl	80145c8 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 801460a:	b195      	cbz	r5, 8014632 <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 801460c:	2300      	movs	r3, #0
 801460e:	2b07      	cmp	r3, #7
 8014610:	d808      	bhi.n	8014624 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8014612:	f103 0210 	add.w	r2, r3, #16
 8014616:	446a      	add	r2, sp
 8014618:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 801461c:	b9aa      	cbnz	r2, 801464a <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 801461e:	3301      	adds	r3, #1
 8014620:	b2db      	uxtb	r3, r3
 8014622:	e7f4      	b.n	801460e <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8014624:	2300      	movs	r3, #0
        if( id_init == false )
 8014626:	b923      	cbnz	r3, 8014632 <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8014628:	a802      	add	r0, sp, #8
 801462a:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 801462c:	a802      	add	r0, sp, #8
 801462e:	f7ff ff83 	bl	8014538 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8014632:	b13c      	cbz	r4, 8014644 <SecureElementInitMcuID+0x54>
 8014634:	9b01      	ldr	r3, [sp, #4]
 8014636:	b92b      	cbnz	r3, 8014644 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8014638:	a801      	add	r0, sp, #4
 801463a:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 801463c:	9901      	ldr	r1, [sp, #4]
 801463e:	2001      	movs	r0, #1
 8014640:	f7ff ffb4 	bl	80145ac <SecureElementSetDevAddr>
}
 8014644:	2000      	movs	r0, #0
 8014646:	b005      	add	sp, #20
 8014648:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 801464a:	2301      	movs	r3, #1
 801464c:	e7eb      	b.n	8014626 <SecureElementInitMcuID+0x36>
	...

08014650 <PrintIds>:
{
 8014650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014652:	b08f      	sub	sp, #60	; 0x3c
 8014654:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8014656:	2400      	movs	r4, #0
 8014658:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 801465a:	a80a      	add	r0, sp, #40	; 0x28
 801465c:	f7ff ff7a 	bl	8014554 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8014660:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8014664:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8014668:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 801466c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 8014670:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 8014674:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 8014678:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 801467c:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 8014680:	f8cd e01c 	str.w	lr, [sp, #28]
 8014684:	f8cd c018 	str.w	ip, [sp, #24]
 8014688:	9705      	str	r7, [sp, #20]
 801468a:	9604      	str	r6, [sp, #16]
 801468c:	9003      	str	r0, [sp, #12]
 801468e:	9102      	str	r1, [sp, #8]
 8014690:	9201      	str	r2, [sp, #4]
 8014692:	9300      	str	r3, [sp, #0]
 8014694:	4b20      	ldr	r3, [pc, #128]	; (8014718 <PrintIds+0xc8>)
 8014696:	4622      	mov	r2, r4
 8014698:	4621      	mov	r1, r4
 801469a:	2002      	movs	r0, #2
 801469c:	f001 ff72 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 80146a0:	a80c      	add	r0, sp, #48	; 0x30
 80146a2:	f7ff ff75 	bl	8014590 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 80146a6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80146aa:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80146ae:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80146b2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 80146b6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80146ba:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 80146be:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 80146c2:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 80146c6:	f8cd e01c 	str.w	lr, [sp, #28]
 80146ca:	f8cd c018 	str.w	ip, [sp, #24]
 80146ce:	9705      	str	r7, [sp, #20]
 80146d0:	9604      	str	r6, [sp, #16]
 80146d2:	9003      	str	r0, [sp, #12]
 80146d4:	9102      	str	r1, [sp, #8]
 80146d6:	9201      	str	r2, [sp, #4]
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	4b10      	ldr	r3, [pc, #64]	; (801471c <PrintIds+0xcc>)
 80146dc:	4622      	mov	r2, r4
 80146de:	4621      	mov	r1, r4
 80146e0:	2002      	movs	r0, #2
 80146e2:	f001 ff4f 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 80146e6:	a909      	add	r1, sp, #36	; 0x24
 80146e8:	4628      	mov	r0, r5
 80146ea:	f7ff ff6d 	bl	80145c8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 80146ee:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 80146f2:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 80146f6:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 80146fa:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 80146fe:	9003      	str	r0, [sp, #12]
 8014700:	9102      	str	r1, [sp, #8]
 8014702:	9201      	str	r2, [sp, #4]
 8014704:	9300      	str	r3, [sp, #0]
 8014706:	4b06      	ldr	r3, [pc, #24]	; (8014720 <PrintIds+0xd0>)
 8014708:	4622      	mov	r2, r4
 801470a:	4621      	mov	r1, r4
 801470c:	2002      	movs	r0, #2
 801470e:	f001 ff39 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8014712:	b00f      	add	sp, #60	; 0x3c
 8014714:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014716:	bf00      	nop
 8014718:	0801c668 	.word	0x0801c668
 801471c:	0801c6a8 	.word	0x0801c6a8
 8014720:	0801e818 	.word	0x0801e818

08014724 <SecureElementPrintKeys>:
{
 8014724:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8014726:	2000      	movs	r0, #0
 8014728:	f7ff fdac 	bl	8014284 <PrintKey>
    PrintKey( NWK_KEY );
 801472c:	2001      	movs	r0, #1
 801472e:	f7ff fda9 	bl	8014284 <PrintKey>
    PrintKey( APP_S_KEY );
 8014732:	2009      	movs	r0, #9
 8014734:	f7ff fda6 	bl	8014284 <PrintKey>
    PrintKey( NWK_S_KEY );
 8014738:	2008      	movs	r0, #8
 801473a:	f7ff fda3 	bl	8014284 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 801473e:	2000      	movs	r0, #0
 8014740:	f7ff ff86 	bl	8014650 <PrintIds>
}
 8014744:	2000      	movs	r0, #0
 8014746:	bd08      	pop	{r3, pc}

08014748 <SecureElementPrintSessionKeys>:
{
 8014748:	b510      	push	{r4, lr}
 801474a:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 801474c:	200b      	movs	r0, #11
 801474e:	f7ff fd99 	bl	8014284 <PrintKey>
    PrintKey( MC_KE_KEY );
 8014752:	200c      	movs	r0, #12
 8014754:	f7ff fd96 	bl	8014284 <PrintKey>
    PrintKey( APP_S_KEY );
 8014758:	2009      	movs	r0, #9
 801475a:	f7ff fd93 	bl	8014284 <PrintKey>
    PrintKey( NWK_S_KEY );
 801475e:	2008      	movs	r0, #8
 8014760:	f7ff fd90 	bl	8014284 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8014764:	200a      	movs	r0, #10
 8014766:	f7ff fd8d 	bl	8014284 <PrintKey>
    PrintIds( mode );
 801476a:	4620      	mov	r0, r4
 801476c:	f7ff ff70 	bl	8014650 <PrintIds>
}
 8014770:	2000      	movs	r0, #0
 8014772:	bd10      	pop	{r4, pc}

08014774 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 8014774:	4b09      	ldr	r3, [pc, #36]	; (801479c <rand1+0x28>)
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	4909      	ldr	r1, [pc, #36]	; (80147a0 <rand1+0x2c>)
 801477a:	f243 0039 	movw	r0, #12345	; 0x3039
 801477e:	fb01 0002 	mla	r0, r1, r2, r0
 8014782:	6018      	str	r0, [r3, #0]
 8014784:	2303      	movs	r3, #3
 8014786:	fba3 2300 	umull	r2, r3, r3, r0
 801478a:	1ac2      	subs	r2, r0, r3
 801478c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8014790:	0f9b      	lsrs	r3, r3, #30
 8014792:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 8014796:	1ac0      	subs	r0, r0, r3
 8014798:	4770      	bx	lr
 801479a:	bf00      	nop
 801479c:	20000158 	.word	0x20000158
 80147a0:	41c64e6d 	.word	0x41c64e6d

080147a4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80147a4:	4b01      	ldr	r3, [pc, #4]	; (80147ac <srand1+0x8>)
 80147a6:	6018      	str	r0, [r3, #0]
}
 80147a8:	4770      	bx	lr
 80147aa:	bf00      	nop
 80147ac:	20000158 	.word	0x20000158

080147b0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	4605      	mov	r5, r0
 80147b4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80147b6:	f7ff ffdd 	bl	8014774 <rand1>
 80147ba:	1b61      	subs	r1, r4, r5
 80147bc:	3101      	adds	r1, #1
 80147be:	fb90 f3f1 	sdiv	r3, r0, r1
 80147c2:	fb01 0013 	mls	r0, r1, r3, r0
}
 80147c6:	4428      	add	r0, r5
 80147c8:	bd38      	pop	{r3, r4, r5, pc}

080147ca <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80147ca:	e004      	b.n	80147d6 <memcpy1+0xc>
    {
        *dst++ = *src++;
 80147cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147d0:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 80147d4:	461a      	mov	r2, r3
 80147d6:	1e53      	subs	r3, r2, #1
 80147d8:	b29b      	uxth	r3, r3
 80147da:	2a00      	cmp	r2, #0
 80147dc:	d1f6      	bne.n	80147cc <memcpy1+0x2>
    }
}
 80147de:	4770      	bx	lr

080147e0 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 80147e0:	1e53      	subs	r3, r2, #1
 80147e2:	4418      	add	r0, r3
    while( size-- )
 80147e4:	e004      	b.n	80147f0 <memcpyr+0x10>
    {
        *dst-- = *src++;
 80147e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80147ea:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 80147ee:	461a      	mov	r2, r3
 80147f0:	1e53      	subs	r3, r2, #1
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	2a00      	cmp	r2, #0
 80147f6:	d1f6      	bne.n	80147e6 <memcpyr+0x6>
    }
}
 80147f8:	4770      	bx	lr

080147fa <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 80147fa:	e002      	b.n	8014802 <memset1+0x8>
    {
        *dst++ = value;
 80147fc:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8014800:	461a      	mov	r2, r3
 8014802:	1e53      	subs	r3, r2, #1
 8014804:	b29b      	uxth	r3, r3
 8014806:	2a00      	cmp	r2, #0
 8014808:	d1f8      	bne.n	80147fc <memset1+0x2>
    }
}
 801480a:	4770      	bx	lr

0801480c <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 801480c:	b1f0      	cbz	r0, 801484c <Crc32+0x40>
{
 801480e:	b510      	push	{r4, lr}
 8014810:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8014812:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8014816:	f04f 30ff 	mov.w	r0, #4294967295
 801481a:	e00e      	b.n	801483a <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801481c:	f340 0c00 	sbfx	ip, r0, #0, #1
 8014820:	4a0b      	ldr	r2, [pc, #44]	; (8014850 <Crc32+0x44>)
 8014822:	ea0c 0202 	and.w	r2, ip, r2
 8014826:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 801482a:	3301      	adds	r3, #1
 801482c:	b29b      	uxth	r3, r3
 801482e:	2b07      	cmp	r3, #7
 8014830:	d9f4      	bls.n	801481c <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8014832:	f10e 0e01 	add.w	lr, lr, #1
 8014836:	fa1f fe8e 	uxth.w	lr, lr
 801483a:	458e      	cmp	lr, r1
 801483c:	d204      	bcs.n	8014848 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 801483e:	f814 300e 	ldrb.w	r3, [r4, lr]
 8014842:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8014844:	2300      	movs	r3, #0
 8014846:	e7f2      	b.n	801482e <Crc32+0x22>
        }
    }

    return ~crc;
 8014848:	43c0      	mvns	r0, r0
}
 801484a:	bd10      	pop	{r4, pc}
        return 0;
 801484c:	2000      	movs	r0, #0
}
 801484e:	4770      	bx	lr
 8014850:	edb88320 	.word	0xedb88320

08014854 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8014854:	2001      	movs	r0, #1
 8014856:	4770      	bx	lr

08014858 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8014858:	280a      	cmp	r0, #10
 801485a:	d807      	bhi.n	801486c <RadioGetLoRaBandwidthInHz+0x14>
 801485c:	e8df f000 	tbb	[pc, r0]
 8014860:	17110b20 	.word	0x17110b20
 8014864:	061e1c1a 	.word	0x061e1c1a
 8014868:	0e08      	.short	0x0e08
 801486a:	14          	.byte	0x14
 801486b:	00          	.byte	0x00
 801486c:	2000      	movs	r0, #0
 801486e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8014870:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8014874:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8014876:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 801487a:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801487c:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8014880:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8014882:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8014886:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8014888:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 801488c:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 801488e:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8014892:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8014894:	4804      	ldr	r0, [pc, #16]	; (80148a8 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8014896:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8014898:	4804      	ldr	r0, [pc, #16]	; (80148ac <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 801489a:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 801489c:	4804      	ldr	r0, [pc, #16]	; (80148b0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 801489e:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80148a0:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 80148a4:	4770      	bx	lr
 80148a6:	bf00      	nop
 80148a8:	0001e848 	.word	0x0001e848
 80148ac:	0003d090 	.word	0x0003d090
 80148b0:	0007a120 	.word	0x0007a120

080148b4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80148b4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80148b8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80148ba:	b953      	cbnz	r3, 80148d2 <RadioGetGfskTimeOnAirNumerator+0x1e>
 80148bc:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 80148be:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80148c0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80148c2:	b141      	cbz	r1, 80148d6 <RadioGetGfskTimeOnAirNumerator+0x22>
 80148c4:	2302      	movs	r3, #2
 80148c6:	f89d 0000 	ldrb.w	r0, [sp]
 80148ca:	4418      	add	r0, r3
}
 80148cc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 80148d0:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80148d2:	2300      	movs	r3, #0
 80148d4:	e7f3      	b.n	80148be <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80148d6:	2300      	movs	r3, #0
 80148d8:	e7f5      	b.n	80148c6 <RadioGetGfskTimeOnAirNumerator+0x12>

080148da <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80148da:	b570      	push	{r4, r5, r6, lr}
 80148dc:	f89d 4010 	ldrb.w	r4, [sp, #16]
 80148e0:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 80148e4:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 80148e6:	f1a1 0c05 	sub.w	ip, r1, #5
 80148ea:	f1bc 0f01 	cmp.w	ip, #1
 80148ee:	d931      	bls.n	8014954 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80148f0:	b918      	cbnz	r0, 80148fa <RadioGetLoRaTimeOnAirNumerator+0x20>
 80148f2:	f1a1 060b 	sub.w	r6, r1, #11
 80148f6:	2e01      	cmp	r6, #1
 80148f8:	d934      	bls.n	8014964 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 80148fa:	2801      	cmp	r0, #1
 80148fc:	d02e      	beq.n	801495c <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 80148fe:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8014900:	f89d c014 	ldrb.w	ip, [sp, #20]
 8014904:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8014908:	b385      	cbz	r5, 801496c <RadioGetLoRaTimeOnAirNumerator+0x92>
 801490a:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801490c:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 801490e:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8014910:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8014914:	b364      	cbz	r4, 8014970 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8014916:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 801491a:	44f4      	add	ip, lr

    if( datarate <= 6 )
 801491c:	2906      	cmp	r1, #6
 801491e:	d904      	bls.n	801492a <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8014920:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8014924:	b10e      	cbz	r6, 801492a <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8014926:	1e88      	subs	r0, r1, #2
 8014928:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 801492a:	f1bc 0f00 	cmp.w	ip, #0
 801492e:	db22      	blt.n	8014976 <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8014930:	4484      	add	ip, r0
 8014932:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014936:	fb9c fcf0 	sdiv	ip, ip, r0
 801493a:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 801493e:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8014942:	2906      	cmp	r1, #6
 8014944:	d801      	bhi.n	801494a <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8014946:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801494a:	0080      	lsls	r0, r0, #2
 801494c:	3001      	adds	r0, #1
 801494e:	3902      	subs	r1, #2
}
 8014950:	4088      	lsls	r0, r1
 8014952:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8014954:	2b0b      	cmp	r3, #11
 8014956:	d8cb      	bhi.n	80148f0 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8014958:	230c      	movs	r3, #12
 801495a:	e7c9      	b.n	80148f0 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801495c:	290c      	cmp	r1, #12
 801495e:	d003      	beq.n	8014968 <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8014960:	2600      	movs	r6, #0
 8014962:	e7cd      	b.n	8014900 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8014964:	2601      	movs	r6, #1
 8014966:	e7cb      	b.n	8014900 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8014968:	2601      	movs	r6, #1
 801496a:	e7c9      	b.n	8014900 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 801496c:	2000      	movs	r0, #0
 801496e:	e7cd      	b.n	801490c <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8014970:	f04f 0e14 	mov.w	lr, #20
 8014974:	e7d1      	b.n	801491a <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8014976:	f04f 0c00 	mov.w	ip, #0
 801497a:	e7d9      	b.n	8014930 <RadioGetLoRaTimeOnAirNumerator+0x56>

0801497c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 801497c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801497e:	b085      	sub	sp, #20
 8014980:	460e      	mov	r6, r1
 8014982:	4615      	mov	r5, r2
 8014984:	4619      	mov	r1, r3
 8014986:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 801498a:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 801498e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8014992:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8014996:	b148      	cbz	r0, 80149ac <RadioTimeOnAir+0x30>
 8014998:	2801      	cmp	r0, #1
 801499a:	d012      	beq.n	80149c2 <RadioTimeOnAir+0x46>
 801499c:	2501      	movs	r5, #1
 801499e:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80149a0:	442c      	add	r4, r5
 80149a2:	1e60      	subs	r0, r4, #1
}
 80149a4:	fbb0 f0f5 	udiv	r0, r0, r5
 80149a8:	b005      	add	sp, #20
 80149aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80149ac:	f8cd c004 	str.w	ip, [sp, #4]
 80149b0:	9700      	str	r7, [sp, #0]
 80149b2:	4628      	mov	r0, r5
 80149b4:	f7ff ff7e 	bl	80148b4 <RadioGetGfskTimeOnAirNumerator>
 80149b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80149bc:	fb03 f400 	mul.w	r4, r3, r0
        break;
 80149c0:	e7ee      	b.n	80149a0 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80149c2:	f8cd c008 	str.w	ip, [sp, #8]
 80149c6:	9701      	str	r7, [sp, #4]
 80149c8:	9300      	str	r3, [sp, #0]
 80149ca:	4613      	mov	r3, r2
 80149cc:	460a      	mov	r2, r1
 80149ce:	4629      	mov	r1, r5
 80149d0:	4630      	mov	r0, r6
 80149d2:	f7ff ff82 	bl	80148da <RadioGetLoRaTimeOnAirNumerator>
 80149d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80149da:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80149de:	4b03      	ldr	r3, [pc, #12]	; (80149ec <RadioTimeOnAir+0x70>)
 80149e0:	5d98      	ldrb	r0, [r3, r6]
 80149e2:	f7ff ff39 	bl	8014858 <RadioGetLoRaBandwidthInHz>
 80149e6:	4605      	mov	r5, r0
        break;
 80149e8:	e7da      	b.n	80149a0 <RadioTimeOnAir+0x24>
 80149ea:	bf00      	nop
 80149ec:	0801e9c4 	.word	0x0801e9c4

080149f0 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 80149f0:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80149f2:	4b05      	ldr	r3, [pc, #20]	; (8014a08 <RadioOnTxTimeoutProcess+0x18>)
 80149f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80149f8:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80149fa:	4b04      	ldr	r3, [pc, #16]	; (8014a0c <RadioOnTxTimeoutProcess+0x1c>)
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	b113      	cbz	r3, 8014a06 <RadioOnTxTimeoutProcess+0x16>
 8014a00:	685b      	ldr	r3, [r3, #4]
 8014a02:	b103      	cbz	r3, 8014a06 <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8014a04:	4798      	blx	r3
    }
}
 8014a06:	bd08      	pop	{r3, pc}
 8014a08:	48000400 	.word	0x48000400
 8014a0c:	20001b68 	.word	0x20001b68

08014a10 <RadioOnTxTimeoutIrq>:
{
 8014a10:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8014a12:	f7ff ffed 	bl	80149f0 <RadioOnTxTimeoutProcess>
}
 8014a16:	bd08      	pop	{r3, pc}

08014a18 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8014a18:	b508      	push	{r3, lr}
 8014a1a:	4b05      	ldr	r3, [pc, #20]	; (8014a30 <RadioOnRxTimeoutProcess+0x18>)
 8014a1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014a20:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014a22:	4b04      	ldr	r3, [pc, #16]	; (8014a34 <RadioOnRxTimeoutProcess+0x1c>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	b113      	cbz	r3, 8014a2e <RadioOnRxTimeoutProcess+0x16>
 8014a28:	68db      	ldr	r3, [r3, #12]
 8014a2a:	b103      	cbz	r3, 8014a2e <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8014a2c:	4798      	blx	r3
    }
}
 8014a2e:	bd08      	pop	{r3, pc}
 8014a30:	48000400 	.word	0x48000400
 8014a34:	20001b68 	.word	0x20001b68

08014a38 <RadioOnRxTimeoutIrq>:
{
 8014a38:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8014a3a:	f7ff ffed 	bl	8014a18 <RadioOnRxTimeoutProcess>
}
 8014a3e:	bd08      	pop	{r3, pc}

08014a40 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8014a40:	f04f 30ff 	mov.w	r0, #4294967295
 8014a44:	4770      	bx	lr

08014a46 <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8014a46:	f04f 30ff 	mov.w	r0, #4294967295
 8014a4a:	4770      	bx	lr

08014a4c <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8014a4c:	2001      	movs	r0, #1
 8014a4e:	4770      	bx	lr

08014a50 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8014a50:	2001      	movs	r0, #1
 8014a52:	4770      	bx	lr

08014a54 <RadioWrite>:
{
 8014a54:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 8014a56:	f000 fe37 	bl	80156c8 <SUBGRF_WriteRegister>
}
 8014a5a:	bd08      	pop	{r3, pc}

08014a5c <RadioTxCw>:
{
 8014a5c:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8014a5e:	f001 fbcf 	bl	8016200 <SUBGRF_SetRfTxPower>
 8014a62:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8014a64:	210e      	movs	r1, #14
 8014a66:	f640 101f 	movw	r0, #2335	; 0x91f
 8014a6a:	f000 fe2d 	bl	80156c8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8014a6e:	2101      	movs	r1, #1
 8014a70:	4620      	mov	r0, r4
 8014a72:	f001 fbb1 	bl	80161d8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8014a76:	f000 fff7 	bl	8015a68 <SUBGRF_SetTxContinuousWave>
}
 8014a7a:	bd10      	pop	{r4, pc}

08014a7c <RadioTxPrbs>:
{
 8014a7c:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8014a7e:	2101      	movs	r1, #1
 8014a80:	4b07      	ldr	r3, [pc, #28]	; (8014aa0 <RadioTxPrbs+0x24>)
 8014a82:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8014a86:	f001 fba7 	bl	80161d8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8014a8a:	212d      	movs	r1, #45	; 0x2d
 8014a8c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8014a90:	f7ff ffe0 	bl	8014a54 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8014a94:	f000 ffef 	bl	8015a76 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8014a98:	4802      	ldr	r0, [pc, #8]	; (8014aa4 <RadioTxPrbs+0x28>)
 8014a9a:	f000 ff25 	bl	80158e8 <SUBGRF_SetTx>
}
 8014a9e:	bd08      	pop	{r3, pc}
 8014aa0:	20001b84 	.word	0x20001b84
 8014aa4:	000fffff 	.word	0x000fffff

08014aa8 <RadioSetRxDutyCycle>:
{
 8014aa8:	b570      	push	{r4, r5, r6, lr}
 8014aaa:	4604      	mov	r4, r0
 8014aac:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8014aae:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8014ab2:	4e09      	ldr	r6, [pc, #36]	; (8014ad8 <RadioSetRxDutyCycle+0x30>)
 8014ab4:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	461a      	mov	r2, r3
 8014aba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014abe:	4608      	mov	r0, r1
 8014ac0:	f001 f8a5 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8014ac4:	2100      	movs	r1, #0
 8014ac6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8014aca:	f001 fb85 	bl	80161d8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8014ace:	4629      	mov	r1, r5
 8014ad0:	4620      	mov	r0, r4
 8014ad2:	f000 ff99 	bl	8015a08 <SUBGRF_SetRxDutyCycle>
}
 8014ad6:	bd70      	pop	{r4, r5, r6, pc}
 8014ad8:	20001b84 	.word	0x20001b84

08014adc <RadioRxBoosted>:
{
 8014adc:	b538      	push	{r3, r4, r5, lr}
 8014ade:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8014ae0:	f001 fc69 	bl	80163b6 <RFW_Is_Init>
 8014ae4:	2801      	cmp	r0, #1
 8014ae6:	d019      	beq.n	8014b1c <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014ae8:	2300      	movs	r3, #0
 8014aea:	461a      	mov	r2, r3
 8014aec:	f240 2162 	movw	r1, #610	; 0x262
 8014af0:	4608      	mov	r0, r1
 8014af2:	f001 f88c 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8014af6:	b9a4      	cbnz	r4, 8014b22 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8014af8:	4c11      	ldr	r4, [pc, #68]	; (8014b40 <RadioRxBoosted+0x64>)
 8014afa:	2100      	movs	r1, #0
 8014afc:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8014afe:	4b11      	ldr	r3, [pc, #68]	; (8014b44 <RadioRxBoosted+0x68>)
 8014b00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014b04:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8014b06:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014b0a:	f001 fb65 	bl	80161d8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8014b0e:	7863      	ldrb	r3, [r4, #1]
 8014b10:	b183      	cbz	r3, 8014b34 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8014b12:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014b16:	f000 ff59 	bl	80159cc <SUBGRF_SetRxBoosted>
}
 8014b1a:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8014b1c:	f001 fc53 	bl	80163c6 <RFW_ReceiveInit>
 8014b20:	e7e9      	b.n	8014af6 <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014b22:	4d09      	ldr	r5, [pc, #36]	; (8014b48 <RadioRxBoosted+0x6c>)
 8014b24:	4621      	mov	r1, r4
 8014b26:	4628      	mov	r0, r5
 8014b28:	f002 f91e 	bl	8016d68 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8014b2c:	4628      	mov	r0, r5
 8014b2e:	f002 f8d5 	bl	8016cdc <UTIL_TIMER_Start>
 8014b32:	e7e1      	b.n	8014af8 <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8014b34:	4b02      	ldr	r3, [pc, #8]	; (8014b40 <RadioRxBoosted+0x64>)
 8014b36:	6898      	ldr	r0, [r3, #8]
 8014b38:	0180      	lsls	r0, r0, #6
 8014b3a:	f000 ff47 	bl	80159cc <SUBGRF_SetRxBoosted>
}
 8014b3e:	e7ec      	b.n	8014b1a <RadioRxBoosted+0x3e>
 8014b40:	20001b84 	.word	0x20001b84
 8014b44:	48000400 	.word	0x48000400
 8014b48:	20001b6c 	.word	0x20001b6c

08014b4c <RadioStandby>:
{
 8014b4c:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8014b4e:	2000      	movs	r0, #0
 8014b50:	f000 feb0 	bl	80158b4 <SUBGRF_SetStandby>
}
 8014b54:	bd08      	pop	{r3, pc}

08014b56 <RadioRead>:
{
 8014b56:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8014b58:	f000 fdc6 	bl	80156e8 <SUBGRF_ReadRegister>
}
 8014b5c:	bd08      	pop	{r3, pc}

08014b5e <RadioGetStatus>:
{
 8014b5e:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8014b60:	f000 fda6 	bl	80156b0 <SUBGRF_GetOperatingMode>
 8014b64:	2805      	cmp	r0, #5
 8014b66:	d007      	beq.n	8014b78 <RadioGetStatus+0x1a>
 8014b68:	2807      	cmp	r0, #7
 8014b6a:	d007      	beq.n	8014b7c <RadioGetStatus+0x1e>
 8014b6c:	2804      	cmp	r0, #4
 8014b6e:	d001      	beq.n	8014b74 <RadioGetStatus+0x16>
            return RF_IDLE;
 8014b70:	2000      	movs	r0, #0
}
 8014b72:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8014b74:	2002      	movs	r0, #2
 8014b76:	e7fc      	b.n	8014b72 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8014b78:	2001      	movs	r0, #1
 8014b7a:	e7fa      	b.n	8014b72 <RadioGetStatus+0x14>
            return RF_CAD;
 8014b7c:	2003      	movs	r0, #3
 8014b7e:	e7f8      	b.n	8014b72 <RadioGetStatus+0x14>

08014b80 <RadioIrqProcess>:
{
 8014b80:	b530      	push	{r4, r5, lr}
 8014b82:	b083      	sub	sp, #12
    uint8_t size = 0;
 8014b84:	2300      	movs	r3, #0
 8014b86:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8014b8a:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8014b8c:	4ba5      	ldr	r3, [pc, #660]	; (8014e24 <RadioIrqProcess+0x2a4>)
 8014b8e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8014b92:	2b20      	cmp	r3, #32
 8014b94:	d829      	bhi.n	8014bea <RadioIrqProcess+0x6a>
 8014b96:	b21a      	sxth	r2, r3
 8014b98:	2a00      	cmp	r2, #0
 8014b9a:	f000 8140 	beq.w	8014e1e <RadioIrqProcess+0x29e>
 8014b9e:	3b01      	subs	r3, #1
 8014ba0:	2b1f      	cmp	r3, #31
 8014ba2:	f200 813c 	bhi.w	8014e1e <RadioIrqProcess+0x29e>
 8014ba6:	e8df f013 	tbh	[pc, r3, lsl #1]
 8014baa:	0063      	.short	0x0063
 8014bac:	013a007f 	.word	0x013a007f
 8014bb0:	013a00f7 	.word	0x013a00f7
 8014bb4:	013a013a 	.word	0x013a013a
 8014bb8:	013a0127 	.word	0x013a0127
 8014bbc:	013a013a 	.word	0x013a013a
 8014bc0:	013a013a 	.word	0x013a013a
 8014bc4:	013a013a 	.word	0x013a013a
 8014bc8:	013a0134 	.word	0x013a0134
 8014bcc:	013a013a 	.word	0x013a013a
 8014bd0:	013a013a 	.word	0x013a013a
 8014bd4:	013a013a 	.word	0x013a013a
 8014bd8:	013a013a 	.word	0x013a013a
 8014bdc:	013a013a 	.word	0x013a013a
 8014be0:	013a013a 	.word	0x013a013a
 8014be4:	013a013a 	.word	0x013a013a
 8014be8:	0155      	.short	0x0155
 8014bea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014bee:	f000 80b3 	beq.w	8014d58 <RadioIrqProcess+0x1d8>
 8014bf2:	d928      	bls.n	8014c46 <RadioIrqProcess+0xc6>
 8014bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014bf8:	f040 8111 	bne.w	8014e1e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8014bfc:	4b8a      	ldr	r3, [pc, #552]	; (8014e28 <RadioIrqProcess+0x2a8>)
 8014bfe:	2201      	movs	r2, #1
 8014c00:	2100      	movs	r1, #0
 8014c02:	2002      	movs	r0, #2
 8014c04:	f001 fcbe 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8014c08:	f000 fd52 	bl	80156b0 <SUBGRF_GetOperatingMode>
 8014c0c:	2804      	cmp	r0, #4
 8014c0e:	f000 80b0 	beq.w	8014d72 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8014c12:	f000 fd4d 	bl	80156b0 <SUBGRF_GetOperatingMode>
 8014c16:	2805      	cmp	r0, #5
 8014c18:	f040 8101 	bne.w	8014e1e <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8014c1c:	4b83      	ldr	r3, [pc, #524]	; (8014e2c <RadioIrqProcess+0x2ac>)
 8014c1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014c22:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8014c24:	4882      	ldr	r0, [pc, #520]	; (8014e30 <RadioIrqProcess+0x2b0>)
 8014c26:	f001 ffff 	bl	8016c28 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8014c2a:	2000      	movs	r0, #0
 8014c2c:	f000 fe42 	bl	80158b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014c30:	4b80      	ldr	r3, [pc, #512]	; (8014e34 <RadioIrqProcess+0x2b4>)
 8014c32:	681b      	ldr	r3, [r3, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	f000 80f2 	beq.w	8014e1e <RadioIrqProcess+0x29e>
 8014c3a:	68db      	ldr	r3, [r3, #12]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	f000 80ee 	beq.w	8014e1e <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8014c42:	4798      	blx	r3
 8014c44:	e0eb      	b.n	8014e1e <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8014c46:	2b40      	cmp	r3, #64	; 0x40
 8014c48:	f000 811d 	beq.w	8014e86 <RadioIrqProcess+0x306>
 8014c4c:	2b80      	cmp	r3, #128	; 0x80
 8014c4e:	f040 80e6 	bne.w	8014e1e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8014c52:	2000      	movs	r0, #0
 8014c54:	f000 fe2e 	bl	80158b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014c58:	4b76      	ldr	r3, [pc, #472]	; (8014e34 <RadioIrqProcess+0x2b4>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	f000 80de 	beq.w	8014e1e <RadioIrqProcess+0x29e>
 8014c62:	699b      	ldr	r3, [r3, #24]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	f000 80da 	beq.w	8014e1e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8014c6a:	2000      	movs	r0, #0
 8014c6c:	4798      	blx	r3
 8014c6e:	e0d6      	b.n	8014e1e <RadioIrqProcess+0x29e>
 8014c70:	4b6e      	ldr	r3, [pc, #440]	; (8014e2c <RadioIrqProcess+0x2ac>)
 8014c72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014c76:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8014c78:	486f      	ldr	r0, [pc, #444]	; (8014e38 <RadioIrqProcess+0x2b8>)
 8014c7a:	f001 ffd5 	bl	8016c28 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8014c7e:	2000      	movs	r0, #0
 8014c80:	f000 fe18 	bl	80158b4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8014c84:	f001 fb99 	bl	80163ba <RFW_Is_LongPacketModeEnabled>
 8014c88:	2801      	cmp	r0, #1
 8014c8a:	d00a      	beq.n	8014ca2 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8014c8c:	4b69      	ldr	r3, [pc, #420]	; (8014e34 <RadioIrqProcess+0x2b4>)
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f000 80c4 	beq.w	8014e1e <RadioIrqProcess+0x29e>
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	f000 80c0 	beq.w	8014e1e <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 8014c9e:	4798      	blx	r3
 8014ca0:	e0bd      	b.n	8014e1e <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 8014ca2:	f001 fb93 	bl	80163cc <RFW_DeInit_TxLongPacket>
 8014ca6:	e7f1      	b.n	8014c8c <RadioIrqProcess+0x10c>
 8014ca8:	4b60      	ldr	r3, [pc, #384]	; (8014e2c <RadioIrqProcess+0x2ac>)
 8014caa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014cae:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 8014cb0:	485f      	ldr	r0, [pc, #380]	; (8014e30 <RadioIrqProcess+0x2b0>)
 8014cb2:	f001 ffb9 	bl	8016c28 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014cb6:	4b5b      	ldr	r3, [pc, #364]	; (8014e24 <RadioIrqProcess+0x2a4>)
 8014cb8:	785b      	ldrb	r3, [r3, #1]
 8014cba:	b303      	cbz	r3, 8014cfe <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8014cbc:	22ff      	movs	r2, #255	; 0xff
 8014cbe:	f10d 0107 	add.w	r1, sp, #7
 8014cc2:	485e      	ldr	r0, [pc, #376]	; (8014e3c <RadioIrqProcess+0x2bc>)
 8014cc4:	f001 fa32 	bl	801612c <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8014cc8:	485d      	ldr	r0, [pc, #372]	; (8014e40 <RadioIrqProcess+0x2c0>)
 8014cca:	f001 fa49 	bl	8016160 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8014cce:	4b59      	ldr	r3, [pc, #356]	; (8014e34 <RadioIrqProcess+0x2b4>)
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	f000 80a3 	beq.w	8014e1e <RadioIrqProcess+0x29e>
 8014cd8:	689c      	ldr	r4, [r3, #8]
 8014cda:	2c00      	cmp	r4, #0
 8014cdc:	f000 809f 	beq.w	8014e1e <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8014ce0:	4b50      	ldr	r3, [pc, #320]	; (8014e24 <RadioIrqProcess+0x2a4>)
 8014ce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8014ce6:	2b01      	cmp	r3, #1
 8014ce8:	d11d      	bne.n	8014d26 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8014cea:	4a4e      	ldr	r2, [pc, #312]	; (8014e24 <RadioIrqProcess+0x2a4>)
 8014cec:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8014cf0:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8014cf4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014cf8:	4850      	ldr	r0, [pc, #320]	; (8014e3c <RadioIrqProcess+0x2bc>)
 8014cfa:	47a0      	blx	r4
                break;
 8014cfc:	e08f      	b.n	8014e1e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8014cfe:	2000      	movs	r0, #0
 8014d00:	f000 fdd8 	bl	80158b4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8014d04:	2100      	movs	r1, #0
 8014d06:	f640 1002 	movw	r0, #2306	; 0x902
 8014d0a:	f000 fcdd 	bl	80156c8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8014d0e:	f640 1044 	movw	r0, #2372	; 0x944
 8014d12:	f000 fce9 	bl	80156e8 <SUBGRF_ReadRegister>
 8014d16:	f040 0102 	orr.w	r1, r0, #2
 8014d1a:	b2c9      	uxtb	r1, r1
 8014d1c:	f640 1044 	movw	r0, #2372	; 0x944
 8014d20:	f000 fcd2 	bl	80156c8 <SUBGRF_WriteRegister>
 8014d24:	e7ca      	b.n	8014cbc <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8014d26:	4c3f      	ldr	r4, [pc, #252]	; (8014e24 <RadioIrqProcess+0x2a4>)
 8014d28:	4669      	mov	r1, sp
 8014d2a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8014d2c:	f001 faf8 	bl	8016320 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8014d30:	4b40      	ldr	r3, [pc, #256]	; (8014e34 <RadioIrqProcess+0x2b4>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	689d      	ldr	r5, [r3, #8]
 8014d36:	9b00      	ldr	r3, [sp, #0]
 8014d38:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8014d3c:	4a41      	ldr	r2, [pc, #260]	; (8014e44 <RadioIrqProcess+0x2c4>)
 8014d3e:	fb82 1203 	smull	r1, r2, r2, r3
 8014d42:	17db      	asrs	r3, r3, #31
 8014d44:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8014d48:	b25b      	sxtb	r3, r3
 8014d4a:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8014d4e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8014d52:	483a      	ldr	r0, [pc, #232]	; (8014e3c <RadioIrqProcess+0x2bc>)
 8014d54:	47a8      	blx	r5
                break;
 8014d56:	e062      	b.n	8014e1e <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8014d58:	2000      	movs	r0, #0
 8014d5a:	f000 fdab 	bl	80158b4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8014d5e:	4b35      	ldr	r3, [pc, #212]	; (8014e34 <RadioIrqProcess+0x2b4>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d05b      	beq.n	8014e1e <RadioIrqProcess+0x29e>
 8014d66:	699b      	ldr	r3, [r3, #24]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d058      	beq.n	8014e1e <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8014d6c:	2001      	movs	r0, #1
 8014d6e:	4798      	blx	r3
 8014d70:	e055      	b.n	8014e1e <RadioIrqProcess+0x29e>
 8014d72:	4b2e      	ldr	r3, [pc, #184]	; (8014e2c <RadioIrqProcess+0x2ac>)
 8014d74:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014d78:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8014d7a:	482f      	ldr	r0, [pc, #188]	; (8014e38 <RadioIrqProcess+0x2b8>)
 8014d7c:	f001 ff54 	bl	8016c28 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8014d80:	2000      	movs	r0, #0
 8014d82:	f000 fd97 	bl	80158b4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8014d86:	4b2b      	ldr	r3, [pc, #172]	; (8014e34 <RadioIrqProcess+0x2b4>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d047      	beq.n	8014e1e <RadioIrqProcess+0x29e>
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	2b00      	cmp	r3, #0
 8014d92:	d044      	beq.n	8014e1e <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8014d94:	4798      	blx	r3
 8014d96:	e042      	b.n	8014e1e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8014d98:	4b2b      	ldr	r3, [pc, #172]	; (8014e48 <RadioIrqProcess+0x2c8>)
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	2100      	movs	r1, #0
 8014d9e:	2002      	movs	r0, #2
 8014da0:	f001 fbf0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8014da4:	4b1f      	ldr	r3, [pc, #124]	; (8014e24 <RadioIrqProcess+0x2a4>)
 8014da6:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8014da8:	b3c9      	cbz	r1, 8014e1e <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8014daa:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8014dae:	f640 1003 	movw	r0, #2307	; 0x903
 8014db2:	f7ff fe4f 	bl	8014a54 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8014db6:	4c1b      	ldr	r4, [pc, #108]	; (8014e24 <RadioIrqProcess+0x2a4>)
 8014db8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8014dbc:	f640 1004 	movw	r0, #2308	; 0x904
 8014dc0:	f7ff fe48 	bl	8014a54 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8014dc4:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8014dc8:	f640 1005 	movw	r0, #2309	; 0x905
 8014dcc:	f7ff fe42 	bl	8014a54 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8014dd0:	f640 1002 	movw	r0, #2306	; 0x902
 8014dd4:	f7ff febf 	bl	8014b56 <RadioRead>
 8014dd8:	f040 0101 	orr.w	r1, r0, #1
 8014ddc:	b2c9      	uxtb	r1, r1
 8014dde:	f640 1002 	movw	r0, #2306	; 0x902
 8014de2:	f7ff fe37 	bl	8014a54 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8014de6:	2200      	movs	r2, #0
 8014de8:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014dea:	4613      	mov	r3, r2
 8014dec:	f240 2162 	movw	r1, #610	; 0x262
 8014df0:	4608      	mov	r0, r1
 8014df2:	f000 ff0c 	bl	8015c0e <SUBGRF_SetDioIrqParams>
 8014df6:	e012      	b.n	8014e1e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8014df8:	4b14      	ldr	r3, [pc, #80]	; (8014e4c <RadioIrqProcess+0x2cc>)
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	2100      	movs	r1, #0
 8014dfe:	2002      	movs	r0, #2
 8014e00:	f001 fbc0 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8014e04:	f001 fad7 	bl	80163b6 <RFW_Is_Init>
 8014e08:	2801      	cmp	r0, #1
 8014e0a:	d108      	bne.n	8014e1e <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8014e0c:	f001 fadf 	bl	80163ce <RFW_ReceivePayload>
 8014e10:	e005      	b.n	8014e1e <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8014e12:	4b0f      	ldr	r3, [pc, #60]	; (8014e50 <RadioIrqProcess+0x2d0>)
 8014e14:	2201      	movs	r2, #1
 8014e16:	2100      	movs	r1, #0
 8014e18:	2002      	movs	r0, #2
 8014e1a:	f001 fbb3 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
}
 8014e1e:	b003      	add	sp, #12
 8014e20:	bd30      	pop	{r4, r5, pc}
 8014e22:	bf00      	nop
 8014e24:	20001b84 	.word	0x20001b84
 8014e28:	0801e958 	.word	0x0801e958
 8014e2c:	48000400 	.word	0x48000400
 8014e30:	20001b6c 	.word	0x20001b6c
 8014e34:	20001b68 	.word	0x20001b68
 8014e38:	20001be0 	.word	0x20001be0
 8014e3c:	20001a68 	.word	0x20001a68
 8014e40:	20001ba8 	.word	0x20001ba8
 8014e44:	10624dd3 	.word	0x10624dd3
 8014e48:	0801e96c 	.word	0x0801e96c
 8014e4c:	0801e978 	.word	0x0801e978
 8014e50:	0801e984 	.word	0x0801e984
        TimerStop( &RxTimeoutTimer );
 8014e54:	4817      	ldr	r0, [pc, #92]	; (8014eb4 <RadioIrqProcess+0x334>)
 8014e56:	f001 fee7 	bl	8016c28 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8014e5a:	4b17      	ldr	r3, [pc, #92]	; (8014eb8 <RadioIrqProcess+0x338>)
 8014e5c:	785b      	ldrb	r3, [r3, #1]
 8014e5e:	b173      	cbz	r3, 8014e7e <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8014e60:	4b16      	ldr	r3, [pc, #88]	; (8014ebc <RadioIrqProcess+0x33c>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d0da      	beq.n	8014e1e <RadioIrqProcess+0x29e>
 8014e68:	68db      	ldr	r3, [r3, #12]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d0d7      	beq.n	8014e1e <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8014e6e:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8014e70:	4b13      	ldr	r3, [pc, #76]	; (8014ec0 <RadioIrqProcess+0x340>)
 8014e72:	2201      	movs	r2, #1
 8014e74:	2100      	movs	r1, #0
 8014e76:	2002      	movs	r0, #2
 8014e78:	f001 fb84 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
 8014e7c:	e7cf      	b.n	8014e1e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8014e7e:	2000      	movs	r0, #0
 8014e80:	f000 fd18 	bl	80158b4 <SUBGRF_SetStandby>
 8014e84:	e7ec      	b.n	8014e60 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8014e86:	4b0f      	ldr	r3, [pc, #60]	; (8014ec4 <RadioIrqProcess+0x344>)
 8014e88:	2201      	movs	r2, #1
 8014e8a:	2100      	movs	r1, #0
 8014e8c:	2002      	movs	r0, #2
 8014e8e:	f001 fb79 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8014e92:	4b09      	ldr	r3, [pc, #36]	; (8014eb8 <RadioIrqProcess+0x338>)
 8014e94:	785b      	ldrb	r3, [r3, #1]
 8014e96:	b143      	cbz	r3, 8014eaa <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8014e98:	4b08      	ldr	r3, [pc, #32]	; (8014ebc <RadioIrqProcess+0x33c>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d0be      	beq.n	8014e1e <RadioIrqProcess+0x29e>
 8014ea0:	691b      	ldr	r3, [r3, #16]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d0bb      	beq.n	8014e1e <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8014ea6:	4798      	blx	r3
}
 8014ea8:	e7b9      	b.n	8014e1e <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8014eaa:	2000      	movs	r0, #0
 8014eac:	f000 fd02 	bl	80158b4 <SUBGRF_SetStandby>
 8014eb0:	e7f2      	b.n	8014e98 <RadioIrqProcess+0x318>
 8014eb2:	bf00      	nop
 8014eb4:	20001b6c 	.word	0x20001b6c
 8014eb8:	20001b84 	.word	0x20001b84
 8014ebc:	20001b68 	.word	0x20001b68
 8014ec0:	0801e990 	.word	0x0801e990
 8014ec4:	0801e99c 	.word	0x0801e99c

08014ec8 <RadioOnDioIrq>:
{
 8014ec8:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8014eca:	4b03      	ldr	r3, [pc, #12]	; (8014ed8 <RadioOnDioIrq+0x10>)
 8014ecc:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8014ed0:	f7ff fe56 	bl	8014b80 <RadioIrqProcess>
}
 8014ed4:	bd08      	pop	{r3, pc}
 8014ed6:	bf00      	nop
 8014ed8:	20001b84 	.word	0x20001b84

08014edc <RadioGetWakeupTime>:
{
 8014edc:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8014ede:	f001 f9a6 	bl	801622e <SUBGRF_GetRadioWakeUpTime>
}
 8014ee2:	3003      	adds	r0, #3
 8014ee4:	bd08      	pop	{r3, pc}
	...

08014ee8 <RadioSetMaxPayloadLength>:
{
 8014ee8:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8014eea:	2801      	cmp	r0, #1
 8014eec:	d004      	beq.n	8014ef8 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8014eee:	4b0a      	ldr	r3, [pc, #40]	; (8014f18 <RadioSetMaxPayloadLength+0x30>)
 8014ef0:	7d5b      	ldrb	r3, [r3, #21]
 8014ef2:	2b01      	cmp	r3, #1
 8014ef4:	d008      	beq.n	8014f08 <RadioSetMaxPayloadLength+0x20>
}
 8014ef6:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8014ef8:	4b08      	ldr	r3, [pc, #32]	; (8014f1c <RadioSetMaxPayloadLength+0x34>)
 8014efa:	7019      	strb	r1, [r3, #0]
 8014efc:	4806      	ldr	r0, [pc, #24]	; (8014f18 <RadioSetMaxPayloadLength+0x30>)
 8014efe:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014f00:	300e      	adds	r0, #14
 8014f02:	f001 f853 	bl	8015fac <SUBGRF_SetPacketParams>
 8014f06:	e7f6      	b.n	8014ef6 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8014f08:	4b04      	ldr	r3, [pc, #16]	; (8014f1c <RadioSetMaxPayloadLength+0x34>)
 8014f0a:	7019      	strb	r1, [r3, #0]
 8014f0c:	4802      	ldr	r0, [pc, #8]	; (8014f18 <RadioSetMaxPayloadLength+0x30>)
 8014f0e:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8014f10:	300e      	adds	r0, #14
 8014f12:	f001 f84b 	bl	8015fac <SUBGRF_SetPacketParams>
}
 8014f16:	e7ee      	b.n	8014ef6 <RadioSetMaxPayloadLength+0xe>
 8014f18:	20001b84 	.word	0x20001b84
 8014f1c:	2000015c 	.word	0x2000015c

08014f20 <RadioReadRegisters>:
{
 8014f20:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8014f22:	f000 fc5f 	bl	80157e4 <SUBGRF_ReadRegisters>
}
 8014f26:	bd08      	pop	{r3, pc}

08014f28 <RadioWriteRegisters>:
{
 8014f28:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8014f2a:	f000 fc19 	bl	8015760 <SUBGRF_WriteRegisters>
}
 8014f2e:	bd08      	pop	{r3, pc}

08014f30 <RadioRssi>:
{
 8014f30:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8014f32:	f001 f8cb 	bl	80160cc <SUBGRF_GetRssiInst>
}
 8014f36:	b200      	sxth	r0, r0
 8014f38:	bd08      	pop	{r3, pc}
	...

08014f3c <RadioSetTxContinuousWave>:
{
 8014f3c:	b538      	push	{r3, r4, r5, lr}
 8014f3e:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8014f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014f44:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 8014f48:	f000 fed4 	bl	8015cf4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8014f4c:	4628      	mov	r0, r5
 8014f4e:	f001 f957 	bl	8016200 <SUBGRF_SetRfTxPower>
 8014f52:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8014f54:	210e      	movs	r1, #14
 8014f56:	f640 101f 	movw	r0, #2335	; 0x91f
 8014f5a:	f000 fbb5 	bl	80156c8 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8014f5e:	2101      	movs	r1, #1
 8014f60:	4628      	mov	r0, r5
 8014f62:	f001 f939 	bl	80161d8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8014f66:	f000 fd7f 	bl	8015a68 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8014f6a:	4d04      	ldr	r5, [pc, #16]	; (8014f7c <RadioSetTxContinuousWave+0x40>)
 8014f6c:	4621      	mov	r1, r4
 8014f6e:	4628      	mov	r0, r5
 8014f70:	f001 fefa 	bl	8016d68 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8014f74:	4628      	mov	r0, r5
 8014f76:	f001 feb1 	bl	8016cdc <UTIL_TIMER_Start>
}
 8014f7a:	bd38      	pop	{r3, r4, r5, pc}
 8014f7c:	20001be0 	.word	0x20001be0

08014f80 <RadioSetChannel>:
{
 8014f80:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8014f82:	f000 feb7 	bl	8015cf4 <SUBGRF_SetRfFrequency>
}
 8014f86:	bd08      	pop	{r3, pc}

08014f88 <RadioStartCad>:
{
 8014f88:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8014f8a:	2100      	movs	r1, #0
 8014f8c:	4b07      	ldr	r3, [pc, #28]	; (8014fac <RadioStartCad+0x24>)
 8014f8e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8014f92:	f001 f921 	bl	80161d8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8014f96:	2300      	movs	r3, #0
 8014f98:	461a      	mov	r2, r3
 8014f9a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8014f9e:	4608      	mov	r0, r1
 8014fa0:	f000 fe35 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8014fa4:	f000 fd54 	bl	8015a50 <SUBGRF_SetCad>
}
 8014fa8:	bd08      	pop	{r3, pc}
 8014faa:	bf00      	nop
 8014fac:	20001b84 	.word	0x20001b84

08014fb0 <RadioRx>:
{
 8014fb0:	b538      	push	{r3, r4, r5, lr}
 8014fb2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8014fb4:	f001 f9ff 	bl	80163b6 <RFW_Is_Init>
 8014fb8:	2801      	cmp	r0, #1
 8014fba:	d019      	beq.n	8014ff0 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8014fbc:	2300      	movs	r3, #0
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	f240 2162 	movw	r1, #610	; 0x262
 8014fc4:	4608      	mov	r0, r1
 8014fc6:	f000 fe22 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8014fca:	b9a4      	cbnz	r4, 8014ff6 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8014fcc:	4c11      	ldr	r4, [pc, #68]	; (8015014 <RadioRx+0x64>)
 8014fce:	2100      	movs	r1, #0
 8014fd0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8014fd2:	4b11      	ldr	r3, [pc, #68]	; (8015018 <RadioRx+0x68>)
 8014fd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8014fd8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8014fda:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8014fde:	f001 f8fb 	bl	80161d8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8014fe2:	7863      	ldrb	r3, [r4, #1]
 8014fe4:	b183      	cbz	r3, 8015008 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8014fe6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8014fea:	f000 fc9f 	bl	801592c <SUBGRF_SetRx>
}
 8014fee:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8014ff0:	f001 f9e9 	bl	80163c6 <RFW_ReceiveInit>
 8014ff4:	e7e9      	b.n	8014fca <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8014ff6:	4d09      	ldr	r5, [pc, #36]	; (801501c <RadioRx+0x6c>)
 8014ff8:	4621      	mov	r1, r4
 8014ffa:	4628      	mov	r0, r5
 8014ffc:	f001 feb4 	bl	8016d68 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8015000:	4628      	mov	r0, r5
 8015002:	f001 fe6b 	bl	8016cdc <UTIL_TIMER_Start>
 8015006:	e7e1      	b.n	8014fcc <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8015008:	4b02      	ldr	r3, [pc, #8]	; (8015014 <RadioRx+0x64>)
 801500a:	6898      	ldr	r0, [r3, #8]
 801500c:	0180      	lsls	r0, r0, #6
 801500e:	f000 fc8d 	bl	801592c <SUBGRF_SetRx>
}
 8015012:	e7ec      	b.n	8014fee <RadioRx+0x3e>
 8015014:	20001b84 	.word	0x20001b84
 8015018:	48000400 	.word	0x48000400
 801501c:	20001b6c 	.word	0x20001b6c

08015020 <RadioSleep>:
{
 8015020:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8015022:	f04f 0004 	mov.w	r0, #4
 8015026:	f000 fc25 	bl	8015874 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 801502a:	2002      	movs	r0, #2
 801502c:	f7ed fc58 	bl	80028e0 <HAL_Delay>
}
 8015030:	bd08      	pop	{r3, pc}
	...

08015034 <RadioSend>:
{
 8015034:	b570      	push	{r4, r5, r6, lr}
 8015036:	b082      	sub	sp, #8
 8015038:	4605      	mov	r5, r0
 801503a:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 801503c:	2300      	movs	r3, #0
 801503e:	461a      	mov	r2, r3
 8015040:	f240 2101 	movw	r1, #513	; 0x201
 8015044:	4608      	mov	r0, r1
 8015046:	f000 fde2 	bl	8015c0e <SUBGRF_SetDioIrqParams>
 801504a:	4b3f      	ldr	r3, [pc, #252]	; (8015148 <RadioSend+0x114>)
 801504c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8015050:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8015052:	4e3e      	ldr	r6, [pc, #248]	; (801514c <RadioSend+0x118>)
 8015054:	2101      	movs	r1, #1
 8015056:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 801505a:	f001 f8bd 	bl	80161d8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801505e:	7833      	ldrb	r3, [r6, #0]
 8015060:	2b01      	cmp	r3, #1
 8015062:	d103      	bne.n	801506c <RadioSend+0x38>
 8015064:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8015068:	2b06      	cmp	r3, #6
 801506a:	d012      	beq.n	8015092 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 801506c:	f640 0089 	movw	r0, #2185	; 0x889
 8015070:	f000 fb3a 	bl	80156e8 <SUBGRF_ReadRegister>
 8015074:	f040 0104 	orr.w	r1, r0, #4
 8015078:	b2c9      	uxtb	r1, r1
 801507a:	f640 0089 	movw	r0, #2185	; 0x889
 801507e:	f000 fb23 	bl	80156c8 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8015082:	4b32      	ldr	r3, [pc, #200]	; (801514c <RadioSend+0x118>)
 8015084:	781b      	ldrb	r3, [r3, #0]
 8015086:	2b03      	cmp	r3, #3
 8015088:	d818      	bhi.n	80150bc <RadioSend+0x88>
 801508a:	e8df f003 	tbb	[pc, r3]
 801508e:	0d23      	.short	0x0d23
 8015090:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8015092:	f640 0089 	movw	r0, #2185	; 0x889
 8015096:	f000 fb27 	bl	80156e8 <SUBGRF_ReadRegister>
 801509a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 801509e:	f640 0089 	movw	r0, #2185	; 0x889
 80150a2:	f000 fb11 	bl	80156c8 <SUBGRF_WriteRegister>
 80150a6:	e7ec      	b.n	8015082 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 80150a8:	4828      	ldr	r0, [pc, #160]	; (801514c <RadioSend+0x118>)
 80150aa:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80150ac:	300e      	adds	r0, #14
 80150ae:	f000 ff7d 	bl	8015fac <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80150b2:	2200      	movs	r2, #0
 80150b4:	4621      	mov	r1, r4
 80150b6:	4628      	mov	r0, r5
 80150b8:	f000 fc30 	bl	801591c <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80150bc:	4c24      	ldr	r4, [pc, #144]	; (8015150 <RadioSend+0x11c>)
 80150be:	4b23      	ldr	r3, [pc, #140]	; (801514c <RadioSend+0x118>)
 80150c0:	6859      	ldr	r1, [r3, #4]
 80150c2:	4620      	mov	r0, r4
 80150c4:	f001 fe50 	bl	8016d68 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 80150c8:	4620      	mov	r0, r4
 80150ca:	f001 fe07 	bl	8016cdc <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 80150ce:	2000      	movs	r0, #0
}
 80150d0:	b002      	add	sp, #8
 80150d2:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 80150d4:	f001 f96f 	bl	80163b6 <RFW_Is_Init>
 80150d8:	2801      	cmp	r0, #1
 80150da:	d00a      	beq.n	80150f2 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80150dc:	481b      	ldr	r0, [pc, #108]	; (801514c <RadioSend+0x118>)
 80150de:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80150e0:	300e      	adds	r0, #14
 80150e2:	f000 ff63 	bl	8015fac <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 80150e6:	2200      	movs	r2, #0
 80150e8:	4621      	mov	r1, r4
 80150ea:	4628      	mov	r0, r5
 80150ec:	f000 fc16 	bl	801591c <SUBGRF_SendPayload>
 80150f0:	e7e4      	b.n	80150bc <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80150f2:	f10d 0207 	add.w	r2, sp, #7
 80150f6:	4621      	mov	r1, r4
 80150f8:	4628      	mov	r0, r5
 80150fa:	f001 f961 	bl	80163c0 <RFW_TransmitInit>
 80150fe:	b968      	cbnz	r0, 801511c <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8015100:	4812      	ldr	r0, [pc, #72]	; (801514c <RadioSend+0x118>)
 8015102:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015106:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015108:	300e      	adds	r0, #14
 801510a:	f000 ff4f 	bl	8015fac <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 801510e:	2200      	movs	r2, #0
 8015110:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015114:	4628      	mov	r0, r5
 8015116:	f000 fc01 	bl	801591c <SUBGRF_SendPayload>
 801511a:	e7cf      	b.n	80150bc <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 801511c:	4b0d      	ldr	r3, [pc, #52]	; (8015154 <RadioSend+0x120>)
 801511e:	2201      	movs	r2, #1
 8015120:	2100      	movs	r1, #0
 8015122:	2002      	movs	r0, #2
 8015124:	f001 fa2e 	bl	8016584 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8015128:	2003      	movs	r0, #3
 801512a:	e7d1      	b.n	80150d0 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801512c:	4807      	ldr	r0, [pc, #28]	; (801514c <RadioSend+0x118>)
 801512e:	2302      	movs	r3, #2
 8015130:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8015132:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015134:	300e      	adds	r0, #14
 8015136:	f000 ff39 	bl	8015fac <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 801513a:	2200      	movs	r2, #0
 801513c:	4621      	mov	r1, r4
 801513e:	4628      	mov	r0, r5
 8015140:	f000 fbec 	bl	801591c <SUBGRF_SendPayload>
            break;
 8015144:	e7ba      	b.n	80150bc <RadioSend+0x88>
 8015146:	bf00      	nop
 8015148:	48000400 	.word	0x48000400
 801514c:	20001b84 	.word	0x20001b84
 8015150:	20001be0 	.word	0x20001be0
 8015154:	0801e9ac 	.word	0x0801e9ac

08015158 <RadioRandom>:
{
 8015158:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801515a:	2300      	movs	r3, #0
 801515c:	461a      	mov	r2, r3
 801515e:	4619      	mov	r1, r3
 8015160:	4618      	mov	r0, r3
 8015162:	f000 fd54 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8015166:	f000 fbfb 	bl	8015960 <SUBGRF_GetRandom>
}
 801516a:	bd08      	pop	{r3, pc}

0801516c <RadioSetModem>:
{
 801516c:	b510      	push	{r4, lr}
 801516e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8015170:	4b14      	ldr	r3, [pc, #80]	; (80151c4 <RadioSetModem+0x58>)
 8015172:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8015174:	f001 f92c 	bl	80163d0 <RFW_SetRadioModem>
    switch( modem )
 8015178:	2c01      	cmp	r4, #1
 801517a:	d010      	beq.n	801519e <RadioSetModem+0x32>
 801517c:	2c03      	cmp	r4, #3
 801517e:	d01a      	beq.n	80151b6 <RadioSetModem+0x4a>
 8015180:	b134      	cbz	r4, 8015190 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8015182:	2003      	movs	r0, #3
 8015184:	f000 fde2 	bl	8015d4c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8015188:	4b0e      	ldr	r3, [pc, #56]	; (80151c4 <RadioSetModem+0x58>)
 801518a:	2200      	movs	r2, #0
 801518c:	735a      	strb	r2, [r3, #13]
}
 801518e:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8015190:	2000      	movs	r0, #0
 8015192:	f000 fddb 	bl	8015d4c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8015196:	4b0b      	ldr	r3, [pc, #44]	; (80151c4 <RadioSetModem+0x58>)
 8015198:	2200      	movs	r2, #0
 801519a:	735a      	strb	r2, [r3, #13]
        break;
 801519c:	e7f7      	b.n	801518e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 801519e:	2001      	movs	r0, #1
 80151a0:	f000 fdd4 	bl	8015d4c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80151a4:	4b07      	ldr	r3, [pc, #28]	; (80151c4 <RadioSetModem+0x58>)
 80151a6:	7b5a      	ldrb	r2, [r3, #13]
 80151a8:	7b18      	ldrb	r0, [r3, #12]
 80151aa:	4282      	cmp	r2, r0
 80151ac:	d0ef      	beq.n	801518e <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80151ae:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80151b0:	f000 f80a 	bl	80151c8 <RadioSetPublicNetwork>
 80151b4:	e7eb      	b.n	801518e <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80151b6:	2002      	movs	r0, #2
 80151b8:	f000 fdc8 	bl	8015d4c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80151bc:	4b01      	ldr	r3, [pc, #4]	; (80151c4 <RadioSetModem+0x58>)
 80151be:	2200      	movs	r2, #0
 80151c0:	735a      	strb	r2, [r3, #13]
}
 80151c2:	e7e4      	b.n	801518e <RadioSetModem+0x22>
 80151c4:	20001b84 	.word	0x20001b84

080151c8 <RadioSetPublicNetwork>:
{
 80151c8:	b510      	push	{r4, lr}
 80151ca:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 80151cc:	4b0e      	ldr	r3, [pc, #56]	; (8015208 <RadioSetPublicNetwork+0x40>)
 80151ce:	7318      	strb	r0, [r3, #12]
 80151d0:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 80151d2:	2001      	movs	r0, #1
 80151d4:	f7ff ffca 	bl	801516c <RadioSetModem>
    if( enable == true )
 80151d8:	b154      	cbz	r4, 80151f0 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 80151da:	2134      	movs	r1, #52	; 0x34
 80151dc:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80151e0:	f000 fa72 	bl	80156c8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 80151e4:	2144      	movs	r1, #68	; 0x44
 80151e6:	f240 7041 	movw	r0, #1857	; 0x741
 80151ea:	f000 fa6d 	bl	80156c8 <SUBGRF_WriteRegister>
}
 80151ee:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 80151f0:	2114      	movs	r1, #20
 80151f2:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 80151f6:	f000 fa67 	bl	80156c8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 80151fa:	2124      	movs	r1, #36	; 0x24
 80151fc:	f240 7041 	movw	r0, #1857	; 0x741
 8015200:	f000 fa62 	bl	80156c8 <SUBGRF_WriteRegister>
}
 8015204:	e7f3      	b.n	80151ee <RadioSetPublicNetwork+0x26>
 8015206:	bf00      	nop
 8015208:	20001b84 	.word	0x20001b84

0801520c <RadioSetTxConfig>:
{
 801520c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015210:	b083      	sub	sp, #12
 8015212:	4604      	mov	r4, r0
 8015214:	460e      	mov	r6, r1
 8015216:	4617      	mov	r7, r2
 8015218:	461d      	mov	r5, r3
 801521a:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 801521e:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8015222:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8015226:	f001 f8c5 	bl	80163b4 <RFW_DeInit>
    switch( modem )
 801522a:	b1ac      	cbz	r4, 8015258 <RadioSetTxConfig+0x4c>
 801522c:	2c01      	cmp	r4, #1
 801522e:	d05a      	beq.n	80152e6 <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8015230:	4630      	mov	r0, r6
 8015232:	f000 ffe5 	bl	8016200 <SUBGRF_SetRfTxPower>
 8015236:	4c55      	ldr	r4, [pc, #340]	; (801538c <RadioSetTxConfig+0x180>)
 8015238:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 801523c:	210e      	movs	r1, #14
 801523e:	f640 101f 	movw	r0, #2335	; 0x91f
 8015242:	f000 fa41 	bl	80156c8 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8015246:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801524a:	f001 f8b8 	bl	80163be <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 801524e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015250:	6063      	str	r3, [r4, #4]
}
 8015252:	b003      	add	sp, #12
 8015254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8015258:	4c4c      	ldr	r4, [pc, #304]	; (801538c <RadioSetTxConfig+0x180>)
 801525a:	f04f 0b00 	mov.w	fp, #0
 801525e:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015262:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015264:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015266:	230b      	movs	r3, #11
 8015268:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801526c:	4628      	mov	r0, r5
 801526e:	f001 f83f 	bl	80162f0 <SUBGRF_GetFskBandwidthRegValue>
 8015272:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8015276:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015278:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801527c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8015280:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8015284:	2304      	movs	r3, #4
 8015286:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8015288:	2318      	movs	r3, #24
 801528a:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801528c:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8015290:	f089 0901 	eor.w	r9, r9, #1
 8015294:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8015298:	f1ba 0f00 	cmp.w	sl, #0
 801529c:	d01f      	beq.n	80152de <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801529e:	22f2      	movs	r2, #242	; 0xf2
 80152a0:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80152a2:	4c3a      	ldr	r4, [pc, #232]	; (801538c <RadioSetTxConfig+0x180>)
 80152a4:	2301      	movs	r3, #1
 80152a6:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 80152a8:	f7ff fc50 	bl	8014b4c <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80152ac:	2000      	movs	r0, #0
 80152ae:	f7ff ff5d 	bl	801516c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80152b2:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80152b6:	f000 fdf1 	bl	8015e9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80152ba:	f104 000e 	add.w	r0, r4, #14
 80152be:	f000 fe75 	bl	8015fac <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80152c2:	4a33      	ldr	r2, [pc, #204]	; (8015390 <RadioSetTxConfig+0x184>)
 80152c4:	466b      	mov	r3, sp
 80152c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80152ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 fa56 	bl	8015780 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80152d4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80152d8:	f000 fa29 	bl	801572e <SUBGRF_SetWhiteningSeed>
            break;
 80152dc:	e7a8      	b.n	8015230 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80152de:	4b2b      	ldr	r3, [pc, #172]	; (801538c <RadioSetTxConfig+0x180>)
 80152e0:	2201      	movs	r2, #1
 80152e2:	75da      	strb	r2, [r3, #23]
 80152e4:	e7dd      	b.n	80152a2 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80152e6:	4a29      	ldr	r2, [pc, #164]	; (801538c <RadioSetTxConfig+0x180>)
 80152e8:	2301      	movs	r3, #1
 80152ea:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80152ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80152f0:	b2db      	uxtb	r3, r3
 80152f2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 80152f6:	4927      	ldr	r1, [pc, #156]	; (8015394 <RadioSetTxConfig+0x188>)
 80152f8:	5d49      	ldrb	r1, [r1, r5]
 80152fa:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 80152fe:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8015302:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8015306:	b91d      	cbnz	r5, 8015310 <RadioSetTxConfig+0x104>
 8015308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801530a:	3a0b      	subs	r2, #11
 801530c:	2a01      	cmp	r2, #1
 801530e:	d92c      	bls.n	801536a <RadioSetTxConfig+0x15e>
 8015310:	2d01      	cmp	r5, #1
 8015312:	d027      	beq.n	8015364 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8015314:	4a1d      	ldr	r2, [pc, #116]	; (801538c <RadioSetTxConfig+0x180>)
 8015316:	2100      	movs	r1, #0
 8015318:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801531c:	4a1b      	ldr	r2, [pc, #108]	; (801538c <RadioSetTxConfig+0x180>)
 801531e:	2101      	movs	r1, #1
 8015320:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8015322:	3b05      	subs	r3, #5
 8015324:	b2db      	uxtb	r3, r3
 8015326:	428b      	cmp	r3, r1
 8015328:	d924      	bls.n	8015374 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801532a:	4b18      	ldr	r3, [pc, #96]	; (801538c <RadioSetTxConfig+0x180>)
 801532c:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8015330:	4c16      	ldr	r4, [pc, #88]	; (801538c <RadioSetTxConfig+0x180>)
 8015332:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8015336:	4b18      	ldr	r3, [pc, #96]	; (8015398 <RadioSetTxConfig+0x18c>)
 8015338:	781b      	ldrb	r3, [r3, #0]
 801533a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801533c:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8015340:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015344:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8015348:	f7ff fc00 	bl	8014b4c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801534c:	2001      	movs	r0, #1
 801534e:	f7ff ff0d 	bl	801516c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015352:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015356:	f000 fda1 	bl	8015e9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801535a:	f104 000e 	add.w	r0, r4, #14
 801535e:	f000 fe25 	bl	8015fac <SUBGRF_SetPacketParams>
            break;
 8015362:	e765      	b.n	8015230 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8015364:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015366:	2a0c      	cmp	r2, #12
 8015368:	d1d4      	bne.n	8015314 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801536a:	4a08      	ldr	r2, [pc, #32]	; (801538c <RadioSetTxConfig+0x180>)
 801536c:	2101      	movs	r1, #1
 801536e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8015372:	e7d3      	b.n	801531c <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 8015374:	f1b8 0f0b 	cmp.w	r8, #11
 8015378:	d803      	bhi.n	8015382 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801537a:	4613      	mov	r3, r2
 801537c:	220c      	movs	r2, #12
 801537e:	839a      	strh	r2, [r3, #28]
 8015380:	e7d6      	b.n	8015330 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8015382:	4b02      	ldr	r3, [pc, #8]	; (801538c <RadioSetTxConfig+0x180>)
 8015384:	f8a3 801c 	strh.w	r8, [r3, #28]
 8015388:	e7d2      	b.n	8015330 <RadioSetTxConfig+0x124>
 801538a:	bf00      	nop
 801538c:	20001b84 	.word	0x20001b84
 8015390:	0801c218 	.word	0x0801c218
 8015394:	0801e9c4 	.word	0x0801e9c4
 8015398:	2000015c 	.word	0x2000015c

0801539c <RadioSetRxConfig>:
{
 801539c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153a0:	b085      	sub	sp, #20
 80153a2:	4604      	mov	r4, r0
 80153a4:	460d      	mov	r5, r1
 80153a6:	4616      	mov	r6, r2
 80153a8:	9301      	str	r3, [sp, #4]
 80153aa:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 80153ae:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80153b2:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80153b6:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80153ba:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 80153be:	4b73      	ldr	r3, [pc, #460]	; (801558c <RadioSetRxConfig+0x1f0>)
 80153c0:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 80153c4:	f000 fff6 	bl	80163b4 <RFW_DeInit>
    if( rxContinuous == true )
 80153c8:	f1b8 0f00 	cmp.w	r8, #0
 80153cc:	d001      	beq.n	80153d2 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 80153ce:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 80153d2:	b14f      	cbz	r7, 80153e8 <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 80153d4:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80153d8:	4b6d      	ldr	r3, [pc, #436]	; (8015590 <RadioSetRxConfig+0x1f4>)
 80153da:	701a      	strb	r2, [r3, #0]
    switch( modem )
 80153dc:	b144      	cbz	r4, 80153f0 <RadioSetRxConfig+0x54>
 80153de:	2c01      	cmp	r4, #1
 80153e0:	d057      	beq.n	8015492 <RadioSetRxConfig+0xf6>
}
 80153e2:	b005      	add	sp, #20
 80153e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 80153e8:	4b69      	ldr	r3, [pc, #420]	; (8015590 <RadioSetRxConfig+0x1f4>)
 80153ea:	22ff      	movs	r2, #255	; 0xff
 80153ec:	701a      	strb	r2, [r3, #0]
 80153ee:	e7f5      	b.n	80153dc <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80153f0:	2000      	movs	r0, #0
 80153f2:	f000 fb47 	bl	8015a84 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80153f6:	4c65      	ldr	r4, [pc, #404]	; (801558c <RadioSetRxConfig+0x1f0>)
 80153f8:	f04f 0800 	mov.w	r8, #0
 80153fc:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8015400:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8015402:	230b      	movs	r3, #11
 8015404:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8015408:	4628      	mov	r0, r5
 801540a:	f000 ff71 	bl	80162f0 <SUBGRF_GetFskBandwidthRegValue>
 801540e:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8015412:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8015416:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801541a:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801541e:	2304      	movs	r3, #4
 8015420:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8015422:	2318      	movs	r3, #24
 8015424:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8015426:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801542a:	f087 0701 	eor.w	r7, r7, #1
 801542e:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8015430:	4b57      	ldr	r3, [pc, #348]	; (8015590 <RadioSetRxConfig+0x1f4>)
 8015432:	781b      	ldrb	r3, [r3, #0]
 8015434:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8015436:	f1bb 0f00 	cmp.w	fp, #0
 801543a:	d026      	beq.n	801548a <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 801543c:	22f2      	movs	r2, #242	; 0xf2
 801543e:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8015440:	4c52      	ldr	r4, [pc, #328]	; (801558c <RadioSetRxConfig+0x1f0>)
 8015442:	2301      	movs	r3, #1
 8015444:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8015446:	f7ff fb81 	bl	8014b4c <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801544a:	2000      	movs	r0, #0
 801544c:	f7ff fe8e 	bl	801516c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8015450:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015454:	f000 fd22 	bl	8015e9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015458:	f104 000e 	add.w	r0, r4, #14
 801545c:	f000 fda6 	bl	8015fac <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8015460:	4a4c      	ldr	r2, [pc, #304]	; (8015594 <RadioSetRxConfig+0x1f8>)
 8015462:	ab02      	add	r3, sp, #8
 8015464:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015468:	e883 0003 	stmia.w	r3, {r0, r1}
 801546c:	4618      	mov	r0, r3
 801546e:	f000 f987 	bl	8015780 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8015472:	f240 10ff 	movw	r0, #511	; 0x1ff
 8015476:	f000 f95a 	bl	801572e <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801547a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 801547e:	fb03 f30a 	mul.w	r3, r3, sl
 8015482:	fbb3 f3f6 	udiv	r3, r3, r6
 8015486:	60a3      	str	r3, [r4, #8]
            break;
 8015488:	e7ab      	b.n	80153e2 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801548a:	4b40      	ldr	r3, [pc, #256]	; (801558c <RadioSetRxConfig+0x1f0>)
 801548c:	2201      	movs	r2, #1
 801548e:	75da      	strb	r2, [r3, #23]
 8015490:	e7d6      	b.n	8015440 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8015492:	2000      	movs	r0, #0
 8015494:	f000 faf6 	bl	8015a84 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8015498:	4a3c      	ldr	r2, [pc, #240]	; (801558c <RadioSetRxConfig+0x1f0>)
 801549a:	2301      	movs	r3, #1
 801549c:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80154a0:	b2f3      	uxtb	r3, r6
 80154a2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80154a6:	493c      	ldr	r1, [pc, #240]	; (8015598 <RadioSetRxConfig+0x1fc>)
 80154a8:	5d49      	ldrb	r1, [r1, r5]
 80154aa:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80154ae:	9901      	ldr	r1, [sp, #4]
 80154b0:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80154b4:	b91d      	cbnz	r5, 80154be <RadioSetRxConfig+0x122>
 80154b6:	f1a6 020b 	sub.w	r2, r6, #11
 80154ba:	2a01      	cmp	r2, #1
 80154bc:	d94b      	bls.n	8015556 <RadioSetRxConfig+0x1ba>
 80154be:	2d01      	cmp	r5, #1
 80154c0:	d047      	beq.n	8015552 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80154c2:	4a32      	ldr	r2, [pc, #200]	; (801558c <RadioSetRxConfig+0x1f0>)
 80154c4:	2100      	movs	r1, #0
 80154c6:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80154ca:	4a30      	ldr	r2, [pc, #192]	; (801558c <RadioSetRxConfig+0x1f0>)
 80154cc:	2101      	movs	r1, #1
 80154ce:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 80154d0:	3b05      	subs	r3, #5
 80154d2:	b2db      	uxtb	r3, r3
 80154d4:	428b      	cmp	r3, r1
 80154d6:	d943      	bls.n	8015560 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80154d8:	4b2c      	ldr	r3, [pc, #176]	; (801558c <RadioSetRxConfig+0x1f0>)
 80154da:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80154de:	4c2b      	ldr	r4, [pc, #172]	; (801558c <RadioSetRxConfig+0x1f0>)
 80154e0:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80154e2:	4b2b      	ldr	r3, [pc, #172]	; (8015590 <RadioSetRxConfig+0x1f4>)
 80154e4:	781b      	ldrb	r3, [r3, #0]
 80154e6:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80154e8:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80154ec:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80154f0:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80154f4:	f7ff fb2a 	bl	8014b4c <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80154f8:	2001      	movs	r0, #1
 80154fa:	f7ff fe37 	bl	801516c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80154fe:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015502:	f000 fccb 	bl	8015e9c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8015506:	f104 000e 	add.w	r0, r4, #14
 801550a:	f000 fd4f 	bl	8015fac <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 801550e:	fa5f f08a 	uxtb.w	r0, sl
 8015512:	f000 fac4 	bl	8015a9e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 8015516:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801551a:	f000 f8e5 	bl	80156e8 <SUBGRF_ReadRegister>
 801551e:	f000 0101 	and.w	r1, r0, #1
 8015522:	f640 00a3 	movw	r0, #2211	; 0x8a3
 8015526:	f000 f8cf 	bl	80156c8 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801552a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 801552e:	2b01      	cmp	r3, #1
 8015530:	d021      	beq.n	8015576 <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8015532:	f240 7036 	movw	r0, #1846	; 0x736
 8015536:	f000 f8d7 	bl	80156e8 <SUBGRF_ReadRegister>
 801553a:	f040 0104 	orr.w	r1, r0, #4
 801553e:	b2c9      	uxtb	r1, r1
 8015540:	f240 7036 	movw	r0, #1846	; 0x736
 8015544:	f000 f8c0 	bl	80156c8 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8015548:	4b10      	ldr	r3, [pc, #64]	; (801558c <RadioSetRxConfig+0x1f0>)
 801554a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801554e:	609a      	str	r2, [r3, #8]
}
 8015550:	e747      	b.n	80153e2 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8015552:	2e0c      	cmp	r6, #12
 8015554:	d1b5      	bne.n	80154c2 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8015556:	4a0d      	ldr	r2, [pc, #52]	; (801558c <RadioSetRxConfig+0x1f0>)
 8015558:	2101      	movs	r1, #1
 801555a:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 801555e:	e7b4      	b.n	80154ca <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8015560:	f1b9 0f0b 	cmp.w	r9, #11
 8015564:	d803      	bhi.n	801556e <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8015566:	4613      	mov	r3, r2
 8015568:	220c      	movs	r2, #12
 801556a:	839a      	strh	r2, [r3, #28]
 801556c:	e7b7      	b.n	80154de <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801556e:	4b07      	ldr	r3, [pc, #28]	; (801558c <RadioSetRxConfig+0x1f0>)
 8015570:	f8a3 901c 	strh.w	r9, [r3, #28]
 8015574:	e7b3      	b.n	80154de <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8015576:	f240 7036 	movw	r0, #1846	; 0x736
 801557a:	f000 f8b5 	bl	80156e8 <SUBGRF_ReadRegister>
 801557e:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8015582:	f240 7036 	movw	r0, #1846	; 0x736
 8015586:	f000 f89f 	bl	80156c8 <SUBGRF_WriteRegister>
 801558a:	e7dd      	b.n	8015548 <RadioSetRxConfig+0x1ac>
 801558c:	20001b84 	.word	0x20001b84
 8015590:	2000015c 	.word	0x2000015c
 8015594:	0801c218 	.word	0x0801c218
 8015598:	0801e9c4 	.word	0x0801e9c4

0801559c <RadioIsChannelFree>:
{
 801559c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801559e:	b08b      	sub	sp, #44	; 0x2c
 80155a0:	4604      	mov	r4, r0
 80155a2:	460f      	mov	r7, r1
 80155a4:	4616      	mov	r6, r2
 80155a6:	461d      	mov	r5, r3
    RadioStandby( );
 80155a8:	f7ff fad0 	bl	8014b4c <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80155ac:	2000      	movs	r0, #0
 80155ae:	f7ff fddd 	bl	801516c <RadioSetModem>
    RadioSetChannel( freq );
 80155b2:	4620      	mov	r0, r4
 80155b4:	f7ff fce4 	bl	8014f80 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80155b8:	2301      	movs	r3, #1
 80155ba:	9309      	str	r3, [sp, #36]	; 0x24
 80155bc:	2400      	movs	r4, #0
 80155be:	9408      	str	r4, [sp, #32]
 80155c0:	9407      	str	r4, [sp, #28]
 80155c2:	9406      	str	r4, [sp, #24]
 80155c4:	9405      	str	r4, [sp, #20]
 80155c6:	9404      	str	r4, [sp, #16]
 80155c8:	9403      	str	r4, [sp, #12]
 80155ca:	9402      	str	r4, [sp, #8]
 80155cc:	2303      	movs	r3, #3
 80155ce:	9301      	str	r3, [sp, #4]
 80155d0:	9700      	str	r7, [sp, #0]
 80155d2:	4623      	mov	r3, r4
 80155d4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80155d8:	4639      	mov	r1, r7
 80155da:	4620      	mov	r0, r4
 80155dc:	f7ff fede 	bl	801539c <RadioSetRxConfig>
    RadioRx( 0 );
 80155e0:	4620      	mov	r0, r4
 80155e2:	f7ff fce5 	bl	8014fb0 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80155e6:	f7ff fc79 	bl	8014edc <RadioGetWakeupTime>
 80155ea:	f7ed f979 	bl	80028e0 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80155ee:	f001 fadb 	bl	8016ba8 <UTIL_TIMER_GetCurrentTime>
 80155f2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80155f4:	4620      	mov	r0, r4
 80155f6:	f001 fae1 	bl	8016bbc <UTIL_TIMER_GetElapsedTime>
 80155fa:	42a8      	cmp	r0, r5
 80155fc:	d206      	bcs.n	801560c <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80155fe:	2000      	movs	r0, #0
 8015600:	f7ff fc96 	bl	8014f30 <RadioRssi>
        if( rssi > rssiThresh )
 8015604:	42b0      	cmp	r0, r6
 8015606:	ddf5      	ble.n	80155f4 <RadioIsChannelFree+0x58>
            status = false;
 8015608:	2400      	movs	r4, #0
 801560a:	e000      	b.n	801560e <RadioIsChannelFree+0x72>
    bool status = true;
 801560c:	2401      	movs	r4, #1
    RadioStandby( );
 801560e:	f7ff fa9d 	bl	8014b4c <RadioStandby>
}
 8015612:	4620      	mov	r0, r4
 8015614:	b00b      	add	sp, #44	; 0x2c
 8015616:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015618 <RadioInit>:
{
 8015618:	b570      	push	{r4, r5, r6, lr}
 801561a:	b082      	sub	sp, #8
    RadioEvents = events;
 801561c:	4b1d      	ldr	r3, [pc, #116]	; (8015694 <RadioInit+0x7c>)
 801561e:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8015620:	4d1d      	ldr	r5, [pc, #116]	; (8015698 <RadioInit+0x80>)
 8015622:	2400      	movs	r4, #0
 8015624:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 8015626:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 8015628:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801562a:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 801562c:	481b      	ldr	r0, [pc, #108]	; (801569c <RadioInit+0x84>)
 801562e:	f000 fb27 	bl	8015c80 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8015632:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8015634:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8015636:	f000 fa53 	bl	8015ae0 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801563a:	4621      	mov	r1, r4
 801563c:	4620      	mov	r0, r4
 801563e:	f000 fd27 	bl	8016090 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8015642:	2204      	movs	r2, #4
 8015644:	4621      	mov	r1, r4
 8015646:	2001      	movs	r0, #1
 8015648:	f000 fb9a 	bl	8015d80 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 801564c:	4623      	mov	r3, r4
 801564e:	4622      	mov	r2, r4
 8015650:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015654:	4608      	mov	r0, r1
 8015656:	f000 fada 	bl	8015c0e <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801565a:	f7ff fce1 	bl	8015020 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 801565e:	4e10      	ldr	r6, [pc, #64]	; (80156a0 <RadioInit+0x88>)
 8015660:	9400      	str	r4, [sp, #0]
 8015662:	4b10      	ldr	r3, [pc, #64]	; (80156a4 <RadioInit+0x8c>)
 8015664:	4622      	mov	r2, r4
 8015666:	f04f 31ff 	mov.w	r1, #4294967295
 801566a:	4630      	mov	r0, r6
 801566c:	f001 fa7e 	bl	8016b6c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8015670:	4d0d      	ldr	r5, [pc, #52]	; (80156a8 <RadioInit+0x90>)
 8015672:	9400      	str	r4, [sp, #0]
 8015674:	4b0d      	ldr	r3, [pc, #52]	; (80156ac <RadioInit+0x94>)
 8015676:	4622      	mov	r2, r4
 8015678:	f04f 31ff 	mov.w	r1, #4294967295
 801567c:	4628      	mov	r0, r5
 801567e:	f001 fa75 	bl	8016b6c <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8015682:	4630      	mov	r0, r6
 8015684:	f001 fad0 	bl	8016c28 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8015688:	4628      	mov	r0, r5
 801568a:	f001 facd 	bl	8016c28 <UTIL_TIMER_Stop>
}
 801568e:	b002      	add	sp, #8
 8015690:	bd70      	pop	{r4, r5, r6, pc}
 8015692:	bf00      	nop
 8015694:	20001b68 	.word	0x20001b68
 8015698:	20001b84 	.word	0x20001b84
 801569c:	08014ec9 	.word	0x08014ec9
 80156a0:	20001be0 	.word	0x20001be0
 80156a4:	08014a11 	.word	0x08014a11
 80156a8:	20001b6c 	.word	0x20001b6c
 80156ac:	08014a39 	.word	0x08014a39

080156b0 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 80156b0:	4b01      	ldr	r3, [pc, #4]	; (80156b8 <SUBGRF_GetOperatingMode+0x8>)
 80156b2:	7818      	ldrb	r0, [r3, #0]
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	20001bfe 	.word	0x20001bfe

080156bc <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 80156bc:	4b01      	ldr	r3, [pc, #4]	; (80156c4 <SUBGRF_GetPacketType+0x8>)
 80156be:	7818      	ldrb	r0, [r3, #0]
 80156c0:	4770      	bx	lr
 80156c2:	bf00      	nop
 80156c4:	20001bff 	.word	0x20001bff

080156c8 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80156c8:	b500      	push	{lr}
 80156ca:	b083      	sub	sp, #12
 80156cc:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80156d0:	2301      	movs	r3, #1
 80156d2:	f10d 0207 	add.w	r2, sp, #7
 80156d6:	4601      	mov	r1, r0
 80156d8:	4802      	ldr	r0, [pc, #8]	; (80156e4 <SUBGRF_WriteRegister+0x1c>)
 80156da:	f7f5 fca7 	bl	800b02c <HAL_SUBGHZ_WriteRegisters>
}
 80156de:	b003      	add	sp, #12
 80156e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80156e4:	20000b50 	.word	0x20000b50

080156e8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80156e8:	b500      	push	{lr}
 80156ea:	b083      	sub	sp, #12
 80156ec:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80156ee:	2301      	movs	r3, #1
 80156f0:	f10d 0207 	add.w	r2, sp, #7
 80156f4:	4803      	ldr	r0, [pc, #12]	; (8015704 <SUBGRF_ReadRegister+0x1c>)
 80156f6:	f7f5 fce9 	bl	800b0cc <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80156fa:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80156fe:	b003      	add	sp, #12
 8015700:	f85d fb04 	ldr.w	pc, [sp], #4
 8015704:	20000b50 	.word	0x20000b50

08015708 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 8015708:	b510      	push	{r4, lr}
 801570a:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 801570c:	f7f2 f9be 	bl	8007a8c <RBI_IsDCDC>
 8015710:	2801      	cmp	r0, #1
 8015712:	d000      	beq.n	8015716 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8015714:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8015716:	f640 1023 	movw	r0, #2339	; 0x923
 801571a:	f7ff ffe5 	bl	80156e8 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 801571e:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8015722:	4321      	orrs	r1, r4
 8015724:	f640 1023 	movw	r0, #2339	; 0x923
 8015728:	f7ff ffce 	bl	80156c8 <SUBGRF_WriteRegister>
}
 801572c:	e7f2      	b.n	8015714 <Radio_SMPS_Set+0xc>

0801572e <SUBGRF_SetWhiteningSeed>:
{
 801572e:	b510      	push	{r4, lr}
 8015730:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8015732:	f7ff ffc3 	bl	80156bc <SUBGRF_GetPacketType>
 8015736:	b100      	cbz	r0, 801573a <SUBGRF_SetWhiteningSeed+0xc>
}
 8015738:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801573a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 801573e:	f7ff ffd3 	bl	80156e8 <SUBGRF_ReadRegister>
 8015742:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8015746:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801574a:	4301      	orrs	r1, r0
 801574c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8015750:	f7ff ffba 	bl	80156c8 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8015754:	b2e1      	uxtb	r1, r4
 8015756:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801575a:	f7ff ffb5 	bl	80156c8 <SUBGRF_WriteRegister>
}
 801575e:	e7eb      	b.n	8015738 <SUBGRF_SetWhiteningSeed+0xa>

08015760 <SUBGRF_WriteRegisters>:
{
 8015760:	b510      	push	{r4, lr}
 8015762:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015764:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8015768:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801576a:	460a      	mov	r2, r1
 801576c:	4601      	mov	r1, r0
 801576e:	4803      	ldr	r0, [pc, #12]	; (801577c <SUBGRF_WriteRegisters+0x1c>)
 8015770:	f7f5 fc5c 	bl	800b02c <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015774:	f384 8810 	msr	PRIMASK, r4
}
 8015778:	bd10      	pop	{r4, pc}
 801577a:	bf00      	nop
 801577c:	20000b50 	.word	0x20000b50

08015780 <SUBGRF_SetSyncWord>:
{
 8015780:	b508      	push	{r3, lr}
 8015782:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8015784:	2208      	movs	r2, #8
 8015786:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 801578a:	f7ff ffe9 	bl	8015760 <SUBGRF_WriteRegisters>
}
 801578e:	2000      	movs	r0, #0
 8015790:	bd08      	pop	{r3, pc}

08015792 <SUBGRF_SetCrcSeed>:
{
 8015792:	b500      	push	{lr}
 8015794:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8015796:	0a03      	lsrs	r3, r0, #8
 8015798:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 801579c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80157a0:	f7ff ff8c 	bl	80156bc <SUBGRF_GetPacketType>
 80157a4:	b110      	cbz	r0, 80157ac <SUBGRF_SetCrcSeed+0x1a>
}
 80157a6:	b003      	add	sp, #12
 80157a8:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80157ac:	2202      	movs	r2, #2
 80157ae:	a901      	add	r1, sp, #4
 80157b0:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80157b4:	f7ff ffd4 	bl	8015760 <SUBGRF_WriteRegisters>
}
 80157b8:	e7f5      	b.n	80157a6 <SUBGRF_SetCrcSeed+0x14>

080157ba <SUBGRF_SetCrcPolynomial>:
{
 80157ba:	b500      	push	{lr}
 80157bc:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80157be:	0a03      	lsrs	r3, r0, #8
 80157c0:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80157c4:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80157c8:	f7ff ff78 	bl	80156bc <SUBGRF_GetPacketType>
 80157cc:	b110      	cbz	r0, 80157d4 <SUBGRF_SetCrcPolynomial+0x1a>
}
 80157ce:	b003      	add	sp, #12
 80157d0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80157d4:	2202      	movs	r2, #2
 80157d6:	a901      	add	r1, sp, #4
 80157d8:	f240 60be 	movw	r0, #1726	; 0x6be
 80157dc:	f7ff ffc0 	bl	8015760 <SUBGRF_WriteRegisters>
}
 80157e0:	e7f5      	b.n	80157ce <SUBGRF_SetCrcPolynomial+0x14>
	...

080157e4 <SUBGRF_ReadRegisters>:
{
 80157e4:	b510      	push	{r4, lr}
 80157e6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80157e8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80157ec:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80157ee:	460a      	mov	r2, r1
 80157f0:	4601      	mov	r1, r0
 80157f2:	4803      	ldr	r0, [pc, #12]	; (8015800 <SUBGRF_ReadRegisters+0x1c>)
 80157f4:	f7f5 fc6a 	bl	800b0cc <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80157f8:	f384 8810 	msr	PRIMASK, r4
}
 80157fc:	bd10      	pop	{r4, pc}
 80157fe:	bf00      	nop
 8015800:	20000b50 	.word	0x20000b50

08015804 <SUBGRF_WriteBuffer>:
{
 8015804:	b510      	push	{r4, lr}
 8015806:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015808:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801580c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 801580e:	460a      	mov	r2, r1
 8015810:	4601      	mov	r1, r0
 8015812:	4803      	ldr	r0, [pc, #12]	; (8015820 <SUBGRF_WriteBuffer+0x1c>)
 8015814:	f7f5 fdb8 	bl	800b388 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015818:	f384 8810 	msr	PRIMASK, r4
}
 801581c:	bd10      	pop	{r4, pc}
 801581e:	bf00      	nop
 8015820:	20000b50 	.word	0x20000b50

08015824 <SUBGRF_SetPayload>:
{
 8015824:	b508      	push	{r3, lr}
 8015826:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8015828:	4601      	mov	r1, r0
 801582a:	2000      	movs	r0, #0
 801582c:	f7ff ffea 	bl	8015804 <SUBGRF_WriteBuffer>
}
 8015830:	bd08      	pop	{r3, pc}
	...

08015834 <SUBGRF_ReadBuffer>:
{
 8015834:	b510      	push	{r4, lr}
 8015836:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015838:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801583c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 801583e:	460a      	mov	r2, r1
 8015840:	4601      	mov	r1, r0
 8015842:	4803      	ldr	r0, [pc, #12]	; (8015850 <SUBGRF_ReadBuffer+0x1c>)
 8015844:	f7f5 fdea 	bl	800b41c <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015848:	f384 8810 	msr	PRIMASK, r4
}
 801584c:	bd10      	pop	{r4, pc}
 801584e:	bf00      	nop
 8015850:	20000b50 	.word	0x20000b50

08015854 <SUBGRF_WriteCommand>:
{
 8015854:	b510      	push	{r4, lr}
 8015856:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015858:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801585c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 801585e:	460a      	mov	r2, r1
 8015860:	4601      	mov	r1, r0
 8015862:	4803      	ldr	r0, [pc, #12]	; (8015870 <SUBGRF_WriteCommand+0x1c>)
 8015864:	f7f5 fc86 	bl	800b174 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015868:	f384 8810 	msr	PRIMASK, r4
}
 801586c:	bd10      	pop	{r4, pc}
 801586e:	bf00      	nop
 8015870:	20000b50 	.word	0x20000b50

08015874 <SUBGRF_SetSleep>:
{
 8015874:	b510      	push	{r4, lr}
 8015876:	b082      	sub	sp, #8
 8015878:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 801587a:	2000      	movs	r0, #0
 801587c:	f7f2 f8fa 	bl	8007a74 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8015880:	2002      	movs	r0, #2
 8015882:	f7ff ff41 	bl	8015708 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8015886:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 801588a:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 801588e:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8015890:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8015894:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8015896:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 801589a:	2201      	movs	r2, #1
 801589c:	f10d 0107 	add.w	r1, sp, #7
 80158a0:	2084      	movs	r0, #132	; 0x84
 80158a2:	f7ff ffd7 	bl	8015854 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80158a6:	4b02      	ldr	r3, [pc, #8]	; (80158b0 <SUBGRF_SetSleep+0x3c>)
 80158a8:	2200      	movs	r2, #0
 80158aa:	701a      	strb	r2, [r3, #0]
}
 80158ac:	b002      	add	sp, #8
 80158ae:	bd10      	pop	{r4, pc}
 80158b0:	20001bfe 	.word	0x20001bfe

080158b4 <SUBGRF_SetStandby>:
{
 80158b4:	b500      	push	{lr}
 80158b6:	b083      	sub	sp, #12
 80158b8:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80158bc:	2201      	movs	r2, #1
 80158be:	f10d 0107 	add.w	r1, sp, #7
 80158c2:	2080      	movs	r0, #128	; 0x80
 80158c4:	f7ff ffc6 	bl	8015854 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80158c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80158cc:	b92b      	cbnz	r3, 80158da <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 80158ce:	4b05      	ldr	r3, [pc, #20]	; (80158e4 <SUBGRF_SetStandby+0x30>)
 80158d0:	2201      	movs	r2, #1
 80158d2:	701a      	strb	r2, [r3, #0]
}
 80158d4:	b003      	add	sp, #12
 80158d6:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80158da:	4b02      	ldr	r3, [pc, #8]	; (80158e4 <SUBGRF_SetStandby+0x30>)
 80158dc:	2202      	movs	r2, #2
 80158de:	701a      	strb	r2, [r3, #0]
}
 80158e0:	e7f8      	b.n	80158d4 <SUBGRF_SetStandby+0x20>
 80158e2:	bf00      	nop
 80158e4:	20001bfe 	.word	0x20001bfe

080158e8 <SUBGRF_SetTx>:
{
 80158e8:	b500      	push	{lr}
 80158ea:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80158ec:	4b0a      	ldr	r3, [pc, #40]	; (8015918 <SUBGRF_SetTx+0x30>)
 80158ee:	2204      	movs	r2, #4
 80158f0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80158f2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80158f6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80158fa:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80158fe:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015902:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8015906:	2203      	movs	r2, #3
 8015908:	a901      	add	r1, sp, #4
 801590a:	2083      	movs	r0, #131	; 0x83
 801590c:	f7ff ffa2 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015910:	b003      	add	sp, #12
 8015912:	f85d fb04 	ldr.w	pc, [sp], #4
 8015916:	bf00      	nop
 8015918:	20001bfe 	.word	0x20001bfe

0801591c <SUBGRF_SendPayload>:
{
 801591c:	b510      	push	{r4, lr}
 801591e:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8015920:	f7ff ff80 	bl	8015824 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8015924:	4620      	mov	r0, r4
 8015926:	f7ff ffdf 	bl	80158e8 <SUBGRF_SetTx>
}
 801592a:	bd10      	pop	{r4, pc}

0801592c <SUBGRF_SetRx>:
{
 801592c:	b500      	push	{lr}
 801592e:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8015930:	4b0a      	ldr	r3, [pc, #40]	; (801595c <SUBGRF_SetRx+0x30>)
 8015932:	2205      	movs	r2, #5
 8015934:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015936:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801593a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801593e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015942:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8015946:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801594a:	2203      	movs	r2, #3
 801594c:	a901      	add	r1, sp, #4
 801594e:	2082      	movs	r0, #130	; 0x82
 8015950:	f7ff ff80 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015954:	b003      	add	sp, #12
 8015956:	f85d fb04 	ldr.w	pc, [sp], #4
 801595a:	bf00      	nop
 801595c:	20001bfe 	.word	0x20001bfe

08015960 <SUBGRF_GetRandom>:
{
 8015960:	b570      	push	{r4, r5, r6, lr}
 8015962:	b082      	sub	sp, #8
    uint32_t number = 0;
 8015964:	2600      	movs	r6, #0
 8015966:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8015968:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801596c:	f7ff febc 	bl	80156e8 <SUBGRF_ReadRegister>
 8015970:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8015972:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8015976:	f640 00e2 	movw	r0, #2274	; 0x8e2
 801597a:	f7ff fea5 	bl	80156c8 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 801597e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015982:	f7ff feb1 	bl	80156e8 <SUBGRF_ReadRegister>
 8015986:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8015988:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 801598c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8015990:	f7ff fe9a 	bl	80156c8 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8015994:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8015998:	f7ff ffc8 	bl	801592c <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 801599c:	2204      	movs	r2, #4
 801599e:	eb0d 0102 	add.w	r1, sp, r2
 80159a2:	f640 0019 	movw	r0, #2073	; 0x819
 80159a6:	f7ff ff1d 	bl	80157e4 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80159aa:	4630      	mov	r0, r6
 80159ac:	f7ff ff82 	bl	80158b4 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80159b0:	4629      	mov	r1, r5
 80159b2:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80159b6:	f7ff fe87 	bl	80156c8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80159ba:	4621      	mov	r1, r4
 80159bc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80159c0:	f7ff fe82 	bl	80156c8 <SUBGRF_WriteRegister>
}
 80159c4:	9801      	ldr	r0, [sp, #4]
 80159c6:	b002      	add	sp, #8
 80159c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080159cc <SUBGRF_SetRxBoosted>:
{
 80159cc:	b510      	push	{r4, lr}
 80159ce:	b082      	sub	sp, #8
 80159d0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80159d2:	4b0c      	ldr	r3, [pc, #48]	; (8015a04 <SUBGRF_SetRxBoosted+0x38>)
 80159d4:	2205      	movs	r2, #5
 80159d6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80159d8:	2197      	movs	r1, #151	; 0x97
 80159da:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80159de:	f7ff fe73 	bl	80156c8 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80159e2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80159e6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80159ea:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80159ee:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80159f2:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80159f6:	2203      	movs	r2, #3
 80159f8:	a901      	add	r1, sp, #4
 80159fa:	2082      	movs	r0, #130	; 0x82
 80159fc:	f7ff ff2a 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015a00:	b002      	add	sp, #8
 8015a02:	bd10      	pop	{r4, pc}
 8015a04:	20001bfe 	.word	0x20001bfe

08015a08 <SUBGRF_SetRxDutyCycle>:
{
 8015a08:	b500      	push	{lr}
 8015a0a:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8015a0c:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015a10:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8015a14:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015a18:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8015a1c:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8015a20:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015a24:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8015a28:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015a2c:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8015a30:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8015a34:	2206      	movs	r2, #6
 8015a36:	4669      	mov	r1, sp
 8015a38:	2094      	movs	r0, #148	; 0x94
 8015a3a:	f7ff ff0b 	bl	8015854 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8015a3e:	4b03      	ldr	r3, [pc, #12]	; (8015a4c <SUBGRF_SetRxDutyCycle+0x44>)
 8015a40:	2206      	movs	r2, #6
 8015a42:	701a      	strb	r2, [r3, #0]
}
 8015a44:	b003      	add	sp, #12
 8015a46:	f85d fb04 	ldr.w	pc, [sp], #4
 8015a4a:	bf00      	nop
 8015a4c:	20001bfe 	.word	0x20001bfe

08015a50 <SUBGRF_SetCad>:
{
 8015a50:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8015a52:	2200      	movs	r2, #0
 8015a54:	4611      	mov	r1, r2
 8015a56:	20c5      	movs	r0, #197	; 0xc5
 8015a58:	f7ff fefc 	bl	8015854 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8015a5c:	4b01      	ldr	r3, [pc, #4]	; (8015a64 <SUBGRF_SetCad+0x14>)
 8015a5e:	2207      	movs	r2, #7
 8015a60:	701a      	strb	r2, [r3, #0]
}
 8015a62:	bd08      	pop	{r3, pc}
 8015a64:	20001bfe 	.word	0x20001bfe

08015a68 <SUBGRF_SetTxContinuousWave>:
{
 8015a68:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	4611      	mov	r1, r2
 8015a6e:	20d1      	movs	r0, #209	; 0xd1
 8015a70:	f7ff fef0 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015a74:	bd08      	pop	{r3, pc}

08015a76 <SUBGRF_SetTxInfinitePreamble>:
{
 8015a76:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8015a78:	2200      	movs	r2, #0
 8015a7a:	4611      	mov	r1, r2
 8015a7c:	20d2      	movs	r0, #210	; 0xd2
 8015a7e:	f7ff fee9 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015a82:	bd08      	pop	{r3, pc}

08015a84 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8015a84:	b500      	push	{lr}
 8015a86:	b083      	sub	sp, #12
 8015a88:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8015a8c:	2201      	movs	r2, #1
 8015a8e:	f10d 0107 	add.w	r1, sp, #7
 8015a92:	209f      	movs	r0, #159	; 0x9f
 8015a94:	f7ff fede 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015a98:	b003      	add	sp, #12
 8015a9a:	f85d fb04 	ldr.w	pc, [sp], #4

08015a9e <SUBGRF_SetLoRaSymbNumTimeout>:
{
 8015a9e:	b500      	push	{lr}
 8015aa0:	b083      	sub	sp, #12
 8015aa2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8015aa6:	2201      	movs	r2, #1
 8015aa8:	f10d 0107 	add.w	r1, sp, #7
 8015aac:	20a0      	movs	r0, #160	; 0xa0
 8015aae:	f7ff fed1 	bl	8015854 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8015ab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8015ab6:	2b3f      	cmp	r3, #63	; 0x3f
 8015ab8:	d90f      	bls.n	8015ada <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 8015aba:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 8015abc:	2200      	movs	r2, #0
        while( mant > 31 )
 8015abe:	e002      	b.n	8015ac6 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8015ac0:	089b      	lsrs	r3, r3, #2
            exp++;
 8015ac2:	3201      	adds	r2, #1
 8015ac4:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8015ac6:	2b1f      	cmp	r3, #31
 8015ac8:	d8fa      	bhi.n	8015ac0 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 8015aca:	00d9      	lsls	r1, r3, #3
 8015acc:	b2c9      	uxtb	r1, r1
 8015ace:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8015ad0:	b2c9      	uxtb	r1, r1
 8015ad2:	f240 7006 	movw	r0, #1798	; 0x706
 8015ad6:	f7ff fdf7 	bl	80156c8 <SUBGRF_WriteRegister>
}
 8015ada:	b003      	add	sp, #12
 8015adc:	f85d fb04 	ldr.w	pc, [sp], #4

08015ae0 <SUBGRF_SetRegulatorMode>:
{
 8015ae0:	b500      	push	{lr}
 8015ae2:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8015ae4:	f7f1 ffd2 	bl	8007a8c <RBI_IsDCDC>
 8015ae8:	2801      	cmp	r0, #1
 8015aea:	d00b      	beq.n	8015b04 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8015aec:	2300      	movs	r3, #0
 8015aee:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8015af2:	2201      	movs	r2, #1
 8015af4:	f10d 0107 	add.w	r1, sp, #7
 8015af8:	2096      	movs	r0, #150	; 0x96
 8015afa:	f7ff feab 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015afe:	b003      	add	sp, #12
 8015b00:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8015b04:	2301      	movs	r3, #1
 8015b06:	f88d 3007 	strb.w	r3, [sp, #7]
 8015b0a:	e7f2      	b.n	8015af2 <SUBGRF_SetRegulatorMode+0x12>

08015b0c <SUBGRF_Calibrate>:
{
 8015b0c:	b500      	push	{lr}
 8015b0e:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015b10:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015b14:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015b18:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8015b1a:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8015b1e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015b20:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8015b24:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8015b26:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8015b2a:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8015b2c:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8015b30:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8015b32:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8015b36:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8015b38:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8015b3c:	2201      	movs	r2, #1
 8015b3e:	f10d 0107 	add.w	r1, sp, #7
 8015b42:	2089      	movs	r0, #137	; 0x89
 8015b44:	f7ff fe86 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015b48:	b003      	add	sp, #12
 8015b4a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015b50 <SUBGRF_CalibrateImage>:
{
 8015b50:	b500      	push	{lr}
 8015b52:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8015b54:	4b1f      	ldr	r3, [pc, #124]	; (8015bd4 <SUBGRF_CalibrateImage+0x84>)
 8015b56:	4298      	cmp	r0, r3
 8015b58:	d90d      	bls.n	8015b76 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 8015b5a:	23e1      	movs	r3, #225	; 0xe1
 8015b5c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8015b60:	23e9      	movs	r3, #233	; 0xe9
 8015b62:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8015b66:	2202      	movs	r2, #2
 8015b68:	a901      	add	r1, sp, #4
 8015b6a:	2098      	movs	r0, #152	; 0x98
 8015b6c:	f7ff fe72 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015b70:	b003      	add	sp, #12
 8015b72:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8015b76:	4b18      	ldr	r3, [pc, #96]	; (8015bd8 <SUBGRF_CalibrateImage+0x88>)
 8015b78:	4298      	cmp	r0, r3
 8015b7a:	d906      	bls.n	8015b8a <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 8015b7c:	23d7      	movs	r3, #215	; 0xd7
 8015b7e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8015b82:	23db      	movs	r3, #219	; 0xdb
 8015b84:	f88d 3005 	strb.w	r3, [sp, #5]
 8015b88:	e7ed      	b.n	8015b66 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 8015b8a:	4b14      	ldr	r3, [pc, #80]	; (8015bdc <SUBGRF_CalibrateImage+0x8c>)
 8015b8c:	4298      	cmp	r0, r3
 8015b8e:	d906      	bls.n	8015b9e <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8015b90:	23c1      	movs	r3, #193	; 0xc1
 8015b92:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8015b96:	23c5      	movs	r3, #197	; 0xc5
 8015b98:	f88d 3005 	strb.w	r3, [sp, #5]
 8015b9c:	e7e3      	b.n	8015b66 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 8015b9e:	4b10      	ldr	r3, [pc, #64]	; (8015be0 <SUBGRF_CalibrateImage+0x90>)
 8015ba0:	4298      	cmp	r0, r3
 8015ba2:	d906      	bls.n	8015bb2 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8015ba4:	2375      	movs	r3, #117	; 0x75
 8015ba6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 8015baa:	2381      	movs	r3, #129	; 0x81
 8015bac:	f88d 3005 	strb.w	r3, [sp, #5]
 8015bb0:	e7d9      	b.n	8015b66 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8015bb2:	4b0c      	ldr	r3, [pc, #48]	; (8015be4 <SUBGRF_CalibrateImage+0x94>)
 8015bb4:	4298      	cmp	r0, r3
 8015bb6:	d906      	bls.n	8015bc6 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8015bb8:	236b      	movs	r3, #107	; 0x6b
 8015bba:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 8015bbe:	236f      	movs	r3, #111	; 0x6f
 8015bc0:	f88d 3005 	strb.w	r3, [sp, #5]
 8015bc4:	e7cf      	b.n	8015b66 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8015bc6:	2329      	movs	r3, #41	; 0x29
 8015bc8:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8015bcc:	232b      	movs	r3, #43	; 0x2b
 8015bce:	f88d 3005 	strb.w	r3, [sp, #5]
 8015bd2:	e7c8      	b.n	8015b66 <SUBGRF_CalibrateImage+0x16>
 8015bd4:	35a4e900 	.word	0x35a4e900
 8015bd8:	32a9f880 	.word	0x32a9f880
 8015bdc:	2de54480 	.word	0x2de54480
 8015be0:	1b6b0b00 	.word	0x1b6b0b00
 8015be4:	1954fc40 	.word	0x1954fc40

08015be8 <SUBGRF_SetPaConfig>:
{
 8015be8:	b500      	push	{lr}
 8015bea:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8015bec:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8015bf0:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8015bf4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 8015bf8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8015bfc:	2204      	movs	r2, #4
 8015bfe:	eb0d 0102 	add.w	r1, sp, r2
 8015c02:	2095      	movs	r0, #149	; 0x95
 8015c04:	f7ff fe26 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015c08:	b003      	add	sp, #12
 8015c0a:	f85d fb04 	ldr.w	pc, [sp], #4

08015c0e <SUBGRF_SetDioIrqParams>:
{
 8015c0e:	b500      	push	{lr}
 8015c10:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8015c12:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 8015c16:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 8015c1a:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8015c1e:	0a08      	lsrs	r0, r1, #8
 8015c20:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8015c24:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8015c28:	0a11      	lsrs	r1, r2, #8
 8015c2a:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8015c2e:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8015c32:	0a1a      	lsrs	r2, r3, #8
 8015c34:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8015c38:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8015c3c:	2208      	movs	r2, #8
 8015c3e:	4669      	mov	r1, sp
 8015c40:	4610      	mov	r0, r2
 8015c42:	f7ff fe07 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015c46:	b003      	add	sp, #12
 8015c48:	f85d fb04 	ldr.w	pc, [sp], #4

08015c4c <SUBGRF_SetTcxoMode>:
{
 8015c4c:	b500      	push	{lr}
 8015c4e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8015c50:	f000 0007 	and.w	r0, r0, #7
 8015c54:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8015c58:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8015c5c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8015c60:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8015c64:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8015c68:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8015c6c:	2204      	movs	r2, #4
 8015c6e:	eb0d 0102 	add.w	r1, sp, r2
 8015c72:	2097      	movs	r0, #151	; 0x97
 8015c74:	f7ff fdee 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015c78:	b003      	add	sp, #12
 8015c7a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08015c80 <SUBGRF_Init>:
{
 8015c80:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8015c82:	b108      	cbz	r0, 8015c88 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8015c84:	4a18      	ldr	r2, [pc, #96]	; (8015ce8 <SUBGRF_Init+0x68>)
 8015c86:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8015c88:	f7ec fd1e 	bl	80026c8 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8015c8c:	2002      	movs	r0, #2
 8015c8e:	f7ff fd3b 	bl	8015708 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8015c92:	2000      	movs	r0, #0
 8015c94:	4b15      	ldr	r3, [pc, #84]	; (8015cec <SUBGRF_Init+0x6c>)
 8015c96:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8015c98:	f7ff fe0c 	bl	80158b4 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 8015c9c:	f7f1 fef2 	bl	8007a84 <RBI_IsTCXO>
 8015ca0:	2801      	cmp	r0, #1
 8015ca2:	d014      	beq.n	8015cce <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8015ca4:	2120      	movs	r1, #32
 8015ca6:	f640 1011 	movw	r0, #2321	; 0x911
 8015caa:	f7ff fd0d 	bl	80156c8 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8015cae:	2120      	movs	r1, #32
 8015cb0:	f640 1012 	movw	r0, #2322	; 0x912
 8015cb4:	f7ff fd08 	bl	80156c8 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8015cb8:	210e      	movs	r1, #14
 8015cba:	f640 101f 	movw	r0, #2335	; 0x91f
 8015cbe:	f7ff fd03 	bl	80156c8 <SUBGRF_WriteRegister>
    RBI_Init();
 8015cc2:	f7f1 fed3 	bl	8007a6c <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8015cc6:	4b0a      	ldr	r3, [pc, #40]	; (8015cf0 <SUBGRF_Init+0x70>)
 8015cc8:	2201      	movs	r2, #1
 8015cca:	701a      	strb	r2, [r3, #0]
}
 8015ccc:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8015cce:	2140      	movs	r1, #64	; 0x40
 8015cd0:	f7ff ffbc 	bl	8015c4c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8015cd4:	2100      	movs	r1, #0
 8015cd6:	f640 1011 	movw	r0, #2321	; 0x911
 8015cda:	f7ff fcf5 	bl	80156c8 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8015cde:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8015ce2:	f7ff ff13 	bl	8015b0c <SUBGRF_Calibrate>
 8015ce6:	e7e7      	b.n	8015cb8 <SUBGRF_Init+0x38>
 8015ce8:	20001c00 	.word	0x20001c00
 8015cec:	20001bfc 	.word	0x20001bfc
 8015cf0:	20001bfe 	.word	0x20001bfe

08015cf4 <SUBGRF_SetRfFrequency>:
{
 8015cf4:	b510      	push	{r4, lr}
 8015cf6:	b082      	sub	sp, #8
 8015cf8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8015cfa:	4b12      	ldr	r3, [pc, #72]	; (8015d44 <SUBGRF_SetRfFrequency+0x50>)
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	b1d3      	cbz	r3, 8015d36 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8015d00:	4a11      	ldr	r2, [pc, #68]	; (8015d48 <SUBGRF_SetRfFrequency+0x54>)
 8015d02:	2300      	movs	r3, #0
 8015d04:	0660      	lsls	r0, r4, #25
 8015d06:	09e1      	lsrs	r1, r4, #7
 8015d08:	f7eb fab0 	bl	800126c <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8015d0c:	0e03      	lsrs	r3, r0, #24
 8015d0e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8015d12:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8015d16:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8015d1a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8015d1e:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8015d22:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8015d26:	2204      	movs	r2, #4
 8015d28:	eb0d 0102 	add.w	r1, sp, r2
 8015d2c:	2086      	movs	r0, #134	; 0x86
 8015d2e:	f7ff fd91 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015d32:	b002      	add	sp, #8
 8015d34:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8015d36:	f7ff ff0b 	bl	8015b50 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8015d3a:	4b02      	ldr	r3, [pc, #8]	; (8015d44 <SUBGRF_SetRfFrequency+0x50>)
 8015d3c:	2201      	movs	r2, #1
 8015d3e:	701a      	strb	r2, [r3, #0]
 8015d40:	e7de      	b.n	8015d00 <SUBGRF_SetRfFrequency+0xc>
 8015d42:	bf00      	nop
 8015d44:	20001bfc 	.word	0x20001bfc
 8015d48:	01e84800 	.word	0x01e84800

08015d4c <SUBGRF_SetPacketType>:
{
 8015d4c:	b500      	push	{lr}
 8015d4e:	b083      	sub	sp, #12
 8015d50:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8015d54:	b2c3      	uxtb	r3, r0
 8015d56:	4a09      	ldr	r2, [pc, #36]	; (8015d7c <SUBGRF_SetPacketType+0x30>)
 8015d58:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8015d5a:	b143      	cbz	r3, 8015d6e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8015d5c:	2201      	movs	r2, #1
 8015d5e:	f10d 0107 	add.w	r1, sp, #7
 8015d62:	208a      	movs	r0, #138	; 0x8a
 8015d64:	f7ff fd76 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015d68:	b003      	add	sp, #12
 8015d6a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8015d6e:	2100      	movs	r1, #0
 8015d70:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8015d74:	f7ff fca8 	bl	80156c8 <SUBGRF_WriteRegister>
 8015d78:	e7f0      	b.n	8015d5c <SUBGRF_SetPacketType+0x10>
 8015d7a:	bf00      	nop
 8015d7c:	20001bff 	.word	0x20001bff

08015d80 <SUBGRF_SetTxParams>:
{
 8015d80:	b570      	push	{r4, r5, r6, lr}
 8015d82:	b082      	sub	sp, #8
 8015d84:	460c      	mov	r4, r1
 8015d86:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8015d88:	2801      	cmp	r0, #1
 8015d8a:	d035      	beq.n	8015df8 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8015d8c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8015d90:	f7ff fcaa 	bl	80156e8 <SUBGRF_ReadRegister>
 8015d94:	f040 011e 	orr.w	r1, r0, #30
 8015d98:	b2c9      	uxtb	r1, r1
 8015d9a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8015d9e:	f7ff fc93 	bl	80156c8 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8015da2:	2001      	movs	r0, #1
 8015da4:	f7f1 fe76 	bl	8007a94 <RBI_GetRFOMaxPowerConfig>
 8015da8:	4605      	mov	r5, r0
        if (power > max_power)
 8015daa:	4284      	cmp	r4, r0
 8015dac:	dd00      	ble.n	8015db0 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8015dae:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8015db0:	2d14      	cmp	r5, #20
 8015db2:	d054      	beq.n	8015e5e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8015db4:	2d11      	cmp	r5, #17
 8015db6:	d05c      	beq.n	8015e72 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8015db8:	2d0e      	cmp	r5, #14
 8015dba:	d064      	beq.n	8015e86 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8015dbc:	2301      	movs	r3, #1
 8015dbe:	2200      	movs	r2, #0
 8015dc0:	2107      	movs	r1, #7
 8015dc2:	2004      	movs	r0, #4
 8015dc4:	f7ff ff10 	bl	8015be8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8015dc8:	1b64      	subs	r4, r4, r5
 8015dca:	3416      	adds	r4, #22
 8015dcc:	b265      	sxtb	r5, r4
        if (power < -9)
 8015dce:	f115 0f09 	cmn.w	r5, #9
 8015dd2:	da01      	bge.n	8015dd8 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8015dd4:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8015dd8:	2138      	movs	r1, #56	; 0x38
 8015dda:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015dde:	f7ff fc73 	bl	80156c8 <SUBGRF_WriteRegister>
    buf[0] = power;
 8015de2:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8015de6:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8015dea:	2202      	movs	r2, #2
 8015dec:	a901      	add	r1, sp, #4
 8015dee:	208e      	movs	r0, #142	; 0x8e
 8015df0:	f7ff fd30 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015df4:	b002      	add	sp, #8
 8015df6:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8015df8:	2000      	movs	r0, #0
 8015dfa:	f7f1 fe4b 	bl	8007a94 <RBI_GetRFOMaxPowerConfig>
 8015dfe:	4605      	mov	r5, r0
        if (power >  max_power)
 8015e00:	4284      	cmp	r4, r0
 8015e02:	dd00      	ble.n	8015e06 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8015e04:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8015e06:	2d0e      	cmp	r5, #14
 8015e08:	d015      	beq.n	8015e36 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8015e0a:	2d0a      	cmp	r5, #10
 8015e0c:	d01d      	beq.n	8015e4a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8015e0e:	2301      	movs	r3, #1
 8015e10:	461a      	mov	r2, r3
 8015e12:	2100      	movs	r1, #0
 8015e14:	2007      	movs	r0, #7
 8015e16:	f7ff fee7 	bl	8015be8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8015e1a:	1b65      	subs	r5, r4, r5
 8015e1c:	350e      	adds	r5, #14
 8015e1e:	b26d      	sxtb	r5, r5
        if (power < -17)
 8015e20:	f115 0f11 	cmn.w	r5, #17
 8015e24:	da01      	bge.n	8015e2a <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8015e26:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8015e2a:	2118      	movs	r1, #24
 8015e2c:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8015e30:	f7ff fc4a 	bl	80156c8 <SUBGRF_WriteRegister>
 8015e34:	e7d5      	b.n	8015de2 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8015e36:	2301      	movs	r3, #1
 8015e38:	461a      	mov	r2, r3
 8015e3a:	2100      	movs	r1, #0
 8015e3c:	2004      	movs	r0, #4
 8015e3e:	f7ff fed3 	bl	8015be8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8015e42:	1b65      	subs	r5, r4, r5
 8015e44:	350e      	adds	r5, #14
 8015e46:	b26d      	sxtb	r5, r5
 8015e48:	e7ea      	b.n	8015e20 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	2100      	movs	r1, #0
 8015e50:	4618      	mov	r0, r3
 8015e52:	f7ff fec9 	bl	8015be8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8015e56:	1b65      	subs	r5, r4, r5
 8015e58:	350d      	adds	r5, #13
 8015e5a:	b26d      	sxtb	r5, r5
 8015e5c:	e7e0      	b.n	8015e20 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8015e5e:	2301      	movs	r3, #1
 8015e60:	2200      	movs	r2, #0
 8015e62:	2105      	movs	r1, #5
 8015e64:	2003      	movs	r0, #3
 8015e66:	f7ff febf 	bl	8015be8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8015e6a:	1b65      	subs	r5, r4, r5
 8015e6c:	3516      	adds	r5, #22
 8015e6e:	b26d      	sxtb	r5, r5
 8015e70:	e7ad      	b.n	8015dce <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8015e72:	2301      	movs	r3, #1
 8015e74:	2200      	movs	r2, #0
 8015e76:	2103      	movs	r1, #3
 8015e78:	2002      	movs	r0, #2
 8015e7a:	f7ff feb5 	bl	8015be8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8015e7e:	1b65      	subs	r5, r4, r5
 8015e80:	3516      	adds	r5, #22
 8015e82:	b26d      	sxtb	r5, r5
 8015e84:	e7a3      	b.n	8015dce <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8015e86:	2301      	movs	r3, #1
 8015e88:	2200      	movs	r2, #0
 8015e8a:	2102      	movs	r1, #2
 8015e8c:	4608      	mov	r0, r1
 8015e8e:	f7ff feab 	bl	8015be8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8015e92:	1b65      	subs	r5, r4, r5
 8015e94:	350e      	adds	r5, #14
 8015e96:	b26d      	sxtb	r5, r5
 8015e98:	e799      	b.n	8015dce <SUBGRF_SetTxParams+0x4e>
	...

08015e9c <SUBGRF_SetModulationParams>:
{
 8015e9c:	b510      	push	{r4, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015ea2:	4b3e      	ldr	r3, [pc, #248]	; (8015f9c <SUBGRF_SetModulationParams+0x100>)
 8015ea4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015ea8:	ab02      	add	r3, sp, #8
 8015eaa:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8015eae:	7820      	ldrb	r0, [r4, #0]
 8015eb0:	4b3b      	ldr	r3, [pc, #236]	; (8015fa0 <SUBGRF_SetModulationParams+0x104>)
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	4298      	cmp	r0, r3
 8015eb6:	d106      	bne.n	8015ec6 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8015eb8:	7823      	ldrb	r3, [r4, #0]
 8015eba:	2b03      	cmp	r3, #3
 8015ebc:	d82c      	bhi.n	8015f18 <SUBGRF_SetModulationParams+0x7c>
 8015ebe:	e8df f003 	tbb	[pc, r3]
 8015ec2:	4205      	.short	0x4205
 8015ec4:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8015ec6:	f7ff ff41 	bl	8015d4c <SUBGRF_SetPacketType>
 8015eca:	e7f5      	b.n	8015eb8 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8015ecc:	6862      	ldr	r2, [r4, #4]
 8015ece:	4b35      	ldr	r3, [pc, #212]	; (8015fa4 <SUBGRF_SetModulationParams+0x108>)
 8015ed0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015ed4:	0c1a      	lsrs	r2, r3, #16
 8015ed6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015eda:	0a1a      	lsrs	r2, r3, #8
 8015edc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015ee0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015ee4:	7b23      	ldrb	r3, [r4, #12]
 8015ee6:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015eea:	7b63      	ldrb	r3, [r4, #13]
 8015eec:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8015ef0:	68a1      	ldr	r1, [r4, #8]
 8015ef2:	4a2d      	ldr	r2, [pc, #180]	; (8015fa8 <SUBGRF_SetModulationParams+0x10c>)
 8015ef4:	2300      	movs	r3, #0
 8015ef6:	0648      	lsls	r0, r1, #25
 8015ef8:	09c9      	lsrs	r1, r1, #7
 8015efa:	f7eb f9b7 	bl	800126c <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8015efe:	0c03      	lsrs	r3, r0, #16
 8015f00:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8015f04:	0a03      	lsrs	r3, r0, #8
 8015f06:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8015f0a:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015f0e:	2208      	movs	r2, #8
 8015f10:	4669      	mov	r1, sp
 8015f12:	208b      	movs	r0, #139	; 0x8b
 8015f14:	f7ff fc9e 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015f18:	b002      	add	sp, #8
 8015f1a:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8015f1c:	6922      	ldr	r2, [r4, #16]
 8015f1e:	4b21      	ldr	r3, [pc, #132]	; (8015fa4 <SUBGRF_SetModulationParams+0x108>)
 8015f20:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015f24:	0c1a      	lsrs	r2, r3, #16
 8015f26:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015f2a:	0a1a      	lsrs	r2, r3, #8
 8015f2c:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015f30:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8015f34:	7d23      	ldrb	r3, [r4, #20]
 8015f36:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015f3a:	2204      	movs	r2, #4
 8015f3c:	4669      	mov	r1, sp
 8015f3e:	208b      	movs	r0, #139	; 0x8b
 8015f40:	f7ff fc88 	bl	8015854 <SUBGRF_WriteCommand>
        break;
 8015f44:	e7e8      	b.n	8015f18 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8015f46:	7e23      	ldrb	r3, [r4, #24]
 8015f48:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8015f4c:	7e63      	ldrb	r3, [r4, #25]
 8015f4e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8015f52:	7ea3      	ldrb	r3, [r4, #26]
 8015f54:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8015f58:	7ee3      	ldrb	r3, [r4, #27]
 8015f5a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015f5e:	2204      	movs	r2, #4
 8015f60:	4669      	mov	r1, sp
 8015f62:	208b      	movs	r0, #139	; 0x8b
 8015f64:	f7ff fc76 	bl	8015854 <SUBGRF_WriteCommand>
        break;
 8015f68:	e7d6      	b.n	8015f18 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8015f6a:	6862      	ldr	r2, [r4, #4]
 8015f6c:	4b0d      	ldr	r3, [pc, #52]	; (8015fa4 <SUBGRF_SetModulationParams+0x108>)
 8015f6e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8015f72:	0c1a      	lsrs	r2, r3, #16
 8015f74:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8015f78:	0a1a      	lsrs	r2, r3, #8
 8015f7a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8015f7e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8015f82:	7b23      	ldrb	r3, [r4, #12]
 8015f84:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8015f88:	7b63      	ldrb	r3, [r4, #13]
 8015f8a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8015f8e:	2205      	movs	r2, #5
 8015f90:	4669      	mov	r1, sp
 8015f92:	208b      	movs	r0, #139	; 0x8b
 8015f94:	f7ff fc5e 	bl	8015854 <SUBGRF_WriteCommand>
}
 8015f98:	e7be      	b.n	8015f18 <SUBGRF_SetModulationParams+0x7c>
 8015f9a:	bf00      	nop
 8015f9c:	0801c220 	.word	0x0801c220
 8015fa0:	20001bff 	.word	0x20001bff
 8015fa4:	3d090000 	.word	0x3d090000
 8015fa8:	01e84800 	.word	0x01e84800

08015fac <SUBGRF_SetPacketParams>:
{
 8015fac:	b510      	push	{r4, lr}
 8015fae:	b084      	sub	sp, #16
 8015fb0:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8015fb2:	ab01      	add	r3, sp, #4
 8015fb4:	4a33      	ldr	r2, [pc, #204]	; (8016084 <SUBGRF_SetPacketParams+0xd8>)
 8015fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8015fb8:	c303      	stmia	r3!, {r0, r1}
 8015fba:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8015fbc:	7820      	ldrb	r0, [r4, #0]
 8015fbe:	4b32      	ldr	r3, [pc, #200]	; (8016088 <SUBGRF_SetPacketParams+0xdc>)
 8015fc0:	781b      	ldrb	r3, [r3, #0]
 8015fc2:	4298      	cmp	r0, r3
 8015fc4:	d106      	bne.n	8015fd4 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8015fc6:	7823      	ldrb	r3, [r4, #0]
 8015fc8:	2b03      	cmp	r3, #3
 8015fca:	d82a      	bhi.n	8016022 <SUBGRF_SetPacketParams+0x76>
 8015fcc:	e8df f003 	tbb	[pc, r3]
 8015fd0:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8015fd4:	f7ff feba 	bl	8015d4c <SUBGRF_SetPacketType>
 8015fd8:	e7f5      	b.n	8015fc6 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8015fda:	7a63      	ldrb	r3, [r4, #9]
 8015fdc:	2bf1      	cmp	r3, #241	; 0xf1
 8015fde:	d022      	beq.n	8016026 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8015fe0:	2bf2      	cmp	r3, #242	; 0xf2
 8015fe2:	d02a      	beq.n	801603a <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8015fe4:	8862      	ldrh	r2, [r4, #2]
 8015fe6:	0a11      	lsrs	r1, r2, #8
 8015fe8:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8015fec:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8015ff0:	7922      	ldrb	r2, [r4, #4]
 8015ff2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8015ff6:	7962      	ldrb	r2, [r4, #5]
 8015ff8:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8015ffc:	79a2      	ldrb	r2, [r4, #6]
 8015ffe:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8016002:	79e2      	ldrb	r2, [r4, #7]
 8016004:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8016008:	7a22      	ldrb	r2, [r4, #8]
 801600a:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 801600e:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8016012:	7aa3      	ldrb	r3, [r4, #10]
 8016014:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8016018:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801601a:	a901      	add	r1, sp, #4
 801601c:	208c      	movs	r0, #140	; 0x8c
 801601e:	f7ff fc19 	bl	8015854 <SUBGRF_WriteCommand>
}
 8016022:	b004      	add	sp, #16
 8016024:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8016026:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801602a:	f7ff fbb2 	bl	8015792 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 801602e:	f248 0005 	movw	r0, #32773	; 0x8005
 8016032:	f7ff fbc2 	bl	80157ba <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8016036:	2302      	movs	r3, #2
 8016038:	e7d4      	b.n	8015fe4 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 801603a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 801603e:	f7ff fba8 	bl	8015792 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8016042:	f241 0021 	movw	r0, #4129	; 0x1021
 8016046:	f7ff fbb8 	bl	80157ba <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 801604a:	2306      	movs	r3, #6
 801604c:	e7ca      	b.n	8015fe4 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 801604e:	7b23      	ldrb	r3, [r4, #12]
 8016050:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8016054:	2201      	movs	r2, #1
        break;
 8016056:	e7e0      	b.n	801601a <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8016058:	89e3      	ldrh	r3, [r4, #14]
 801605a:	0a1a      	lsrs	r2, r3, #8
 801605c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8016060:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8016064:	7c23      	ldrb	r3, [r4, #16]
 8016066:	4a09      	ldr	r2, [pc, #36]	; (801608c <SUBGRF_SetPacketParams+0xe0>)
 8016068:	7013      	strb	r3, [r2, #0]
 801606a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 801606e:	7c63      	ldrb	r3, [r4, #17]
 8016070:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8016074:	7ca3      	ldrb	r3, [r4, #18]
 8016076:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 801607a:	7ce3      	ldrb	r3, [r4, #19]
 801607c:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8016080:	2206      	movs	r2, #6
        break;
 8016082:	e7ca      	b.n	801601a <SUBGRF_SetPacketParams+0x6e>
 8016084:	0801c228 	.word	0x0801c228
 8016088:	20001bff 	.word	0x20001bff
 801608c:	20001bfd 	.word	0x20001bfd

08016090 <SUBGRF_SetBufferBaseAddress>:
{
 8016090:	b500      	push	{lr}
 8016092:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8016094:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8016098:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 801609c:	2202      	movs	r2, #2
 801609e:	a901      	add	r1, sp, #4
 80160a0:	208f      	movs	r0, #143	; 0x8f
 80160a2:	f7ff fbd7 	bl	8015854 <SUBGRF_WriteCommand>
}
 80160a6:	b003      	add	sp, #12
 80160a8:	f85d fb04 	ldr.w	pc, [sp], #4

080160ac <SUBGRF_ReadCommand>:
{
 80160ac:	b510      	push	{r4, lr}
 80160ae:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80160b4:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 80160b6:	460a      	mov	r2, r1
 80160b8:	4601      	mov	r1, r0
 80160ba:	4803      	ldr	r0, [pc, #12]	; (80160c8 <SUBGRF_ReadCommand+0x1c>)
 80160bc:	f7f5 f8b0 	bl	800b220 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80160c0:	f384 8810 	msr	PRIMASK, r4
}
 80160c4:	bd10      	pop	{r4, pc}
 80160c6:	bf00      	nop
 80160c8:	20000b50 	.word	0x20000b50

080160cc <SUBGRF_GetRssiInst>:
{
 80160cc:	b500      	push	{lr}
 80160ce:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80160d0:	2201      	movs	r2, #1
 80160d2:	a901      	add	r1, sp, #4
 80160d4:	2015      	movs	r0, #21
 80160d6:	f7ff ffe9 	bl	80160ac <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80160da:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80160de:	4240      	negs	r0, r0
}
 80160e0:	1040      	asrs	r0, r0, #1
 80160e2:	b003      	add	sp, #12
 80160e4:	f85d fb04 	ldr.w	pc, [sp], #4

080160e8 <SUBGRF_GetRxBufferStatus>:
{
 80160e8:	b530      	push	{r4, r5, lr}
 80160ea:	b083      	sub	sp, #12
 80160ec:	4605      	mov	r5, r0
 80160ee:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80160f0:	2202      	movs	r2, #2
 80160f2:	a901      	add	r1, sp, #4
 80160f4:	2013      	movs	r0, #19
 80160f6:	f7ff ffd9 	bl	80160ac <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80160fa:	f7ff fadf 	bl	80156bc <SUBGRF_GetPacketType>
 80160fe:	2801      	cmp	r0, #1
 8016100:	d007      	beq.n	8016112 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8016102:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016106:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8016108:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801610c:	7023      	strb	r3, [r4, #0]
}
 801610e:	b003      	add	sp, #12
 8016110:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8016112:	4b05      	ldr	r3, [pc, #20]	; (8016128 <SUBGRF_GetRxBufferStatus+0x40>)
 8016114:	781b      	ldrb	r3, [r3, #0]
 8016116:	b2db      	uxtb	r3, r3
 8016118:	2b01      	cmp	r3, #1
 801611a:	d1f2      	bne.n	8016102 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 801611c:	f240 7002 	movw	r0, #1794	; 0x702
 8016120:	f7ff fae2 	bl	80156e8 <SUBGRF_ReadRegister>
 8016124:	7028      	strb	r0, [r5, #0]
 8016126:	e7ef      	b.n	8016108 <SUBGRF_GetRxBufferStatus+0x20>
 8016128:	20001bfd 	.word	0x20001bfd

0801612c <SUBGRF_GetPayload>:
{
 801612c:	b570      	push	{r4, r5, r6, lr}
 801612e:	b082      	sub	sp, #8
 8016130:	4606      	mov	r6, r0
 8016132:	460c      	mov	r4, r1
 8016134:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8016136:	2300      	movs	r3, #0
 8016138:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 801613c:	f10d 0107 	add.w	r1, sp, #7
 8016140:	4620      	mov	r0, r4
 8016142:	f7ff ffd1 	bl	80160e8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8016146:	7822      	ldrb	r2, [r4, #0]
 8016148:	42aa      	cmp	r2, r5
 801614a:	d902      	bls.n	8016152 <SUBGRF_GetPayload+0x26>
        return 1;
 801614c:	2001      	movs	r0, #1
}
 801614e:	b002      	add	sp, #8
 8016150:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8016152:	4631      	mov	r1, r6
 8016154:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8016158:	f7ff fb6c 	bl	8015834 <SUBGRF_ReadBuffer>
    return 0;
 801615c:	2000      	movs	r0, #0
 801615e:	e7f6      	b.n	801614e <SUBGRF_GetPayload+0x22>

08016160 <SUBGRF_GetPacketStatus>:
{
 8016160:	b510      	push	{r4, lr}
 8016162:	b082      	sub	sp, #8
 8016164:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8016166:	2203      	movs	r2, #3
 8016168:	a901      	add	r1, sp, #4
 801616a:	2014      	movs	r0, #20
 801616c:	f7ff ff9e 	bl	80160ac <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8016170:	f7ff faa4 	bl	80156bc <SUBGRF_GetPacketType>
 8016174:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8016176:	b148      	cbz	r0, 801618c <SUBGRF_GetPacketStatus+0x2c>
 8016178:	2801      	cmp	r0, #1
 801617a:	d018      	beq.n	80161ae <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 801617c:	2214      	movs	r2, #20
 801617e:	2100      	movs	r1, #0
 8016180:	4620      	mov	r0, r4
 8016182:	f000 fb20 	bl	80167c6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8016186:	230f      	movs	r3, #15
 8016188:	7023      	strb	r3, [r4, #0]
}
 801618a:	e00e      	b.n	80161aa <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 801618c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8016190:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8016192:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8016196:	425b      	negs	r3, r3
 8016198:	105b      	asrs	r3, r3, #1
 801619a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 801619c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80161a0:	425b      	negs	r3, r3
 80161a2:	105b      	asrs	r3, r3, #1
 80161a4:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	60a3      	str	r3, [r4, #8]
}
 80161aa:	b002      	add	sp, #8
 80161ac:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 80161ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80161b2:	425b      	negs	r3, r3
 80161b4:	105b      	asrs	r3, r3, #1
 80161b6:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 80161b8:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 80161bc:	3302      	adds	r3, #2
 80161be:	109b      	asrs	r3, r3, #2
 80161c0:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80161c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80161c6:	425b      	negs	r3, r3
 80161c8:	105b      	asrs	r3, r3, #1
 80161ca:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80161cc:	4b01      	ldr	r3, [pc, #4]	; (80161d4 <SUBGRF_GetPacketStatus+0x74>)
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	6123      	str	r3, [r4, #16]
            break;
 80161d2:	e7ea      	b.n	80161aa <SUBGRF_GetPacketStatus+0x4a>
 80161d4:	20001bf8 	.word	0x20001bf8

080161d8 <SUBGRF_SetSwitch>:
{
 80161d8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 80161da:	2901      	cmp	r1, #1
 80161dc:	d003      	beq.n	80161e6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 80161de:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 80161e0:	f7f1 fc48 	bl	8007a74 <RBI_ConfigRFSwitch>
}
 80161e4:	bd10      	pop	{r4, pc}
 80161e6:	4604      	mov	r4, r0
 80161e8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 80161ea:	2c01      	cmp	r4, #1
 80161ec:	d003      	beq.n	80161f6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 80161ee:	2c02      	cmp	r4, #2
 80161f0:	d1f6      	bne.n	80161e0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 80161f2:	2003      	movs	r0, #3
 80161f4:	e7f4      	b.n	80161e0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 80161f6:	2004      	movs	r0, #4
 80161f8:	f7ff fa86 	bl	8015708 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 80161fc:	2002      	movs	r0, #2
 80161fe:	e7f6      	b.n	80161ee <SUBGRF_SetSwitch+0x16>

08016200 <SUBGRF_SetRfTxPower>:
{
 8016200:	b538      	push	{r3, r4, r5, lr}
 8016202:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8016204:	f7f1 fc3a 	bl	8007a7c <RBI_GetTxConfig>
    switch (TxConfig)
 8016208:	b148      	cbz	r0, 801621e <SUBGRF_SetRfTxPower+0x1e>
 801620a:	2802      	cmp	r0, #2
 801620c:	d10d      	bne.n	801622a <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 801620e:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8016210:	2202      	movs	r2, #2
 8016212:	4621      	mov	r1, r4
 8016214:	4628      	mov	r0, r5
 8016216:	f7ff fdb3 	bl	8015d80 <SUBGRF_SetTxParams>
}
 801621a:	4628      	mov	r0, r5
 801621c:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 801621e:	2c0f      	cmp	r4, #15
 8016220:	dc01      	bgt.n	8016226 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8016222:	2501      	movs	r5, #1
 8016224:	e7f4      	b.n	8016210 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8016226:	2502      	movs	r5, #2
 8016228:	e7f2      	b.n	8016210 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 801622a:	2501      	movs	r5, #1
 801622c:	e7f0      	b.n	8016210 <SUBGRF_SetRfTxPower+0x10>

0801622e <SUBGRF_GetRadioWakeUpTime>:
}
 801622e:	2001      	movs	r0, #1
 8016230:	4770      	bx	lr
	...

08016234 <HAL_SUBGHZ_TxCpltCallback>:
{
 8016234:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8016236:	4b02      	ldr	r3, [pc, #8]	; (8016240 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8016238:	681b      	ldr	r3, [r3, #0]
 801623a:	2001      	movs	r0, #1
 801623c:	4798      	blx	r3
}
 801623e:	bd08      	pop	{r3, pc}
 8016240:	20001c00 	.word	0x20001c00

08016244 <HAL_SUBGHZ_RxCpltCallback>:
{
 8016244:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8016246:	4b02      	ldr	r3, [pc, #8]	; (8016250 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	2002      	movs	r0, #2
 801624c:	4798      	blx	r3
}
 801624e:	bd08      	pop	{r3, pc}
 8016250:	20001c00 	.word	0x20001c00

08016254 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8016254:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8016256:	4b02      	ldr	r3, [pc, #8]	; (8016260 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8016258:	681b      	ldr	r3, [r3, #0]
 801625a:	2040      	movs	r0, #64	; 0x40
 801625c:	4798      	blx	r3
}
 801625e:	bd08      	pop	{r3, pc}
 8016260:	20001c00 	.word	0x20001c00

08016264 <HAL_SUBGHZ_CADStatusCallback>:
{
 8016264:	b508      	push	{r3, lr}
    switch (cadstatus)
 8016266:	b111      	cbz	r1, 801626e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8016268:	2901      	cmp	r1, #1
 801626a:	d005      	beq.n	8016278 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 801626c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 801626e:	4b05      	ldr	r3, [pc, #20]	; (8016284 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	2080      	movs	r0, #128	; 0x80
 8016274:	4798      	blx	r3
            break;
 8016276:	e7f9      	b.n	801626c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8016278:	4b02      	ldr	r3, [pc, #8]	; (8016284 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8016280:	4798      	blx	r3
}
 8016282:	e7f3      	b.n	801626c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8016284:	20001c00 	.word	0x20001c00

08016288 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8016288:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 801628a:	4b03      	ldr	r3, [pc, #12]	; (8016298 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 801628c:	681b      	ldr	r3, [r3, #0]
 801628e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8016292:	4798      	blx	r3
}
 8016294:	bd08      	pop	{r3, pc}
 8016296:	bf00      	nop
 8016298:	20001c00 	.word	0x20001c00

0801629c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 801629c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 801629e:	4b02      	ldr	r3, [pc, #8]	; (80162a8 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2020      	movs	r0, #32
 80162a4:	4798      	blx	r3
}
 80162a6:	bd08      	pop	{r3, pc}
 80162a8:	20001c00 	.word	0x20001c00

080162ac <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 80162ac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 80162ae:	4b02      	ldr	r3, [pc, #8]	; (80162b8 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	2004      	movs	r0, #4
 80162b4:	4798      	blx	r3
}
 80162b6:	bd08      	pop	{r3, pc}
 80162b8:	20001c00 	.word	0x20001c00

080162bc <HAL_SUBGHZ_SyncWordValidCallback>:
{
 80162bc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 80162be:	4b02      	ldr	r3, [pc, #8]	; (80162c8 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	2008      	movs	r0, #8
 80162c4:	4798      	blx	r3
}
 80162c6:	bd08      	pop	{r3, pc}
 80162c8:	20001c00 	.word	0x20001c00

080162cc <HAL_SUBGHZ_HeaderValidCallback>:
{
 80162cc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 80162ce:	4b02      	ldr	r3, [pc, #8]	; (80162d8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 80162d0:	681b      	ldr	r3, [r3, #0]
 80162d2:	2010      	movs	r0, #16
 80162d4:	4798      	blx	r3
}
 80162d6:	bd08      	pop	{r3, pc}
 80162d8:	20001c00 	.word	0x20001c00

080162dc <HAL_SUBGHZ_LrFhssHopCallback>:
{
 80162dc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 80162de:	4b03      	ldr	r3, [pc, #12]	; (80162ec <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80162e6:	4798      	blx	r3
}
 80162e8:	bd08      	pop	{r3, pc}
 80162ea:	bf00      	nop
 80162ec:	20001c00 	.word	0x20001c00

080162f0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 80162f0:	4601      	mov	r1, r0
 80162f2:	b188      	cbz	r0, 8016318 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 80162f4:	2300      	movs	r3, #0
 80162f6:	2b15      	cmp	r3, #21
 80162f8:	d80d      	bhi.n	8016316 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 80162fa:	4618      	mov	r0, r3
 80162fc:	4a07      	ldr	r2, [pc, #28]	; (801631c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 80162fe:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016302:	428a      	cmp	r2, r1
 8016304:	d802      	bhi.n	801630c <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8016306:	3301      	adds	r3, #1
 8016308:	b2db      	uxtb	r3, r3
 801630a:	e7f4      	b.n	80162f6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 801630c:	4b03      	ldr	r3, [pc, #12]	; (801631c <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 801630e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8016312:	7918      	ldrb	r0, [r3, #4]
 8016314:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8016316:	e7fe      	b.n	8016316 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8016318:	201f      	movs	r0, #31
}
 801631a:	4770      	bx	lr
 801631c:	0801ea54 	.word	0x0801ea54

08016320 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8016320:	b570      	push	{r4, r5, r6, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	4605      	mov	r5, r0
 8016326:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8016328:	4b1d      	ldr	r3, [pc, #116]	; (80163a0 <SUBGRF_GetCFO+0x80>)
 801632a:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 801632c:	f640 0007 	movw	r0, #2055	; 0x807
 8016330:	f7ff f9da 	bl	80156e8 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8016334:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8016338:	3308      	adds	r3, #8
 801633a:	446b      	add	r3, sp
 801633c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8016340:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8016344:	3301      	adds	r3, #1
 8016346:	fa02 f303 	lsl.w	r3, r2, r3
 801634a:	4a16      	ldr	r2, [pc, #88]	; (80163a4 <SUBGRF_GetCFO+0x84>)
 801634c:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8016350:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8016354:	2807      	cmp	r0, #7
 8016356:	d921      	bls.n	801639c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8016358:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801635a:	fb03 f000 	mul.w	r0, r3, r0
 801635e:	2803      	cmp	r0, #3
 8016360:	d800      	bhi.n	8016364 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8016362:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8016364:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8016368:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 801636c:	f7ff f9bc 	bl	80156e8 <SUBGRF_ReadRegister>
 8016370:	0206      	lsls	r6, r0, #8
 8016372:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8016376:	f240 60b1 	movw	r0, #1713	; 0x6b1
 801637a:	f7ff f9b5 	bl	80156e8 <SUBGRF_ReadRegister>
 801637e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8016380:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8016384:	d003      	beq.n	801638e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8016386:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 801638a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 801638e:	096b      	lsrs	r3, r5, #5
 8016390:	fb03 f000 	mul.w	r0, r3, r0
 8016394:	11c0      	asrs	r0, r0, #7
 8016396:	6020      	str	r0, [r4, #0]
}
 8016398:	b002      	add	sp, #8
 801639a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 801639c:	2302      	movs	r3, #2
 801639e:	e7dc      	b.n	801635a <SUBGRF_GetCFO+0x3a>
 80163a0:	0c0a0804 	.word	0x0c0a0804
 80163a4:	01e84800 	.word	0x01e84800

080163a8 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80163a8:	f04f 30ff 	mov.w	r0, #4294967295
 80163ac:	4770      	bx	lr

080163ae <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80163ae:	f04f 30ff 	mov.w	r0, #4294967295
 80163b2:	4770      	bx	lr

080163b4 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80163b4:	4770      	bx	lr

080163b6 <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80163b6:	2000      	movs	r0, #0
 80163b8:	4770      	bx	lr

080163ba <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80163ba:	2000      	movs	r0, #0
 80163bc:	4770      	bx	lr

080163be <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80163be:	4770      	bx	lr

080163c0 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80163c0:	f04f 30ff 	mov.w	r0, #4294967295
 80163c4:	4770      	bx	lr

080163c6 <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80163c6:	f04f 30ff 	mov.w	r0, #4294967295
 80163ca:	4770      	bx	lr

080163cc <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80163cc:	4770      	bx	lr

080163ce <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80163ce:	4770      	bx	lr

080163d0 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80163d0:	4770      	bx	lr
	...

080163d4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 80163d4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163d6:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80163da:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 80163dc:	4b1e      	ldr	r3, [pc, #120]	; (8016458 <TRACE_AllocateBufer+0x84>)
 80163de:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 80163e2:	8a1a      	ldrh	r2, [r3, #16]
 80163e4:	4596      	cmp	lr, r2
 80163e6:	d011      	beq.n	801640c <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80163e8:	4596      	cmp	lr, r2
 80163ea:	d921      	bls.n	8016430 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80163ec:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 80163f0:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80163f2:	4283      	cmp	r3, r0
 80163f4:	d81f      	bhi.n	8016436 <TRACE_AllocateBufer+0x62>
 80163f6:	4282      	cmp	r2, r0
 80163f8:	d91d      	bls.n	8016436 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80163fa:	4b17      	ldr	r3, [pc, #92]	; (8016458 <TRACE_AllocateBufer+0x84>)
 80163fc:	2401      	movs	r4, #1
 80163fe:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8016400:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8016404:	2400      	movs	r4, #0
 8016406:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8016408:	4613      	mov	r3, r2
 801640a:	e014      	b.n	8016436 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801640c:	f5ce 6380 	rsb	r3, lr, #1024	; 0x400
 8016410:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8016412:	4298      	cmp	r0, r3
 8016414:	d30f      	bcc.n	8016436 <TRACE_AllocateBufer+0x62>
 8016416:	4282      	cmp	r2, r0
 8016418:	d90d      	bls.n	8016436 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801641a:	4b0f      	ldr	r3, [pc, #60]	; (8016458 <TRACE_AllocateBufer+0x84>)
 801641c:	2401      	movs	r4, #1
 801641e:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8016420:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8016424:	f04f 0e00 	mov.w	lr, #0
 8016428:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801642c:	4613      	mov	r3, r2
 801642e:	e002      	b.n	8016436 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8016430:	eba2 020e 	sub.w	r2, r2, lr
 8016434:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 8016436:	4283      	cmp	r3, r0
 8016438:	d90a      	bls.n	8016450 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801643a:	4a07      	ldr	r2, [pc, #28]	; (8016458 <TRACE_AllocateBufer+0x84>)
 801643c:	8a53      	ldrh	r3, [r2, #18]
 801643e:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8016440:	4403      	add	r3, r0
 8016442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016446:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8016448:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801644a:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 801644e:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8016450:	f04f 30ff 	mov.w	r0, #4294967295
 8016454:	e7f9      	b.n	801644a <TRACE_AllocateBufer+0x76>
 8016456:	bf00      	nop
 8016458:	20002004 	.word	0x20002004

0801645c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801645c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016460:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8016462:	4a03      	ldr	r2, [pc, #12]	; (8016470 <TRACE_Lock+0x14>)
 8016464:	8ad3      	ldrh	r3, [r2, #22]
 8016466:	3301      	adds	r3, #1
 8016468:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801646a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801646e:	4770      	bx	lr
 8016470:	20002004 	.word	0x20002004

08016474 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016474:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016478:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 801647a:	4a03      	ldr	r2, [pc, #12]	; (8016488 <TRACE_UnLock+0x14>)
 801647c:	8ad3      	ldrh	r3, [r2, #22]
 801647e:	3b01      	subs	r3, #1
 8016480:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016482:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8016486:	4770      	bx	lr
 8016488:	20002004 	.word	0x20002004

0801648c <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801648c:	4b02      	ldr	r3, [pc, #8]	; (8016498 <TRACE_IsLocked+0xc>)
 801648e:	8ad8      	ldrh	r0, [r3, #22]
}
 8016490:	3800      	subs	r0, #0
 8016492:	bf18      	it	ne
 8016494:	2001      	movne	r0, #1
 8016496:	4770      	bx	lr
 8016498:	20002004 	.word	0x20002004

0801649c <UTIL_ADV_TRACE_Init>:
{
 801649c:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801649e:	2218      	movs	r2, #24
 80164a0:	2100      	movs	r1, #0
 80164a2:	4807      	ldr	r0, [pc, #28]	; (80164c0 <UTIL_ADV_TRACE_Init+0x24>)
 80164a4:	f000 f98f 	bl	80167c6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80164a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80164ac:	2100      	movs	r1, #0
 80164ae:	4805      	ldr	r0, [pc, #20]	; (80164c4 <UTIL_ADV_TRACE_Init+0x28>)
 80164b0:	f000 f989 	bl	80167c6 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80164b4:	4b04      	ldr	r3, [pc, #16]	; (80164c8 <UTIL_ADV_TRACE_Init+0x2c>)
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	4804      	ldr	r0, [pc, #16]	; (80164cc <UTIL_ADV_TRACE_Init+0x30>)
 80164ba:	4798      	blx	r3
}
 80164bc:	bd08      	pop	{r3, pc}
 80164be:	bf00      	nop
 80164c0:	20002004 	.word	0x20002004
 80164c4:	20001c04 	.word	0x20001c04
 80164c8:	0801cd60 	.word	0x0801cd60
 80164cc:	0801664d 	.word	0x0801664d

080164d0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 80164d0:	4b01      	ldr	r3, [pc, #4]	; (80164d8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 80164d2:	6058      	str	r0, [r3, #4]
}
 80164d4:	4770      	bx	lr
 80164d6:	bf00      	nop
 80164d8:	20002004 	.word	0x20002004

080164dc <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 80164dc:	4b01      	ldr	r3, [pc, #4]	; (80164e4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 80164de:	7218      	strb	r0, [r3, #8]
}
 80164e0:	4770      	bx	lr
 80164e2:	bf00      	nop
 80164e4:	20002004 	.word	0x20002004

080164e8 <TRACE_Send>:
{
 80164e8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164ea:	f3ef 8310 	mrs	r3, PRIMASK
 80164ee:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80164f0:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80164f2:	f7ff ffcb 	bl	801648c <TRACE_IsLocked>
 80164f6:	b118      	cbz	r0, 8016500 <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80164f8:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80164fc:	2000      	movs	r0, #0
}
 80164fe:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8016500:	f7ff ffac 	bl	801645c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8016504:	4b1c      	ldr	r3, [pc, #112]	; (8016578 <TRACE_Send+0x90>)
 8016506:	8a1a      	ldrh	r2, [r3, #16]
 8016508:	8a5b      	ldrh	r3, [r3, #18]
 801650a:	429a      	cmp	r2, r3
 801650c:	d02e      	beq.n	801656c <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801650e:	491a      	ldr	r1, [pc, #104]	; (8016578 <TRACE_Send+0x90>)
 8016510:	7889      	ldrb	r1, [r1, #2]
 8016512:	2901      	cmp	r1, #1
 8016514:	d017      	beq.n	8016546 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8016516:	4a18      	ldr	r2, [pc, #96]	; (8016578 <TRACE_Send+0x90>)
 8016518:	7892      	ldrb	r2, [r2, #2]
 801651a:	b932      	cbnz	r2, 801652a <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801651c:	4a16      	ldr	r2, [pc, #88]	; (8016578 <TRACE_Send+0x90>)
 801651e:	8a12      	ldrh	r2, [r2, #16]
 8016520:	4293      	cmp	r3, r2
 8016522:	d91e      	bls.n	8016562 <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8016524:	1a9b      	subs	r3, r3, r2
 8016526:	4a14      	ldr	r2, [pc, #80]	; (8016578 <TRACE_Send+0x90>)
 8016528:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801652a:	4e13      	ldr	r6, [pc, #76]	; (8016578 <TRACE_Send+0x90>)
 801652c:	8a33      	ldrh	r3, [r6, #16]
 801652e:	4d13      	ldr	r5, [pc, #76]	; (801657c <TRACE_Send+0x94>)
 8016530:	441d      	add	r5, r3
 8016532:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8016536:	f7ec f9b9 	bl	80028ac <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801653a:	4b11      	ldr	r3, [pc, #68]	; (8016580 <TRACE_Send+0x98>)
 801653c:	68db      	ldr	r3, [r3, #12]
 801653e:	8ab1      	ldrh	r1, [r6, #20]
 8016540:	4628      	mov	r0, r5
 8016542:	4798      	blx	r3
 8016544:	e7db      	b.n	80164fe <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8016546:	480c      	ldr	r0, [pc, #48]	; (8016578 <TRACE_Send+0x90>)
 8016548:	8801      	ldrh	r1, [r0, #0]
 801654a:	1a8a      	subs	r2, r1, r2
 801654c:	b292      	uxth	r2, r2
 801654e:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8016550:	2102      	movs	r1, #2
 8016552:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8016554:	2100      	movs	r1, #0
 8016556:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8016558:	2a00      	cmp	r2, #0
 801655a:	d1dc      	bne.n	8016516 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801655c:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801655e:	8201      	strh	r1, [r0, #16]
 8016560:	e7d9      	b.n	8016516 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8016562:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 8016566:	4b04      	ldr	r3, [pc, #16]	; (8016578 <TRACE_Send+0x90>)
 8016568:	829a      	strh	r2, [r3, #20]
 801656a:	e7de      	b.n	801652a <TRACE_Send+0x42>
      TRACE_UnLock();
 801656c:	f7ff ff82 	bl	8016474 <TRACE_UnLock>
 8016570:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8016574:	2000      	movs	r0, #0
}
 8016576:	e7c2      	b.n	80164fe <TRACE_Send+0x16>
 8016578:	20002004 	.word	0x20002004
 801657c:	20001c04 	.word	0x20001c04
 8016580:	0801cd60 	.word	0x0801cd60

08016584 <UTIL_ADV_TRACE_COND_FSend>:
{
 8016584:	b408      	push	{r3}
 8016586:	b530      	push	{r4, r5, lr}
 8016588:	b086      	sub	sp, #24
 801658a:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 801658c:	2300      	movs	r3, #0
 801658e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8016592:	4b2b      	ldr	r3, [pc, #172]	; (8016640 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8016594:	7a1b      	ldrb	r3, [r3, #8]
 8016596:	4283      	cmp	r3, r0
 8016598:	d34c      	bcc.n	8016634 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801659a:	4b29      	ldr	r3, [pc, #164]	; (8016640 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	4399      	bics	r1, r3
 80165a0:	d14b      	bne.n	801663a <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80165a2:	4b27      	ldr	r3, [pc, #156]	; (8016640 <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 80165a4:	685b      	ldr	r3, [r3, #4]
 80165a6:	b123      	cbz	r3, 80165b2 <UTIL_ADV_TRACE_COND_FSend+0x2e>
 80165a8:	b11a      	cbz	r2, 80165b2 <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80165aa:	f10d 0102 	add.w	r1, sp, #2
 80165ae:	a801      	add	r0, sp, #4
 80165b0:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80165b2:	ab0a      	add	r3, sp, #40	; 0x28
 80165b4:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80165b6:	4622      	mov	r2, r4
 80165b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80165bc:	4821      	ldr	r0, [pc, #132]	; (8016644 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80165be:	f000 fcd1 	bl	8016f64 <tiny_vsnprintf_like>
 80165c2:	b285      	uxth	r5, r0
  TRACE_Lock();
 80165c4:	f7ff ff4a 	bl	801645c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80165c8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80165cc:	18e8      	adds	r0, r5, r3
 80165ce:	4669      	mov	r1, sp
 80165d0:	b280      	uxth	r0, r0
 80165d2:	f7ff feff 	bl	80163d4 <TRACE_AllocateBufer>
 80165d6:	f1b0 3fff 	cmp.w	r0, #4294967295
 80165da:	d026      	beq.n	801662a <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 80165dc:	2300      	movs	r3, #0
 80165de:	e00d      	b.n	80165fc <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 80165e0:	f8bd 2000 	ldrh.w	r2, [sp]
 80165e4:	f103 0118 	add.w	r1, r3, #24
 80165e8:	4469      	add	r1, sp
 80165ea:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80165ee:	4916      	ldr	r1, [pc, #88]	; (8016648 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80165f0:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80165f2:	3201      	adds	r2, #1
 80165f4:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80165f8:	3301      	adds	r3, #1
 80165fa:	b29b      	uxth	r3, r3
 80165fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8016600:	429a      	cmp	r2, r3
 8016602:	d8ed      	bhi.n	80165e0 <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8016604:	f8bd 0000 	ldrh.w	r0, [sp]
 8016608:	9b05      	ldr	r3, [sp, #20]
 801660a:	4622      	mov	r2, r4
 801660c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016610:	4c0d      	ldr	r4, [pc, #52]	; (8016648 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 8016612:	4420      	add	r0, r4
 8016614:	f000 fca6 	bl	8016f64 <tiny_vsnprintf_like>
    TRACE_UnLock();
 8016618:	f7ff ff2c 	bl	8016474 <TRACE_UnLock>
    return TRACE_Send();
 801661c:	f7ff ff64 	bl	80164e8 <TRACE_Send>
}
 8016620:	b006      	add	sp, #24
 8016622:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016626:	b001      	add	sp, #4
 8016628:	4770      	bx	lr
  TRACE_UnLock();
 801662a:	f7ff ff23 	bl	8016474 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 801662e:	f06f 0002 	mvn.w	r0, #2
 8016632:	e7f5      	b.n	8016620 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 8016634:	f06f 0004 	mvn.w	r0, #4
 8016638:	e7f2      	b.n	8016620 <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 801663a:	f06f 0005 	mvn.w	r0, #5
 801663e:	e7ef      	b.n	8016620 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8016640:	20002004 	.word	0x20002004
 8016644:	2000201c 	.word	0x2000201c
 8016648:	20001c04 	.word	0x20001c04

0801664c <TRACE_TxCpltCallback>:
{
 801664c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801664e:	f3ef 8310 	mrs	r3, PRIMASK
 8016652:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8016654:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8016656:	4b26      	ldr	r3, [pc, #152]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 8016658:	789b      	ldrb	r3, [r3, #2]
 801665a:	2b02      	cmp	r3, #2
 801665c:	d016      	beq.n	801668c <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801665e:	4a24      	ldr	r2, [pc, #144]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 8016660:	8a13      	ldrh	r3, [r2, #16]
 8016662:	8a90      	ldrh	r0, [r2, #20]
 8016664:	4403      	add	r3, r0
 8016666:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801666a:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801666c:	4b20      	ldr	r3, [pc, #128]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 801666e:	8a1a      	ldrh	r2, [r3, #16]
 8016670:	8a5b      	ldrh	r3, [r3, #18]
 8016672:	429a      	cmp	r2, r3
 8016674:	d003      	beq.n	801667e <TRACE_TxCpltCallback+0x32>
 8016676:	481e      	ldr	r0, [pc, #120]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 8016678:	8ac0      	ldrh	r0, [r0, #22]
 801667a:	2801      	cmp	r0, #1
 801667c:	d00b      	beq.n	8016696 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801667e:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 8016682:	f7ec f919 	bl	80028b8 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8016686:	f7ff fef5 	bl	8016474 <TRACE_UnLock>
}
 801668a:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801668c:	4b18      	ldr	r3, [pc, #96]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 801668e:	2200      	movs	r2, #0
 8016690:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 8016692:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8016694:	e7ea      	b.n	801666c <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8016696:	4816      	ldr	r0, [pc, #88]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 8016698:	7880      	ldrb	r0, [r0, #2]
 801669a:	2801      	cmp	r0, #1
 801669c:	d014      	beq.n	80166c8 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801669e:	4a14      	ldr	r2, [pc, #80]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 80166a0:	7892      	ldrb	r2, [r2, #2]
 80166a2:	b932      	cbnz	r2, 80166b2 <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80166a4:	4a12      	ldr	r2, [pc, #72]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 80166a6:	8a12      	ldrh	r2, [r2, #16]
 80166a8:	4293      	cmp	r3, r2
 80166aa:	d91b      	bls.n	80166e4 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80166ac:	1a9b      	subs	r3, r3, r2
 80166ae:	4a10      	ldr	r2, [pc, #64]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 80166b0:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80166b2:	4b0f      	ldr	r3, [pc, #60]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 80166b4:	8a1a      	ldrh	r2, [r3, #16]
 80166b6:	480f      	ldr	r0, [pc, #60]	; (80166f4 <TRACE_TxCpltCallback+0xa8>)
 80166b8:	4410      	add	r0, r2
 80166ba:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80166be:	4a0e      	ldr	r2, [pc, #56]	; (80166f8 <TRACE_TxCpltCallback+0xac>)
 80166c0:	68d2      	ldr	r2, [r2, #12]
 80166c2:	8a99      	ldrh	r1, [r3, #20]
 80166c4:	4790      	blx	r2
 80166c6:	e7e0      	b.n	801668a <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80166c8:	4c09      	ldr	r4, [pc, #36]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 80166ca:	8820      	ldrh	r0, [r4, #0]
 80166cc:	1a82      	subs	r2, r0, r2
 80166ce:	b292      	uxth	r2, r2
 80166d0:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 80166d2:	2002      	movs	r0, #2
 80166d4:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 80166d6:	2000      	movs	r0, #0
 80166d8:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 80166da:	2a00      	cmp	r2, #0
 80166dc:	d1df      	bne.n	801669e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80166de:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 80166e0:	8220      	strh	r0, [r4, #16]
 80166e2:	e7dc      	b.n	801669e <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80166e4:	f5c2 6280 	rsb	r2, r2, #1024	; 0x400
 80166e8:	4b01      	ldr	r3, [pc, #4]	; (80166f0 <TRACE_TxCpltCallback+0xa4>)
 80166ea:	829a      	strh	r2, [r3, #20]
 80166ec:	e7e1      	b.n	80166b2 <TRACE_TxCpltCallback+0x66>
 80166ee:	bf00      	nop
 80166f0:	20002004 	.word	0x20002004
 80166f4:	20001c04 	.word	0x20001c04
 80166f8:	0801cd60 	.word	0x0801cd60

080166fc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80166fc:	2300      	movs	r3, #0
 80166fe:	4a02      	ldr	r2, [pc, #8]	; (8016708 <UTIL_LPM_Init+0xc>)
 8016700:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8016702:	4a02      	ldr	r2, [pc, #8]	; (801670c <UTIL_LPM_Init+0x10>)
 8016704:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016706:	4770      	bx	lr
 8016708:	20002220 	.word	0x20002220
 801670c:	2000221c 	.word	0x2000221c

08016710 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016710:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016714:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8016716:	b141      	cbz	r1, 801672a <UTIL_LPM_SetStopMode+0x1a>
 8016718:	2901      	cmp	r1, #1
 801671a:	d103      	bne.n	8016724 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801671c:	4906      	ldr	r1, [pc, #24]	; (8016738 <UTIL_LPM_SetStopMode+0x28>)
 801671e:	680a      	ldr	r2, [r1, #0]
 8016720:	4302      	orrs	r2, r0
 8016722:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016724:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016728:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801672a:	4903      	ldr	r1, [pc, #12]	; (8016738 <UTIL_LPM_SetStopMode+0x28>)
 801672c:	680a      	ldr	r2, [r1, #0]
 801672e:	ea22 0200 	bic.w	r2, r2, r0
 8016732:	600a      	str	r2, [r1, #0]
      break;
 8016734:	e7f6      	b.n	8016724 <UTIL_LPM_SetStopMode+0x14>
 8016736:	bf00      	nop
 8016738:	20002220 	.word	0x20002220

0801673c <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801673c:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016740:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8016742:	b141      	cbz	r1, 8016756 <UTIL_LPM_SetOffMode+0x1a>
 8016744:	2901      	cmp	r1, #1
 8016746:	d103      	bne.n	8016750 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016748:	4906      	ldr	r1, [pc, #24]	; (8016764 <UTIL_LPM_SetOffMode+0x28>)
 801674a:	680a      	ldr	r2, [r1, #0]
 801674c:	4302      	orrs	r2, r0
 801674e:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016750:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016754:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8016756:	4903      	ldr	r1, [pc, #12]	; (8016764 <UTIL_LPM_SetOffMode+0x28>)
 8016758:	680a      	ldr	r2, [r1, #0]
 801675a:	ea22 0200 	bic.w	r2, r2, r0
 801675e:	600a      	str	r2, [r1, #0]
      break;
 8016760:	e7f6      	b.n	8016750 <UTIL_LPM_SetOffMode+0x14>
 8016762:	bf00      	nop
 8016764:	2000221c 	.word	0x2000221c

08016768 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8016768:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801676a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801676e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8016770:	4b0c      	ldr	r3, [pc, #48]	; (80167a4 <UTIL_LPM_EnterLowPower+0x3c>)
 8016772:	681b      	ldr	r3, [r3, #0]
 8016774:	b13b      	cbz	r3, 8016786 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8016776:	4d0c      	ldr	r5, [pc, #48]	; (80167a8 <UTIL_LPM_EnterLowPower+0x40>)
 8016778:	682b      	ldr	r3, [r5, #0]
 801677a:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801677c:	686b      	ldr	r3, [r5, #4]
 801677e:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016780:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8016784:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8016786:	4b09      	ldr	r3, [pc, #36]	; (80167ac <UTIL_LPM_EnterLowPower+0x44>)
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	b12b      	cbz	r3, 8016798 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 801678c:	4d06      	ldr	r5, [pc, #24]	; (80167a8 <UTIL_LPM_EnterLowPower+0x40>)
 801678e:	68ab      	ldr	r3, [r5, #8]
 8016790:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 8016792:	68eb      	ldr	r3, [r5, #12]
 8016794:	4798      	blx	r3
 8016796:	e7f3      	b.n	8016780 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8016798:	4d03      	ldr	r5, [pc, #12]	; (80167a8 <UTIL_LPM_EnterLowPower+0x40>)
 801679a:	692b      	ldr	r3, [r5, #16]
 801679c:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801679e:	696b      	ldr	r3, [r5, #20]
 80167a0:	4798      	blx	r3
 80167a2:	e7ed      	b.n	8016780 <UTIL_LPM_EnterLowPower+0x18>
 80167a4:	20002220 	.word	0x20002220
 80167a8:	0801c530 	.word	0x0801c530
 80167ac:	2000221c 	.word	0x2000221c

080167b0 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80167b0:	e004      	b.n	80167bc <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80167b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80167b6:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80167ba:	461a      	mov	r2, r3
 80167bc:	1e53      	subs	r3, r2, #1
 80167be:	b29b      	uxth	r3, r3
 80167c0:	2a00      	cmp	r2, #0
 80167c2:	d1f6      	bne.n	80167b2 <UTIL_MEM_cpy_8+0x2>
    }
}
 80167c4:	4770      	bx	lr

080167c6 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80167c6:	e002      	b.n	80167ce <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80167c8:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 80167cc:	461a      	mov	r2, r3
 80167ce:	1e53      	subs	r3, r2, #1
 80167d0:	b29b      	uxth	r3, r3
 80167d2:	2a00      	cmp	r2, #0
 80167d4:	d1f8      	bne.n	80167c8 <UTIL_MEM_set_8+0x2>
  }
}
 80167d6:	4770      	bx	lr

080167d8 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80167d8:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80167dc:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 80167de:	4a06      	ldr	r2, [pc, #24]	; (80167f8 <UTIL_SEQ_SetTask+0x20>)
 80167e0:	6813      	ldr	r3, [r2, #0]
 80167e2:	4303      	orrs	r3, r0
 80167e4:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80167e6:	4a05      	ldr	r2, [pc, #20]	; (80167fc <UTIL_SEQ_SetTask+0x24>)
 80167e8:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80167ec:	4303      	orrs	r3, r0
 80167ee:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167f2:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80167f6:	4770      	bx	lr
 80167f8:	20002248 	.word	0x20002248
 80167fc:	20002240 	.word	0x20002240

08016800 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8016800:	4770      	bx	lr

08016802 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8016802:	4770      	bx	lr

08016804 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8016804:	0c03      	lsrs	r3, r0, #16
 8016806:	041b      	lsls	r3, r3, #16
 8016808:	b9b3      	cbnz	r3, 8016838 <SEQ_BitPosition+0x34>
 801680a:	0400      	lsls	r0, r0, #16
 801680c:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801680e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016812:	d102      	bne.n	801681a <SEQ_BitPosition+0x16>
 8016814:	3308      	adds	r3, #8
 8016816:	b2db      	uxtb	r3, r3
 8016818:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801681a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801681e:	d102      	bne.n	8016826 <SEQ_BitPosition+0x22>
 8016820:	3304      	adds	r3, #4
 8016822:	b2db      	uxtb	r3, r3
 8016824:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8016826:	0f00      	lsrs	r0, r0, #28
 8016828:	4a04      	ldr	r2, [pc, #16]	; (801683c <SEQ_BitPosition+0x38>)
 801682a:	5c10      	ldrb	r0, [r2, r0]
 801682c:	4418      	add	r0, r3
 801682e:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8016830:	f1c0 001f 	rsb	r0, r0, #31
}
 8016834:	b2c0      	uxtb	r0, r0
 8016836:	4770      	bx	lr
uint8_t n = 0U;
 8016838:	2300      	movs	r3, #0
 801683a:	e7e8      	b.n	801680e <SEQ_BitPosition+0xa>
 801683c:	0801eb04 	.word	0x0801eb04

08016840 <UTIL_SEQ_Run>:
{
 8016840:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 8016842:	4b42      	ldr	r3, [pc, #264]	; (801694c <UTIL_SEQ_Run+0x10c>)
 8016844:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8016846:	4020      	ands	r0, r4
 8016848:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801684a:	4b41      	ldr	r3, [pc, #260]	; (8016950 <UTIL_SEQ_Run+0x110>)
 801684c:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 801684e:	4b41      	ldr	r3, [pc, #260]	; (8016954 <UTIL_SEQ_Run+0x114>)
 8016850:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8016852:	4941      	ldr	r1, [pc, #260]	; (8016958 <UTIL_SEQ_Run+0x118>)
 8016854:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8016856:	4941      	ldr	r1, [pc, #260]	; (801695c <UTIL_SEQ_Run+0x11c>)
 8016858:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801685a:	e02f      	b.n	80168bc <UTIL_SEQ_Run+0x7c>
      counter++;
 801685c:	3301      	adds	r3, #1
 801685e:	e034      	b.n	80168ca <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8016860:	4d3f      	ldr	r5, [pc, #252]	; (8016960 <UTIL_SEQ_Run+0x120>)
 8016862:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8016866:	6868      	ldr	r0, [r5, #4]
 8016868:	4010      	ands	r0, r2
 801686a:	f7ff ffcb 	bl	8016804 <SEQ_BitPosition>
 801686e:	4e3d      	ldr	r6, [pc, #244]	; (8016964 <UTIL_SEQ_Run+0x124>)
 8016870:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016872:	686a      	ldr	r2, [r5, #4]
 8016874:	2301      	movs	r3, #1
 8016876:	fa03 f000 	lsl.w	r0, r3, r0
 801687a:	ea22 0200 	bic.w	r2, r2, r0
 801687e:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016880:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016884:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016886:	6832      	ldr	r2, [r6, #0]
 8016888:	fa03 f202 	lsl.w	r2, r3, r2
 801688c:	43d6      	mvns	r6, r2
 801688e:	4d30      	ldr	r5, [pc, #192]	; (8016950 <UTIL_SEQ_Run+0x110>)
 8016890:	6828      	ldr	r0, [r5, #0]
 8016892:	ea20 0202 	bic.w	r2, r0, r2
 8016896:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016898:	2b00      	cmp	r3, #0
 801689a:	d12d      	bne.n	80168f8 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801689c:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 80168a0:	4b30      	ldr	r3, [pc, #192]	; (8016964 <UTIL_SEQ_Run+0x124>)
 80168a2:	681a      	ldr	r2, [r3, #0]
 80168a4:	4b30      	ldr	r3, [pc, #192]	; (8016968 <UTIL_SEQ_Run+0x128>)
 80168a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168aa:	4798      	blx	r3
    local_taskset = TaskSet;
 80168ac:	4b28      	ldr	r3, [pc, #160]	; (8016950 <UTIL_SEQ_Run+0x110>)
 80168ae:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 80168b0:	4b28      	ldr	r3, [pc, #160]	; (8016954 <UTIL_SEQ_Run+0x114>)
 80168b2:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80168b4:	4928      	ldr	r1, [pc, #160]	; (8016958 <UTIL_SEQ_Run+0x118>)
 80168b6:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 80168b8:	4928      	ldr	r1, [pc, #160]	; (801695c <UTIL_SEQ_Run+0x11c>)
 80168ba:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80168bc:	4002      	ands	r2, r0
 80168be:	4d23      	ldr	r5, [pc, #140]	; (801694c <UTIL_SEQ_Run+0x10c>)
 80168c0:	682d      	ldr	r5, [r5, #0]
 80168c2:	422a      	tst	r2, r5
 80168c4:	d020      	beq.n	8016908 <UTIL_SEQ_Run+0xc8>
 80168c6:	400b      	ands	r3, r1
 80168c8:	d11e      	bne.n	8016908 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80168ca:	4a25      	ldr	r2, [pc, #148]	; (8016960 <UTIL_SEQ_Run+0x120>)
 80168cc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80168d0:	4002      	ands	r2, r0
 80168d2:	422a      	tst	r2, r5
 80168d4:	d0c2      	beq.n	801685c <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80168d6:	4922      	ldr	r1, [pc, #136]	; (8016960 <UTIL_SEQ_Run+0x120>)
 80168d8:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 80168dc:	4002      	ands	r2, r0
 80168de:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80168e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168e4:	6849      	ldr	r1, [r1, #4]
 80168e6:	4211      	tst	r1, r2
 80168e8:	d1ba      	bne.n	8016860 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80168ea:	491d      	ldr	r1, [pc, #116]	; (8016960 <UTIL_SEQ_Run+0x120>)
 80168ec:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80168f0:	f04f 30ff 	mov.w	r0, #4294967295
 80168f4:	6048      	str	r0, [r1, #4]
 80168f6:	e7b3      	b.n	8016860 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80168f8:	3b01      	subs	r3, #1
 80168fa:	4819      	ldr	r0, [pc, #100]	; (8016960 <UTIL_SEQ_Run+0x120>)
 80168fc:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 8016900:	4032      	ands	r2, r6
 8016902:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016906:	e7c7      	b.n	8016898 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016908:	4b16      	ldr	r3, [pc, #88]	; (8016964 <UTIL_SEQ_Run+0x124>)
 801690a:	f04f 32ff 	mov.w	r2, #4294967295
 801690e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016910:	f7ff ff76 	bl	8016800 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016914:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016918:	b672      	cpsid	i
  local_taskset = TaskSet;
 801691a:	4b0d      	ldr	r3, [pc, #52]	; (8016950 <UTIL_SEQ_Run+0x110>)
 801691c:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 801691e:	4a0d      	ldr	r2, [pc, #52]	; (8016954 <UTIL_SEQ_Run+0x114>)
 8016920:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 8016922:	4a0d      	ldr	r2, [pc, #52]	; (8016958 <UTIL_SEQ_Run+0x118>)
 8016924:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8016926:	4013      	ands	r3, r2
 8016928:	4a08      	ldr	r2, [pc, #32]	; (801694c <UTIL_SEQ_Run+0x10c>)
 801692a:	6812      	ldr	r2, [r2, #0]
 801692c:	4213      	tst	r3, r2
 801692e:	d103      	bne.n	8016938 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 8016930:	4b0a      	ldr	r3, [pc, #40]	; (801695c <UTIL_SEQ_Run+0x11c>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	420b      	tst	r3, r1
 8016936:	d006      	beq.n	8016946 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016938:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 801693c:	f7ff ff61 	bl	8016802 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8016940:	4b02      	ldr	r3, [pc, #8]	; (801694c <UTIL_SEQ_Run+0x10c>)
 8016942:	601c      	str	r4, [r3, #0]
}
 8016944:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8016946:	f7eb ff37 	bl	80027b8 <UTIL_SEQ_Idle>
 801694a:	e7f5      	b.n	8016938 <UTIL_SEQ_Run+0xf8>
 801694c:	20000160 	.word	0x20000160
 8016950:	20002248 	.word	0x20002248
 8016954:	20002228 	.word	0x20002228
 8016958:	20000164 	.word	0x20000164
 801695c:	2000222c 	.word	0x2000222c
 8016960:	20002240 	.word	0x20002240
 8016964:	20002224 	.word	0x20002224
 8016968:	20002230 	.word	0x20002230

0801696c <UTIL_SEQ_RegTask>:
{
 801696c:	b538      	push	{r3, r4, r5, lr}
 801696e:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016970:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016974:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016976:	f7ff ff45 	bl	8016804 <SEQ_BitPosition>
 801697a:	4b03      	ldr	r3, [pc, #12]	; (8016988 <UTIL_SEQ_RegTask+0x1c>)
 801697c:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016980:	f385 8810 	msr	PRIMASK, r5
}
 8016984:	bd38      	pop	{r3, r4, r5, pc}
 8016986:	bf00      	nop
 8016988:	20002230 	.word	0x20002230

0801698c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801698c:	b082      	sub	sp, #8
 801698e:	b082      	sub	sp, #8
 8016990:	f10d 0c08 	add.w	ip, sp, #8
 8016994:	e90c 0006 	stmdb	ip, {r1, r2}
 8016998:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801699a:	2200      	movs	r2, #0
 801699c:	6002      	str	r2, [r0, #0]
 801699e:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80169a0:	440b      	add	r3, r1
 80169a2:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80169a4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80169a8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80169ac:	440a      	add	r2, r1
 80169ae:	b291      	uxth	r1, r2
 80169b0:	b212      	sxth	r2, r2
 80169b2:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80169b4:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80169b8:	db04      	blt.n	80169c4 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80169ba:	3301      	adds	r3, #1
 80169bc:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80169be:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80169c2:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80169c4:	b002      	add	sp, #8
 80169c6:	b002      	add	sp, #8
 80169c8:	4770      	bx	lr

080169ca <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 80169ca:	b082      	sub	sp, #8
 80169cc:	b082      	sub	sp, #8
 80169ce:	f10d 0c08 	add.w	ip, sp, #8
 80169d2:	e90c 0006 	stmdb	ip, {r1, r2}
 80169d6:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 80169d8:	2200      	movs	r2, #0
 80169da:	6002      	str	r2, [r0, #0]
 80169dc:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 80169de:	1acb      	subs	r3, r1, r3
 80169e0:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 80169e2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80169e6:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80169ea:	1a52      	subs	r2, r2, r1
 80169ec:	b291      	uxth	r1, r2
 80169ee:	b212      	sxth	r2, r2
 80169f0:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 80169f2:	2a00      	cmp	r2, #0
 80169f4:	db02      	blt.n	80169fc <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 80169f6:	b002      	add	sp, #8
 80169f8:	b002      	add	sp, #8
 80169fa:	4770      	bx	lr
    c.Seconds--;
 80169fc:	3b01      	subs	r3, #1
 80169fe:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8016a00:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 8016a04:	8081      	strh	r1, [r0, #4]
  return c;
 8016a06:	e7f6      	b.n	80169f6 <SysTimeSub+0x2c>

08016a08 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8016a08:	b530      	push	{r4, r5, lr}
 8016a0a:	b089      	sub	sp, #36	; 0x24
 8016a0c:	ac02      	add	r4, sp, #8
 8016a0e:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016a12:	2300      	movs	r3, #0
 8016a14:	9304      	str	r3, [sp, #16]
 8016a16:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016a1a:	4d0b      	ldr	r5, [pc, #44]	; (8016a48 <SysTimeSet+0x40>)
 8016a1c:	692b      	ldr	r3, [r5, #16]
 8016a1e:	a805      	add	r0, sp, #20
 8016a20:	4798      	blx	r3
 8016a22:	4603      	mov	r3, r0
 8016a24:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 8016a26:	9a05      	ldr	r2, [sp, #20]
 8016a28:	9200      	str	r2, [sp, #0]
 8016a2a:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016a2e:	a806      	add	r0, sp, #24
 8016a30:	f7ff ffcb 	bl	80169ca <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 8016a34:	682b      	ldr	r3, [r5, #0]
 8016a36:	9806      	ldr	r0, [sp, #24]
 8016a38:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8016a3a:	68ab      	ldr	r3, [r5, #8]
 8016a3c:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8016a40:	4798      	blx	r3
}
 8016a42:	b009      	add	sp, #36	; 0x24
 8016a44:	bd30      	pop	{r4, r5, pc}
 8016a46:	bf00      	nop
 8016a48:	0801c554 	.word	0x0801c554

08016a4c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8016a4c:	b530      	push	{r4, r5, lr}
 8016a4e:	b087      	sub	sp, #28
 8016a50:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016a52:	2300      	movs	r3, #0
 8016a54:	9304      	str	r3, [sp, #16]
 8016a56:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8016a5a:	6003      	str	r3, [r0, #0]
 8016a5c:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016a5e:	4d0b      	ldr	r5, [pc, #44]	; (8016a8c <SysTimeGet+0x40>)
 8016a60:	692b      	ldr	r3, [r5, #16]
 8016a62:	a805      	add	r0, sp, #20
 8016a64:	4798      	blx	r3
 8016a66:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016a68:	68eb      	ldr	r3, [r5, #12]
 8016a6a:	4798      	blx	r3
 8016a6c:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016a70:	686b      	ldr	r3, [r5, #4]
 8016a72:	4798      	blx	r3
 8016a74:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 8016a76:	9b05      	ldr	r3, [sp, #20]
 8016a78:	9300      	str	r3, [sp, #0]
 8016a7a:	9b04      	ldr	r3, [sp, #16]
 8016a7c:	aa02      	add	r2, sp, #8
 8016a7e:	ca06      	ldmia	r2, {r1, r2}
 8016a80:	4620      	mov	r0, r4
 8016a82:	f7ff ff83 	bl	801698c <SysTimeAdd>

  return sysTime;
}
 8016a86:	4620      	mov	r0, r4
 8016a88:	b007      	add	sp, #28
 8016a8a:	bd30      	pop	{r4, r5, pc}
 8016a8c:	0801c554 	.word	0x0801c554

08016a90 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 8016a90:	b530      	push	{r4, r5, lr}
 8016a92:	b083      	sub	sp, #12
 8016a94:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8016a96:	2300      	movs	r3, #0
 8016a98:	9300      	str	r3, [sp, #0]
 8016a9a:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8016a9e:	4b06      	ldr	r3, [pc, #24]	; (8016ab8 <SysTimeGetMcuTime+0x28>)
 8016aa0:	691b      	ldr	r3, [r3, #16]
 8016aa2:	466d      	mov	r5, sp
 8016aa4:	a801      	add	r0, sp, #4
 8016aa6:	4798      	blx	r3
 8016aa8:	9000      	str	r0, [sp, #0]

  return calendarTime;
 8016aaa:	e895 0003 	ldmia.w	r5, {r0, r1}
 8016aae:	e884 0003 	stmia.w	r4, {r0, r1}
}
 8016ab2:	4620      	mov	r0, r4
 8016ab4:	b003      	add	sp, #12
 8016ab6:	bd30      	pop	{r4, r5, pc}
 8016ab8:	0801c554 	.word	0x0801c554

08016abc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 8016abc:	b530      	push	{r4, r5, lr}
 8016abe:	b089      	sub	sp, #36	; 0x24
 8016ac0:	ac02      	add	r4, sp, #8
 8016ac2:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016ac6:	4d0c      	ldr	r5, [pc, #48]	; (8016af8 <SysTimeToMs+0x3c>)
 8016ac8:	68eb      	ldr	r3, [r5, #12]
 8016aca:	4798      	blx	r3
 8016acc:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016ad0:	686b      	ldr	r3, [r5, #4]
 8016ad2:	4798      	blx	r3
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8016ad8:	9a07      	ldr	r2, [sp, #28]
 8016ada:	9200      	str	r2, [sp, #0]
 8016adc:	e894 0006 	ldmia.w	r4, {r1, r2}
 8016ae0:	a804      	add	r0, sp, #16
 8016ae2:	f7ff ff72 	bl	80169ca <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 8016ae6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8016aea:	9a04      	ldr	r2, [sp, #16]
 8016aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016af0:	fb00 3002 	mla	r0, r0, r2, r3
 8016af4:	b009      	add	sp, #36	; 0x24
 8016af6:	bd30      	pop	{r4, r5, pc}
 8016af8:	0801c554 	.word	0x0801c554

08016afc <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8016afc:	b530      	push	{r4, r5, lr}
 8016afe:	b087      	sub	sp, #28
 8016b00:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 8016b02:	4b12      	ldr	r3, [pc, #72]	; (8016b4c <SysTimeFromMs+0x50>)
 8016b04:	fba3 2301 	umull	r2, r3, r3, r1
 8016b08:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8016b0a:	9304      	str	r3, [sp, #16]
 8016b0c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8016b10:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8016b14:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8016b18:	f8ad 1014 	strh.w	r1, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8016b1c:	2300      	movs	r3, #0
 8016b1e:	9302      	str	r3, [sp, #8]
 8016b20:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8016b22:	4d0b      	ldr	r5, [pc, #44]	; (8016b50 <SysTimeFromMs+0x54>)
 8016b24:	68eb      	ldr	r3, [r5, #12]
 8016b26:	4798      	blx	r3
 8016b28:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8016b2c:	686b      	ldr	r3, [r5, #4]
 8016b2e:	4798      	blx	r3
 8016b30:	4603      	mov	r3, r0
 8016b32:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 8016b34:	9a03      	ldr	r2, [sp, #12]
 8016b36:	9200      	str	r2, [sp, #0]
 8016b38:	aa06      	add	r2, sp, #24
 8016b3a:	e912 0006 	ldmdb	r2, {r1, r2}
 8016b3e:	4620      	mov	r0, r4
 8016b40:	f7ff ff24 	bl	801698c <SysTimeAdd>
}
 8016b44:	4620      	mov	r0, r4
 8016b46:	b007      	add	sp, #28
 8016b48:	bd30      	pop	{r4, r5, pc}
 8016b4a:	bf00      	nop
 8016b4c:	10624dd3 	.word	0x10624dd3
 8016b50:	0801c554 	.word	0x0801c554

08016b54 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 8016b54:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8016b56:	4b03      	ldr	r3, [pc, #12]	; (8016b64 <UTIL_TIMER_Init+0x10>)
 8016b58:	2200      	movs	r2, #0
 8016b5a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8016b5c:	4b02      	ldr	r3, [pc, #8]	; (8016b68 <UTIL_TIMER_Init+0x14>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	4798      	blx	r3
}
 8016b62:	bd08      	pop	{r3, pc}
 8016b64:	2000224c 	.word	0x2000224c
 8016b68:	0801c568 	.word	0x0801c568

08016b6c <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 8016b6c:	b1a8      	cbz	r0, 8016b9a <UTIL_TIMER_Create+0x2e>
{
 8016b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b70:	4617      	mov	r7, r2
 8016b72:	461e      	mov	r6, r3
 8016b74:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 8016b76:	b193      	cbz	r3, 8016b9e <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 8016b78:	2500      	movs	r5, #0
 8016b7a:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 8016b7c:	4b09      	ldr	r3, [pc, #36]	; (8016ba4 <UTIL_TIMER_Create+0x38>)
 8016b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016b80:	4608      	mov	r0, r1
 8016b82:	4798      	blx	r3
 8016b84:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 8016b86:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8016b88:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8016b8a:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8016b8c:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8016b8e:	9b06      	ldr	r3, [sp, #24]
 8016b90:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 8016b92:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 8016b94:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 8016b96:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8016b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8016b9a:	2001      	movs	r0, #1
}
 8016b9c:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8016b9e:	2001      	movs	r0, #1
 8016ba0:	e7fa      	b.n	8016b98 <UTIL_TIMER_Create+0x2c>
 8016ba2:	bf00      	nop
 8016ba4:	0801c568 	.word	0x0801c568

08016ba8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8016ba8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8016baa:	4c03      	ldr	r4, [pc, #12]	; (8016bb8 <UTIL_TIMER_GetCurrentTime+0x10>)
 8016bac:	69e3      	ldr	r3, [r4, #28]
 8016bae:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8016bb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016bb2:	4798      	blx	r3
}
 8016bb4:	bd10      	pop	{r4, pc}
 8016bb6:	bf00      	nop
 8016bb8:	0801c568 	.word	0x0801c568

08016bbc <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8016bbc:	b570      	push	{r4, r5, r6, lr}
 8016bbe:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8016bc0:	4d05      	ldr	r5, [pc, #20]	; (8016bd8 <UTIL_TIMER_GetElapsedTime+0x1c>)
 8016bc2:	69eb      	ldr	r3, [r5, #28]
 8016bc4:	4798      	blx	r3
 8016bc6:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8016bc8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016bca:	4630      	mov	r0, r6
 8016bcc:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8016bce:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8016bd0:	1a20      	subs	r0, r4, r0
 8016bd2:	4798      	blx	r3
}
 8016bd4:	bd70      	pop	{r4, r5, r6, pc}
 8016bd6:	bf00      	nop
 8016bd8:	0801c568 	.word	0x0801c568

08016bdc <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016bdc:	4b05      	ldr	r3, [pc, #20]	; (8016bf4 <TimerExists+0x18>)
 8016bde:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8016be0:	e000      	b.n	8016be4 <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 8016be2:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 8016be4:	b11b      	cbz	r3, 8016bee <TimerExists+0x12>
    if( cur == TimerObject )
 8016be6:	4283      	cmp	r3, r0
 8016be8:	d1fb      	bne.n	8016be2 <TimerExists+0x6>
      return true;
 8016bea:	2001      	movs	r0, #1
  }
  return false;
}
 8016bec:	4770      	bx	lr
  return false;
 8016bee:	2000      	movs	r0, #0
 8016bf0:	4770      	bx	lr
 8016bf2:	bf00      	nop
 8016bf4:	2000224c 	.word	0x2000224c

08016bf8 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8016bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016bfa:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8016bfc:	4e09      	ldr	r6, [pc, #36]	; (8016c24 <TimerSetTimeout+0x2c>)
 8016bfe:	6a33      	ldr	r3, [r6, #32]
 8016c00:	4798      	blx	r3
 8016c02:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 8016c04:	2301      	movs	r3, #1
 8016c06:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8016c08:	6827      	ldr	r7, [r4, #0]
 8016c0a:	69b6      	ldr	r6, [r6, #24]
 8016c0c:	47b0      	blx	r6
 8016c0e:	4428      	add	r0, r5
 8016c10:	4287      	cmp	r7, r0
 8016c12:	d202      	bcs.n	8016c1a <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8016c14:	47b0      	blx	r6
 8016c16:	4428      	add	r0, r5
 8016c18:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8016c1a:	4b02      	ldr	r3, [pc, #8]	; (8016c24 <TimerSetTimeout+0x2c>)
 8016c1c:	689b      	ldr	r3, [r3, #8]
 8016c1e:	6820      	ldr	r0, [r4, #0]
 8016c20:	4798      	blx	r3
}
 8016c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c24:	0801c568 	.word	0x0801c568

08016c28 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8016c28:	b368      	cbz	r0, 8016c86 <UTIL_TIMER_Stop+0x5e>
{
 8016c2a:	b510      	push	{r4, lr}
 8016c2c:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c2e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016c32:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 8016c34:	4b15      	ldr	r3, [pc, #84]	; (8016c8c <UTIL_TIMER_Stop+0x64>)
 8016c36:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8016c38:	2301      	movs	r3, #1
 8016c3a:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8016c3c:	b1e1      	cbz	r1, 8016c78 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8016c3e:	2300      	movs	r3, #0
 8016c40:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 8016c42:	4288      	cmp	r0, r1
 8016c44:	d006      	beq.n	8016c54 <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 8016c46:	460b      	mov	r3, r1
        while( cur != NULL )
 8016c48:	b1b3      	cbz	r3, 8016c78 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8016c4a:	4293      	cmp	r3, r2
 8016c4c:	d011      	beq.n	8016c72 <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8016c4e:	4619      	mov	r1, r3
            cur = cur->Next;
 8016c50:	695b      	ldr	r3, [r3, #20]
 8016c52:	e7f9      	b.n	8016c48 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 8016c54:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 8016c56:	6948      	ldr	r0, [r1, #20]
 8016c58:	b120      	cbz	r0, 8016c64 <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8016c5a:	4b0c      	ldr	r3, [pc, #48]	; (8016c8c <UTIL_TIMER_Stop+0x64>)
 8016c5c:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8016c5e:	f7ff ffcb 	bl	8016bf8 <TimerSetTimeout>
 8016c62:	e009      	b.n	8016c78 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 8016c64:	4b0a      	ldr	r3, [pc, #40]	; (8016c90 <UTIL_TIMER_Stop+0x68>)
 8016c66:	68db      	ldr	r3, [r3, #12]
 8016c68:	4798      	blx	r3
            TimerListHead = NULL;
 8016c6a:	4b08      	ldr	r3, [pc, #32]	; (8016c8c <UTIL_TIMER_Stop+0x64>)
 8016c6c:	2200      	movs	r2, #0
 8016c6e:	601a      	str	r2, [r3, #0]
 8016c70:	e002      	b.n	8016c78 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 8016c72:	695b      	ldr	r3, [r3, #20]
 8016c74:	b123      	cbz	r3, 8016c80 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 8016c76:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c78:	f384 8810 	msr	PRIMASK, r4
}
 8016c7c:	2000      	movs	r0, #0
}
 8016c7e:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 8016c80:	2300      	movs	r3, #0
 8016c82:	614b      	str	r3, [r1, #20]
 8016c84:	e7f8      	b.n	8016c78 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 8016c86:	2001      	movs	r0, #1
}
 8016c88:	4770      	bx	lr
 8016c8a:	bf00      	nop
 8016c8c:	2000224c 	.word	0x2000224c
 8016c90:	0801c568 	.word	0x0801c568

08016c94 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016c94:	4b09      	ldr	r3, [pc, #36]	; (8016cbc <TimerInsertTimer+0x28>)
 8016c96:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8016c98:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8016c9a:	e001      	b.n	8016ca0 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8016c9c:	461a      	mov	r2, r3
        next = next->Next;
 8016c9e:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8016ca0:	6951      	ldr	r1, [r2, #20]
 8016ca2:	b139      	cbz	r1, 8016cb4 <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 8016ca4:	6819      	ldr	r1, [r3, #0]
 8016ca6:	f8d0 c000 	ldr.w	ip, [r0]
 8016caa:	458c      	cmp	ip, r1
 8016cac:	d8f6      	bhi.n	8016c9c <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8016cae:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8016cb0:	6143      	str	r3, [r0, #20]
        return;
 8016cb2:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 8016cb4:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	6143      	str	r3, [r0, #20]
}
 8016cba:	4770      	bx	lr
 8016cbc:	2000224c 	.word	0x2000224c

08016cc0 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8016cc0:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8016cc2:	4b05      	ldr	r3, [pc, #20]	; (8016cd8 <TimerInsertNewHeadTimer+0x18>)
 8016cc4:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 8016cc6:	b10b      	cbz	r3, 8016ccc <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8016cc8:	2200      	movs	r2, #0
 8016cca:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8016ccc:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8016cce:	4b02      	ldr	r3, [pc, #8]	; (8016cd8 <TimerInsertNewHeadTimer+0x18>)
 8016cd0:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8016cd2:	f7ff ff91 	bl	8016bf8 <TimerSetTimeout>
}
 8016cd6:	bd08      	pop	{r3, pc}
 8016cd8:	2000224c 	.word	0x2000224c

08016cdc <UTIL_TIMER_Start>:
{
 8016cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8016cde:	2800      	cmp	r0, #0
 8016ce0:	d036      	beq.n	8016d50 <UTIL_TIMER_Start+0x74>
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	f7ff ff7a 	bl	8016bdc <TimerExists>
 8016ce8:	2800      	cmp	r0, #0
 8016cea:	d134      	bne.n	8016d56 <UTIL_TIMER_Start+0x7a>
 8016cec:	7a65      	ldrb	r5, [r4, #9]
 8016cee:	2d00      	cmp	r5, #0
 8016cf0:	d133      	bne.n	8016d5a <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cf2:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016cf6:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8016cf8:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8016cfa:	4b19      	ldr	r3, [pc, #100]	; (8016d60 <UTIL_TIMER_Start+0x84>)
 8016cfc:	6a1b      	ldr	r3, [r3, #32]
 8016cfe:	4798      	blx	r3
    if( ticks < minValue )
 8016d00:	4287      	cmp	r7, r0
 8016d02:	d300      	bcc.n	8016d06 <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8016d04:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8016d06:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8016d08:	2300      	movs	r3, #0
 8016d0a:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8016d0c:	2201      	movs	r2, #1
 8016d0e:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8016d10:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8016d12:	4b14      	ldr	r3, [pc, #80]	; (8016d64 <UTIL_TIMER_Start+0x88>)
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	b183      	cbz	r3, 8016d3a <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8016d18:	4b11      	ldr	r3, [pc, #68]	; (8016d60 <UTIL_TIMER_Start+0x84>)
 8016d1a:	699b      	ldr	r3, [r3, #24]
 8016d1c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8016d1e:	6823      	ldr	r3, [r4, #0]
 8016d20:	4418      	add	r0, r3
 8016d22:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8016d24:	4b0f      	ldr	r3, [pc, #60]	; (8016d64 <UTIL_TIMER_Start+0x88>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	681b      	ldr	r3, [r3, #0]
 8016d2a:	4298      	cmp	r0, r3
 8016d2c:	d20c      	bcs.n	8016d48 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8016d2e:	4620      	mov	r0, r4
 8016d30:	f7ff ffc6 	bl	8016cc0 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d34:	f386 8810 	msr	PRIMASK, r6
}
 8016d38:	e00b      	b.n	8016d52 <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8016d3a:	4b09      	ldr	r3, [pc, #36]	; (8016d60 <UTIL_TIMER_Start+0x84>)
 8016d3c:	691b      	ldr	r3, [r3, #16]
 8016d3e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8016d40:	4620      	mov	r0, r4
 8016d42:	f7ff ffbd 	bl	8016cc0 <TimerInsertNewHeadTimer>
 8016d46:	e7f5      	b.n	8016d34 <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8016d48:	4620      	mov	r0, r4
 8016d4a:	f7ff ffa3 	bl	8016c94 <TimerInsertTimer>
 8016d4e:	e7f1      	b.n	8016d34 <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8016d50:	2501      	movs	r5, #1
}
 8016d52:	4628      	mov	r0, r5
 8016d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8016d56:	2501      	movs	r5, #1
 8016d58:	e7fb      	b.n	8016d52 <UTIL_TIMER_Start+0x76>
 8016d5a:	2501      	movs	r5, #1
 8016d5c:	e7f9      	b.n	8016d52 <UTIL_TIMER_Start+0x76>
 8016d5e:	bf00      	nop
 8016d60:	0801c568 	.word	0x0801c568
 8016d64:	2000224c 	.word	0x2000224c

08016d68 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8016d68:	b198      	cbz	r0, 8016d92 <UTIL_TIMER_SetPeriod+0x2a>
{
 8016d6a:	b510      	push	{r4, lr}
 8016d6c:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8016d6e:	4b0a      	ldr	r3, [pc, #40]	; (8016d98 <UTIL_TIMER_SetPeriod+0x30>)
 8016d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d72:	4608      	mov	r0, r1
 8016d74:	4798      	blx	r3
 8016d76:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8016d78:	4620      	mov	r0, r4
 8016d7a:	f7ff ff2f 	bl	8016bdc <TimerExists>
 8016d7e:	b908      	cbnz	r0, 8016d84 <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8016d80:	2000      	movs	r0, #0
}
 8016d82:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8016d84:	4620      	mov	r0, r4
 8016d86:	f7ff ff4f 	bl	8016c28 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	f7ff ffa6 	bl	8016cdc <UTIL_TIMER_Start>
 8016d90:	e7f7      	b.n	8016d82 <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8016d92:	2001      	movs	r0, #1
}
 8016d94:	4770      	bx	lr
 8016d96:	bf00      	nop
 8016d98:	0801c568 	.word	0x0801c568

08016d9c <UTIL_TIMER_IRQ_Handler>:
{
 8016d9c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d9e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8016da2:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8016da4:	4c1e      	ldr	r4, [pc, #120]	; (8016e20 <UTIL_TIMER_IRQ_Handler+0x84>)
 8016da6:	6963      	ldr	r3, [r4, #20]
 8016da8:	4798      	blx	r3
 8016daa:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8016dac:	6923      	ldr	r3, [r4, #16]
 8016dae:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8016db0:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8016db2:	4b1c      	ldr	r3, [pc, #112]	; (8016e24 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016db4:	681b      	ldr	r3, [r3, #0]
 8016db6:	b923      	cbnz	r3, 8016dc2 <UTIL_TIMER_IRQ_Handler+0x26>
 8016db8:	e018      	b.n	8016dec <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8016dba:	2200      	movs	r2, #0
 8016dbc:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8016dbe:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8016dc0:	b1a3      	cbz	r3, 8016dec <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8016dc2:	681a      	ldr	r2, [r3, #0]
 8016dc4:	42a2      	cmp	r2, r4
 8016dc6:	d9f8      	bls.n	8016dba <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8016dc8:	1a31      	subs	r1, r6, r0
 8016dca:	440a      	add	r2, r1
 8016dcc:	601a      	str	r2, [r3, #0]
 8016dce:	e7f6      	b.n	8016dbe <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8016dd0:	4b14      	ldr	r3, [pc, #80]	; (8016e24 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016dd2:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8016dd4:	6962      	ldr	r2, [r4, #20]
 8016dd6:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8016ddc:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8016dde:	68e3      	ldr	r3, [r4, #12]
 8016de0:	6920      	ldr	r0, [r4, #16]
 8016de2:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8016de4:	8963      	ldrh	r3, [r4, #10]
 8016de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016dea:	d012      	beq.n	8016e12 <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8016dec:	4b0d      	ldr	r3, [pc, #52]	; (8016e24 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	b13b      	cbz	r3, 8016e02 <UTIL_TIMER_IRQ_Handler+0x66>
 8016df2:	681c      	ldr	r4, [r3, #0]
 8016df4:	2c00      	cmp	r4, #0
 8016df6:	d0eb      	beq.n	8016dd0 <UTIL_TIMER_IRQ_Handler+0x34>
 8016df8:	4b09      	ldr	r3, [pc, #36]	; (8016e20 <UTIL_TIMER_IRQ_Handler+0x84>)
 8016dfa:	699b      	ldr	r3, [r3, #24]
 8016dfc:	4798      	blx	r3
 8016dfe:	4284      	cmp	r4, r0
 8016e00:	d3e6      	bcc.n	8016dd0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8016e02:	4b08      	ldr	r3, [pc, #32]	; (8016e24 <UTIL_TIMER_IRQ_Handler+0x88>)
 8016e04:	6818      	ldr	r0, [r3, #0]
 8016e06:	b108      	cbz	r0, 8016e0c <UTIL_TIMER_IRQ_Handler+0x70>
 8016e08:	7a03      	ldrb	r3, [r0, #8]
 8016e0a:	b133      	cbz	r3, 8016e1a <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016e0c:	f385 8810 	msr	PRIMASK, r5
}
 8016e10:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8016e12:	4620      	mov	r0, r4
 8016e14:	f7ff ff62 	bl	8016cdc <UTIL_TIMER_Start>
 8016e18:	e7e8      	b.n	8016dec <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8016e1a:	f7ff feed 	bl	8016bf8 <TimerSetTimeout>
 8016e1e:	e7f5      	b.n	8016e0c <UTIL_TIMER_IRQ_Handler+0x70>
 8016e20:	0801c568 	.word	0x0801c568
 8016e24:	2000224c 	.word	0x2000224c

08016e28 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8016e28:	4601      	mov	r1, r0
  int i = 0;
 8016e2a:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8016e2c:	e008      	b.n	8016e40 <ee_skip_atoi+0x18>
 8016e2e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016e32:	1c53      	adds	r3, r2, #1
 8016e34:	600b      	str	r3, [r1, #0]
 8016e36:	7813      	ldrb	r3, [r2, #0]
 8016e38:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8016e3c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8016e40:	680a      	ldr	r2, [r1, #0]
 8016e42:	7813      	ldrb	r3, [r2, #0]
 8016e44:	3b30      	subs	r3, #48	; 0x30
 8016e46:	b2db      	uxtb	r3, r3
 8016e48:	2b09      	cmp	r3, #9
 8016e4a:	d9f0      	bls.n	8016e2e <ee_skip_atoi+0x6>
  return i;
}
 8016e4c:	4770      	bx	lr
	...

08016e50 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8016e50:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8016e54:	b093      	sub	sp, #76	; 0x4c
 8016e56:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8016e58:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8016e5a:	f016 0f40 	tst.w	r6, #64	; 0x40
 8016e5e:	d110      	bne.n	8016e82 <ee_number+0x32>
  char *dig = lower_digits;
 8016e60:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8016f5c <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8016e64:	1e9f      	subs	r7, r3, #2
 8016e66:	2f22      	cmp	r7, #34	; 0x22
 8016e68:	d875      	bhi.n	8016f56 <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8016e6a:	f016 0401 	ands.w	r4, r6, #1
 8016e6e:	d00b      	beq.n	8016e88 <ee_number+0x38>
 8016e70:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8016e74:	f016 0f02 	tst.w	r6, #2
 8016e78:	d00f      	beq.n	8016e9a <ee_number+0x4a>
  {
    if (num < 0)
 8016e7a:	2a00      	cmp	r2, #0
 8016e7c:	db07      	blt.n	8016e8e <ee_number+0x3e>
  sign = 0;
 8016e7e:	2700      	movs	r7, #0
 8016e80:	e00c      	b.n	8016e9c <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8016e82:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8016f60 <ee_number+0x110>
 8016e86:	e7ed      	b.n	8016e64 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8016e88:	f04f 0e20 	mov.w	lr, #32
 8016e8c:	e7f2      	b.n	8016e74 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8016e8e:	4252      	negs	r2, r2
      size--;
 8016e90:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8016e92:	3e01      	subs	r6, #1
 8016e94:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8016e96:	272d      	movs	r7, #45	; 0x2d
 8016e98:	e000      	b.n	8016e9c <ee_number+0x4c>
  sign = 0;
 8016e9a:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8016e9c:	bb5a      	cbnz	r2, 8016ef6 <ee_number+0xa6>
    tmp[i++] = '0';
 8016e9e:	2330      	movs	r3, #48	; 0x30
 8016ea0:	f88d 3004 	strb.w	r3, [sp, #4]
 8016ea4:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8016ea8:	45ac      	cmp	ip, r5
 8016eaa:	dd00      	ble.n	8016eae <ee_number+0x5e>
 8016eac:	4665      	mov	r5, ip
  size -= precision;
 8016eae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8016eb0:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8016eb2:	b31c      	cbz	r4, 8016efc <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8016eb4:	b11f      	cbz	r7, 8016ebe <ee_number+0x6e>
 8016eb6:	f800 7b01 	strb.w	r7, [r0], #1
 8016eba:	3901      	subs	r1, #1
 8016ebc:	d007      	beq.n	8016ece <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	f103 33ff 	add.w	r3, r3, #4294967295
 8016ec4:	dd24      	ble.n	8016f10 <ee_number+0xc0>
 8016ec6:	f800 eb01 	strb.w	lr, [r0], #1
 8016eca:	3901      	subs	r1, #1
 8016ecc:	d1f7      	bne.n	8016ebe <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8016ece:	b013      	add	sp, #76	; 0x4c
 8016ed0:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8016ed4:	fbb2 f6f3 	udiv	r6, r2, r3
 8016ed8:	fb03 2216 	mls	r2, r3, r6, r2
 8016edc:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8016ee0:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8016ee4:	446a      	add	r2, sp
 8016ee6:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8016eea:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8016eec:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8016ef0:	2a00      	cmp	r2, #0
 8016ef2:	d1ef      	bne.n	8016ed4 <ee_number+0x84>
 8016ef4:	e7d8      	b.n	8016ea8 <ee_number+0x58>
  i = 0;
 8016ef6:	f04f 0c00 	mov.w	ip, #0
 8016efa:	e7f9      	b.n	8016ef0 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	f103 33ff 	add.w	r3, r3, #4294967295
 8016f02:	ddd7      	ble.n	8016eb4 <ee_number+0x64>
 8016f04:	2220      	movs	r2, #32
 8016f06:	f800 2b01 	strb.w	r2, [r0], #1
 8016f0a:	3901      	subs	r1, #1
 8016f0c:	d1f6      	bne.n	8016efc <ee_number+0xac>
 8016f0e:	e7de      	b.n	8016ece <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8016f10:	4565      	cmp	r5, ip
 8016f12:	f105 35ff 	add.w	r5, r5, #4294967295
 8016f16:	dd05      	ble.n	8016f24 <ee_number+0xd4>
 8016f18:	2230      	movs	r2, #48	; 0x30
 8016f1a:	f800 2b01 	strb.w	r2, [r0], #1
 8016f1e:	3901      	subs	r1, #1
 8016f20:	d1f6      	bne.n	8016f10 <ee_number+0xc0>
 8016f22:	e7d4      	b.n	8016ece <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8016f24:	4662      	mov	r2, ip
 8016f26:	2a00      	cmp	r2, #0
 8016f28:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016f2c:	dd09      	ble.n	8016f42 <ee_number+0xf2>
 8016f2e:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8016f32:	446a      	add	r2, sp
 8016f34:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8016f38:	f800 2b01 	strb.w	r2, [r0], #1
 8016f3c:	3901      	subs	r1, #1
 8016f3e:	d1f1      	bne.n	8016f24 <ee_number+0xd4>
 8016f40:	e7c5      	b.n	8016ece <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	f103 33ff 	add.w	r3, r3, #4294967295
 8016f48:	ddc1      	ble.n	8016ece <ee_number+0x7e>
 8016f4a:	2220      	movs	r2, #32
 8016f4c:	f800 2b01 	strb.w	r2, [r0], #1
 8016f50:	3901      	subs	r1, #1
 8016f52:	d1f6      	bne.n	8016f42 <ee_number+0xf2>
 8016f54:	e7bb      	b.n	8016ece <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8016f56:	2000      	movs	r0, #0
 8016f58:	e7b9      	b.n	8016ece <ee_number+0x7e>
 8016f5a:	bf00      	nop
 8016f5c:	0801eb14 	.word	0x0801eb14
 8016f60:	0801eb3c 	.word	0x0801eb3c

08016f64 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8016f64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016f68:	b087      	sub	sp, #28
 8016f6a:	9205      	str	r2, [sp, #20]
 8016f6c:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8016f6e:	1e0f      	subs	r7, r1, #0
 8016f70:	f340 80b8 	ble.w	80170e4 <tiny_vsnprintf_like+0x180>
 8016f74:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8016f76:	4604      	mov	r4, r0
 8016f78:	e004      	b.n	8016f84 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8016f7a:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8016f7e:	9b05      	ldr	r3, [sp, #20]
 8016f80:	3301      	adds	r3, #1
 8016f82:	9305      	str	r3, [sp, #20]
 8016f84:	9905      	ldr	r1, [sp, #20]
 8016f86:	780a      	ldrb	r2, [r1, #0]
 8016f88:	b922      	cbnz	r2, 8016f94 <tiny_vsnprintf_like+0x30>
 8016f8a:	1ba3      	subs	r3, r4, r6
 8016f8c:	1e78      	subs	r0, r7, #1
 8016f8e:	4283      	cmp	r3, r0
 8016f90:	f2c0 80a2 	blt.w	80170d8 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8016f94:	1ba3      	subs	r3, r4, r6
 8016f96:	f107 38ff 	add.w	r8, r7, #4294967295
 8016f9a:	4543      	cmp	r3, r8
 8016f9c:	f280 809c 	bge.w	80170d8 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8016fa0:	2a25      	cmp	r2, #37	; 0x25
 8016fa2:	d1ea      	bne.n	8016f7a <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8016fa4:	1c4b      	adds	r3, r1, #1
 8016fa6:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8016fa8:	784b      	ldrb	r3, [r1, #1]
 8016faa:	2b30      	cmp	r3, #48	; 0x30
 8016fac:	d020      	beq.n	8016ff0 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8016fae:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8016fb2:	3b30      	subs	r3, #48	; 0x30
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	2b09      	cmp	r3, #9
 8016fb8:	d91d      	bls.n	8016ff6 <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8016fba:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8016fbe:	9b05      	ldr	r3, [sp, #20]
 8016fc0:	781a      	ldrb	r2, [r3, #0]
 8016fc2:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8016fc6:	2b20      	cmp	r3, #32
 8016fc8:	d867      	bhi.n	801709a <tiny_vsnprintf_like+0x136>
 8016fca:	e8df f003 	tbb	[pc, r3]
 8016fce:	664a      	.short	0x664a
 8016fd0:	66666666 	.word	0x66666666
 8016fd4:	66666666 	.word	0x66666666
 8016fd8:	66621e66 	.word	0x66621e66
 8016fdc:	62666666 	.word	0x62666666
 8016fe0:	66666666 	.word	0x66666666
 8016fe4:	66666666 	.word	0x66666666
 8016fe8:	19662866 	.word	0x19662866
 8016fec:	6666      	.short	0x6666
 8016fee:	7c          	.byte	0x7c
 8016fef:	00          	.byte	0x00
      flags |= ZEROPAD;
 8016ff0:	f04f 0901 	mov.w	r9, #1
 8016ff4:	e7dd      	b.n	8016fb2 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8016ff6:	a805      	add	r0, sp, #20
 8016ff8:	f7ff ff16 	bl	8016e28 <ee_skip_atoi>
 8016ffc:	4605      	mov	r5, r0
 8016ffe:	e7de      	b.n	8016fbe <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8017000:	230a      	movs	r3, #10
 8017002:	e031      	b.n	8017068 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8017004:	2320      	movs	r3, #32
 8017006:	f804 3b01 	strb.w	r3, [r4], #1
 801700a:	3d01      	subs	r5, #1
 801700c:	2d00      	cmp	r5, #0
 801700e:	dcf9      	bgt.n	8017004 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8017010:	9b04      	ldr	r3, [sp, #16]
 8017012:	1d1a      	adds	r2, r3, #4
 8017014:	9204      	str	r2, [sp, #16]
 8017016:	781b      	ldrb	r3, [r3, #0]
 8017018:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801701c:	e7af      	b.n	8016f7e <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 801701e:	9b04      	ldr	r3, [sp, #16]
 8017020:	1d1a      	adds	r2, r3, #4
 8017022:	9204      	str	r2, [sp, #16]
 8017024:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8017028:	f1b8 0f00 	cmp.w	r8, #0
 801702c:	d003      	beq.n	8017036 <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 801702e:	4640      	mov	r0, r8
 8017030:	f7e9 f8f6 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8017034:	e006      	b.n	8017044 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8017036:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80170e8 <tiny_vsnprintf_like+0x184>
 801703a:	e7f8      	b.n	801702e <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 801703c:	2220      	movs	r2, #32
 801703e:	f804 2b01 	strb.w	r2, [r4], #1
 8017042:	461d      	mov	r5, r3
 8017044:	1e6b      	subs	r3, r5, #1
 8017046:	4285      	cmp	r5, r0
 8017048:	dcf8      	bgt.n	801703c <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801704a:	2200      	movs	r2, #0
 801704c:	e006      	b.n	801705c <tiny_vsnprintf_like+0xf8>
 801704e:	4643      	mov	r3, r8
 8017050:	f813 1b01 	ldrb.w	r1, [r3], #1
 8017054:	f804 1b01 	strb.w	r1, [r4], #1
 8017058:	3201      	adds	r2, #1
 801705a:	4698      	mov	r8, r3
 801705c:	4282      	cmp	r2, r0
 801705e:	dbf6      	blt.n	801704e <tiny_vsnprintf_like+0xea>
 8017060:	e78d      	b.n	8016f7e <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8017062:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8017066:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8017068:	f019 0f02 	tst.w	r9, #2
 801706c:	d02f      	beq.n	80170ce <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 801706e:	9a04      	ldr	r2, [sp, #16]
 8017070:	1d11      	adds	r1, r2, #4
 8017072:	9104      	str	r1, [sp, #16]
 8017074:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8017076:	1ba1      	subs	r1, r4, r6
 8017078:	f8cd 9008 	str.w	r9, [sp, #8]
 801707c:	f04f 30ff 	mov.w	r0, #4294967295
 8017080:	9001      	str	r0, [sp, #4]
 8017082:	9500      	str	r5, [sp, #0]
 8017084:	eba8 0101 	sub.w	r1, r8, r1
 8017088:	4620      	mov	r0, r4
 801708a:	f7ff fee1 	bl	8016e50 <ee_number>
 801708e:	4604      	mov	r4, r0
 8017090:	e775      	b.n	8016f7e <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8017092:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8017096:	230a      	movs	r3, #10
 8017098:	e7e6      	b.n	8017068 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 801709a:	2a25      	cmp	r2, #37	; 0x25
 801709c:	d002      	beq.n	80170a4 <tiny_vsnprintf_like+0x140>
 801709e:	2325      	movs	r3, #37	; 0x25
 80170a0:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80170a4:	1ba3      	subs	r3, r4, r6
 80170a6:	4598      	cmp	r8, r3
 80170a8:	dd0f      	ble.n	80170ca <tiny_vsnprintf_like+0x166>
        if (*fmt)
 80170aa:	9b05      	ldr	r3, [sp, #20]
 80170ac:	781a      	ldrb	r2, [r3, #0]
 80170ae:	b13a      	cbz	r2, 80170c0 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 80170b0:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 80170b4:	1ba3      	subs	r3, r4, r6
 80170b6:	4598      	cmp	r8, r3
 80170b8:	f73f af61 	bgt.w	8016f7e <tiny_vsnprintf_like+0x1a>
    base = 10;
 80170bc:	230a      	movs	r3, #10
 80170be:	e7d3      	b.n	8017068 <tiny_vsnprintf_like+0x104>
          --fmt;
 80170c0:	3b01      	subs	r3, #1
 80170c2:	9305      	str	r3, [sp, #20]
 80170c4:	e7f6      	b.n	80170b4 <tiny_vsnprintf_like+0x150>
        base = 16;
 80170c6:	2310      	movs	r3, #16
 80170c8:	e7ce      	b.n	8017068 <tiny_vsnprintf_like+0x104>
    base = 10;
 80170ca:	230a      	movs	r3, #10
 80170cc:	e7cc      	b.n	8017068 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 80170ce:	9a04      	ldr	r2, [sp, #16]
 80170d0:	1d11      	adds	r1, r2, #4
 80170d2:	9104      	str	r1, [sp, #16]
 80170d4:	6812      	ldr	r2, [r2, #0]
 80170d6:	e7ce      	b.n	8017076 <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 80170d8:	2300      	movs	r3, #0
 80170da:	7023      	strb	r3, [r4, #0]
  return str - buf;
 80170dc:	1ba0      	subs	r0, r4, r6
}
 80170de:	b007      	add	sp, #28
 80170e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 80170e4:	2000      	movs	r0, #0
 80170e6:	e7fa      	b.n	80170de <tiny_vsnprintf_like+0x17a>
 80170e8:	0801eb64 	.word	0x0801eb64

080170ec <malloc>:
 80170ec:	4b02      	ldr	r3, [pc, #8]	; (80170f8 <malloc+0xc>)
 80170ee:	4601      	mov	r1, r0
 80170f0:	6818      	ldr	r0, [r3, #0]
 80170f2:	f000 b82b 	b.w	801714c <_malloc_r>
 80170f6:	bf00      	nop
 80170f8:	200001c0 	.word	0x200001c0

080170fc <free>:
 80170fc:	4b02      	ldr	r3, [pc, #8]	; (8017108 <free+0xc>)
 80170fe:	4601      	mov	r1, r0
 8017100:	6818      	ldr	r0, [r3, #0]
 8017102:	f002 b815 	b.w	8019130 <_free_r>
 8017106:	bf00      	nop
 8017108:	200001c0 	.word	0x200001c0

0801710c <sbrk_aligned>:
 801710c:	b570      	push	{r4, r5, r6, lr}
 801710e:	4e0e      	ldr	r6, [pc, #56]	; (8017148 <sbrk_aligned+0x3c>)
 8017110:	460c      	mov	r4, r1
 8017112:	6831      	ldr	r1, [r6, #0]
 8017114:	4605      	mov	r5, r0
 8017116:	b911      	cbnz	r1, 801711e <sbrk_aligned+0x12>
 8017118:	f001 f942 	bl	80183a0 <_sbrk_r>
 801711c:	6030      	str	r0, [r6, #0]
 801711e:	4621      	mov	r1, r4
 8017120:	4628      	mov	r0, r5
 8017122:	f001 f93d 	bl	80183a0 <_sbrk_r>
 8017126:	1c43      	adds	r3, r0, #1
 8017128:	d00a      	beq.n	8017140 <sbrk_aligned+0x34>
 801712a:	1cc4      	adds	r4, r0, #3
 801712c:	f024 0403 	bic.w	r4, r4, #3
 8017130:	42a0      	cmp	r0, r4
 8017132:	d007      	beq.n	8017144 <sbrk_aligned+0x38>
 8017134:	1a21      	subs	r1, r4, r0
 8017136:	4628      	mov	r0, r5
 8017138:	f001 f932 	bl	80183a0 <_sbrk_r>
 801713c:	3001      	adds	r0, #1
 801713e:	d101      	bne.n	8017144 <sbrk_aligned+0x38>
 8017140:	f04f 34ff 	mov.w	r4, #4294967295
 8017144:	4620      	mov	r0, r4
 8017146:	bd70      	pop	{r4, r5, r6, pc}
 8017148:	20002254 	.word	0x20002254

0801714c <_malloc_r>:
 801714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017150:	1ccd      	adds	r5, r1, #3
 8017152:	f025 0503 	bic.w	r5, r5, #3
 8017156:	3508      	adds	r5, #8
 8017158:	2d0c      	cmp	r5, #12
 801715a:	bf38      	it	cc
 801715c:	250c      	movcc	r5, #12
 801715e:	2d00      	cmp	r5, #0
 8017160:	4607      	mov	r7, r0
 8017162:	db01      	blt.n	8017168 <_malloc_r+0x1c>
 8017164:	42a9      	cmp	r1, r5
 8017166:	d905      	bls.n	8017174 <_malloc_r+0x28>
 8017168:	230c      	movs	r3, #12
 801716a:	603b      	str	r3, [r7, #0]
 801716c:	2600      	movs	r6, #0
 801716e:	4630      	mov	r0, r6
 8017170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017174:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017248 <_malloc_r+0xfc>
 8017178:	f000 f868 	bl	801724c <__malloc_lock>
 801717c:	f8d8 3000 	ldr.w	r3, [r8]
 8017180:	461c      	mov	r4, r3
 8017182:	bb5c      	cbnz	r4, 80171dc <_malloc_r+0x90>
 8017184:	4629      	mov	r1, r5
 8017186:	4638      	mov	r0, r7
 8017188:	f7ff ffc0 	bl	801710c <sbrk_aligned>
 801718c:	1c43      	adds	r3, r0, #1
 801718e:	4604      	mov	r4, r0
 8017190:	d155      	bne.n	801723e <_malloc_r+0xf2>
 8017192:	f8d8 4000 	ldr.w	r4, [r8]
 8017196:	4626      	mov	r6, r4
 8017198:	2e00      	cmp	r6, #0
 801719a:	d145      	bne.n	8017228 <_malloc_r+0xdc>
 801719c:	2c00      	cmp	r4, #0
 801719e:	d048      	beq.n	8017232 <_malloc_r+0xe6>
 80171a0:	6823      	ldr	r3, [r4, #0]
 80171a2:	4631      	mov	r1, r6
 80171a4:	4638      	mov	r0, r7
 80171a6:	eb04 0903 	add.w	r9, r4, r3
 80171aa:	f001 f8f9 	bl	80183a0 <_sbrk_r>
 80171ae:	4581      	cmp	r9, r0
 80171b0:	d13f      	bne.n	8017232 <_malloc_r+0xe6>
 80171b2:	6821      	ldr	r1, [r4, #0]
 80171b4:	1a6d      	subs	r5, r5, r1
 80171b6:	4629      	mov	r1, r5
 80171b8:	4638      	mov	r0, r7
 80171ba:	f7ff ffa7 	bl	801710c <sbrk_aligned>
 80171be:	3001      	adds	r0, #1
 80171c0:	d037      	beq.n	8017232 <_malloc_r+0xe6>
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	442b      	add	r3, r5
 80171c6:	6023      	str	r3, [r4, #0]
 80171c8:	f8d8 3000 	ldr.w	r3, [r8]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d038      	beq.n	8017242 <_malloc_r+0xf6>
 80171d0:	685a      	ldr	r2, [r3, #4]
 80171d2:	42a2      	cmp	r2, r4
 80171d4:	d12b      	bne.n	801722e <_malloc_r+0xe2>
 80171d6:	2200      	movs	r2, #0
 80171d8:	605a      	str	r2, [r3, #4]
 80171da:	e00f      	b.n	80171fc <_malloc_r+0xb0>
 80171dc:	6822      	ldr	r2, [r4, #0]
 80171de:	1b52      	subs	r2, r2, r5
 80171e0:	d41f      	bmi.n	8017222 <_malloc_r+0xd6>
 80171e2:	2a0b      	cmp	r2, #11
 80171e4:	d917      	bls.n	8017216 <_malloc_r+0xca>
 80171e6:	1961      	adds	r1, r4, r5
 80171e8:	42a3      	cmp	r3, r4
 80171ea:	6025      	str	r5, [r4, #0]
 80171ec:	bf18      	it	ne
 80171ee:	6059      	strne	r1, [r3, #4]
 80171f0:	6863      	ldr	r3, [r4, #4]
 80171f2:	bf08      	it	eq
 80171f4:	f8c8 1000 	streq.w	r1, [r8]
 80171f8:	5162      	str	r2, [r4, r5]
 80171fa:	604b      	str	r3, [r1, #4]
 80171fc:	4638      	mov	r0, r7
 80171fe:	f104 060b 	add.w	r6, r4, #11
 8017202:	f000 f829 	bl	8017258 <__malloc_unlock>
 8017206:	f026 0607 	bic.w	r6, r6, #7
 801720a:	1d23      	adds	r3, r4, #4
 801720c:	1af2      	subs	r2, r6, r3
 801720e:	d0ae      	beq.n	801716e <_malloc_r+0x22>
 8017210:	1b9b      	subs	r3, r3, r6
 8017212:	50a3      	str	r3, [r4, r2]
 8017214:	e7ab      	b.n	801716e <_malloc_r+0x22>
 8017216:	42a3      	cmp	r3, r4
 8017218:	6862      	ldr	r2, [r4, #4]
 801721a:	d1dd      	bne.n	80171d8 <_malloc_r+0x8c>
 801721c:	f8c8 2000 	str.w	r2, [r8]
 8017220:	e7ec      	b.n	80171fc <_malloc_r+0xb0>
 8017222:	4623      	mov	r3, r4
 8017224:	6864      	ldr	r4, [r4, #4]
 8017226:	e7ac      	b.n	8017182 <_malloc_r+0x36>
 8017228:	4634      	mov	r4, r6
 801722a:	6876      	ldr	r6, [r6, #4]
 801722c:	e7b4      	b.n	8017198 <_malloc_r+0x4c>
 801722e:	4613      	mov	r3, r2
 8017230:	e7cc      	b.n	80171cc <_malloc_r+0x80>
 8017232:	230c      	movs	r3, #12
 8017234:	603b      	str	r3, [r7, #0]
 8017236:	4638      	mov	r0, r7
 8017238:	f000 f80e 	bl	8017258 <__malloc_unlock>
 801723c:	e797      	b.n	801716e <_malloc_r+0x22>
 801723e:	6025      	str	r5, [r4, #0]
 8017240:	e7dc      	b.n	80171fc <_malloc_r+0xb0>
 8017242:	605b      	str	r3, [r3, #4]
 8017244:	deff      	udf	#255	; 0xff
 8017246:	bf00      	nop
 8017248:	20002250 	.word	0x20002250

0801724c <__malloc_lock>:
 801724c:	4801      	ldr	r0, [pc, #4]	; (8017254 <__malloc_lock+0x8>)
 801724e:	f001 b8f4 	b.w	801843a <__retarget_lock_acquire_recursive>
 8017252:	bf00      	nop
 8017254:	20002398 	.word	0x20002398

08017258 <__malloc_unlock>:
 8017258:	4801      	ldr	r0, [pc, #4]	; (8017260 <__malloc_unlock+0x8>)
 801725a:	f001 b8ef 	b.w	801843c <__retarget_lock_release_recursive>
 801725e:	bf00      	nop
 8017260:	20002398 	.word	0x20002398

08017264 <__cvt>:
 8017264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017268:	b088      	sub	sp, #32
 801726a:	2b00      	cmp	r3, #0
 801726c:	461f      	mov	r7, r3
 801726e:	4614      	mov	r4, r2
 8017270:	bfb8      	it	lt
 8017272:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8017276:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017278:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801727a:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 801727e:	bfb6      	itet	lt
 8017280:	461f      	movlt	r7, r3
 8017282:	2300      	movge	r3, #0
 8017284:	232d      	movlt	r3, #45	; 0x2d
 8017286:	7013      	strb	r3, [r2, #0]
 8017288:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801728a:	f023 0820 	bic.w	r8, r3, #32
 801728e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017292:	d005      	beq.n	80172a0 <__cvt+0x3c>
 8017294:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017298:	d100      	bne.n	801729c <__cvt+0x38>
 801729a:	3501      	adds	r5, #1
 801729c:	2302      	movs	r3, #2
 801729e:	e000      	b.n	80172a2 <__cvt+0x3e>
 80172a0:	2303      	movs	r3, #3
 80172a2:	aa07      	add	r2, sp, #28
 80172a4:	9204      	str	r2, [sp, #16]
 80172a6:	aa06      	add	r2, sp, #24
 80172a8:	e9cd a202 	strd	sl, r2, [sp, #8]
 80172ac:	e9cd 3500 	strd	r3, r5, [sp]
 80172b0:	4622      	mov	r2, r4
 80172b2:	463b      	mov	r3, r7
 80172b4:	f001 f95c 	bl	8018570 <_dtoa_r>
 80172b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80172bc:	4606      	mov	r6, r0
 80172be:	d102      	bne.n	80172c6 <__cvt+0x62>
 80172c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172c2:	07db      	lsls	r3, r3, #31
 80172c4:	d522      	bpl.n	801730c <__cvt+0xa8>
 80172c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80172ca:	eb06 0905 	add.w	r9, r6, r5
 80172ce:	d110      	bne.n	80172f2 <__cvt+0x8e>
 80172d0:	7833      	ldrb	r3, [r6, #0]
 80172d2:	2b30      	cmp	r3, #48	; 0x30
 80172d4:	d10a      	bne.n	80172ec <__cvt+0x88>
 80172d6:	2200      	movs	r2, #0
 80172d8:	2300      	movs	r3, #0
 80172da:	4620      	mov	r0, r4
 80172dc:	4639      	mov	r1, r7
 80172de:	f7e9 fbcb 	bl	8000a78 <__aeabi_dcmpeq>
 80172e2:	b918      	cbnz	r0, 80172ec <__cvt+0x88>
 80172e4:	f1c5 0501 	rsb	r5, r5, #1
 80172e8:	f8ca 5000 	str.w	r5, [sl]
 80172ec:	f8da 3000 	ldr.w	r3, [sl]
 80172f0:	4499      	add	r9, r3
 80172f2:	2200      	movs	r2, #0
 80172f4:	2300      	movs	r3, #0
 80172f6:	4620      	mov	r0, r4
 80172f8:	4639      	mov	r1, r7
 80172fa:	f7e9 fbbd 	bl	8000a78 <__aeabi_dcmpeq>
 80172fe:	b108      	cbz	r0, 8017304 <__cvt+0xa0>
 8017300:	f8cd 901c 	str.w	r9, [sp, #28]
 8017304:	2230      	movs	r2, #48	; 0x30
 8017306:	9b07      	ldr	r3, [sp, #28]
 8017308:	454b      	cmp	r3, r9
 801730a:	d307      	bcc.n	801731c <__cvt+0xb8>
 801730c:	9b07      	ldr	r3, [sp, #28]
 801730e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8017310:	1b9b      	subs	r3, r3, r6
 8017312:	4630      	mov	r0, r6
 8017314:	6013      	str	r3, [r2, #0]
 8017316:	b008      	add	sp, #32
 8017318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801731c:	1c59      	adds	r1, r3, #1
 801731e:	9107      	str	r1, [sp, #28]
 8017320:	701a      	strb	r2, [r3, #0]
 8017322:	e7f0      	b.n	8017306 <__cvt+0xa2>

08017324 <__exponent>:
 8017324:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017326:	4603      	mov	r3, r0
 8017328:	2900      	cmp	r1, #0
 801732a:	bfb8      	it	lt
 801732c:	4249      	neglt	r1, r1
 801732e:	f803 2b02 	strb.w	r2, [r3], #2
 8017332:	bfb4      	ite	lt
 8017334:	222d      	movlt	r2, #45	; 0x2d
 8017336:	222b      	movge	r2, #43	; 0x2b
 8017338:	2909      	cmp	r1, #9
 801733a:	7042      	strb	r2, [r0, #1]
 801733c:	dd2a      	ble.n	8017394 <__exponent+0x70>
 801733e:	f10d 0207 	add.w	r2, sp, #7
 8017342:	4617      	mov	r7, r2
 8017344:	260a      	movs	r6, #10
 8017346:	4694      	mov	ip, r2
 8017348:	fb91 f5f6 	sdiv	r5, r1, r6
 801734c:	fb06 1415 	mls	r4, r6, r5, r1
 8017350:	3430      	adds	r4, #48	; 0x30
 8017352:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8017356:	460c      	mov	r4, r1
 8017358:	2c63      	cmp	r4, #99	; 0x63
 801735a:	f102 32ff 	add.w	r2, r2, #4294967295
 801735e:	4629      	mov	r1, r5
 8017360:	dcf1      	bgt.n	8017346 <__exponent+0x22>
 8017362:	3130      	adds	r1, #48	; 0x30
 8017364:	f1ac 0402 	sub.w	r4, ip, #2
 8017368:	f802 1c01 	strb.w	r1, [r2, #-1]
 801736c:	1c41      	adds	r1, r0, #1
 801736e:	4622      	mov	r2, r4
 8017370:	42ba      	cmp	r2, r7
 8017372:	d30a      	bcc.n	801738a <__exponent+0x66>
 8017374:	f10d 0209 	add.w	r2, sp, #9
 8017378:	eba2 020c 	sub.w	r2, r2, ip
 801737c:	42bc      	cmp	r4, r7
 801737e:	bf88      	it	hi
 8017380:	2200      	movhi	r2, #0
 8017382:	4413      	add	r3, r2
 8017384:	1a18      	subs	r0, r3, r0
 8017386:	b003      	add	sp, #12
 8017388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801738a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801738e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8017392:	e7ed      	b.n	8017370 <__exponent+0x4c>
 8017394:	2330      	movs	r3, #48	; 0x30
 8017396:	3130      	adds	r1, #48	; 0x30
 8017398:	7083      	strb	r3, [r0, #2]
 801739a:	70c1      	strb	r1, [r0, #3]
 801739c:	1d03      	adds	r3, r0, #4
 801739e:	e7f1      	b.n	8017384 <__exponent+0x60>

080173a0 <_printf_float>:
 80173a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173a4:	b091      	sub	sp, #68	; 0x44
 80173a6:	460c      	mov	r4, r1
 80173a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80173ac:	4616      	mov	r6, r2
 80173ae:	461f      	mov	r7, r3
 80173b0:	4605      	mov	r5, r0
 80173b2:	f000 ffbd 	bl	8018330 <_localeconv_r>
 80173b6:	6803      	ldr	r3, [r0, #0]
 80173b8:	9309      	str	r3, [sp, #36]	; 0x24
 80173ba:	4618      	mov	r0, r3
 80173bc:	f7e8 ff30 	bl	8000220 <strlen>
 80173c0:	2300      	movs	r3, #0
 80173c2:	930e      	str	r3, [sp, #56]	; 0x38
 80173c4:	f8d8 3000 	ldr.w	r3, [r8]
 80173c8:	900a      	str	r0, [sp, #40]	; 0x28
 80173ca:	3307      	adds	r3, #7
 80173cc:	f023 0307 	bic.w	r3, r3, #7
 80173d0:	f103 0208 	add.w	r2, r3, #8
 80173d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80173d8:	f8d4 b000 	ldr.w	fp, [r4]
 80173dc:	f8c8 2000 	str.w	r2, [r8]
 80173e0:	e9d3 a800 	ldrd	sl, r8, [r3]
 80173e4:	4652      	mov	r2, sl
 80173e6:	4643      	mov	r3, r8
 80173e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80173ec:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80173f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80173f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80173f4:	4b9c      	ldr	r3, [pc, #624]	; (8017668 <_printf_float+0x2c8>)
 80173f6:	f04f 32ff 	mov.w	r2, #4294967295
 80173fa:	4650      	mov	r0, sl
 80173fc:	f7e9 fb6e 	bl	8000adc <__aeabi_dcmpun>
 8017400:	bb70      	cbnz	r0, 8017460 <_printf_float+0xc0>
 8017402:	4b99      	ldr	r3, [pc, #612]	; (8017668 <_printf_float+0x2c8>)
 8017404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017406:	f04f 32ff 	mov.w	r2, #4294967295
 801740a:	4650      	mov	r0, sl
 801740c:	f7e9 fb48 	bl	8000aa0 <__aeabi_dcmple>
 8017410:	bb30      	cbnz	r0, 8017460 <_printf_float+0xc0>
 8017412:	2200      	movs	r2, #0
 8017414:	2300      	movs	r3, #0
 8017416:	4650      	mov	r0, sl
 8017418:	4641      	mov	r1, r8
 801741a:	f7e9 fb37 	bl	8000a8c <__aeabi_dcmplt>
 801741e:	b110      	cbz	r0, 8017426 <_printf_float+0x86>
 8017420:	232d      	movs	r3, #45	; 0x2d
 8017422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017426:	4a91      	ldr	r2, [pc, #580]	; (801766c <_printf_float+0x2cc>)
 8017428:	4b91      	ldr	r3, [pc, #580]	; (8017670 <_printf_float+0x2d0>)
 801742a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801742e:	bf94      	ite	ls
 8017430:	4690      	movls	r8, r2
 8017432:	4698      	movhi	r8, r3
 8017434:	2303      	movs	r3, #3
 8017436:	6123      	str	r3, [r4, #16]
 8017438:	f02b 0304 	bic.w	r3, fp, #4
 801743c:	6023      	str	r3, [r4, #0]
 801743e:	f04f 0a00 	mov.w	sl, #0
 8017442:	9700      	str	r7, [sp, #0]
 8017444:	4633      	mov	r3, r6
 8017446:	aa0f      	add	r2, sp, #60	; 0x3c
 8017448:	4621      	mov	r1, r4
 801744a:	4628      	mov	r0, r5
 801744c:	f000 f9d4 	bl	80177f8 <_printf_common>
 8017450:	3001      	adds	r0, #1
 8017452:	f040 808f 	bne.w	8017574 <_printf_float+0x1d4>
 8017456:	f04f 30ff 	mov.w	r0, #4294967295
 801745a:	b011      	add	sp, #68	; 0x44
 801745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017460:	4652      	mov	r2, sl
 8017462:	4643      	mov	r3, r8
 8017464:	4650      	mov	r0, sl
 8017466:	4641      	mov	r1, r8
 8017468:	f7e9 fb38 	bl	8000adc <__aeabi_dcmpun>
 801746c:	b140      	cbz	r0, 8017480 <_printf_float+0xe0>
 801746e:	f1b8 0f00 	cmp.w	r8, #0
 8017472:	bfbc      	itt	lt
 8017474:	232d      	movlt	r3, #45	; 0x2d
 8017476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801747a:	4a7e      	ldr	r2, [pc, #504]	; (8017674 <_printf_float+0x2d4>)
 801747c:	4b7e      	ldr	r3, [pc, #504]	; (8017678 <_printf_float+0x2d8>)
 801747e:	e7d4      	b.n	801742a <_printf_float+0x8a>
 8017480:	6863      	ldr	r3, [r4, #4]
 8017482:	1c5a      	adds	r2, r3, #1
 8017484:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8017488:	d142      	bne.n	8017510 <_printf_float+0x170>
 801748a:	2306      	movs	r3, #6
 801748c:	6063      	str	r3, [r4, #4]
 801748e:	2200      	movs	r2, #0
 8017490:	9206      	str	r2, [sp, #24]
 8017492:	aa0e      	add	r2, sp, #56	; 0x38
 8017494:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8017498:	aa0d      	add	r2, sp, #52	; 0x34
 801749a:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 801749e:	9203      	str	r2, [sp, #12]
 80174a0:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80174a4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80174a8:	6023      	str	r3, [r4, #0]
 80174aa:	6863      	ldr	r3, [r4, #4]
 80174ac:	9300      	str	r3, [sp, #0]
 80174ae:	4652      	mov	r2, sl
 80174b0:	4643      	mov	r3, r8
 80174b2:	4628      	mov	r0, r5
 80174b4:	910b      	str	r1, [sp, #44]	; 0x2c
 80174b6:	f7ff fed5 	bl	8017264 <__cvt>
 80174ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80174bc:	2947      	cmp	r1, #71	; 0x47
 80174be:	4680      	mov	r8, r0
 80174c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80174c2:	d108      	bne.n	80174d6 <_printf_float+0x136>
 80174c4:	1cc8      	adds	r0, r1, #3
 80174c6:	db02      	blt.n	80174ce <_printf_float+0x12e>
 80174c8:	6863      	ldr	r3, [r4, #4]
 80174ca:	4299      	cmp	r1, r3
 80174cc:	dd40      	ble.n	8017550 <_printf_float+0x1b0>
 80174ce:	f1a9 0902 	sub.w	r9, r9, #2
 80174d2:	fa5f f989 	uxtb.w	r9, r9
 80174d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80174da:	d81f      	bhi.n	801751c <_printf_float+0x17c>
 80174dc:	3901      	subs	r1, #1
 80174de:	464a      	mov	r2, r9
 80174e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80174e4:	910d      	str	r1, [sp, #52]	; 0x34
 80174e6:	f7ff ff1d 	bl	8017324 <__exponent>
 80174ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80174ec:	1813      	adds	r3, r2, r0
 80174ee:	2a01      	cmp	r2, #1
 80174f0:	4682      	mov	sl, r0
 80174f2:	6123      	str	r3, [r4, #16]
 80174f4:	dc02      	bgt.n	80174fc <_printf_float+0x15c>
 80174f6:	6822      	ldr	r2, [r4, #0]
 80174f8:	07d2      	lsls	r2, r2, #31
 80174fa:	d501      	bpl.n	8017500 <_printf_float+0x160>
 80174fc:	3301      	adds	r3, #1
 80174fe:	6123      	str	r3, [r4, #16]
 8017500:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8017504:	2b00      	cmp	r3, #0
 8017506:	d09c      	beq.n	8017442 <_printf_float+0xa2>
 8017508:	232d      	movs	r3, #45	; 0x2d
 801750a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801750e:	e798      	b.n	8017442 <_printf_float+0xa2>
 8017510:	2947      	cmp	r1, #71	; 0x47
 8017512:	d1bc      	bne.n	801748e <_printf_float+0xee>
 8017514:	2b00      	cmp	r3, #0
 8017516:	d1ba      	bne.n	801748e <_printf_float+0xee>
 8017518:	2301      	movs	r3, #1
 801751a:	e7b7      	b.n	801748c <_printf_float+0xec>
 801751c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8017520:	d118      	bne.n	8017554 <_printf_float+0x1b4>
 8017522:	2900      	cmp	r1, #0
 8017524:	6863      	ldr	r3, [r4, #4]
 8017526:	dd0b      	ble.n	8017540 <_printf_float+0x1a0>
 8017528:	6121      	str	r1, [r4, #16]
 801752a:	b913      	cbnz	r3, 8017532 <_printf_float+0x192>
 801752c:	6822      	ldr	r2, [r4, #0]
 801752e:	07d0      	lsls	r0, r2, #31
 8017530:	d502      	bpl.n	8017538 <_printf_float+0x198>
 8017532:	3301      	adds	r3, #1
 8017534:	440b      	add	r3, r1
 8017536:	6123      	str	r3, [r4, #16]
 8017538:	65a1      	str	r1, [r4, #88]	; 0x58
 801753a:	f04f 0a00 	mov.w	sl, #0
 801753e:	e7df      	b.n	8017500 <_printf_float+0x160>
 8017540:	b913      	cbnz	r3, 8017548 <_printf_float+0x1a8>
 8017542:	6822      	ldr	r2, [r4, #0]
 8017544:	07d2      	lsls	r2, r2, #31
 8017546:	d501      	bpl.n	801754c <_printf_float+0x1ac>
 8017548:	3302      	adds	r3, #2
 801754a:	e7f4      	b.n	8017536 <_printf_float+0x196>
 801754c:	2301      	movs	r3, #1
 801754e:	e7f2      	b.n	8017536 <_printf_float+0x196>
 8017550:	f04f 0967 	mov.w	r9, #103	; 0x67
 8017554:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017556:	4299      	cmp	r1, r3
 8017558:	db05      	blt.n	8017566 <_printf_float+0x1c6>
 801755a:	6823      	ldr	r3, [r4, #0]
 801755c:	6121      	str	r1, [r4, #16]
 801755e:	07d8      	lsls	r0, r3, #31
 8017560:	d5ea      	bpl.n	8017538 <_printf_float+0x198>
 8017562:	1c4b      	adds	r3, r1, #1
 8017564:	e7e7      	b.n	8017536 <_printf_float+0x196>
 8017566:	2900      	cmp	r1, #0
 8017568:	bfd4      	ite	le
 801756a:	f1c1 0202 	rsble	r2, r1, #2
 801756e:	2201      	movgt	r2, #1
 8017570:	4413      	add	r3, r2
 8017572:	e7e0      	b.n	8017536 <_printf_float+0x196>
 8017574:	6823      	ldr	r3, [r4, #0]
 8017576:	055a      	lsls	r2, r3, #21
 8017578:	d407      	bmi.n	801758a <_printf_float+0x1ea>
 801757a:	6923      	ldr	r3, [r4, #16]
 801757c:	4642      	mov	r2, r8
 801757e:	4631      	mov	r1, r6
 8017580:	4628      	mov	r0, r5
 8017582:	47b8      	blx	r7
 8017584:	3001      	adds	r0, #1
 8017586:	d12b      	bne.n	80175e0 <_printf_float+0x240>
 8017588:	e765      	b.n	8017456 <_printf_float+0xb6>
 801758a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801758e:	f240 80dc 	bls.w	801774a <_printf_float+0x3aa>
 8017592:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017596:	2200      	movs	r2, #0
 8017598:	2300      	movs	r3, #0
 801759a:	f7e9 fa6d 	bl	8000a78 <__aeabi_dcmpeq>
 801759e:	2800      	cmp	r0, #0
 80175a0:	d033      	beq.n	801760a <_printf_float+0x26a>
 80175a2:	4a36      	ldr	r2, [pc, #216]	; (801767c <_printf_float+0x2dc>)
 80175a4:	2301      	movs	r3, #1
 80175a6:	4631      	mov	r1, r6
 80175a8:	4628      	mov	r0, r5
 80175aa:	47b8      	blx	r7
 80175ac:	3001      	adds	r0, #1
 80175ae:	f43f af52 	beq.w	8017456 <_printf_float+0xb6>
 80175b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80175b6:	429a      	cmp	r2, r3
 80175b8:	db02      	blt.n	80175c0 <_printf_float+0x220>
 80175ba:	6823      	ldr	r3, [r4, #0]
 80175bc:	07d8      	lsls	r0, r3, #31
 80175be:	d50f      	bpl.n	80175e0 <_printf_float+0x240>
 80175c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80175c4:	4631      	mov	r1, r6
 80175c6:	4628      	mov	r0, r5
 80175c8:	47b8      	blx	r7
 80175ca:	3001      	adds	r0, #1
 80175cc:	f43f af43 	beq.w	8017456 <_printf_float+0xb6>
 80175d0:	f04f 0800 	mov.w	r8, #0
 80175d4:	f104 091a 	add.w	r9, r4, #26
 80175d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80175da:	3b01      	subs	r3, #1
 80175dc:	4543      	cmp	r3, r8
 80175de:	dc09      	bgt.n	80175f4 <_printf_float+0x254>
 80175e0:	6823      	ldr	r3, [r4, #0]
 80175e2:	079b      	lsls	r3, r3, #30
 80175e4:	f100 8103 	bmi.w	80177ee <_printf_float+0x44e>
 80175e8:	68e0      	ldr	r0, [r4, #12]
 80175ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80175ec:	4298      	cmp	r0, r3
 80175ee:	bfb8      	it	lt
 80175f0:	4618      	movlt	r0, r3
 80175f2:	e732      	b.n	801745a <_printf_float+0xba>
 80175f4:	2301      	movs	r3, #1
 80175f6:	464a      	mov	r2, r9
 80175f8:	4631      	mov	r1, r6
 80175fa:	4628      	mov	r0, r5
 80175fc:	47b8      	blx	r7
 80175fe:	3001      	adds	r0, #1
 8017600:	f43f af29 	beq.w	8017456 <_printf_float+0xb6>
 8017604:	f108 0801 	add.w	r8, r8, #1
 8017608:	e7e6      	b.n	80175d8 <_printf_float+0x238>
 801760a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801760c:	2b00      	cmp	r3, #0
 801760e:	dc37      	bgt.n	8017680 <_printf_float+0x2e0>
 8017610:	4a1a      	ldr	r2, [pc, #104]	; (801767c <_printf_float+0x2dc>)
 8017612:	2301      	movs	r3, #1
 8017614:	4631      	mov	r1, r6
 8017616:	4628      	mov	r0, r5
 8017618:	47b8      	blx	r7
 801761a:	3001      	adds	r0, #1
 801761c:	f43f af1b 	beq.w	8017456 <_printf_float+0xb6>
 8017620:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8017624:	4313      	orrs	r3, r2
 8017626:	d102      	bne.n	801762e <_printf_float+0x28e>
 8017628:	6823      	ldr	r3, [r4, #0]
 801762a:	07d9      	lsls	r1, r3, #31
 801762c:	d5d8      	bpl.n	80175e0 <_printf_float+0x240>
 801762e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017632:	4631      	mov	r1, r6
 8017634:	4628      	mov	r0, r5
 8017636:	47b8      	blx	r7
 8017638:	3001      	adds	r0, #1
 801763a:	f43f af0c 	beq.w	8017456 <_printf_float+0xb6>
 801763e:	f04f 0900 	mov.w	r9, #0
 8017642:	f104 0a1a 	add.w	sl, r4, #26
 8017646:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017648:	425b      	negs	r3, r3
 801764a:	454b      	cmp	r3, r9
 801764c:	dc01      	bgt.n	8017652 <_printf_float+0x2b2>
 801764e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017650:	e794      	b.n	801757c <_printf_float+0x1dc>
 8017652:	2301      	movs	r3, #1
 8017654:	4652      	mov	r2, sl
 8017656:	4631      	mov	r1, r6
 8017658:	4628      	mov	r0, r5
 801765a:	47b8      	blx	r7
 801765c:	3001      	adds	r0, #1
 801765e:	f43f aefa 	beq.w	8017456 <_printf_float+0xb6>
 8017662:	f109 0901 	add.w	r9, r9, #1
 8017666:	e7ee      	b.n	8017646 <_printf_float+0x2a6>
 8017668:	7fefffff 	.word	0x7fefffff
 801766c:	0801eb6b 	.word	0x0801eb6b
 8017670:	0801eb6f 	.word	0x0801eb6f
 8017674:	0801eb73 	.word	0x0801eb73
 8017678:	0801eb77 	.word	0x0801eb77
 801767c:	0801ef00 	.word	0x0801ef00
 8017680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017682:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017684:	429a      	cmp	r2, r3
 8017686:	bfa8      	it	ge
 8017688:	461a      	movge	r2, r3
 801768a:	2a00      	cmp	r2, #0
 801768c:	4691      	mov	r9, r2
 801768e:	dc37      	bgt.n	8017700 <_printf_float+0x360>
 8017690:	f04f 0b00 	mov.w	fp, #0
 8017694:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017698:	f104 021a 	add.w	r2, r4, #26
 801769c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80176a0:	ebaa 0309 	sub.w	r3, sl, r9
 80176a4:	455b      	cmp	r3, fp
 80176a6:	dc33      	bgt.n	8017710 <_printf_float+0x370>
 80176a8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80176ac:	429a      	cmp	r2, r3
 80176ae:	db3b      	blt.n	8017728 <_printf_float+0x388>
 80176b0:	6823      	ldr	r3, [r4, #0]
 80176b2:	07da      	lsls	r2, r3, #31
 80176b4:	d438      	bmi.n	8017728 <_printf_float+0x388>
 80176b6:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80176ba:	eba2 0903 	sub.w	r9, r2, r3
 80176be:	eba2 020a 	sub.w	r2, r2, sl
 80176c2:	4591      	cmp	r9, r2
 80176c4:	bfa8      	it	ge
 80176c6:	4691      	movge	r9, r2
 80176c8:	f1b9 0f00 	cmp.w	r9, #0
 80176cc:	dc34      	bgt.n	8017738 <_printf_float+0x398>
 80176ce:	f04f 0800 	mov.w	r8, #0
 80176d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80176d6:	f104 0a1a 	add.w	sl, r4, #26
 80176da:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80176de:	1a9b      	subs	r3, r3, r2
 80176e0:	eba3 0309 	sub.w	r3, r3, r9
 80176e4:	4543      	cmp	r3, r8
 80176e6:	f77f af7b 	ble.w	80175e0 <_printf_float+0x240>
 80176ea:	2301      	movs	r3, #1
 80176ec:	4652      	mov	r2, sl
 80176ee:	4631      	mov	r1, r6
 80176f0:	4628      	mov	r0, r5
 80176f2:	47b8      	blx	r7
 80176f4:	3001      	adds	r0, #1
 80176f6:	f43f aeae 	beq.w	8017456 <_printf_float+0xb6>
 80176fa:	f108 0801 	add.w	r8, r8, #1
 80176fe:	e7ec      	b.n	80176da <_printf_float+0x33a>
 8017700:	4613      	mov	r3, r2
 8017702:	4631      	mov	r1, r6
 8017704:	4642      	mov	r2, r8
 8017706:	4628      	mov	r0, r5
 8017708:	47b8      	blx	r7
 801770a:	3001      	adds	r0, #1
 801770c:	d1c0      	bne.n	8017690 <_printf_float+0x2f0>
 801770e:	e6a2      	b.n	8017456 <_printf_float+0xb6>
 8017710:	2301      	movs	r3, #1
 8017712:	4631      	mov	r1, r6
 8017714:	4628      	mov	r0, r5
 8017716:	920b      	str	r2, [sp, #44]	; 0x2c
 8017718:	47b8      	blx	r7
 801771a:	3001      	adds	r0, #1
 801771c:	f43f ae9b 	beq.w	8017456 <_printf_float+0xb6>
 8017720:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8017722:	f10b 0b01 	add.w	fp, fp, #1
 8017726:	e7b9      	b.n	801769c <_printf_float+0x2fc>
 8017728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801772c:	4631      	mov	r1, r6
 801772e:	4628      	mov	r0, r5
 8017730:	47b8      	blx	r7
 8017732:	3001      	adds	r0, #1
 8017734:	d1bf      	bne.n	80176b6 <_printf_float+0x316>
 8017736:	e68e      	b.n	8017456 <_printf_float+0xb6>
 8017738:	464b      	mov	r3, r9
 801773a:	eb08 020a 	add.w	r2, r8, sl
 801773e:	4631      	mov	r1, r6
 8017740:	4628      	mov	r0, r5
 8017742:	47b8      	blx	r7
 8017744:	3001      	adds	r0, #1
 8017746:	d1c2      	bne.n	80176ce <_printf_float+0x32e>
 8017748:	e685      	b.n	8017456 <_printf_float+0xb6>
 801774a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801774c:	2a01      	cmp	r2, #1
 801774e:	dc01      	bgt.n	8017754 <_printf_float+0x3b4>
 8017750:	07db      	lsls	r3, r3, #31
 8017752:	d539      	bpl.n	80177c8 <_printf_float+0x428>
 8017754:	2301      	movs	r3, #1
 8017756:	4642      	mov	r2, r8
 8017758:	4631      	mov	r1, r6
 801775a:	4628      	mov	r0, r5
 801775c:	47b8      	blx	r7
 801775e:	3001      	adds	r0, #1
 8017760:	f43f ae79 	beq.w	8017456 <_printf_float+0xb6>
 8017764:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017768:	4631      	mov	r1, r6
 801776a:	4628      	mov	r0, r5
 801776c:	47b8      	blx	r7
 801776e:	3001      	adds	r0, #1
 8017770:	f43f ae71 	beq.w	8017456 <_printf_float+0xb6>
 8017774:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017778:	2200      	movs	r2, #0
 801777a:	2300      	movs	r3, #0
 801777c:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8017780:	f7e9 f97a 	bl	8000a78 <__aeabi_dcmpeq>
 8017784:	b9d8      	cbnz	r0, 80177be <_printf_float+0x41e>
 8017786:	f109 33ff 	add.w	r3, r9, #4294967295
 801778a:	f108 0201 	add.w	r2, r8, #1
 801778e:	4631      	mov	r1, r6
 8017790:	4628      	mov	r0, r5
 8017792:	47b8      	blx	r7
 8017794:	3001      	adds	r0, #1
 8017796:	d10e      	bne.n	80177b6 <_printf_float+0x416>
 8017798:	e65d      	b.n	8017456 <_printf_float+0xb6>
 801779a:	2301      	movs	r3, #1
 801779c:	464a      	mov	r2, r9
 801779e:	4631      	mov	r1, r6
 80177a0:	4628      	mov	r0, r5
 80177a2:	47b8      	blx	r7
 80177a4:	3001      	adds	r0, #1
 80177a6:	f43f ae56 	beq.w	8017456 <_printf_float+0xb6>
 80177aa:	f108 0801 	add.w	r8, r8, #1
 80177ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80177b0:	3b01      	subs	r3, #1
 80177b2:	4543      	cmp	r3, r8
 80177b4:	dcf1      	bgt.n	801779a <_printf_float+0x3fa>
 80177b6:	4653      	mov	r3, sl
 80177b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80177bc:	e6df      	b.n	801757e <_printf_float+0x1de>
 80177be:	f04f 0800 	mov.w	r8, #0
 80177c2:	f104 091a 	add.w	r9, r4, #26
 80177c6:	e7f2      	b.n	80177ae <_printf_float+0x40e>
 80177c8:	2301      	movs	r3, #1
 80177ca:	4642      	mov	r2, r8
 80177cc:	e7df      	b.n	801778e <_printf_float+0x3ee>
 80177ce:	2301      	movs	r3, #1
 80177d0:	464a      	mov	r2, r9
 80177d2:	4631      	mov	r1, r6
 80177d4:	4628      	mov	r0, r5
 80177d6:	47b8      	blx	r7
 80177d8:	3001      	adds	r0, #1
 80177da:	f43f ae3c 	beq.w	8017456 <_printf_float+0xb6>
 80177de:	f108 0801 	add.w	r8, r8, #1
 80177e2:	68e3      	ldr	r3, [r4, #12]
 80177e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80177e6:	1a5b      	subs	r3, r3, r1
 80177e8:	4543      	cmp	r3, r8
 80177ea:	dcf0      	bgt.n	80177ce <_printf_float+0x42e>
 80177ec:	e6fc      	b.n	80175e8 <_printf_float+0x248>
 80177ee:	f04f 0800 	mov.w	r8, #0
 80177f2:	f104 0919 	add.w	r9, r4, #25
 80177f6:	e7f4      	b.n	80177e2 <_printf_float+0x442>

080177f8 <_printf_common>:
 80177f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177fc:	4616      	mov	r6, r2
 80177fe:	4699      	mov	r9, r3
 8017800:	688a      	ldr	r2, [r1, #8]
 8017802:	690b      	ldr	r3, [r1, #16]
 8017804:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017808:	4293      	cmp	r3, r2
 801780a:	bfb8      	it	lt
 801780c:	4613      	movlt	r3, r2
 801780e:	6033      	str	r3, [r6, #0]
 8017810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017814:	4607      	mov	r7, r0
 8017816:	460c      	mov	r4, r1
 8017818:	b10a      	cbz	r2, 801781e <_printf_common+0x26>
 801781a:	3301      	adds	r3, #1
 801781c:	6033      	str	r3, [r6, #0]
 801781e:	6823      	ldr	r3, [r4, #0]
 8017820:	0699      	lsls	r1, r3, #26
 8017822:	bf42      	ittt	mi
 8017824:	6833      	ldrmi	r3, [r6, #0]
 8017826:	3302      	addmi	r3, #2
 8017828:	6033      	strmi	r3, [r6, #0]
 801782a:	6825      	ldr	r5, [r4, #0]
 801782c:	f015 0506 	ands.w	r5, r5, #6
 8017830:	d106      	bne.n	8017840 <_printf_common+0x48>
 8017832:	f104 0a19 	add.w	sl, r4, #25
 8017836:	68e3      	ldr	r3, [r4, #12]
 8017838:	6832      	ldr	r2, [r6, #0]
 801783a:	1a9b      	subs	r3, r3, r2
 801783c:	42ab      	cmp	r3, r5
 801783e:	dc26      	bgt.n	801788e <_printf_common+0x96>
 8017840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017844:	1e13      	subs	r3, r2, #0
 8017846:	6822      	ldr	r2, [r4, #0]
 8017848:	bf18      	it	ne
 801784a:	2301      	movne	r3, #1
 801784c:	0692      	lsls	r2, r2, #26
 801784e:	d42b      	bmi.n	80178a8 <_printf_common+0xb0>
 8017850:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017854:	4649      	mov	r1, r9
 8017856:	4638      	mov	r0, r7
 8017858:	47c0      	blx	r8
 801785a:	3001      	adds	r0, #1
 801785c:	d01e      	beq.n	801789c <_printf_common+0xa4>
 801785e:	6823      	ldr	r3, [r4, #0]
 8017860:	6922      	ldr	r2, [r4, #16]
 8017862:	f003 0306 	and.w	r3, r3, #6
 8017866:	2b04      	cmp	r3, #4
 8017868:	bf02      	ittt	eq
 801786a:	68e5      	ldreq	r5, [r4, #12]
 801786c:	6833      	ldreq	r3, [r6, #0]
 801786e:	1aed      	subeq	r5, r5, r3
 8017870:	68a3      	ldr	r3, [r4, #8]
 8017872:	bf0c      	ite	eq
 8017874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017878:	2500      	movne	r5, #0
 801787a:	4293      	cmp	r3, r2
 801787c:	bfc4      	itt	gt
 801787e:	1a9b      	subgt	r3, r3, r2
 8017880:	18ed      	addgt	r5, r5, r3
 8017882:	2600      	movs	r6, #0
 8017884:	341a      	adds	r4, #26
 8017886:	42b5      	cmp	r5, r6
 8017888:	d11a      	bne.n	80178c0 <_printf_common+0xc8>
 801788a:	2000      	movs	r0, #0
 801788c:	e008      	b.n	80178a0 <_printf_common+0xa8>
 801788e:	2301      	movs	r3, #1
 8017890:	4652      	mov	r2, sl
 8017892:	4649      	mov	r1, r9
 8017894:	4638      	mov	r0, r7
 8017896:	47c0      	blx	r8
 8017898:	3001      	adds	r0, #1
 801789a:	d103      	bne.n	80178a4 <_printf_common+0xac>
 801789c:	f04f 30ff 	mov.w	r0, #4294967295
 80178a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178a4:	3501      	adds	r5, #1
 80178a6:	e7c6      	b.n	8017836 <_printf_common+0x3e>
 80178a8:	18e1      	adds	r1, r4, r3
 80178aa:	1c5a      	adds	r2, r3, #1
 80178ac:	2030      	movs	r0, #48	; 0x30
 80178ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80178b2:	4422      	add	r2, r4
 80178b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80178b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80178bc:	3302      	adds	r3, #2
 80178be:	e7c7      	b.n	8017850 <_printf_common+0x58>
 80178c0:	2301      	movs	r3, #1
 80178c2:	4622      	mov	r2, r4
 80178c4:	4649      	mov	r1, r9
 80178c6:	4638      	mov	r0, r7
 80178c8:	47c0      	blx	r8
 80178ca:	3001      	adds	r0, #1
 80178cc:	d0e6      	beq.n	801789c <_printf_common+0xa4>
 80178ce:	3601      	adds	r6, #1
 80178d0:	e7d9      	b.n	8017886 <_printf_common+0x8e>
	...

080178d4 <_printf_i>:
 80178d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178d8:	7e0f      	ldrb	r7, [r1, #24]
 80178da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80178dc:	2f78      	cmp	r7, #120	; 0x78
 80178de:	4691      	mov	r9, r2
 80178e0:	4680      	mov	r8, r0
 80178e2:	460c      	mov	r4, r1
 80178e4:	469a      	mov	sl, r3
 80178e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80178ea:	d807      	bhi.n	80178fc <_printf_i+0x28>
 80178ec:	2f62      	cmp	r7, #98	; 0x62
 80178ee:	d80a      	bhi.n	8017906 <_printf_i+0x32>
 80178f0:	2f00      	cmp	r7, #0
 80178f2:	f000 80d4 	beq.w	8017a9e <_printf_i+0x1ca>
 80178f6:	2f58      	cmp	r7, #88	; 0x58
 80178f8:	f000 80c0 	beq.w	8017a7c <_printf_i+0x1a8>
 80178fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017900:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017904:	e03a      	b.n	801797c <_printf_i+0xa8>
 8017906:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801790a:	2b15      	cmp	r3, #21
 801790c:	d8f6      	bhi.n	80178fc <_printf_i+0x28>
 801790e:	a101      	add	r1, pc, #4	; (adr r1, 8017914 <_printf_i+0x40>)
 8017910:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017914:	0801796d 	.word	0x0801796d
 8017918:	08017981 	.word	0x08017981
 801791c:	080178fd 	.word	0x080178fd
 8017920:	080178fd 	.word	0x080178fd
 8017924:	080178fd 	.word	0x080178fd
 8017928:	080178fd 	.word	0x080178fd
 801792c:	08017981 	.word	0x08017981
 8017930:	080178fd 	.word	0x080178fd
 8017934:	080178fd 	.word	0x080178fd
 8017938:	080178fd 	.word	0x080178fd
 801793c:	080178fd 	.word	0x080178fd
 8017940:	08017a85 	.word	0x08017a85
 8017944:	080179ad 	.word	0x080179ad
 8017948:	08017a3f 	.word	0x08017a3f
 801794c:	080178fd 	.word	0x080178fd
 8017950:	080178fd 	.word	0x080178fd
 8017954:	08017aa7 	.word	0x08017aa7
 8017958:	080178fd 	.word	0x080178fd
 801795c:	080179ad 	.word	0x080179ad
 8017960:	080178fd 	.word	0x080178fd
 8017964:	080178fd 	.word	0x080178fd
 8017968:	08017a47 	.word	0x08017a47
 801796c:	682b      	ldr	r3, [r5, #0]
 801796e:	1d1a      	adds	r2, r3, #4
 8017970:	681b      	ldr	r3, [r3, #0]
 8017972:	602a      	str	r2, [r5, #0]
 8017974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017978:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801797c:	2301      	movs	r3, #1
 801797e:	e09f      	b.n	8017ac0 <_printf_i+0x1ec>
 8017980:	6820      	ldr	r0, [r4, #0]
 8017982:	682b      	ldr	r3, [r5, #0]
 8017984:	0607      	lsls	r7, r0, #24
 8017986:	f103 0104 	add.w	r1, r3, #4
 801798a:	6029      	str	r1, [r5, #0]
 801798c:	d501      	bpl.n	8017992 <_printf_i+0xbe>
 801798e:	681e      	ldr	r6, [r3, #0]
 8017990:	e003      	b.n	801799a <_printf_i+0xc6>
 8017992:	0646      	lsls	r6, r0, #25
 8017994:	d5fb      	bpl.n	801798e <_printf_i+0xba>
 8017996:	f9b3 6000 	ldrsh.w	r6, [r3]
 801799a:	2e00      	cmp	r6, #0
 801799c:	da03      	bge.n	80179a6 <_printf_i+0xd2>
 801799e:	232d      	movs	r3, #45	; 0x2d
 80179a0:	4276      	negs	r6, r6
 80179a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80179a6:	485a      	ldr	r0, [pc, #360]	; (8017b10 <_printf_i+0x23c>)
 80179a8:	230a      	movs	r3, #10
 80179aa:	e012      	b.n	80179d2 <_printf_i+0xfe>
 80179ac:	682b      	ldr	r3, [r5, #0]
 80179ae:	6820      	ldr	r0, [r4, #0]
 80179b0:	1d19      	adds	r1, r3, #4
 80179b2:	6029      	str	r1, [r5, #0]
 80179b4:	0605      	lsls	r5, r0, #24
 80179b6:	d501      	bpl.n	80179bc <_printf_i+0xe8>
 80179b8:	681e      	ldr	r6, [r3, #0]
 80179ba:	e002      	b.n	80179c2 <_printf_i+0xee>
 80179bc:	0641      	lsls	r1, r0, #25
 80179be:	d5fb      	bpl.n	80179b8 <_printf_i+0xe4>
 80179c0:	881e      	ldrh	r6, [r3, #0]
 80179c2:	4853      	ldr	r0, [pc, #332]	; (8017b10 <_printf_i+0x23c>)
 80179c4:	2f6f      	cmp	r7, #111	; 0x6f
 80179c6:	bf0c      	ite	eq
 80179c8:	2308      	moveq	r3, #8
 80179ca:	230a      	movne	r3, #10
 80179cc:	2100      	movs	r1, #0
 80179ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80179d2:	6865      	ldr	r5, [r4, #4]
 80179d4:	60a5      	str	r5, [r4, #8]
 80179d6:	2d00      	cmp	r5, #0
 80179d8:	bfa2      	ittt	ge
 80179da:	6821      	ldrge	r1, [r4, #0]
 80179dc:	f021 0104 	bicge.w	r1, r1, #4
 80179e0:	6021      	strge	r1, [r4, #0]
 80179e2:	b90e      	cbnz	r6, 80179e8 <_printf_i+0x114>
 80179e4:	2d00      	cmp	r5, #0
 80179e6:	d04b      	beq.n	8017a80 <_printf_i+0x1ac>
 80179e8:	4615      	mov	r5, r2
 80179ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80179ee:	fb03 6711 	mls	r7, r3, r1, r6
 80179f2:	5dc7      	ldrb	r7, [r0, r7]
 80179f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80179f8:	4637      	mov	r7, r6
 80179fa:	42bb      	cmp	r3, r7
 80179fc:	460e      	mov	r6, r1
 80179fe:	d9f4      	bls.n	80179ea <_printf_i+0x116>
 8017a00:	2b08      	cmp	r3, #8
 8017a02:	d10b      	bne.n	8017a1c <_printf_i+0x148>
 8017a04:	6823      	ldr	r3, [r4, #0]
 8017a06:	07de      	lsls	r6, r3, #31
 8017a08:	d508      	bpl.n	8017a1c <_printf_i+0x148>
 8017a0a:	6923      	ldr	r3, [r4, #16]
 8017a0c:	6861      	ldr	r1, [r4, #4]
 8017a0e:	4299      	cmp	r1, r3
 8017a10:	bfde      	ittt	le
 8017a12:	2330      	movle	r3, #48	; 0x30
 8017a14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017a1c:	1b52      	subs	r2, r2, r5
 8017a1e:	6122      	str	r2, [r4, #16]
 8017a20:	f8cd a000 	str.w	sl, [sp]
 8017a24:	464b      	mov	r3, r9
 8017a26:	aa03      	add	r2, sp, #12
 8017a28:	4621      	mov	r1, r4
 8017a2a:	4640      	mov	r0, r8
 8017a2c:	f7ff fee4 	bl	80177f8 <_printf_common>
 8017a30:	3001      	adds	r0, #1
 8017a32:	d14a      	bne.n	8017aca <_printf_i+0x1f6>
 8017a34:	f04f 30ff 	mov.w	r0, #4294967295
 8017a38:	b004      	add	sp, #16
 8017a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a3e:	6823      	ldr	r3, [r4, #0]
 8017a40:	f043 0320 	orr.w	r3, r3, #32
 8017a44:	6023      	str	r3, [r4, #0]
 8017a46:	4833      	ldr	r0, [pc, #204]	; (8017b14 <_printf_i+0x240>)
 8017a48:	2778      	movs	r7, #120	; 0x78
 8017a4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a4e:	6823      	ldr	r3, [r4, #0]
 8017a50:	6829      	ldr	r1, [r5, #0]
 8017a52:	061f      	lsls	r7, r3, #24
 8017a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8017a58:	d402      	bmi.n	8017a60 <_printf_i+0x18c>
 8017a5a:	065f      	lsls	r7, r3, #25
 8017a5c:	bf48      	it	mi
 8017a5e:	b2b6      	uxthmi	r6, r6
 8017a60:	07df      	lsls	r7, r3, #31
 8017a62:	bf48      	it	mi
 8017a64:	f043 0320 	orrmi.w	r3, r3, #32
 8017a68:	6029      	str	r1, [r5, #0]
 8017a6a:	bf48      	it	mi
 8017a6c:	6023      	strmi	r3, [r4, #0]
 8017a6e:	b91e      	cbnz	r6, 8017a78 <_printf_i+0x1a4>
 8017a70:	6823      	ldr	r3, [r4, #0]
 8017a72:	f023 0320 	bic.w	r3, r3, #32
 8017a76:	6023      	str	r3, [r4, #0]
 8017a78:	2310      	movs	r3, #16
 8017a7a:	e7a7      	b.n	80179cc <_printf_i+0xf8>
 8017a7c:	4824      	ldr	r0, [pc, #144]	; (8017b10 <_printf_i+0x23c>)
 8017a7e:	e7e4      	b.n	8017a4a <_printf_i+0x176>
 8017a80:	4615      	mov	r5, r2
 8017a82:	e7bd      	b.n	8017a00 <_printf_i+0x12c>
 8017a84:	682b      	ldr	r3, [r5, #0]
 8017a86:	6826      	ldr	r6, [r4, #0]
 8017a88:	6961      	ldr	r1, [r4, #20]
 8017a8a:	1d18      	adds	r0, r3, #4
 8017a8c:	6028      	str	r0, [r5, #0]
 8017a8e:	0635      	lsls	r5, r6, #24
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	d501      	bpl.n	8017a98 <_printf_i+0x1c4>
 8017a94:	6019      	str	r1, [r3, #0]
 8017a96:	e002      	b.n	8017a9e <_printf_i+0x1ca>
 8017a98:	0670      	lsls	r0, r6, #25
 8017a9a:	d5fb      	bpl.n	8017a94 <_printf_i+0x1c0>
 8017a9c:	8019      	strh	r1, [r3, #0]
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	6123      	str	r3, [r4, #16]
 8017aa2:	4615      	mov	r5, r2
 8017aa4:	e7bc      	b.n	8017a20 <_printf_i+0x14c>
 8017aa6:	682b      	ldr	r3, [r5, #0]
 8017aa8:	1d1a      	adds	r2, r3, #4
 8017aaa:	602a      	str	r2, [r5, #0]
 8017aac:	681d      	ldr	r5, [r3, #0]
 8017aae:	6862      	ldr	r2, [r4, #4]
 8017ab0:	2100      	movs	r1, #0
 8017ab2:	4628      	mov	r0, r5
 8017ab4:	f7e8 fb64 	bl	8000180 <memchr>
 8017ab8:	b108      	cbz	r0, 8017abe <_printf_i+0x1ea>
 8017aba:	1b40      	subs	r0, r0, r5
 8017abc:	6060      	str	r0, [r4, #4]
 8017abe:	6863      	ldr	r3, [r4, #4]
 8017ac0:	6123      	str	r3, [r4, #16]
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ac8:	e7aa      	b.n	8017a20 <_printf_i+0x14c>
 8017aca:	6923      	ldr	r3, [r4, #16]
 8017acc:	462a      	mov	r2, r5
 8017ace:	4649      	mov	r1, r9
 8017ad0:	4640      	mov	r0, r8
 8017ad2:	47d0      	blx	sl
 8017ad4:	3001      	adds	r0, #1
 8017ad6:	d0ad      	beq.n	8017a34 <_printf_i+0x160>
 8017ad8:	6823      	ldr	r3, [r4, #0]
 8017ada:	079b      	lsls	r3, r3, #30
 8017adc:	d413      	bmi.n	8017b06 <_printf_i+0x232>
 8017ade:	68e0      	ldr	r0, [r4, #12]
 8017ae0:	9b03      	ldr	r3, [sp, #12]
 8017ae2:	4298      	cmp	r0, r3
 8017ae4:	bfb8      	it	lt
 8017ae6:	4618      	movlt	r0, r3
 8017ae8:	e7a6      	b.n	8017a38 <_printf_i+0x164>
 8017aea:	2301      	movs	r3, #1
 8017aec:	4632      	mov	r2, r6
 8017aee:	4649      	mov	r1, r9
 8017af0:	4640      	mov	r0, r8
 8017af2:	47d0      	blx	sl
 8017af4:	3001      	adds	r0, #1
 8017af6:	d09d      	beq.n	8017a34 <_printf_i+0x160>
 8017af8:	3501      	adds	r5, #1
 8017afa:	68e3      	ldr	r3, [r4, #12]
 8017afc:	9903      	ldr	r1, [sp, #12]
 8017afe:	1a5b      	subs	r3, r3, r1
 8017b00:	42ab      	cmp	r3, r5
 8017b02:	dcf2      	bgt.n	8017aea <_printf_i+0x216>
 8017b04:	e7eb      	b.n	8017ade <_printf_i+0x20a>
 8017b06:	2500      	movs	r5, #0
 8017b08:	f104 0619 	add.w	r6, r4, #25
 8017b0c:	e7f5      	b.n	8017afa <_printf_i+0x226>
 8017b0e:	bf00      	nop
 8017b10:	0801eb7b 	.word	0x0801eb7b
 8017b14:	0801eb8c 	.word	0x0801eb8c

08017b18 <_scanf_float>:
 8017b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b1c:	b087      	sub	sp, #28
 8017b1e:	4617      	mov	r7, r2
 8017b20:	9303      	str	r3, [sp, #12]
 8017b22:	688b      	ldr	r3, [r1, #8]
 8017b24:	1e5a      	subs	r2, r3, #1
 8017b26:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8017b2a:	bf83      	ittte	hi
 8017b2c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017b30:	195b      	addhi	r3, r3, r5
 8017b32:	9302      	strhi	r3, [sp, #8]
 8017b34:	2300      	movls	r3, #0
 8017b36:	bf86      	itte	hi
 8017b38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017b3c:	608b      	strhi	r3, [r1, #8]
 8017b3e:	9302      	strls	r3, [sp, #8]
 8017b40:	680b      	ldr	r3, [r1, #0]
 8017b42:	468b      	mov	fp, r1
 8017b44:	2500      	movs	r5, #0
 8017b46:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8017b4a:	f84b 3b1c 	str.w	r3, [fp], #28
 8017b4e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8017b52:	4680      	mov	r8, r0
 8017b54:	460c      	mov	r4, r1
 8017b56:	465e      	mov	r6, fp
 8017b58:	46aa      	mov	sl, r5
 8017b5a:	46a9      	mov	r9, r5
 8017b5c:	9501      	str	r5, [sp, #4]
 8017b5e:	68a2      	ldr	r2, [r4, #8]
 8017b60:	b152      	cbz	r2, 8017b78 <_scanf_float+0x60>
 8017b62:	683b      	ldr	r3, [r7, #0]
 8017b64:	781b      	ldrb	r3, [r3, #0]
 8017b66:	2b4e      	cmp	r3, #78	; 0x4e
 8017b68:	d864      	bhi.n	8017c34 <_scanf_float+0x11c>
 8017b6a:	2b40      	cmp	r3, #64	; 0x40
 8017b6c:	d83c      	bhi.n	8017be8 <_scanf_float+0xd0>
 8017b6e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8017b72:	b2c8      	uxtb	r0, r1
 8017b74:	280e      	cmp	r0, #14
 8017b76:	d93a      	bls.n	8017bee <_scanf_float+0xd6>
 8017b78:	f1b9 0f00 	cmp.w	r9, #0
 8017b7c:	d003      	beq.n	8017b86 <_scanf_float+0x6e>
 8017b7e:	6823      	ldr	r3, [r4, #0]
 8017b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017b84:	6023      	str	r3, [r4, #0]
 8017b86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b8a:	f1ba 0f01 	cmp.w	sl, #1
 8017b8e:	f200 8113 	bhi.w	8017db8 <_scanf_float+0x2a0>
 8017b92:	455e      	cmp	r6, fp
 8017b94:	f200 8105 	bhi.w	8017da2 <_scanf_float+0x28a>
 8017b98:	2501      	movs	r5, #1
 8017b9a:	4628      	mov	r0, r5
 8017b9c:	b007      	add	sp, #28
 8017b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ba2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8017ba6:	2a0d      	cmp	r2, #13
 8017ba8:	d8e6      	bhi.n	8017b78 <_scanf_float+0x60>
 8017baa:	a101      	add	r1, pc, #4	; (adr r1, 8017bb0 <_scanf_float+0x98>)
 8017bac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017bb0:	08017cef 	.word	0x08017cef
 8017bb4:	08017b79 	.word	0x08017b79
 8017bb8:	08017b79 	.word	0x08017b79
 8017bbc:	08017b79 	.word	0x08017b79
 8017bc0:	08017d4f 	.word	0x08017d4f
 8017bc4:	08017d27 	.word	0x08017d27
 8017bc8:	08017b79 	.word	0x08017b79
 8017bcc:	08017b79 	.word	0x08017b79
 8017bd0:	08017cfd 	.word	0x08017cfd
 8017bd4:	08017b79 	.word	0x08017b79
 8017bd8:	08017b79 	.word	0x08017b79
 8017bdc:	08017b79 	.word	0x08017b79
 8017be0:	08017b79 	.word	0x08017b79
 8017be4:	08017cb5 	.word	0x08017cb5
 8017be8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8017bec:	e7db      	b.n	8017ba6 <_scanf_float+0x8e>
 8017bee:	290e      	cmp	r1, #14
 8017bf0:	d8c2      	bhi.n	8017b78 <_scanf_float+0x60>
 8017bf2:	a001      	add	r0, pc, #4	; (adr r0, 8017bf8 <_scanf_float+0xe0>)
 8017bf4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8017bf8:	08017ca7 	.word	0x08017ca7
 8017bfc:	08017b79 	.word	0x08017b79
 8017c00:	08017ca7 	.word	0x08017ca7
 8017c04:	08017d3b 	.word	0x08017d3b
 8017c08:	08017b79 	.word	0x08017b79
 8017c0c:	08017c55 	.word	0x08017c55
 8017c10:	08017c91 	.word	0x08017c91
 8017c14:	08017c91 	.word	0x08017c91
 8017c18:	08017c91 	.word	0x08017c91
 8017c1c:	08017c91 	.word	0x08017c91
 8017c20:	08017c91 	.word	0x08017c91
 8017c24:	08017c91 	.word	0x08017c91
 8017c28:	08017c91 	.word	0x08017c91
 8017c2c:	08017c91 	.word	0x08017c91
 8017c30:	08017c91 	.word	0x08017c91
 8017c34:	2b6e      	cmp	r3, #110	; 0x6e
 8017c36:	d809      	bhi.n	8017c4c <_scanf_float+0x134>
 8017c38:	2b60      	cmp	r3, #96	; 0x60
 8017c3a:	d8b2      	bhi.n	8017ba2 <_scanf_float+0x8a>
 8017c3c:	2b54      	cmp	r3, #84	; 0x54
 8017c3e:	d077      	beq.n	8017d30 <_scanf_float+0x218>
 8017c40:	2b59      	cmp	r3, #89	; 0x59
 8017c42:	d199      	bne.n	8017b78 <_scanf_float+0x60>
 8017c44:	2d07      	cmp	r5, #7
 8017c46:	d197      	bne.n	8017b78 <_scanf_float+0x60>
 8017c48:	2508      	movs	r5, #8
 8017c4a:	e029      	b.n	8017ca0 <_scanf_float+0x188>
 8017c4c:	2b74      	cmp	r3, #116	; 0x74
 8017c4e:	d06f      	beq.n	8017d30 <_scanf_float+0x218>
 8017c50:	2b79      	cmp	r3, #121	; 0x79
 8017c52:	e7f6      	b.n	8017c42 <_scanf_float+0x12a>
 8017c54:	6821      	ldr	r1, [r4, #0]
 8017c56:	05c8      	lsls	r0, r1, #23
 8017c58:	d51a      	bpl.n	8017c90 <_scanf_float+0x178>
 8017c5a:	9b02      	ldr	r3, [sp, #8]
 8017c5c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8017c60:	6021      	str	r1, [r4, #0]
 8017c62:	f109 0901 	add.w	r9, r9, #1
 8017c66:	b11b      	cbz	r3, 8017c70 <_scanf_float+0x158>
 8017c68:	3b01      	subs	r3, #1
 8017c6a:	3201      	adds	r2, #1
 8017c6c:	9302      	str	r3, [sp, #8]
 8017c6e:	60a2      	str	r2, [r4, #8]
 8017c70:	68a3      	ldr	r3, [r4, #8]
 8017c72:	3b01      	subs	r3, #1
 8017c74:	60a3      	str	r3, [r4, #8]
 8017c76:	6923      	ldr	r3, [r4, #16]
 8017c78:	3301      	adds	r3, #1
 8017c7a:	6123      	str	r3, [r4, #16]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	3b01      	subs	r3, #1
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	607b      	str	r3, [r7, #4]
 8017c84:	f340 8084 	ble.w	8017d90 <_scanf_float+0x278>
 8017c88:	683b      	ldr	r3, [r7, #0]
 8017c8a:	3301      	adds	r3, #1
 8017c8c:	603b      	str	r3, [r7, #0]
 8017c8e:	e766      	b.n	8017b5e <_scanf_float+0x46>
 8017c90:	eb1a 0f05 	cmn.w	sl, r5
 8017c94:	f47f af70 	bne.w	8017b78 <_scanf_float+0x60>
 8017c98:	6822      	ldr	r2, [r4, #0]
 8017c9a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8017c9e:	6022      	str	r2, [r4, #0]
 8017ca0:	f806 3b01 	strb.w	r3, [r6], #1
 8017ca4:	e7e4      	b.n	8017c70 <_scanf_float+0x158>
 8017ca6:	6822      	ldr	r2, [r4, #0]
 8017ca8:	0610      	lsls	r0, r2, #24
 8017caa:	f57f af65 	bpl.w	8017b78 <_scanf_float+0x60>
 8017cae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8017cb2:	e7f4      	b.n	8017c9e <_scanf_float+0x186>
 8017cb4:	f1ba 0f00 	cmp.w	sl, #0
 8017cb8:	d10e      	bne.n	8017cd8 <_scanf_float+0x1c0>
 8017cba:	f1b9 0f00 	cmp.w	r9, #0
 8017cbe:	d10e      	bne.n	8017cde <_scanf_float+0x1c6>
 8017cc0:	6822      	ldr	r2, [r4, #0]
 8017cc2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017cc6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017cca:	d108      	bne.n	8017cde <_scanf_float+0x1c6>
 8017ccc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017cd0:	6022      	str	r2, [r4, #0]
 8017cd2:	f04f 0a01 	mov.w	sl, #1
 8017cd6:	e7e3      	b.n	8017ca0 <_scanf_float+0x188>
 8017cd8:	f1ba 0f02 	cmp.w	sl, #2
 8017cdc:	d055      	beq.n	8017d8a <_scanf_float+0x272>
 8017cde:	2d01      	cmp	r5, #1
 8017ce0:	d002      	beq.n	8017ce8 <_scanf_float+0x1d0>
 8017ce2:	2d04      	cmp	r5, #4
 8017ce4:	f47f af48 	bne.w	8017b78 <_scanf_float+0x60>
 8017ce8:	3501      	adds	r5, #1
 8017cea:	b2ed      	uxtb	r5, r5
 8017cec:	e7d8      	b.n	8017ca0 <_scanf_float+0x188>
 8017cee:	f1ba 0f01 	cmp.w	sl, #1
 8017cf2:	f47f af41 	bne.w	8017b78 <_scanf_float+0x60>
 8017cf6:	f04f 0a02 	mov.w	sl, #2
 8017cfa:	e7d1      	b.n	8017ca0 <_scanf_float+0x188>
 8017cfc:	b97d      	cbnz	r5, 8017d1e <_scanf_float+0x206>
 8017cfe:	f1b9 0f00 	cmp.w	r9, #0
 8017d02:	f47f af3c 	bne.w	8017b7e <_scanf_float+0x66>
 8017d06:	6822      	ldr	r2, [r4, #0]
 8017d08:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8017d0c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8017d10:	f47f af39 	bne.w	8017b86 <_scanf_float+0x6e>
 8017d14:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017d18:	6022      	str	r2, [r4, #0]
 8017d1a:	2501      	movs	r5, #1
 8017d1c:	e7c0      	b.n	8017ca0 <_scanf_float+0x188>
 8017d1e:	2d03      	cmp	r5, #3
 8017d20:	d0e2      	beq.n	8017ce8 <_scanf_float+0x1d0>
 8017d22:	2d05      	cmp	r5, #5
 8017d24:	e7de      	b.n	8017ce4 <_scanf_float+0x1cc>
 8017d26:	2d02      	cmp	r5, #2
 8017d28:	f47f af26 	bne.w	8017b78 <_scanf_float+0x60>
 8017d2c:	2503      	movs	r5, #3
 8017d2e:	e7b7      	b.n	8017ca0 <_scanf_float+0x188>
 8017d30:	2d06      	cmp	r5, #6
 8017d32:	f47f af21 	bne.w	8017b78 <_scanf_float+0x60>
 8017d36:	2507      	movs	r5, #7
 8017d38:	e7b2      	b.n	8017ca0 <_scanf_float+0x188>
 8017d3a:	6822      	ldr	r2, [r4, #0]
 8017d3c:	0591      	lsls	r1, r2, #22
 8017d3e:	f57f af1b 	bpl.w	8017b78 <_scanf_float+0x60>
 8017d42:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8017d46:	6022      	str	r2, [r4, #0]
 8017d48:	f8cd 9004 	str.w	r9, [sp, #4]
 8017d4c:	e7a8      	b.n	8017ca0 <_scanf_float+0x188>
 8017d4e:	6822      	ldr	r2, [r4, #0]
 8017d50:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8017d54:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8017d58:	d006      	beq.n	8017d68 <_scanf_float+0x250>
 8017d5a:	0550      	lsls	r0, r2, #21
 8017d5c:	f57f af0c 	bpl.w	8017b78 <_scanf_float+0x60>
 8017d60:	f1b9 0f00 	cmp.w	r9, #0
 8017d64:	f43f af0f 	beq.w	8017b86 <_scanf_float+0x6e>
 8017d68:	0591      	lsls	r1, r2, #22
 8017d6a:	bf58      	it	pl
 8017d6c:	9901      	ldrpl	r1, [sp, #4]
 8017d6e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8017d72:	bf58      	it	pl
 8017d74:	eba9 0101 	subpl.w	r1, r9, r1
 8017d78:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8017d7c:	bf58      	it	pl
 8017d7e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8017d82:	6022      	str	r2, [r4, #0]
 8017d84:	f04f 0900 	mov.w	r9, #0
 8017d88:	e78a      	b.n	8017ca0 <_scanf_float+0x188>
 8017d8a:	f04f 0a03 	mov.w	sl, #3
 8017d8e:	e787      	b.n	8017ca0 <_scanf_float+0x188>
 8017d90:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d94:	4639      	mov	r1, r7
 8017d96:	4640      	mov	r0, r8
 8017d98:	4798      	blx	r3
 8017d9a:	2800      	cmp	r0, #0
 8017d9c:	f43f aedf 	beq.w	8017b5e <_scanf_float+0x46>
 8017da0:	e6ea      	b.n	8017b78 <_scanf_float+0x60>
 8017da2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017da6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017daa:	463a      	mov	r2, r7
 8017dac:	4640      	mov	r0, r8
 8017dae:	4798      	blx	r3
 8017db0:	6923      	ldr	r3, [r4, #16]
 8017db2:	3b01      	subs	r3, #1
 8017db4:	6123      	str	r3, [r4, #16]
 8017db6:	e6ec      	b.n	8017b92 <_scanf_float+0x7a>
 8017db8:	1e6b      	subs	r3, r5, #1
 8017dba:	2b06      	cmp	r3, #6
 8017dbc:	d825      	bhi.n	8017e0a <_scanf_float+0x2f2>
 8017dbe:	2d02      	cmp	r5, #2
 8017dc0:	d836      	bhi.n	8017e30 <_scanf_float+0x318>
 8017dc2:	455e      	cmp	r6, fp
 8017dc4:	f67f aee8 	bls.w	8017b98 <_scanf_float+0x80>
 8017dc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017dcc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017dd0:	463a      	mov	r2, r7
 8017dd2:	4640      	mov	r0, r8
 8017dd4:	4798      	blx	r3
 8017dd6:	6923      	ldr	r3, [r4, #16]
 8017dd8:	3b01      	subs	r3, #1
 8017dda:	6123      	str	r3, [r4, #16]
 8017ddc:	e7f1      	b.n	8017dc2 <_scanf_float+0x2aa>
 8017dde:	9802      	ldr	r0, [sp, #8]
 8017de0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017de4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8017de8:	9002      	str	r0, [sp, #8]
 8017dea:	463a      	mov	r2, r7
 8017dec:	4640      	mov	r0, r8
 8017dee:	4798      	blx	r3
 8017df0:	6923      	ldr	r3, [r4, #16]
 8017df2:	3b01      	subs	r3, #1
 8017df4:	6123      	str	r3, [r4, #16]
 8017df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017dfa:	fa5f fa8a 	uxtb.w	sl, sl
 8017dfe:	f1ba 0f02 	cmp.w	sl, #2
 8017e02:	d1ec      	bne.n	8017dde <_scanf_float+0x2c6>
 8017e04:	3d03      	subs	r5, #3
 8017e06:	b2ed      	uxtb	r5, r5
 8017e08:	1b76      	subs	r6, r6, r5
 8017e0a:	6823      	ldr	r3, [r4, #0]
 8017e0c:	05da      	lsls	r2, r3, #23
 8017e0e:	d52f      	bpl.n	8017e70 <_scanf_float+0x358>
 8017e10:	055b      	lsls	r3, r3, #21
 8017e12:	d510      	bpl.n	8017e36 <_scanf_float+0x31e>
 8017e14:	455e      	cmp	r6, fp
 8017e16:	f67f aebf 	bls.w	8017b98 <_scanf_float+0x80>
 8017e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8017e22:	463a      	mov	r2, r7
 8017e24:	4640      	mov	r0, r8
 8017e26:	4798      	blx	r3
 8017e28:	6923      	ldr	r3, [r4, #16]
 8017e2a:	3b01      	subs	r3, #1
 8017e2c:	6123      	str	r3, [r4, #16]
 8017e2e:	e7f1      	b.n	8017e14 <_scanf_float+0x2fc>
 8017e30:	46aa      	mov	sl, r5
 8017e32:	9602      	str	r6, [sp, #8]
 8017e34:	e7df      	b.n	8017df6 <_scanf_float+0x2de>
 8017e36:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8017e3a:	6923      	ldr	r3, [r4, #16]
 8017e3c:	2965      	cmp	r1, #101	; 0x65
 8017e3e:	f103 33ff 	add.w	r3, r3, #4294967295
 8017e42:	f106 35ff 	add.w	r5, r6, #4294967295
 8017e46:	6123      	str	r3, [r4, #16]
 8017e48:	d00c      	beq.n	8017e64 <_scanf_float+0x34c>
 8017e4a:	2945      	cmp	r1, #69	; 0x45
 8017e4c:	d00a      	beq.n	8017e64 <_scanf_float+0x34c>
 8017e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e52:	463a      	mov	r2, r7
 8017e54:	4640      	mov	r0, r8
 8017e56:	4798      	blx	r3
 8017e58:	6923      	ldr	r3, [r4, #16]
 8017e5a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8017e5e:	3b01      	subs	r3, #1
 8017e60:	1eb5      	subs	r5, r6, #2
 8017e62:	6123      	str	r3, [r4, #16]
 8017e64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017e68:	463a      	mov	r2, r7
 8017e6a:	4640      	mov	r0, r8
 8017e6c:	4798      	blx	r3
 8017e6e:	462e      	mov	r6, r5
 8017e70:	6825      	ldr	r5, [r4, #0]
 8017e72:	f015 0510 	ands.w	r5, r5, #16
 8017e76:	d155      	bne.n	8017f24 <_scanf_float+0x40c>
 8017e78:	7035      	strb	r5, [r6, #0]
 8017e7a:	6823      	ldr	r3, [r4, #0]
 8017e7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8017e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8017e84:	d11d      	bne.n	8017ec2 <_scanf_float+0x3aa>
 8017e86:	9b01      	ldr	r3, [sp, #4]
 8017e88:	454b      	cmp	r3, r9
 8017e8a:	eba3 0209 	sub.w	r2, r3, r9
 8017e8e:	d125      	bne.n	8017edc <_scanf_float+0x3c4>
 8017e90:	2200      	movs	r2, #0
 8017e92:	4659      	mov	r1, fp
 8017e94:	4640      	mov	r0, r8
 8017e96:	f002 fc43 	bl	801a720 <_strtod_r>
 8017e9a:	9b03      	ldr	r3, [sp, #12]
 8017e9c:	f8d4 c000 	ldr.w	ip, [r4]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	f01c 0f02 	tst.w	ip, #2
 8017ea6:	4606      	mov	r6, r0
 8017ea8:	460f      	mov	r7, r1
 8017eaa:	f103 0204 	add.w	r2, r3, #4
 8017eae:	d020      	beq.n	8017ef2 <_scanf_float+0x3da>
 8017eb0:	9903      	ldr	r1, [sp, #12]
 8017eb2:	600a      	str	r2, [r1, #0]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	e9c3 6700 	strd	r6, r7, [r3]
 8017eba:	68e3      	ldr	r3, [r4, #12]
 8017ebc:	3301      	adds	r3, #1
 8017ebe:	60e3      	str	r3, [r4, #12]
 8017ec0:	e66b      	b.n	8017b9a <_scanf_float+0x82>
 8017ec2:	9b04      	ldr	r3, [sp, #16]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d0e3      	beq.n	8017e90 <_scanf_float+0x378>
 8017ec8:	9905      	ldr	r1, [sp, #20]
 8017eca:	230a      	movs	r3, #10
 8017ecc:	462a      	mov	r2, r5
 8017ece:	3101      	adds	r1, #1
 8017ed0:	4640      	mov	r0, r8
 8017ed2:	f002 fca9 	bl	801a828 <_strtol_r>
 8017ed6:	9b04      	ldr	r3, [sp, #16]
 8017ed8:	9e05      	ldr	r6, [sp, #20]
 8017eda:	1ac2      	subs	r2, r0, r3
 8017edc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8017ee0:	429e      	cmp	r6, r3
 8017ee2:	bf28      	it	cs
 8017ee4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8017ee8:	490f      	ldr	r1, [pc, #60]	; (8017f28 <_scanf_float+0x410>)
 8017eea:	4630      	mov	r0, r6
 8017eec:	f000 f8e2 	bl	80180b4 <siprintf>
 8017ef0:	e7ce      	b.n	8017e90 <_scanf_float+0x378>
 8017ef2:	f01c 0f04 	tst.w	ip, #4
 8017ef6:	d1db      	bne.n	8017eb0 <_scanf_float+0x398>
 8017ef8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8017efc:	f8cc 2000 	str.w	r2, [ip]
 8017f00:	f8d3 8000 	ldr.w	r8, [r3]
 8017f04:	4602      	mov	r2, r0
 8017f06:	460b      	mov	r3, r1
 8017f08:	f7e8 fde8 	bl	8000adc <__aeabi_dcmpun>
 8017f0c:	b128      	cbz	r0, 8017f1a <_scanf_float+0x402>
 8017f0e:	4807      	ldr	r0, [pc, #28]	; (8017f2c <_scanf_float+0x414>)
 8017f10:	f000 faa4 	bl	801845c <nanf>
 8017f14:	f8c8 0000 	str.w	r0, [r8]
 8017f18:	e7cf      	b.n	8017eba <_scanf_float+0x3a2>
 8017f1a:	4630      	mov	r0, r6
 8017f1c:	4639      	mov	r1, r7
 8017f1e:	f7e8 fe3b 	bl	8000b98 <__aeabi_d2f>
 8017f22:	e7f7      	b.n	8017f14 <_scanf_float+0x3fc>
 8017f24:	2500      	movs	r5, #0
 8017f26:	e638      	b.n	8017b9a <_scanf_float+0x82>
 8017f28:	0801eb9d 	.word	0x0801eb9d
 8017f2c:	0801ef48 	.word	0x0801ef48

08017f30 <std>:
 8017f30:	2300      	movs	r3, #0
 8017f32:	b510      	push	{r4, lr}
 8017f34:	4604      	mov	r4, r0
 8017f36:	e9c0 3300 	strd	r3, r3, [r0]
 8017f3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017f3e:	6083      	str	r3, [r0, #8]
 8017f40:	8181      	strh	r1, [r0, #12]
 8017f42:	6643      	str	r3, [r0, #100]	; 0x64
 8017f44:	81c2      	strh	r2, [r0, #14]
 8017f46:	6183      	str	r3, [r0, #24]
 8017f48:	4619      	mov	r1, r3
 8017f4a:	2208      	movs	r2, #8
 8017f4c:	305c      	adds	r0, #92	; 0x5c
 8017f4e:	f000 f9d5 	bl	80182fc <memset>
 8017f52:	4b0d      	ldr	r3, [pc, #52]	; (8017f88 <std+0x58>)
 8017f54:	6263      	str	r3, [r4, #36]	; 0x24
 8017f56:	4b0d      	ldr	r3, [pc, #52]	; (8017f8c <std+0x5c>)
 8017f58:	62a3      	str	r3, [r4, #40]	; 0x28
 8017f5a:	4b0d      	ldr	r3, [pc, #52]	; (8017f90 <std+0x60>)
 8017f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017f5e:	4b0d      	ldr	r3, [pc, #52]	; (8017f94 <std+0x64>)
 8017f60:	6323      	str	r3, [r4, #48]	; 0x30
 8017f62:	4b0d      	ldr	r3, [pc, #52]	; (8017f98 <std+0x68>)
 8017f64:	6224      	str	r4, [r4, #32]
 8017f66:	429c      	cmp	r4, r3
 8017f68:	d006      	beq.n	8017f78 <std+0x48>
 8017f6a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017f6e:	4294      	cmp	r4, r2
 8017f70:	d002      	beq.n	8017f78 <std+0x48>
 8017f72:	33d0      	adds	r3, #208	; 0xd0
 8017f74:	429c      	cmp	r4, r3
 8017f76:	d105      	bne.n	8017f84 <std+0x54>
 8017f78:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017f80:	f000 ba5a 	b.w	8018438 <__retarget_lock_init_recursive>
 8017f84:	bd10      	pop	{r4, pc}
 8017f86:	bf00      	nop
 8017f88:	08018149 	.word	0x08018149
 8017f8c:	0801816f 	.word	0x0801816f
 8017f90:	080181a7 	.word	0x080181a7
 8017f94:	080181cb 	.word	0x080181cb
 8017f98:	20002258 	.word	0x20002258

08017f9c <stdio_exit_handler>:
 8017f9c:	4a02      	ldr	r2, [pc, #8]	; (8017fa8 <stdio_exit_handler+0xc>)
 8017f9e:	4903      	ldr	r1, [pc, #12]	; (8017fac <stdio_exit_handler+0x10>)
 8017fa0:	4803      	ldr	r0, [pc, #12]	; (8017fb0 <stdio_exit_handler+0x14>)
 8017fa2:	f000 b869 	b.w	8018078 <_fwalk_sglue>
 8017fa6:	bf00      	nop
 8017fa8:	20000168 	.word	0x20000168
 8017fac:	0801b4a5 	.word	0x0801b4a5
 8017fb0:	20000174 	.word	0x20000174

08017fb4 <cleanup_stdio>:
 8017fb4:	6841      	ldr	r1, [r0, #4]
 8017fb6:	4b0c      	ldr	r3, [pc, #48]	; (8017fe8 <cleanup_stdio+0x34>)
 8017fb8:	4299      	cmp	r1, r3
 8017fba:	b510      	push	{r4, lr}
 8017fbc:	4604      	mov	r4, r0
 8017fbe:	d001      	beq.n	8017fc4 <cleanup_stdio+0x10>
 8017fc0:	f003 fa70 	bl	801b4a4 <_fflush_r>
 8017fc4:	68a1      	ldr	r1, [r4, #8]
 8017fc6:	4b09      	ldr	r3, [pc, #36]	; (8017fec <cleanup_stdio+0x38>)
 8017fc8:	4299      	cmp	r1, r3
 8017fca:	d002      	beq.n	8017fd2 <cleanup_stdio+0x1e>
 8017fcc:	4620      	mov	r0, r4
 8017fce:	f003 fa69 	bl	801b4a4 <_fflush_r>
 8017fd2:	68e1      	ldr	r1, [r4, #12]
 8017fd4:	4b06      	ldr	r3, [pc, #24]	; (8017ff0 <cleanup_stdio+0x3c>)
 8017fd6:	4299      	cmp	r1, r3
 8017fd8:	d004      	beq.n	8017fe4 <cleanup_stdio+0x30>
 8017fda:	4620      	mov	r0, r4
 8017fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fe0:	f003 ba60 	b.w	801b4a4 <_fflush_r>
 8017fe4:	bd10      	pop	{r4, pc}
 8017fe6:	bf00      	nop
 8017fe8:	20002258 	.word	0x20002258
 8017fec:	200022c0 	.word	0x200022c0
 8017ff0:	20002328 	.word	0x20002328

08017ff4 <global_stdio_init.part.0>:
 8017ff4:	b510      	push	{r4, lr}
 8017ff6:	4b0b      	ldr	r3, [pc, #44]	; (8018024 <global_stdio_init.part.0+0x30>)
 8017ff8:	4c0b      	ldr	r4, [pc, #44]	; (8018028 <global_stdio_init.part.0+0x34>)
 8017ffa:	4a0c      	ldr	r2, [pc, #48]	; (801802c <global_stdio_init.part.0+0x38>)
 8017ffc:	601a      	str	r2, [r3, #0]
 8017ffe:	4620      	mov	r0, r4
 8018000:	2200      	movs	r2, #0
 8018002:	2104      	movs	r1, #4
 8018004:	f7ff ff94 	bl	8017f30 <std>
 8018008:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801800c:	2201      	movs	r2, #1
 801800e:	2109      	movs	r1, #9
 8018010:	f7ff ff8e 	bl	8017f30 <std>
 8018014:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018018:	2202      	movs	r2, #2
 801801a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801801e:	2112      	movs	r1, #18
 8018020:	f7ff bf86 	b.w	8017f30 <std>
 8018024:	20002390 	.word	0x20002390
 8018028:	20002258 	.word	0x20002258
 801802c:	08017f9d 	.word	0x08017f9d

08018030 <__sfp_lock_acquire>:
 8018030:	4801      	ldr	r0, [pc, #4]	; (8018038 <__sfp_lock_acquire+0x8>)
 8018032:	f000 ba02 	b.w	801843a <__retarget_lock_acquire_recursive>
 8018036:	bf00      	nop
 8018038:	20002399 	.word	0x20002399

0801803c <__sfp_lock_release>:
 801803c:	4801      	ldr	r0, [pc, #4]	; (8018044 <__sfp_lock_release+0x8>)
 801803e:	f000 b9fd 	b.w	801843c <__retarget_lock_release_recursive>
 8018042:	bf00      	nop
 8018044:	20002399 	.word	0x20002399

08018048 <__sinit>:
 8018048:	b510      	push	{r4, lr}
 801804a:	4604      	mov	r4, r0
 801804c:	f7ff fff0 	bl	8018030 <__sfp_lock_acquire>
 8018050:	6a23      	ldr	r3, [r4, #32]
 8018052:	b11b      	cbz	r3, 801805c <__sinit+0x14>
 8018054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018058:	f7ff bff0 	b.w	801803c <__sfp_lock_release>
 801805c:	4b04      	ldr	r3, [pc, #16]	; (8018070 <__sinit+0x28>)
 801805e:	6223      	str	r3, [r4, #32]
 8018060:	4b04      	ldr	r3, [pc, #16]	; (8018074 <__sinit+0x2c>)
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d1f5      	bne.n	8018054 <__sinit+0xc>
 8018068:	f7ff ffc4 	bl	8017ff4 <global_stdio_init.part.0>
 801806c:	e7f2      	b.n	8018054 <__sinit+0xc>
 801806e:	bf00      	nop
 8018070:	08017fb5 	.word	0x08017fb5
 8018074:	20002390 	.word	0x20002390

08018078 <_fwalk_sglue>:
 8018078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801807c:	4607      	mov	r7, r0
 801807e:	4688      	mov	r8, r1
 8018080:	4614      	mov	r4, r2
 8018082:	2600      	movs	r6, #0
 8018084:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018088:	f1b9 0901 	subs.w	r9, r9, #1
 801808c:	d505      	bpl.n	801809a <_fwalk_sglue+0x22>
 801808e:	6824      	ldr	r4, [r4, #0]
 8018090:	2c00      	cmp	r4, #0
 8018092:	d1f7      	bne.n	8018084 <_fwalk_sglue+0xc>
 8018094:	4630      	mov	r0, r6
 8018096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801809a:	89ab      	ldrh	r3, [r5, #12]
 801809c:	2b01      	cmp	r3, #1
 801809e:	d907      	bls.n	80180b0 <_fwalk_sglue+0x38>
 80180a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80180a4:	3301      	adds	r3, #1
 80180a6:	d003      	beq.n	80180b0 <_fwalk_sglue+0x38>
 80180a8:	4629      	mov	r1, r5
 80180aa:	4638      	mov	r0, r7
 80180ac:	47c0      	blx	r8
 80180ae:	4306      	orrs	r6, r0
 80180b0:	3568      	adds	r5, #104	; 0x68
 80180b2:	e7e9      	b.n	8018088 <_fwalk_sglue+0x10>

080180b4 <siprintf>:
 80180b4:	b40e      	push	{r1, r2, r3}
 80180b6:	b500      	push	{lr}
 80180b8:	b09c      	sub	sp, #112	; 0x70
 80180ba:	ab1d      	add	r3, sp, #116	; 0x74
 80180bc:	9002      	str	r0, [sp, #8]
 80180be:	9006      	str	r0, [sp, #24]
 80180c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80180c4:	4809      	ldr	r0, [pc, #36]	; (80180ec <siprintf+0x38>)
 80180c6:	9107      	str	r1, [sp, #28]
 80180c8:	9104      	str	r1, [sp, #16]
 80180ca:	4909      	ldr	r1, [pc, #36]	; (80180f0 <siprintf+0x3c>)
 80180cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80180d0:	9105      	str	r1, [sp, #20]
 80180d2:	6800      	ldr	r0, [r0, #0]
 80180d4:	9301      	str	r3, [sp, #4]
 80180d6:	a902      	add	r1, sp, #8
 80180d8:	f002 fc02 	bl	801a8e0 <_svfiprintf_r>
 80180dc:	9b02      	ldr	r3, [sp, #8]
 80180de:	2200      	movs	r2, #0
 80180e0:	701a      	strb	r2, [r3, #0]
 80180e2:	b01c      	add	sp, #112	; 0x70
 80180e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80180e8:	b003      	add	sp, #12
 80180ea:	4770      	bx	lr
 80180ec:	200001c0 	.word	0x200001c0
 80180f0:	ffff0208 	.word	0xffff0208

080180f4 <siscanf>:
 80180f4:	b40e      	push	{r1, r2, r3}
 80180f6:	b530      	push	{r4, r5, lr}
 80180f8:	b09c      	sub	sp, #112	; 0x70
 80180fa:	ac1f      	add	r4, sp, #124	; 0x7c
 80180fc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8018100:	f854 5b04 	ldr.w	r5, [r4], #4
 8018104:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018108:	9002      	str	r0, [sp, #8]
 801810a:	9006      	str	r0, [sp, #24]
 801810c:	f7e8 f888 	bl	8000220 <strlen>
 8018110:	4b0b      	ldr	r3, [pc, #44]	; (8018140 <siscanf+0x4c>)
 8018112:	9003      	str	r0, [sp, #12]
 8018114:	9007      	str	r0, [sp, #28]
 8018116:	930b      	str	r3, [sp, #44]	; 0x2c
 8018118:	480a      	ldr	r0, [pc, #40]	; (8018144 <siscanf+0x50>)
 801811a:	9401      	str	r4, [sp, #4]
 801811c:	2300      	movs	r3, #0
 801811e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018120:	9314      	str	r3, [sp, #80]	; 0x50
 8018122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018126:	f8ad 3016 	strh.w	r3, [sp, #22]
 801812a:	462a      	mov	r2, r5
 801812c:	4623      	mov	r3, r4
 801812e:	a902      	add	r1, sp, #8
 8018130:	6800      	ldr	r0, [r0, #0]
 8018132:	f002 fd2d 	bl	801ab90 <__ssvfiscanf_r>
 8018136:	b01c      	add	sp, #112	; 0x70
 8018138:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801813c:	b003      	add	sp, #12
 801813e:	4770      	bx	lr
 8018140:	0801816b 	.word	0x0801816b
 8018144:	200001c0 	.word	0x200001c0

08018148 <__sread>:
 8018148:	b510      	push	{r4, lr}
 801814a:	460c      	mov	r4, r1
 801814c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018150:	f000 f914 	bl	801837c <_read_r>
 8018154:	2800      	cmp	r0, #0
 8018156:	bfab      	itete	ge
 8018158:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801815a:	89a3      	ldrhlt	r3, [r4, #12]
 801815c:	181b      	addge	r3, r3, r0
 801815e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018162:	bfac      	ite	ge
 8018164:	6563      	strge	r3, [r4, #84]	; 0x54
 8018166:	81a3      	strhlt	r3, [r4, #12]
 8018168:	bd10      	pop	{r4, pc}

0801816a <__seofread>:
 801816a:	2000      	movs	r0, #0
 801816c:	4770      	bx	lr

0801816e <__swrite>:
 801816e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018172:	461f      	mov	r7, r3
 8018174:	898b      	ldrh	r3, [r1, #12]
 8018176:	05db      	lsls	r3, r3, #23
 8018178:	4605      	mov	r5, r0
 801817a:	460c      	mov	r4, r1
 801817c:	4616      	mov	r6, r2
 801817e:	d505      	bpl.n	801818c <__swrite+0x1e>
 8018180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018184:	2302      	movs	r3, #2
 8018186:	2200      	movs	r2, #0
 8018188:	f000 f8e6 	bl	8018358 <_lseek_r>
 801818c:	89a3      	ldrh	r3, [r4, #12]
 801818e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018196:	81a3      	strh	r3, [r4, #12]
 8018198:	4632      	mov	r2, r6
 801819a:	463b      	mov	r3, r7
 801819c:	4628      	mov	r0, r5
 801819e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181a2:	f000 b90d 	b.w	80183c0 <_write_r>

080181a6 <__sseek>:
 80181a6:	b510      	push	{r4, lr}
 80181a8:	460c      	mov	r4, r1
 80181aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181ae:	f000 f8d3 	bl	8018358 <_lseek_r>
 80181b2:	1c43      	adds	r3, r0, #1
 80181b4:	89a3      	ldrh	r3, [r4, #12]
 80181b6:	bf15      	itete	ne
 80181b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80181ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80181be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80181c2:	81a3      	strheq	r3, [r4, #12]
 80181c4:	bf18      	it	ne
 80181c6:	81a3      	strhne	r3, [r4, #12]
 80181c8:	bd10      	pop	{r4, pc}

080181ca <__sclose>:
 80181ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80181ce:	f000 b8b3 	b.w	8018338 <_close_r>

080181d2 <__swbuf_r>:
 80181d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181d4:	460e      	mov	r6, r1
 80181d6:	4614      	mov	r4, r2
 80181d8:	4605      	mov	r5, r0
 80181da:	b118      	cbz	r0, 80181e4 <__swbuf_r+0x12>
 80181dc:	6a03      	ldr	r3, [r0, #32]
 80181de:	b90b      	cbnz	r3, 80181e4 <__swbuf_r+0x12>
 80181e0:	f7ff ff32 	bl	8018048 <__sinit>
 80181e4:	69a3      	ldr	r3, [r4, #24]
 80181e6:	60a3      	str	r3, [r4, #8]
 80181e8:	89a3      	ldrh	r3, [r4, #12]
 80181ea:	071a      	lsls	r2, r3, #28
 80181ec:	d525      	bpl.n	801823a <__swbuf_r+0x68>
 80181ee:	6923      	ldr	r3, [r4, #16]
 80181f0:	b31b      	cbz	r3, 801823a <__swbuf_r+0x68>
 80181f2:	6823      	ldr	r3, [r4, #0]
 80181f4:	6922      	ldr	r2, [r4, #16]
 80181f6:	1a98      	subs	r0, r3, r2
 80181f8:	6963      	ldr	r3, [r4, #20]
 80181fa:	b2f6      	uxtb	r6, r6
 80181fc:	4283      	cmp	r3, r0
 80181fe:	4637      	mov	r7, r6
 8018200:	dc04      	bgt.n	801820c <__swbuf_r+0x3a>
 8018202:	4621      	mov	r1, r4
 8018204:	4628      	mov	r0, r5
 8018206:	f003 f94d 	bl	801b4a4 <_fflush_r>
 801820a:	b9e0      	cbnz	r0, 8018246 <__swbuf_r+0x74>
 801820c:	68a3      	ldr	r3, [r4, #8]
 801820e:	3b01      	subs	r3, #1
 8018210:	60a3      	str	r3, [r4, #8]
 8018212:	6823      	ldr	r3, [r4, #0]
 8018214:	1c5a      	adds	r2, r3, #1
 8018216:	6022      	str	r2, [r4, #0]
 8018218:	701e      	strb	r6, [r3, #0]
 801821a:	6962      	ldr	r2, [r4, #20]
 801821c:	1c43      	adds	r3, r0, #1
 801821e:	429a      	cmp	r2, r3
 8018220:	d004      	beq.n	801822c <__swbuf_r+0x5a>
 8018222:	89a3      	ldrh	r3, [r4, #12]
 8018224:	07db      	lsls	r3, r3, #31
 8018226:	d506      	bpl.n	8018236 <__swbuf_r+0x64>
 8018228:	2e0a      	cmp	r6, #10
 801822a:	d104      	bne.n	8018236 <__swbuf_r+0x64>
 801822c:	4621      	mov	r1, r4
 801822e:	4628      	mov	r0, r5
 8018230:	f003 f938 	bl	801b4a4 <_fflush_r>
 8018234:	b938      	cbnz	r0, 8018246 <__swbuf_r+0x74>
 8018236:	4638      	mov	r0, r7
 8018238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801823a:	4621      	mov	r1, r4
 801823c:	4628      	mov	r0, r5
 801823e:	f000 f805 	bl	801824c <__swsetup_r>
 8018242:	2800      	cmp	r0, #0
 8018244:	d0d5      	beq.n	80181f2 <__swbuf_r+0x20>
 8018246:	f04f 37ff 	mov.w	r7, #4294967295
 801824a:	e7f4      	b.n	8018236 <__swbuf_r+0x64>

0801824c <__swsetup_r>:
 801824c:	b538      	push	{r3, r4, r5, lr}
 801824e:	4b2a      	ldr	r3, [pc, #168]	; (80182f8 <__swsetup_r+0xac>)
 8018250:	4605      	mov	r5, r0
 8018252:	6818      	ldr	r0, [r3, #0]
 8018254:	460c      	mov	r4, r1
 8018256:	b118      	cbz	r0, 8018260 <__swsetup_r+0x14>
 8018258:	6a03      	ldr	r3, [r0, #32]
 801825a:	b90b      	cbnz	r3, 8018260 <__swsetup_r+0x14>
 801825c:	f7ff fef4 	bl	8018048 <__sinit>
 8018260:	89a3      	ldrh	r3, [r4, #12]
 8018262:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018266:	0718      	lsls	r0, r3, #28
 8018268:	d422      	bmi.n	80182b0 <__swsetup_r+0x64>
 801826a:	06d9      	lsls	r1, r3, #27
 801826c:	d407      	bmi.n	801827e <__swsetup_r+0x32>
 801826e:	2309      	movs	r3, #9
 8018270:	602b      	str	r3, [r5, #0]
 8018272:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018276:	81a3      	strh	r3, [r4, #12]
 8018278:	f04f 30ff 	mov.w	r0, #4294967295
 801827c:	e034      	b.n	80182e8 <__swsetup_r+0x9c>
 801827e:	0758      	lsls	r0, r3, #29
 8018280:	d512      	bpl.n	80182a8 <__swsetup_r+0x5c>
 8018282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018284:	b141      	cbz	r1, 8018298 <__swsetup_r+0x4c>
 8018286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801828a:	4299      	cmp	r1, r3
 801828c:	d002      	beq.n	8018294 <__swsetup_r+0x48>
 801828e:	4628      	mov	r0, r5
 8018290:	f000 ff4e 	bl	8019130 <_free_r>
 8018294:	2300      	movs	r3, #0
 8018296:	6363      	str	r3, [r4, #52]	; 0x34
 8018298:	89a3      	ldrh	r3, [r4, #12]
 801829a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801829e:	81a3      	strh	r3, [r4, #12]
 80182a0:	2300      	movs	r3, #0
 80182a2:	6063      	str	r3, [r4, #4]
 80182a4:	6923      	ldr	r3, [r4, #16]
 80182a6:	6023      	str	r3, [r4, #0]
 80182a8:	89a3      	ldrh	r3, [r4, #12]
 80182aa:	f043 0308 	orr.w	r3, r3, #8
 80182ae:	81a3      	strh	r3, [r4, #12]
 80182b0:	6923      	ldr	r3, [r4, #16]
 80182b2:	b94b      	cbnz	r3, 80182c8 <__swsetup_r+0x7c>
 80182b4:	89a3      	ldrh	r3, [r4, #12]
 80182b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80182ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182be:	d003      	beq.n	80182c8 <__swsetup_r+0x7c>
 80182c0:	4621      	mov	r1, r4
 80182c2:	4628      	mov	r0, r5
 80182c4:	f003 f93c 	bl	801b540 <__smakebuf_r>
 80182c8:	89a0      	ldrh	r0, [r4, #12]
 80182ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80182ce:	f010 0301 	ands.w	r3, r0, #1
 80182d2:	d00a      	beq.n	80182ea <__swsetup_r+0x9e>
 80182d4:	2300      	movs	r3, #0
 80182d6:	60a3      	str	r3, [r4, #8]
 80182d8:	6963      	ldr	r3, [r4, #20]
 80182da:	425b      	negs	r3, r3
 80182dc:	61a3      	str	r3, [r4, #24]
 80182de:	6923      	ldr	r3, [r4, #16]
 80182e0:	b943      	cbnz	r3, 80182f4 <__swsetup_r+0xa8>
 80182e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80182e6:	d1c4      	bne.n	8018272 <__swsetup_r+0x26>
 80182e8:	bd38      	pop	{r3, r4, r5, pc}
 80182ea:	0781      	lsls	r1, r0, #30
 80182ec:	bf58      	it	pl
 80182ee:	6963      	ldrpl	r3, [r4, #20]
 80182f0:	60a3      	str	r3, [r4, #8]
 80182f2:	e7f4      	b.n	80182de <__swsetup_r+0x92>
 80182f4:	2000      	movs	r0, #0
 80182f6:	e7f7      	b.n	80182e8 <__swsetup_r+0x9c>
 80182f8:	200001c0 	.word	0x200001c0

080182fc <memset>:
 80182fc:	4402      	add	r2, r0
 80182fe:	4603      	mov	r3, r0
 8018300:	4293      	cmp	r3, r2
 8018302:	d100      	bne.n	8018306 <memset+0xa>
 8018304:	4770      	bx	lr
 8018306:	f803 1b01 	strb.w	r1, [r3], #1
 801830a:	e7f9      	b.n	8018300 <memset+0x4>

0801830c <strncmp>:
 801830c:	b510      	push	{r4, lr}
 801830e:	b16a      	cbz	r2, 801832c <strncmp+0x20>
 8018310:	3901      	subs	r1, #1
 8018312:	1884      	adds	r4, r0, r2
 8018314:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018318:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801831c:	429a      	cmp	r2, r3
 801831e:	d103      	bne.n	8018328 <strncmp+0x1c>
 8018320:	42a0      	cmp	r0, r4
 8018322:	d001      	beq.n	8018328 <strncmp+0x1c>
 8018324:	2a00      	cmp	r2, #0
 8018326:	d1f5      	bne.n	8018314 <strncmp+0x8>
 8018328:	1ad0      	subs	r0, r2, r3
 801832a:	bd10      	pop	{r4, pc}
 801832c:	4610      	mov	r0, r2
 801832e:	e7fc      	b.n	801832a <strncmp+0x1e>

08018330 <_localeconv_r>:
 8018330:	4800      	ldr	r0, [pc, #0]	; (8018334 <_localeconv_r+0x4>)
 8018332:	4770      	bx	lr
 8018334:	200002b4 	.word	0x200002b4

08018338 <_close_r>:
 8018338:	b538      	push	{r3, r4, r5, lr}
 801833a:	4d06      	ldr	r5, [pc, #24]	; (8018354 <_close_r+0x1c>)
 801833c:	2300      	movs	r3, #0
 801833e:	4604      	mov	r4, r0
 8018340:	4608      	mov	r0, r1
 8018342:	602b      	str	r3, [r5, #0]
 8018344:	f7ea fb6e 	bl	8002a24 <_close>
 8018348:	1c43      	adds	r3, r0, #1
 801834a:	d102      	bne.n	8018352 <_close_r+0x1a>
 801834c:	682b      	ldr	r3, [r5, #0]
 801834e:	b103      	cbz	r3, 8018352 <_close_r+0x1a>
 8018350:	6023      	str	r3, [r4, #0]
 8018352:	bd38      	pop	{r3, r4, r5, pc}
 8018354:	20002394 	.word	0x20002394

08018358 <_lseek_r>:
 8018358:	b538      	push	{r3, r4, r5, lr}
 801835a:	4d07      	ldr	r5, [pc, #28]	; (8018378 <_lseek_r+0x20>)
 801835c:	4604      	mov	r4, r0
 801835e:	4608      	mov	r0, r1
 8018360:	4611      	mov	r1, r2
 8018362:	2200      	movs	r2, #0
 8018364:	602a      	str	r2, [r5, #0]
 8018366:	461a      	mov	r2, r3
 8018368:	f7ea fb66 	bl	8002a38 <_lseek>
 801836c:	1c43      	adds	r3, r0, #1
 801836e:	d102      	bne.n	8018376 <_lseek_r+0x1e>
 8018370:	682b      	ldr	r3, [r5, #0]
 8018372:	b103      	cbz	r3, 8018376 <_lseek_r+0x1e>
 8018374:	6023      	str	r3, [r4, #0]
 8018376:	bd38      	pop	{r3, r4, r5, pc}
 8018378:	20002394 	.word	0x20002394

0801837c <_read_r>:
 801837c:	b538      	push	{r3, r4, r5, lr}
 801837e:	4d07      	ldr	r5, [pc, #28]	; (801839c <_read_r+0x20>)
 8018380:	4604      	mov	r4, r0
 8018382:	4608      	mov	r0, r1
 8018384:	4611      	mov	r1, r2
 8018386:	2200      	movs	r2, #0
 8018388:	602a      	str	r2, [r5, #0]
 801838a:	461a      	mov	r2, r3
 801838c:	f7ea fb2c 	bl	80029e8 <_read>
 8018390:	1c43      	adds	r3, r0, #1
 8018392:	d102      	bne.n	801839a <_read_r+0x1e>
 8018394:	682b      	ldr	r3, [r5, #0]
 8018396:	b103      	cbz	r3, 801839a <_read_r+0x1e>
 8018398:	6023      	str	r3, [r4, #0]
 801839a:	bd38      	pop	{r3, r4, r5, pc}
 801839c:	20002394 	.word	0x20002394

080183a0 <_sbrk_r>:
 80183a0:	b538      	push	{r3, r4, r5, lr}
 80183a2:	4d06      	ldr	r5, [pc, #24]	; (80183bc <_sbrk_r+0x1c>)
 80183a4:	2300      	movs	r3, #0
 80183a6:	4604      	mov	r4, r0
 80183a8:	4608      	mov	r0, r1
 80183aa:	602b      	str	r3, [r5, #0]
 80183ac:	f7ea fb46 	bl	8002a3c <_sbrk>
 80183b0:	1c43      	adds	r3, r0, #1
 80183b2:	d102      	bne.n	80183ba <_sbrk_r+0x1a>
 80183b4:	682b      	ldr	r3, [r5, #0]
 80183b6:	b103      	cbz	r3, 80183ba <_sbrk_r+0x1a>
 80183b8:	6023      	str	r3, [r4, #0]
 80183ba:	bd38      	pop	{r3, r4, r5, pc}
 80183bc:	20002394 	.word	0x20002394

080183c0 <_write_r>:
 80183c0:	b538      	push	{r3, r4, r5, lr}
 80183c2:	4d07      	ldr	r5, [pc, #28]	; (80183e0 <_write_r+0x20>)
 80183c4:	4604      	mov	r4, r0
 80183c6:	4608      	mov	r0, r1
 80183c8:	4611      	mov	r1, r2
 80183ca:	2200      	movs	r2, #0
 80183cc:	602a      	str	r2, [r5, #0]
 80183ce:	461a      	mov	r2, r3
 80183d0:	f7ea fb1a 	bl	8002a08 <_write>
 80183d4:	1c43      	adds	r3, r0, #1
 80183d6:	d102      	bne.n	80183de <_write_r+0x1e>
 80183d8:	682b      	ldr	r3, [r5, #0]
 80183da:	b103      	cbz	r3, 80183de <_write_r+0x1e>
 80183dc:	6023      	str	r3, [r4, #0]
 80183de:	bd38      	pop	{r3, r4, r5, pc}
 80183e0:	20002394 	.word	0x20002394

080183e4 <__errno>:
 80183e4:	4b01      	ldr	r3, [pc, #4]	; (80183ec <__errno+0x8>)
 80183e6:	6818      	ldr	r0, [r3, #0]
 80183e8:	4770      	bx	lr
 80183ea:	bf00      	nop
 80183ec:	200001c0 	.word	0x200001c0

080183f0 <__libc_init_array>:
 80183f0:	b570      	push	{r4, r5, r6, lr}
 80183f2:	4d0d      	ldr	r5, [pc, #52]	; (8018428 <__libc_init_array+0x38>)
 80183f4:	4c0d      	ldr	r4, [pc, #52]	; (801842c <__libc_init_array+0x3c>)
 80183f6:	1b64      	subs	r4, r4, r5
 80183f8:	10a4      	asrs	r4, r4, #2
 80183fa:	2600      	movs	r6, #0
 80183fc:	42a6      	cmp	r6, r4
 80183fe:	d109      	bne.n	8018414 <__libc_init_array+0x24>
 8018400:	4d0b      	ldr	r5, [pc, #44]	; (8018430 <__libc_init_array+0x40>)
 8018402:	4c0c      	ldr	r4, [pc, #48]	; (8018434 <__libc_init_array+0x44>)
 8018404:	f003 fec4 	bl	801c190 <_init>
 8018408:	1b64      	subs	r4, r4, r5
 801840a:	10a4      	asrs	r4, r4, #2
 801840c:	2600      	movs	r6, #0
 801840e:	42a6      	cmp	r6, r4
 8018410:	d105      	bne.n	801841e <__libc_init_array+0x2e>
 8018412:	bd70      	pop	{r4, r5, r6, pc}
 8018414:	f855 3b04 	ldr.w	r3, [r5], #4
 8018418:	4798      	blx	r3
 801841a:	3601      	adds	r6, #1
 801841c:	e7ee      	b.n	80183fc <__libc_init_array+0xc>
 801841e:	f855 3b04 	ldr.w	r3, [r5], #4
 8018422:	4798      	blx	r3
 8018424:	3601      	adds	r6, #1
 8018426:	e7f2      	b.n	801840e <__libc_init_array+0x1e>
 8018428:	0801efb8 	.word	0x0801efb8
 801842c:	0801efb8 	.word	0x0801efb8
 8018430:	0801efb8 	.word	0x0801efb8
 8018434:	0801efbc 	.word	0x0801efbc

08018438 <__retarget_lock_init_recursive>:
 8018438:	4770      	bx	lr

0801843a <__retarget_lock_acquire_recursive>:
 801843a:	4770      	bx	lr

0801843c <__retarget_lock_release_recursive>:
 801843c:	4770      	bx	lr

0801843e <memcpy>:
 801843e:	440a      	add	r2, r1
 8018440:	4291      	cmp	r1, r2
 8018442:	f100 33ff 	add.w	r3, r0, #4294967295
 8018446:	d100      	bne.n	801844a <memcpy+0xc>
 8018448:	4770      	bx	lr
 801844a:	b510      	push	{r4, lr}
 801844c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018454:	4291      	cmp	r1, r2
 8018456:	d1f9      	bne.n	801844c <memcpy+0xe>
 8018458:	bd10      	pop	{r4, pc}
	...

0801845c <nanf>:
 801845c:	4800      	ldr	r0, [pc, #0]	; (8018460 <nanf+0x4>)
 801845e:	4770      	bx	lr
 8018460:	7fc00000 	.word	0x7fc00000

08018464 <quorem>:
 8018464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018468:	6903      	ldr	r3, [r0, #16]
 801846a:	690c      	ldr	r4, [r1, #16]
 801846c:	42a3      	cmp	r3, r4
 801846e:	4607      	mov	r7, r0
 8018470:	db7b      	blt.n	801856a <quorem+0x106>
 8018472:	3c01      	subs	r4, #1
 8018474:	f101 0814 	add.w	r8, r1, #20
 8018478:	f100 0514 	add.w	r5, r0, #20
 801847c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018480:	9301      	str	r3, [sp, #4]
 8018482:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018486:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801848a:	3301      	adds	r3, #1
 801848c:	429a      	cmp	r2, r3
 801848e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018492:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018496:	fbb2 f6f3 	udiv	r6, r2, r3
 801849a:	d32e      	bcc.n	80184fa <quorem+0x96>
 801849c:	f04f 0e00 	mov.w	lr, #0
 80184a0:	4640      	mov	r0, r8
 80184a2:	46ac      	mov	ip, r5
 80184a4:	46f2      	mov	sl, lr
 80184a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80184aa:	b293      	uxth	r3, r2
 80184ac:	fb06 e303 	mla	r3, r6, r3, lr
 80184b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80184b4:	0c1a      	lsrs	r2, r3, #16
 80184b6:	b29b      	uxth	r3, r3
 80184b8:	fb06 220e 	mla	r2, r6, lr, r2
 80184bc:	ebaa 0303 	sub.w	r3, sl, r3
 80184c0:	f8dc a000 	ldr.w	sl, [ip]
 80184c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80184c8:	b292      	uxth	r2, r2
 80184ca:	fa13 f38a 	uxtah	r3, r3, sl
 80184ce:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80184d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80184d6:	b29b      	uxth	r3, r3
 80184d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80184dc:	4581      	cmp	r9, r0
 80184de:	f84c 3b04 	str.w	r3, [ip], #4
 80184e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80184e6:	d2de      	bcs.n	80184a6 <quorem+0x42>
 80184e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80184ec:	b92b      	cbnz	r3, 80184fa <quorem+0x96>
 80184ee:	9b01      	ldr	r3, [sp, #4]
 80184f0:	3b04      	subs	r3, #4
 80184f2:	429d      	cmp	r5, r3
 80184f4:	461a      	mov	r2, r3
 80184f6:	d32c      	bcc.n	8018552 <quorem+0xee>
 80184f8:	613c      	str	r4, [r7, #16]
 80184fa:	4638      	mov	r0, r7
 80184fc:	f001 f928 	bl	8019750 <__mcmp>
 8018500:	2800      	cmp	r0, #0
 8018502:	db22      	blt.n	801854a <quorem+0xe6>
 8018504:	3601      	adds	r6, #1
 8018506:	4629      	mov	r1, r5
 8018508:	2000      	movs	r0, #0
 801850a:	f858 2b04 	ldr.w	r2, [r8], #4
 801850e:	f8d1 c000 	ldr.w	ip, [r1]
 8018512:	b293      	uxth	r3, r2
 8018514:	1ac3      	subs	r3, r0, r3
 8018516:	0c12      	lsrs	r2, r2, #16
 8018518:	fa13 f38c 	uxtah	r3, r3, ip
 801851c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8018520:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018524:	b29b      	uxth	r3, r3
 8018526:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801852a:	45c1      	cmp	r9, r8
 801852c:	f841 3b04 	str.w	r3, [r1], #4
 8018530:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018534:	d2e9      	bcs.n	801850a <quorem+0xa6>
 8018536:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801853a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801853e:	b922      	cbnz	r2, 801854a <quorem+0xe6>
 8018540:	3b04      	subs	r3, #4
 8018542:	429d      	cmp	r5, r3
 8018544:	461a      	mov	r2, r3
 8018546:	d30a      	bcc.n	801855e <quorem+0xfa>
 8018548:	613c      	str	r4, [r7, #16]
 801854a:	4630      	mov	r0, r6
 801854c:	b003      	add	sp, #12
 801854e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018552:	6812      	ldr	r2, [r2, #0]
 8018554:	3b04      	subs	r3, #4
 8018556:	2a00      	cmp	r2, #0
 8018558:	d1ce      	bne.n	80184f8 <quorem+0x94>
 801855a:	3c01      	subs	r4, #1
 801855c:	e7c9      	b.n	80184f2 <quorem+0x8e>
 801855e:	6812      	ldr	r2, [r2, #0]
 8018560:	3b04      	subs	r3, #4
 8018562:	2a00      	cmp	r2, #0
 8018564:	d1f0      	bne.n	8018548 <quorem+0xe4>
 8018566:	3c01      	subs	r4, #1
 8018568:	e7eb      	b.n	8018542 <quorem+0xde>
 801856a:	2000      	movs	r0, #0
 801856c:	e7ee      	b.n	801854c <quorem+0xe8>
	...

08018570 <_dtoa_r>:
 8018570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018574:	69c4      	ldr	r4, [r0, #28]
 8018576:	b099      	sub	sp, #100	; 0x64
 8018578:	4616      	mov	r6, r2
 801857a:	461f      	mov	r7, r3
 801857c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8018580:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8018584:	4605      	mov	r5, r0
 8018586:	b974      	cbnz	r4, 80185a6 <_dtoa_r+0x36>
 8018588:	2010      	movs	r0, #16
 801858a:	f7fe fdaf 	bl	80170ec <malloc>
 801858e:	4602      	mov	r2, r0
 8018590:	61e8      	str	r0, [r5, #28]
 8018592:	b920      	cbnz	r0, 801859e <_dtoa_r+0x2e>
 8018594:	4baa      	ldr	r3, [pc, #680]	; (8018840 <_dtoa_r+0x2d0>)
 8018596:	21ef      	movs	r1, #239	; 0xef
 8018598:	48aa      	ldr	r0, [pc, #680]	; (8018844 <_dtoa_r+0x2d4>)
 801859a:	f003 f8c3 	bl	801b724 <__assert_func>
 801859e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80185a2:	6004      	str	r4, [r0, #0]
 80185a4:	60c4      	str	r4, [r0, #12]
 80185a6:	69eb      	ldr	r3, [r5, #28]
 80185a8:	6819      	ldr	r1, [r3, #0]
 80185aa:	b151      	cbz	r1, 80185c2 <_dtoa_r+0x52>
 80185ac:	685a      	ldr	r2, [r3, #4]
 80185ae:	604a      	str	r2, [r1, #4]
 80185b0:	2301      	movs	r3, #1
 80185b2:	4093      	lsls	r3, r2
 80185b4:	608b      	str	r3, [r1, #8]
 80185b6:	4628      	mov	r0, r5
 80185b8:	f000 fe44 	bl	8019244 <_Bfree>
 80185bc:	69eb      	ldr	r3, [r5, #28]
 80185be:	2200      	movs	r2, #0
 80185c0:	601a      	str	r2, [r3, #0]
 80185c2:	1e3b      	subs	r3, r7, #0
 80185c4:	bfb9      	ittee	lt
 80185c6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80185ca:	9305      	strlt	r3, [sp, #20]
 80185cc:	2300      	movge	r3, #0
 80185ce:	f8c8 3000 	strge.w	r3, [r8]
 80185d2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80185d6:	4b9c      	ldr	r3, [pc, #624]	; (8018848 <_dtoa_r+0x2d8>)
 80185d8:	bfbc      	itt	lt
 80185da:	2201      	movlt	r2, #1
 80185dc:	f8c8 2000 	strlt.w	r2, [r8]
 80185e0:	ea33 0309 	bics.w	r3, r3, r9
 80185e4:	d119      	bne.n	801861a <_dtoa_r+0xaa>
 80185e6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80185e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80185ec:	6013      	str	r3, [r2, #0]
 80185ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80185f2:	4333      	orrs	r3, r6
 80185f4:	f000 8587 	beq.w	8019106 <_dtoa_r+0xb96>
 80185f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80185fa:	b953      	cbnz	r3, 8018612 <_dtoa_r+0xa2>
 80185fc:	4b93      	ldr	r3, [pc, #588]	; (801884c <_dtoa_r+0x2dc>)
 80185fe:	e023      	b.n	8018648 <_dtoa_r+0xd8>
 8018600:	4b93      	ldr	r3, [pc, #588]	; (8018850 <_dtoa_r+0x2e0>)
 8018602:	9303      	str	r3, [sp, #12]
 8018604:	3308      	adds	r3, #8
 8018606:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018608:	6013      	str	r3, [r2, #0]
 801860a:	9803      	ldr	r0, [sp, #12]
 801860c:	b019      	add	sp, #100	; 0x64
 801860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018612:	4b8e      	ldr	r3, [pc, #568]	; (801884c <_dtoa_r+0x2dc>)
 8018614:	9303      	str	r3, [sp, #12]
 8018616:	3303      	adds	r3, #3
 8018618:	e7f5      	b.n	8018606 <_dtoa_r+0x96>
 801861a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801861e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8018622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018626:	2200      	movs	r2, #0
 8018628:	2300      	movs	r3, #0
 801862a:	f7e8 fa25 	bl	8000a78 <__aeabi_dcmpeq>
 801862e:	4680      	mov	r8, r0
 8018630:	b160      	cbz	r0, 801864c <_dtoa_r+0xdc>
 8018632:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018634:	2301      	movs	r3, #1
 8018636:	6013      	str	r3, [r2, #0]
 8018638:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801863a:	2b00      	cmp	r3, #0
 801863c:	f000 8560 	beq.w	8019100 <_dtoa_r+0xb90>
 8018640:	4b84      	ldr	r3, [pc, #528]	; (8018854 <_dtoa_r+0x2e4>)
 8018642:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8018644:	6013      	str	r3, [r2, #0]
 8018646:	3b01      	subs	r3, #1
 8018648:	9303      	str	r3, [sp, #12]
 801864a:	e7de      	b.n	801860a <_dtoa_r+0x9a>
 801864c:	ab16      	add	r3, sp, #88	; 0x58
 801864e:	9301      	str	r3, [sp, #4]
 8018650:	ab17      	add	r3, sp, #92	; 0x5c
 8018652:	9300      	str	r3, [sp, #0]
 8018654:	4628      	mov	r0, r5
 8018656:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801865a:	f001 f985 	bl	8019968 <__d2b>
 801865e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8018662:	4682      	mov	sl, r0
 8018664:	2c00      	cmp	r4, #0
 8018666:	d07d      	beq.n	8018764 <_dtoa_r+0x1f4>
 8018668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801866a:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 801866e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018672:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018676:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801867a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801867e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8018682:	4619      	mov	r1, r3
 8018684:	2200      	movs	r2, #0
 8018686:	4b74      	ldr	r3, [pc, #464]	; (8018858 <_dtoa_r+0x2e8>)
 8018688:	f7e7 fdd6 	bl	8000238 <__aeabi_dsub>
 801868c:	a366      	add	r3, pc, #408	; (adr r3, 8018828 <_dtoa_r+0x2b8>)
 801868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018692:	f7e7 ff89 	bl	80005a8 <__aeabi_dmul>
 8018696:	a366      	add	r3, pc, #408	; (adr r3, 8018830 <_dtoa_r+0x2c0>)
 8018698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801869c:	f7e7 fdce 	bl	800023c <__adddf3>
 80186a0:	4606      	mov	r6, r0
 80186a2:	4620      	mov	r0, r4
 80186a4:	460f      	mov	r7, r1
 80186a6:	f7e7 ff15 	bl	80004d4 <__aeabi_i2d>
 80186aa:	a363      	add	r3, pc, #396	; (adr r3, 8018838 <_dtoa_r+0x2c8>)
 80186ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186b0:	f7e7 ff7a 	bl	80005a8 <__aeabi_dmul>
 80186b4:	4602      	mov	r2, r0
 80186b6:	460b      	mov	r3, r1
 80186b8:	4630      	mov	r0, r6
 80186ba:	4639      	mov	r1, r7
 80186bc:	f7e7 fdbe 	bl	800023c <__adddf3>
 80186c0:	4606      	mov	r6, r0
 80186c2:	460f      	mov	r7, r1
 80186c4:	f7e8 fa20 	bl	8000b08 <__aeabi_d2iz>
 80186c8:	2200      	movs	r2, #0
 80186ca:	4683      	mov	fp, r0
 80186cc:	2300      	movs	r3, #0
 80186ce:	4630      	mov	r0, r6
 80186d0:	4639      	mov	r1, r7
 80186d2:	f7e8 f9db 	bl	8000a8c <__aeabi_dcmplt>
 80186d6:	b148      	cbz	r0, 80186ec <_dtoa_r+0x17c>
 80186d8:	4658      	mov	r0, fp
 80186da:	f7e7 fefb 	bl	80004d4 <__aeabi_i2d>
 80186de:	4632      	mov	r2, r6
 80186e0:	463b      	mov	r3, r7
 80186e2:	f7e8 f9c9 	bl	8000a78 <__aeabi_dcmpeq>
 80186e6:	b908      	cbnz	r0, 80186ec <_dtoa_r+0x17c>
 80186e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80186ec:	f1bb 0f16 	cmp.w	fp, #22
 80186f0:	d856      	bhi.n	80187a0 <_dtoa_r+0x230>
 80186f2:	4b5a      	ldr	r3, [pc, #360]	; (801885c <_dtoa_r+0x2ec>)
 80186f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80186f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80186fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018700:	f7e8 f9c4 	bl	8000a8c <__aeabi_dcmplt>
 8018704:	2800      	cmp	r0, #0
 8018706:	d04d      	beq.n	80187a4 <_dtoa_r+0x234>
 8018708:	f10b 3bff 	add.w	fp, fp, #4294967295
 801870c:	2300      	movs	r3, #0
 801870e:	930f      	str	r3, [sp, #60]	; 0x3c
 8018710:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018712:	1b1b      	subs	r3, r3, r4
 8018714:	1e5a      	subs	r2, r3, #1
 8018716:	bf44      	itt	mi
 8018718:	f1c3 0901 	rsbmi	r9, r3, #1
 801871c:	2300      	movmi	r3, #0
 801871e:	9209      	str	r2, [sp, #36]	; 0x24
 8018720:	bf54      	ite	pl
 8018722:	f04f 0900 	movpl.w	r9, #0
 8018726:	9309      	strmi	r3, [sp, #36]	; 0x24
 8018728:	f1bb 0f00 	cmp.w	fp, #0
 801872c:	db3c      	blt.n	80187a8 <_dtoa_r+0x238>
 801872e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018730:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8018734:	445b      	add	r3, fp
 8018736:	9309      	str	r3, [sp, #36]	; 0x24
 8018738:	2300      	movs	r3, #0
 801873a:	930a      	str	r3, [sp, #40]	; 0x28
 801873c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801873e:	2b09      	cmp	r3, #9
 8018740:	d866      	bhi.n	8018810 <_dtoa_r+0x2a0>
 8018742:	2b05      	cmp	r3, #5
 8018744:	bfc4      	itt	gt
 8018746:	3b04      	subgt	r3, #4
 8018748:	9322      	strgt	r3, [sp, #136]	; 0x88
 801874a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801874c:	f1a3 0302 	sub.w	r3, r3, #2
 8018750:	bfcc      	ite	gt
 8018752:	2400      	movgt	r4, #0
 8018754:	2401      	movle	r4, #1
 8018756:	2b03      	cmp	r3, #3
 8018758:	f200 8084 	bhi.w	8018864 <_dtoa_r+0x2f4>
 801875c:	e8df f003 	tbb	[pc, r3]
 8018760:	5637392c 	.word	0x5637392c
 8018764:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8018768:	441c      	add	r4, r3
 801876a:	f204 4332 	addw	r3, r4, #1074	; 0x432
 801876e:	2b20      	cmp	r3, #32
 8018770:	bfc1      	itttt	gt
 8018772:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018776:	fa09 f903 	lslgt.w	r9, r9, r3
 801877a:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 801877e:	fa26 f303 	lsrgt.w	r3, r6, r3
 8018782:	bfd6      	itet	le
 8018784:	f1c3 0320 	rsble	r3, r3, #32
 8018788:	ea49 0003 	orrgt.w	r0, r9, r3
 801878c:	fa06 f003 	lslle.w	r0, r6, r3
 8018790:	f7e7 fe90 	bl	80004b4 <__aeabi_ui2d>
 8018794:	2201      	movs	r2, #1
 8018796:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 801879a:	3c01      	subs	r4, #1
 801879c:	9213      	str	r2, [sp, #76]	; 0x4c
 801879e:	e770      	b.n	8018682 <_dtoa_r+0x112>
 80187a0:	2301      	movs	r3, #1
 80187a2:	e7b4      	b.n	801870e <_dtoa_r+0x19e>
 80187a4:	900f      	str	r0, [sp, #60]	; 0x3c
 80187a6:	e7b3      	b.n	8018710 <_dtoa_r+0x1a0>
 80187a8:	f1cb 0300 	rsb	r3, fp, #0
 80187ac:	930a      	str	r3, [sp, #40]	; 0x28
 80187ae:	2300      	movs	r3, #0
 80187b0:	eba9 090b 	sub.w	r9, r9, fp
 80187b4:	930e      	str	r3, [sp, #56]	; 0x38
 80187b6:	e7c1      	b.n	801873c <_dtoa_r+0x1cc>
 80187b8:	2300      	movs	r3, #0
 80187ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80187bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80187be:	2b00      	cmp	r3, #0
 80187c0:	dc53      	bgt.n	801886a <_dtoa_r+0x2fa>
 80187c2:	2301      	movs	r3, #1
 80187c4:	9306      	str	r3, [sp, #24]
 80187c6:	9308      	str	r3, [sp, #32]
 80187c8:	461a      	mov	r2, r3
 80187ca:	9223      	str	r2, [sp, #140]	; 0x8c
 80187cc:	e00b      	b.n	80187e6 <_dtoa_r+0x276>
 80187ce:	2301      	movs	r3, #1
 80187d0:	e7f3      	b.n	80187ba <_dtoa_r+0x24a>
 80187d2:	2300      	movs	r3, #0
 80187d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80187d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80187d8:	445b      	add	r3, fp
 80187da:	9306      	str	r3, [sp, #24]
 80187dc:	3301      	adds	r3, #1
 80187de:	2b01      	cmp	r3, #1
 80187e0:	9308      	str	r3, [sp, #32]
 80187e2:	bfb8      	it	lt
 80187e4:	2301      	movlt	r3, #1
 80187e6:	69e8      	ldr	r0, [r5, #28]
 80187e8:	2100      	movs	r1, #0
 80187ea:	2204      	movs	r2, #4
 80187ec:	f102 0614 	add.w	r6, r2, #20
 80187f0:	429e      	cmp	r6, r3
 80187f2:	d93e      	bls.n	8018872 <_dtoa_r+0x302>
 80187f4:	6041      	str	r1, [r0, #4]
 80187f6:	4628      	mov	r0, r5
 80187f8:	f000 fce4 	bl	80191c4 <_Balloc>
 80187fc:	9003      	str	r0, [sp, #12]
 80187fe:	2800      	cmp	r0, #0
 8018800:	d13a      	bne.n	8018878 <_dtoa_r+0x308>
 8018802:	4b17      	ldr	r3, [pc, #92]	; (8018860 <_dtoa_r+0x2f0>)
 8018804:	4602      	mov	r2, r0
 8018806:	f240 11af 	movw	r1, #431	; 0x1af
 801880a:	e6c5      	b.n	8018598 <_dtoa_r+0x28>
 801880c:	2301      	movs	r3, #1
 801880e:	e7e1      	b.n	80187d4 <_dtoa_r+0x264>
 8018810:	2401      	movs	r4, #1
 8018812:	2300      	movs	r3, #0
 8018814:	9322      	str	r3, [sp, #136]	; 0x88
 8018816:	940b      	str	r4, [sp, #44]	; 0x2c
 8018818:	f04f 33ff 	mov.w	r3, #4294967295
 801881c:	9306      	str	r3, [sp, #24]
 801881e:	9308      	str	r3, [sp, #32]
 8018820:	2200      	movs	r2, #0
 8018822:	2312      	movs	r3, #18
 8018824:	e7d1      	b.n	80187ca <_dtoa_r+0x25a>
 8018826:	bf00      	nop
 8018828:	636f4361 	.word	0x636f4361
 801882c:	3fd287a7 	.word	0x3fd287a7
 8018830:	8b60c8b3 	.word	0x8b60c8b3
 8018834:	3fc68a28 	.word	0x3fc68a28
 8018838:	509f79fb 	.word	0x509f79fb
 801883c:	3fd34413 	.word	0x3fd34413
 8018840:	0801ebaf 	.word	0x0801ebaf
 8018844:	0801ebc6 	.word	0x0801ebc6
 8018848:	7ff00000 	.word	0x7ff00000
 801884c:	0801ebab 	.word	0x0801ebab
 8018850:	0801eba2 	.word	0x0801eba2
 8018854:	0801ef01 	.word	0x0801ef01
 8018858:	3ff80000 	.word	0x3ff80000
 801885c:	0801ecb0 	.word	0x0801ecb0
 8018860:	0801ec1e 	.word	0x0801ec1e
 8018864:	2301      	movs	r3, #1
 8018866:	930b      	str	r3, [sp, #44]	; 0x2c
 8018868:	e7d6      	b.n	8018818 <_dtoa_r+0x2a8>
 801886a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801886c:	9306      	str	r3, [sp, #24]
 801886e:	9308      	str	r3, [sp, #32]
 8018870:	e7b9      	b.n	80187e6 <_dtoa_r+0x276>
 8018872:	3101      	adds	r1, #1
 8018874:	0052      	lsls	r2, r2, #1
 8018876:	e7b9      	b.n	80187ec <_dtoa_r+0x27c>
 8018878:	69eb      	ldr	r3, [r5, #28]
 801887a:	9a03      	ldr	r2, [sp, #12]
 801887c:	601a      	str	r2, [r3, #0]
 801887e:	9b08      	ldr	r3, [sp, #32]
 8018880:	2b0e      	cmp	r3, #14
 8018882:	f200 80a8 	bhi.w	80189d6 <_dtoa_r+0x466>
 8018886:	2c00      	cmp	r4, #0
 8018888:	f000 80a5 	beq.w	80189d6 <_dtoa_r+0x466>
 801888c:	f1bb 0f00 	cmp.w	fp, #0
 8018890:	dd34      	ble.n	80188fc <_dtoa_r+0x38c>
 8018892:	4b9a      	ldr	r3, [pc, #616]	; (8018afc <_dtoa_r+0x58c>)
 8018894:	f00b 020f 	and.w	r2, fp, #15
 8018898:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801889c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80188a0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80188a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80188a8:	ea4f 142b 	mov.w	r4, fp, asr #4
 80188ac:	d016      	beq.n	80188dc <_dtoa_r+0x36c>
 80188ae:	4b94      	ldr	r3, [pc, #592]	; (8018b00 <_dtoa_r+0x590>)
 80188b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80188b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80188b8:	f7e7 ffa0 	bl	80007fc <__aeabi_ddiv>
 80188bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80188c0:	f004 040f 	and.w	r4, r4, #15
 80188c4:	2703      	movs	r7, #3
 80188c6:	4e8e      	ldr	r6, [pc, #568]	; (8018b00 <_dtoa_r+0x590>)
 80188c8:	b954      	cbnz	r4, 80188e0 <_dtoa_r+0x370>
 80188ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80188ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80188d2:	f7e7 ff93 	bl	80007fc <__aeabi_ddiv>
 80188d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80188da:	e029      	b.n	8018930 <_dtoa_r+0x3c0>
 80188dc:	2702      	movs	r7, #2
 80188de:	e7f2      	b.n	80188c6 <_dtoa_r+0x356>
 80188e0:	07e1      	lsls	r1, r4, #31
 80188e2:	d508      	bpl.n	80188f6 <_dtoa_r+0x386>
 80188e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80188e8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80188ec:	f7e7 fe5c 	bl	80005a8 <__aeabi_dmul>
 80188f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80188f4:	3701      	adds	r7, #1
 80188f6:	1064      	asrs	r4, r4, #1
 80188f8:	3608      	adds	r6, #8
 80188fa:	e7e5      	b.n	80188c8 <_dtoa_r+0x358>
 80188fc:	f000 80a5 	beq.w	8018a4a <_dtoa_r+0x4da>
 8018900:	f1cb 0400 	rsb	r4, fp, #0
 8018904:	4b7d      	ldr	r3, [pc, #500]	; (8018afc <_dtoa_r+0x58c>)
 8018906:	4e7e      	ldr	r6, [pc, #504]	; (8018b00 <_dtoa_r+0x590>)
 8018908:	f004 020f 	and.w	r2, r4, #15
 801890c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018914:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8018918:	f7e7 fe46 	bl	80005a8 <__aeabi_dmul>
 801891c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018920:	1124      	asrs	r4, r4, #4
 8018922:	2300      	movs	r3, #0
 8018924:	2702      	movs	r7, #2
 8018926:	2c00      	cmp	r4, #0
 8018928:	f040 8084 	bne.w	8018a34 <_dtoa_r+0x4c4>
 801892c:	2b00      	cmp	r3, #0
 801892e:	d1d2      	bne.n	80188d6 <_dtoa_r+0x366>
 8018930:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8018934:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8018938:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801893a:	2b00      	cmp	r3, #0
 801893c:	f000 8087 	beq.w	8018a4e <_dtoa_r+0x4de>
 8018940:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018944:	4b6f      	ldr	r3, [pc, #444]	; (8018b04 <_dtoa_r+0x594>)
 8018946:	2200      	movs	r2, #0
 8018948:	f7e8 f8a0 	bl	8000a8c <__aeabi_dcmplt>
 801894c:	2800      	cmp	r0, #0
 801894e:	d07e      	beq.n	8018a4e <_dtoa_r+0x4de>
 8018950:	9b08      	ldr	r3, [sp, #32]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d07b      	beq.n	8018a4e <_dtoa_r+0x4de>
 8018956:	9b06      	ldr	r3, [sp, #24]
 8018958:	2b00      	cmp	r3, #0
 801895a:	dd38      	ble.n	80189ce <_dtoa_r+0x45e>
 801895c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018960:	4b69      	ldr	r3, [pc, #420]	; (8018b08 <_dtoa_r+0x598>)
 8018962:	2200      	movs	r2, #0
 8018964:	f7e7 fe20 	bl	80005a8 <__aeabi_dmul>
 8018968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801896c:	9c06      	ldr	r4, [sp, #24]
 801896e:	f10b 38ff 	add.w	r8, fp, #4294967295
 8018972:	3701      	adds	r7, #1
 8018974:	4638      	mov	r0, r7
 8018976:	f7e7 fdad 	bl	80004d4 <__aeabi_i2d>
 801897a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801897e:	f7e7 fe13 	bl	80005a8 <__aeabi_dmul>
 8018982:	4b62      	ldr	r3, [pc, #392]	; (8018b0c <_dtoa_r+0x59c>)
 8018984:	2200      	movs	r2, #0
 8018986:	f7e7 fc59 	bl	800023c <__adddf3>
 801898a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801898e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018992:	9611      	str	r6, [sp, #68]	; 0x44
 8018994:	2c00      	cmp	r4, #0
 8018996:	d15d      	bne.n	8018a54 <_dtoa_r+0x4e4>
 8018998:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801899c:	4b5c      	ldr	r3, [pc, #368]	; (8018b10 <_dtoa_r+0x5a0>)
 801899e:	2200      	movs	r2, #0
 80189a0:	f7e7 fc4a 	bl	8000238 <__aeabi_dsub>
 80189a4:	4602      	mov	r2, r0
 80189a6:	460b      	mov	r3, r1
 80189a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80189ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80189ae:	4633      	mov	r3, r6
 80189b0:	f7e8 f88a 	bl	8000ac8 <__aeabi_dcmpgt>
 80189b4:	2800      	cmp	r0, #0
 80189b6:	f040 8295 	bne.w	8018ee4 <_dtoa_r+0x974>
 80189ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80189be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80189c0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80189c4:	f7e8 f862 	bl	8000a8c <__aeabi_dcmplt>
 80189c8:	2800      	cmp	r0, #0
 80189ca:	f040 8289 	bne.w	8018ee0 <_dtoa_r+0x970>
 80189ce:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80189d2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80189d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80189d8:	2b00      	cmp	r3, #0
 80189da:	f2c0 8151 	blt.w	8018c80 <_dtoa_r+0x710>
 80189de:	f1bb 0f0e 	cmp.w	fp, #14
 80189e2:	f300 814d 	bgt.w	8018c80 <_dtoa_r+0x710>
 80189e6:	4b45      	ldr	r3, [pc, #276]	; (8018afc <_dtoa_r+0x58c>)
 80189e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80189ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80189f0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80189f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	f280 80da 	bge.w	8018bb0 <_dtoa_r+0x640>
 80189fc:	9b08      	ldr	r3, [sp, #32]
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	f300 80d6 	bgt.w	8018bb0 <_dtoa_r+0x640>
 8018a04:	f040 826b 	bne.w	8018ede <_dtoa_r+0x96e>
 8018a08:	4b41      	ldr	r3, [pc, #260]	; (8018b10 <_dtoa_r+0x5a0>)
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018a10:	f7e7 fdca 	bl	80005a8 <__aeabi_dmul>
 8018a14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018a18:	f7e8 f84c 	bl	8000ab4 <__aeabi_dcmpge>
 8018a1c:	9c08      	ldr	r4, [sp, #32]
 8018a1e:	4626      	mov	r6, r4
 8018a20:	2800      	cmp	r0, #0
 8018a22:	f040 8241 	bne.w	8018ea8 <_dtoa_r+0x938>
 8018a26:	9f03      	ldr	r7, [sp, #12]
 8018a28:	2331      	movs	r3, #49	; 0x31
 8018a2a:	f807 3b01 	strb.w	r3, [r7], #1
 8018a2e:	f10b 0b01 	add.w	fp, fp, #1
 8018a32:	e23d      	b.n	8018eb0 <_dtoa_r+0x940>
 8018a34:	07e2      	lsls	r2, r4, #31
 8018a36:	d505      	bpl.n	8018a44 <_dtoa_r+0x4d4>
 8018a38:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018a3c:	f7e7 fdb4 	bl	80005a8 <__aeabi_dmul>
 8018a40:	3701      	adds	r7, #1
 8018a42:	2301      	movs	r3, #1
 8018a44:	1064      	asrs	r4, r4, #1
 8018a46:	3608      	adds	r6, #8
 8018a48:	e76d      	b.n	8018926 <_dtoa_r+0x3b6>
 8018a4a:	2702      	movs	r7, #2
 8018a4c:	e770      	b.n	8018930 <_dtoa_r+0x3c0>
 8018a4e:	9c08      	ldr	r4, [sp, #32]
 8018a50:	46d8      	mov	r8, fp
 8018a52:	e78f      	b.n	8018974 <_dtoa_r+0x404>
 8018a54:	9903      	ldr	r1, [sp, #12]
 8018a56:	4b29      	ldr	r3, [pc, #164]	; (8018afc <_dtoa_r+0x58c>)
 8018a58:	4421      	add	r1, r4
 8018a5a:	9112      	str	r1, [sp, #72]	; 0x48
 8018a5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018a5e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018a62:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8018a66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018a6a:	2900      	cmp	r1, #0
 8018a6c:	d054      	beq.n	8018b18 <_dtoa_r+0x5a8>
 8018a6e:	4929      	ldr	r1, [pc, #164]	; (8018b14 <_dtoa_r+0x5a4>)
 8018a70:	2000      	movs	r0, #0
 8018a72:	f7e7 fec3 	bl	80007fc <__aeabi_ddiv>
 8018a76:	463b      	mov	r3, r7
 8018a78:	4632      	mov	r2, r6
 8018a7a:	f7e7 fbdd 	bl	8000238 <__aeabi_dsub>
 8018a7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018a82:	9f03      	ldr	r7, [sp, #12]
 8018a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a88:	f7e8 f83e 	bl	8000b08 <__aeabi_d2iz>
 8018a8c:	4604      	mov	r4, r0
 8018a8e:	f7e7 fd21 	bl	80004d4 <__aeabi_i2d>
 8018a92:	4602      	mov	r2, r0
 8018a94:	460b      	mov	r3, r1
 8018a96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018a9a:	f7e7 fbcd 	bl	8000238 <__aeabi_dsub>
 8018a9e:	3430      	adds	r4, #48	; 0x30
 8018aa0:	4602      	mov	r2, r0
 8018aa2:	460b      	mov	r3, r1
 8018aa4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018aa8:	f807 4b01 	strb.w	r4, [r7], #1
 8018aac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018ab0:	f7e7 ffec 	bl	8000a8c <__aeabi_dcmplt>
 8018ab4:	2800      	cmp	r0, #0
 8018ab6:	d173      	bne.n	8018ba0 <_dtoa_r+0x630>
 8018ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018abc:	4911      	ldr	r1, [pc, #68]	; (8018b04 <_dtoa_r+0x594>)
 8018abe:	2000      	movs	r0, #0
 8018ac0:	f7e7 fbba 	bl	8000238 <__aeabi_dsub>
 8018ac4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018ac8:	f7e7 ffe0 	bl	8000a8c <__aeabi_dcmplt>
 8018acc:	2800      	cmp	r0, #0
 8018ace:	f040 80b6 	bne.w	8018c3e <_dtoa_r+0x6ce>
 8018ad2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018ad4:	429f      	cmp	r7, r3
 8018ad6:	f43f af7a 	beq.w	80189ce <_dtoa_r+0x45e>
 8018ada:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018ade:	4b0a      	ldr	r3, [pc, #40]	; (8018b08 <_dtoa_r+0x598>)
 8018ae0:	2200      	movs	r2, #0
 8018ae2:	f7e7 fd61 	bl	80005a8 <__aeabi_dmul>
 8018ae6:	4b08      	ldr	r3, [pc, #32]	; (8018b08 <_dtoa_r+0x598>)
 8018ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018aec:	2200      	movs	r2, #0
 8018aee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018af2:	f7e7 fd59 	bl	80005a8 <__aeabi_dmul>
 8018af6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018afa:	e7c3      	b.n	8018a84 <_dtoa_r+0x514>
 8018afc:	0801ecb0 	.word	0x0801ecb0
 8018b00:	0801ec88 	.word	0x0801ec88
 8018b04:	3ff00000 	.word	0x3ff00000
 8018b08:	40240000 	.word	0x40240000
 8018b0c:	401c0000 	.word	0x401c0000
 8018b10:	40140000 	.word	0x40140000
 8018b14:	3fe00000 	.word	0x3fe00000
 8018b18:	4630      	mov	r0, r6
 8018b1a:	4639      	mov	r1, r7
 8018b1c:	f7e7 fd44 	bl	80005a8 <__aeabi_dmul>
 8018b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8018b24:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b26:	9c03      	ldr	r4, [sp, #12]
 8018b28:	9314      	str	r3, [sp, #80]	; 0x50
 8018b2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b2e:	f7e7 ffeb 	bl	8000b08 <__aeabi_d2iz>
 8018b32:	9015      	str	r0, [sp, #84]	; 0x54
 8018b34:	f7e7 fcce 	bl	80004d4 <__aeabi_i2d>
 8018b38:	4602      	mov	r2, r0
 8018b3a:	460b      	mov	r3, r1
 8018b3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8018b40:	f7e7 fb7a 	bl	8000238 <__aeabi_dsub>
 8018b44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b46:	3330      	adds	r3, #48	; 0x30
 8018b48:	f804 3b01 	strb.w	r3, [r4], #1
 8018b4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018b4e:	429c      	cmp	r4, r3
 8018b50:	4606      	mov	r6, r0
 8018b52:	460f      	mov	r7, r1
 8018b54:	f04f 0200 	mov.w	r2, #0
 8018b58:	d124      	bne.n	8018ba4 <_dtoa_r+0x634>
 8018b5a:	4bb0      	ldr	r3, [pc, #704]	; (8018e1c <_dtoa_r+0x8ac>)
 8018b5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8018b60:	f7e7 fb6c 	bl	800023c <__adddf3>
 8018b64:	4602      	mov	r2, r0
 8018b66:	460b      	mov	r3, r1
 8018b68:	4630      	mov	r0, r6
 8018b6a:	4639      	mov	r1, r7
 8018b6c:	f7e7 ffac 	bl	8000ac8 <__aeabi_dcmpgt>
 8018b70:	2800      	cmp	r0, #0
 8018b72:	d163      	bne.n	8018c3c <_dtoa_r+0x6cc>
 8018b74:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018b78:	49a8      	ldr	r1, [pc, #672]	; (8018e1c <_dtoa_r+0x8ac>)
 8018b7a:	2000      	movs	r0, #0
 8018b7c:	f7e7 fb5c 	bl	8000238 <__aeabi_dsub>
 8018b80:	4602      	mov	r2, r0
 8018b82:	460b      	mov	r3, r1
 8018b84:	4630      	mov	r0, r6
 8018b86:	4639      	mov	r1, r7
 8018b88:	f7e7 ff80 	bl	8000a8c <__aeabi_dcmplt>
 8018b8c:	2800      	cmp	r0, #0
 8018b8e:	f43f af1e 	beq.w	80189ce <_dtoa_r+0x45e>
 8018b92:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8018b94:	1e7b      	subs	r3, r7, #1
 8018b96:	9314      	str	r3, [sp, #80]	; 0x50
 8018b98:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8018b9c:	2b30      	cmp	r3, #48	; 0x30
 8018b9e:	d0f8      	beq.n	8018b92 <_dtoa_r+0x622>
 8018ba0:	46c3      	mov	fp, r8
 8018ba2:	e03b      	b.n	8018c1c <_dtoa_r+0x6ac>
 8018ba4:	4b9e      	ldr	r3, [pc, #632]	; (8018e20 <_dtoa_r+0x8b0>)
 8018ba6:	f7e7 fcff 	bl	80005a8 <__aeabi_dmul>
 8018baa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8018bae:	e7bc      	b.n	8018b2a <_dtoa_r+0x5ba>
 8018bb0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018bb4:	9f03      	ldr	r7, [sp, #12]
 8018bb6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018bba:	4640      	mov	r0, r8
 8018bbc:	4649      	mov	r1, r9
 8018bbe:	f7e7 fe1d 	bl	80007fc <__aeabi_ddiv>
 8018bc2:	f7e7 ffa1 	bl	8000b08 <__aeabi_d2iz>
 8018bc6:	4604      	mov	r4, r0
 8018bc8:	f7e7 fc84 	bl	80004d4 <__aeabi_i2d>
 8018bcc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018bd0:	f7e7 fcea 	bl	80005a8 <__aeabi_dmul>
 8018bd4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8018bd8:	4602      	mov	r2, r0
 8018bda:	460b      	mov	r3, r1
 8018bdc:	4640      	mov	r0, r8
 8018bde:	4649      	mov	r1, r9
 8018be0:	f7e7 fb2a 	bl	8000238 <__aeabi_dsub>
 8018be4:	f807 6b01 	strb.w	r6, [r7], #1
 8018be8:	9e03      	ldr	r6, [sp, #12]
 8018bea:	f8dd c020 	ldr.w	ip, [sp, #32]
 8018bee:	1bbe      	subs	r6, r7, r6
 8018bf0:	45b4      	cmp	ip, r6
 8018bf2:	4602      	mov	r2, r0
 8018bf4:	460b      	mov	r3, r1
 8018bf6:	d136      	bne.n	8018c66 <_dtoa_r+0x6f6>
 8018bf8:	f7e7 fb20 	bl	800023c <__adddf3>
 8018bfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c00:	4680      	mov	r8, r0
 8018c02:	4689      	mov	r9, r1
 8018c04:	f7e7 ff60 	bl	8000ac8 <__aeabi_dcmpgt>
 8018c08:	bb58      	cbnz	r0, 8018c62 <_dtoa_r+0x6f2>
 8018c0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c0e:	4640      	mov	r0, r8
 8018c10:	4649      	mov	r1, r9
 8018c12:	f7e7 ff31 	bl	8000a78 <__aeabi_dcmpeq>
 8018c16:	b108      	cbz	r0, 8018c1c <_dtoa_r+0x6ac>
 8018c18:	07e3      	lsls	r3, r4, #31
 8018c1a:	d422      	bmi.n	8018c62 <_dtoa_r+0x6f2>
 8018c1c:	4651      	mov	r1, sl
 8018c1e:	4628      	mov	r0, r5
 8018c20:	f000 fb10 	bl	8019244 <_Bfree>
 8018c24:	2300      	movs	r3, #0
 8018c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8018c28:	703b      	strb	r3, [r7, #0]
 8018c2a:	f10b 0301 	add.w	r3, fp, #1
 8018c2e:	6013      	str	r3, [r2, #0]
 8018c30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	f43f ace9 	beq.w	801860a <_dtoa_r+0x9a>
 8018c38:	601f      	str	r7, [r3, #0]
 8018c3a:	e4e6      	b.n	801860a <_dtoa_r+0x9a>
 8018c3c:	4627      	mov	r7, r4
 8018c3e:	463b      	mov	r3, r7
 8018c40:	461f      	mov	r7, r3
 8018c42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018c46:	2a39      	cmp	r2, #57	; 0x39
 8018c48:	d107      	bne.n	8018c5a <_dtoa_r+0x6ea>
 8018c4a:	9a03      	ldr	r2, [sp, #12]
 8018c4c:	429a      	cmp	r2, r3
 8018c4e:	d1f7      	bne.n	8018c40 <_dtoa_r+0x6d0>
 8018c50:	9903      	ldr	r1, [sp, #12]
 8018c52:	2230      	movs	r2, #48	; 0x30
 8018c54:	f108 0801 	add.w	r8, r8, #1
 8018c58:	700a      	strb	r2, [r1, #0]
 8018c5a:	781a      	ldrb	r2, [r3, #0]
 8018c5c:	3201      	adds	r2, #1
 8018c5e:	701a      	strb	r2, [r3, #0]
 8018c60:	e79e      	b.n	8018ba0 <_dtoa_r+0x630>
 8018c62:	46d8      	mov	r8, fp
 8018c64:	e7eb      	b.n	8018c3e <_dtoa_r+0x6ce>
 8018c66:	4b6e      	ldr	r3, [pc, #440]	; (8018e20 <_dtoa_r+0x8b0>)
 8018c68:	2200      	movs	r2, #0
 8018c6a:	f7e7 fc9d 	bl	80005a8 <__aeabi_dmul>
 8018c6e:	2200      	movs	r2, #0
 8018c70:	2300      	movs	r3, #0
 8018c72:	4680      	mov	r8, r0
 8018c74:	4689      	mov	r9, r1
 8018c76:	f7e7 feff 	bl	8000a78 <__aeabi_dcmpeq>
 8018c7a:	2800      	cmp	r0, #0
 8018c7c:	d09b      	beq.n	8018bb6 <_dtoa_r+0x646>
 8018c7e:	e7cd      	b.n	8018c1c <_dtoa_r+0x6ac>
 8018c80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018c82:	2a00      	cmp	r2, #0
 8018c84:	f000 80c4 	beq.w	8018e10 <_dtoa_r+0x8a0>
 8018c88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8018c8a:	2a01      	cmp	r2, #1
 8018c8c:	f300 80a8 	bgt.w	8018de0 <_dtoa_r+0x870>
 8018c90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018c92:	2a00      	cmp	r2, #0
 8018c94:	f000 80a0 	beq.w	8018dd8 <_dtoa_r+0x868>
 8018c98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018c9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018c9e:	464f      	mov	r7, r9
 8018ca0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ca2:	2101      	movs	r1, #1
 8018ca4:	441a      	add	r2, r3
 8018ca6:	4628      	mov	r0, r5
 8018ca8:	4499      	add	r9, r3
 8018caa:	9209      	str	r2, [sp, #36]	; 0x24
 8018cac:	f000 fbca 	bl	8019444 <__i2b>
 8018cb0:	4606      	mov	r6, r0
 8018cb2:	b15f      	cbz	r7, 8018ccc <_dtoa_r+0x75c>
 8018cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018cb6:	2b00      	cmp	r3, #0
 8018cb8:	dd08      	ble.n	8018ccc <_dtoa_r+0x75c>
 8018cba:	42bb      	cmp	r3, r7
 8018cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018cbe:	bfa8      	it	ge
 8018cc0:	463b      	movge	r3, r7
 8018cc2:	eba9 0903 	sub.w	r9, r9, r3
 8018cc6:	1aff      	subs	r7, r7, r3
 8018cc8:	1ad3      	subs	r3, r2, r3
 8018cca:	9309      	str	r3, [sp, #36]	; 0x24
 8018ccc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018cce:	b1f3      	cbz	r3, 8018d0e <_dtoa_r+0x79e>
 8018cd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	f000 80a0 	beq.w	8018e18 <_dtoa_r+0x8a8>
 8018cd8:	2c00      	cmp	r4, #0
 8018cda:	dd10      	ble.n	8018cfe <_dtoa_r+0x78e>
 8018cdc:	4631      	mov	r1, r6
 8018cde:	4622      	mov	r2, r4
 8018ce0:	4628      	mov	r0, r5
 8018ce2:	f000 fc6f 	bl	80195c4 <__pow5mult>
 8018ce6:	4652      	mov	r2, sl
 8018ce8:	4601      	mov	r1, r0
 8018cea:	4606      	mov	r6, r0
 8018cec:	4628      	mov	r0, r5
 8018cee:	f000 fbbf 	bl	8019470 <__multiply>
 8018cf2:	4651      	mov	r1, sl
 8018cf4:	4680      	mov	r8, r0
 8018cf6:	4628      	mov	r0, r5
 8018cf8:	f000 faa4 	bl	8019244 <_Bfree>
 8018cfc:	46c2      	mov	sl, r8
 8018cfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018d00:	1b1a      	subs	r2, r3, r4
 8018d02:	d004      	beq.n	8018d0e <_dtoa_r+0x79e>
 8018d04:	4651      	mov	r1, sl
 8018d06:	4628      	mov	r0, r5
 8018d08:	f000 fc5c 	bl	80195c4 <__pow5mult>
 8018d0c:	4682      	mov	sl, r0
 8018d0e:	2101      	movs	r1, #1
 8018d10:	4628      	mov	r0, r5
 8018d12:	f000 fb97 	bl	8019444 <__i2b>
 8018d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018d18:	2b00      	cmp	r3, #0
 8018d1a:	4604      	mov	r4, r0
 8018d1c:	f340 8082 	ble.w	8018e24 <_dtoa_r+0x8b4>
 8018d20:	461a      	mov	r2, r3
 8018d22:	4601      	mov	r1, r0
 8018d24:	4628      	mov	r0, r5
 8018d26:	f000 fc4d 	bl	80195c4 <__pow5mult>
 8018d2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018d2c:	2b01      	cmp	r3, #1
 8018d2e:	4604      	mov	r4, r0
 8018d30:	dd7b      	ble.n	8018e2a <_dtoa_r+0x8ba>
 8018d32:	f04f 0800 	mov.w	r8, #0
 8018d36:	6923      	ldr	r3, [r4, #16]
 8018d38:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018d3c:	6918      	ldr	r0, [r3, #16]
 8018d3e:	f000 fb33 	bl	80193a8 <__hi0bits>
 8018d42:	f1c0 0020 	rsb	r0, r0, #32
 8018d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d48:	4418      	add	r0, r3
 8018d4a:	f010 001f 	ands.w	r0, r0, #31
 8018d4e:	f000 8092 	beq.w	8018e76 <_dtoa_r+0x906>
 8018d52:	f1c0 0320 	rsb	r3, r0, #32
 8018d56:	2b04      	cmp	r3, #4
 8018d58:	f340 8085 	ble.w	8018e66 <_dtoa_r+0x8f6>
 8018d5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d5e:	f1c0 001c 	rsb	r0, r0, #28
 8018d62:	4403      	add	r3, r0
 8018d64:	4481      	add	r9, r0
 8018d66:	4407      	add	r7, r0
 8018d68:	9309      	str	r3, [sp, #36]	; 0x24
 8018d6a:	f1b9 0f00 	cmp.w	r9, #0
 8018d6e:	dd05      	ble.n	8018d7c <_dtoa_r+0x80c>
 8018d70:	4651      	mov	r1, sl
 8018d72:	464a      	mov	r2, r9
 8018d74:	4628      	mov	r0, r5
 8018d76:	f000 fc7f 	bl	8019678 <__lshift>
 8018d7a:	4682      	mov	sl, r0
 8018d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	dd05      	ble.n	8018d8e <_dtoa_r+0x81e>
 8018d82:	4621      	mov	r1, r4
 8018d84:	461a      	mov	r2, r3
 8018d86:	4628      	mov	r0, r5
 8018d88:	f000 fc76 	bl	8019678 <__lshift>
 8018d8c:	4604      	mov	r4, r0
 8018d8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d072      	beq.n	8018e7a <_dtoa_r+0x90a>
 8018d94:	4621      	mov	r1, r4
 8018d96:	4650      	mov	r0, sl
 8018d98:	f000 fcda 	bl	8019750 <__mcmp>
 8018d9c:	2800      	cmp	r0, #0
 8018d9e:	da6c      	bge.n	8018e7a <_dtoa_r+0x90a>
 8018da0:	2300      	movs	r3, #0
 8018da2:	4651      	mov	r1, sl
 8018da4:	220a      	movs	r2, #10
 8018da6:	4628      	mov	r0, r5
 8018da8:	f000 fa6e 	bl	8019288 <__multadd>
 8018dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018dae:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018db2:	4682      	mov	sl, r0
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	f000 81ad 	beq.w	8019114 <_dtoa_r+0xba4>
 8018dba:	2300      	movs	r3, #0
 8018dbc:	4631      	mov	r1, r6
 8018dbe:	220a      	movs	r2, #10
 8018dc0:	4628      	mov	r0, r5
 8018dc2:	f000 fa61 	bl	8019288 <__multadd>
 8018dc6:	9b06      	ldr	r3, [sp, #24]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	4606      	mov	r6, r0
 8018dcc:	f300 8093 	bgt.w	8018ef6 <_dtoa_r+0x986>
 8018dd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018dd2:	2b02      	cmp	r3, #2
 8018dd4:	dc59      	bgt.n	8018e8a <_dtoa_r+0x91a>
 8018dd6:	e08e      	b.n	8018ef6 <_dtoa_r+0x986>
 8018dd8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8018dda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018dde:	e75d      	b.n	8018c9c <_dtoa_r+0x72c>
 8018de0:	9b08      	ldr	r3, [sp, #32]
 8018de2:	1e5c      	subs	r4, r3, #1
 8018de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018de6:	42a3      	cmp	r3, r4
 8018de8:	bfbf      	itttt	lt
 8018dea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8018dec:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8018dee:	940a      	strlt	r4, [sp, #40]	; 0x28
 8018df0:	1ae3      	sublt	r3, r4, r3
 8018df2:	bfb4      	ite	lt
 8018df4:	18d2      	addlt	r2, r2, r3
 8018df6:	1b1c      	subge	r4, r3, r4
 8018df8:	9b08      	ldr	r3, [sp, #32]
 8018dfa:	bfbc      	itt	lt
 8018dfc:	920e      	strlt	r2, [sp, #56]	; 0x38
 8018dfe:	2400      	movlt	r4, #0
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	bfb5      	itete	lt
 8018e04:	eba9 0703 	sublt.w	r7, r9, r3
 8018e08:	9b08      	ldrge	r3, [sp, #32]
 8018e0a:	2300      	movlt	r3, #0
 8018e0c:	464f      	movge	r7, r9
 8018e0e:	e747      	b.n	8018ca0 <_dtoa_r+0x730>
 8018e10:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018e12:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8018e14:	464f      	mov	r7, r9
 8018e16:	e74c      	b.n	8018cb2 <_dtoa_r+0x742>
 8018e18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e1a:	e773      	b.n	8018d04 <_dtoa_r+0x794>
 8018e1c:	3fe00000 	.word	0x3fe00000
 8018e20:	40240000 	.word	0x40240000
 8018e24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018e26:	2b01      	cmp	r3, #1
 8018e28:	dc18      	bgt.n	8018e5c <_dtoa_r+0x8ec>
 8018e2a:	9b04      	ldr	r3, [sp, #16]
 8018e2c:	b9b3      	cbnz	r3, 8018e5c <_dtoa_r+0x8ec>
 8018e2e:	9b05      	ldr	r3, [sp, #20]
 8018e30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018e34:	b993      	cbnz	r3, 8018e5c <_dtoa_r+0x8ec>
 8018e36:	9b05      	ldr	r3, [sp, #20]
 8018e38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018e3c:	0d1b      	lsrs	r3, r3, #20
 8018e3e:	051b      	lsls	r3, r3, #20
 8018e40:	b17b      	cbz	r3, 8018e62 <_dtoa_r+0x8f2>
 8018e42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e44:	3301      	adds	r3, #1
 8018e46:	f109 0901 	add.w	r9, r9, #1
 8018e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8018e4c:	f04f 0801 	mov.w	r8, #1
 8018e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	f47f af6f 	bne.w	8018d36 <_dtoa_r+0x7c6>
 8018e58:	2001      	movs	r0, #1
 8018e5a:	e774      	b.n	8018d46 <_dtoa_r+0x7d6>
 8018e5c:	f04f 0800 	mov.w	r8, #0
 8018e60:	e7f6      	b.n	8018e50 <_dtoa_r+0x8e0>
 8018e62:	4698      	mov	r8, r3
 8018e64:	e7f4      	b.n	8018e50 <_dtoa_r+0x8e0>
 8018e66:	d080      	beq.n	8018d6a <_dtoa_r+0x7fa>
 8018e68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018e6a:	331c      	adds	r3, #28
 8018e6c:	441a      	add	r2, r3
 8018e6e:	4499      	add	r9, r3
 8018e70:	441f      	add	r7, r3
 8018e72:	9209      	str	r2, [sp, #36]	; 0x24
 8018e74:	e779      	b.n	8018d6a <_dtoa_r+0x7fa>
 8018e76:	4603      	mov	r3, r0
 8018e78:	e7f6      	b.n	8018e68 <_dtoa_r+0x8f8>
 8018e7a:	9b08      	ldr	r3, [sp, #32]
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	dc34      	bgt.n	8018eea <_dtoa_r+0x97a>
 8018e80:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018e82:	2b02      	cmp	r3, #2
 8018e84:	dd31      	ble.n	8018eea <_dtoa_r+0x97a>
 8018e86:	9b08      	ldr	r3, [sp, #32]
 8018e88:	9306      	str	r3, [sp, #24]
 8018e8a:	9b06      	ldr	r3, [sp, #24]
 8018e8c:	b963      	cbnz	r3, 8018ea8 <_dtoa_r+0x938>
 8018e8e:	4621      	mov	r1, r4
 8018e90:	2205      	movs	r2, #5
 8018e92:	4628      	mov	r0, r5
 8018e94:	f000 f9f8 	bl	8019288 <__multadd>
 8018e98:	4601      	mov	r1, r0
 8018e9a:	4604      	mov	r4, r0
 8018e9c:	4650      	mov	r0, sl
 8018e9e:	f000 fc57 	bl	8019750 <__mcmp>
 8018ea2:	2800      	cmp	r0, #0
 8018ea4:	f73f adbf 	bgt.w	8018a26 <_dtoa_r+0x4b6>
 8018ea8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8018eaa:	9f03      	ldr	r7, [sp, #12]
 8018eac:	ea6f 0b03 	mvn.w	fp, r3
 8018eb0:	f04f 0800 	mov.w	r8, #0
 8018eb4:	4621      	mov	r1, r4
 8018eb6:	4628      	mov	r0, r5
 8018eb8:	f000 f9c4 	bl	8019244 <_Bfree>
 8018ebc:	2e00      	cmp	r6, #0
 8018ebe:	f43f aead 	beq.w	8018c1c <_dtoa_r+0x6ac>
 8018ec2:	f1b8 0f00 	cmp.w	r8, #0
 8018ec6:	d005      	beq.n	8018ed4 <_dtoa_r+0x964>
 8018ec8:	45b0      	cmp	r8, r6
 8018eca:	d003      	beq.n	8018ed4 <_dtoa_r+0x964>
 8018ecc:	4641      	mov	r1, r8
 8018ece:	4628      	mov	r0, r5
 8018ed0:	f000 f9b8 	bl	8019244 <_Bfree>
 8018ed4:	4631      	mov	r1, r6
 8018ed6:	4628      	mov	r0, r5
 8018ed8:	f000 f9b4 	bl	8019244 <_Bfree>
 8018edc:	e69e      	b.n	8018c1c <_dtoa_r+0x6ac>
 8018ede:	2400      	movs	r4, #0
 8018ee0:	4626      	mov	r6, r4
 8018ee2:	e7e1      	b.n	8018ea8 <_dtoa_r+0x938>
 8018ee4:	46c3      	mov	fp, r8
 8018ee6:	4626      	mov	r6, r4
 8018ee8:	e59d      	b.n	8018a26 <_dtoa_r+0x4b6>
 8018eea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	f000 80c8 	beq.w	8019082 <_dtoa_r+0xb12>
 8018ef2:	9b08      	ldr	r3, [sp, #32]
 8018ef4:	9306      	str	r3, [sp, #24]
 8018ef6:	2f00      	cmp	r7, #0
 8018ef8:	dd05      	ble.n	8018f06 <_dtoa_r+0x996>
 8018efa:	4631      	mov	r1, r6
 8018efc:	463a      	mov	r2, r7
 8018efe:	4628      	mov	r0, r5
 8018f00:	f000 fbba 	bl	8019678 <__lshift>
 8018f04:	4606      	mov	r6, r0
 8018f06:	f1b8 0f00 	cmp.w	r8, #0
 8018f0a:	d05b      	beq.n	8018fc4 <_dtoa_r+0xa54>
 8018f0c:	6871      	ldr	r1, [r6, #4]
 8018f0e:	4628      	mov	r0, r5
 8018f10:	f000 f958 	bl	80191c4 <_Balloc>
 8018f14:	4607      	mov	r7, r0
 8018f16:	b928      	cbnz	r0, 8018f24 <_dtoa_r+0x9b4>
 8018f18:	4b82      	ldr	r3, [pc, #520]	; (8019124 <_dtoa_r+0xbb4>)
 8018f1a:	4602      	mov	r2, r0
 8018f1c:	f240 21ef 	movw	r1, #751	; 0x2ef
 8018f20:	f7ff bb3a 	b.w	8018598 <_dtoa_r+0x28>
 8018f24:	6932      	ldr	r2, [r6, #16]
 8018f26:	3202      	adds	r2, #2
 8018f28:	0092      	lsls	r2, r2, #2
 8018f2a:	f106 010c 	add.w	r1, r6, #12
 8018f2e:	300c      	adds	r0, #12
 8018f30:	f7ff fa85 	bl	801843e <memcpy>
 8018f34:	2201      	movs	r2, #1
 8018f36:	4639      	mov	r1, r7
 8018f38:	4628      	mov	r0, r5
 8018f3a:	f000 fb9d 	bl	8019678 <__lshift>
 8018f3e:	9b03      	ldr	r3, [sp, #12]
 8018f40:	9a03      	ldr	r2, [sp, #12]
 8018f42:	3301      	adds	r3, #1
 8018f44:	9308      	str	r3, [sp, #32]
 8018f46:	9b06      	ldr	r3, [sp, #24]
 8018f48:	4413      	add	r3, r2
 8018f4a:	930b      	str	r3, [sp, #44]	; 0x2c
 8018f4c:	9b04      	ldr	r3, [sp, #16]
 8018f4e:	f003 0301 	and.w	r3, r3, #1
 8018f52:	46b0      	mov	r8, r6
 8018f54:	930a      	str	r3, [sp, #40]	; 0x28
 8018f56:	4606      	mov	r6, r0
 8018f58:	9b08      	ldr	r3, [sp, #32]
 8018f5a:	4621      	mov	r1, r4
 8018f5c:	3b01      	subs	r3, #1
 8018f5e:	4650      	mov	r0, sl
 8018f60:	9304      	str	r3, [sp, #16]
 8018f62:	f7ff fa7f 	bl	8018464 <quorem>
 8018f66:	4641      	mov	r1, r8
 8018f68:	9006      	str	r0, [sp, #24]
 8018f6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018f6e:	4650      	mov	r0, sl
 8018f70:	f000 fbee 	bl	8019750 <__mcmp>
 8018f74:	4632      	mov	r2, r6
 8018f76:	9009      	str	r0, [sp, #36]	; 0x24
 8018f78:	4621      	mov	r1, r4
 8018f7a:	4628      	mov	r0, r5
 8018f7c:	f000 fc04 	bl	8019788 <__mdiff>
 8018f80:	68c2      	ldr	r2, [r0, #12]
 8018f82:	4607      	mov	r7, r0
 8018f84:	bb02      	cbnz	r2, 8018fc8 <_dtoa_r+0xa58>
 8018f86:	4601      	mov	r1, r0
 8018f88:	4650      	mov	r0, sl
 8018f8a:	f000 fbe1 	bl	8019750 <__mcmp>
 8018f8e:	4602      	mov	r2, r0
 8018f90:	4639      	mov	r1, r7
 8018f92:	4628      	mov	r0, r5
 8018f94:	920c      	str	r2, [sp, #48]	; 0x30
 8018f96:	f000 f955 	bl	8019244 <_Bfree>
 8018f9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8018f9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018f9e:	9f08      	ldr	r7, [sp, #32]
 8018fa0:	ea43 0102 	orr.w	r1, r3, r2
 8018fa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018fa6:	4319      	orrs	r1, r3
 8018fa8:	d110      	bne.n	8018fcc <_dtoa_r+0xa5c>
 8018faa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018fae:	d029      	beq.n	8019004 <_dtoa_r+0xa94>
 8018fb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	dd02      	ble.n	8018fbc <_dtoa_r+0xa4c>
 8018fb6:	9b06      	ldr	r3, [sp, #24]
 8018fb8:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8018fbc:	9b04      	ldr	r3, [sp, #16]
 8018fbe:	f883 9000 	strb.w	r9, [r3]
 8018fc2:	e777      	b.n	8018eb4 <_dtoa_r+0x944>
 8018fc4:	4630      	mov	r0, r6
 8018fc6:	e7ba      	b.n	8018f3e <_dtoa_r+0x9ce>
 8018fc8:	2201      	movs	r2, #1
 8018fca:	e7e1      	b.n	8018f90 <_dtoa_r+0xa20>
 8018fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	db04      	blt.n	8018fdc <_dtoa_r+0xa6c>
 8018fd2:	9922      	ldr	r1, [sp, #136]	; 0x88
 8018fd4:	430b      	orrs	r3, r1
 8018fd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018fd8:	430b      	orrs	r3, r1
 8018fda:	d120      	bne.n	801901e <_dtoa_r+0xaae>
 8018fdc:	2a00      	cmp	r2, #0
 8018fde:	dded      	ble.n	8018fbc <_dtoa_r+0xa4c>
 8018fe0:	4651      	mov	r1, sl
 8018fe2:	2201      	movs	r2, #1
 8018fe4:	4628      	mov	r0, r5
 8018fe6:	f000 fb47 	bl	8019678 <__lshift>
 8018fea:	4621      	mov	r1, r4
 8018fec:	4682      	mov	sl, r0
 8018fee:	f000 fbaf 	bl	8019750 <__mcmp>
 8018ff2:	2800      	cmp	r0, #0
 8018ff4:	dc03      	bgt.n	8018ffe <_dtoa_r+0xa8e>
 8018ff6:	d1e1      	bne.n	8018fbc <_dtoa_r+0xa4c>
 8018ff8:	f019 0f01 	tst.w	r9, #1
 8018ffc:	d0de      	beq.n	8018fbc <_dtoa_r+0xa4c>
 8018ffe:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019002:	d1d8      	bne.n	8018fb6 <_dtoa_r+0xa46>
 8019004:	9a04      	ldr	r2, [sp, #16]
 8019006:	2339      	movs	r3, #57	; 0x39
 8019008:	7013      	strb	r3, [r2, #0]
 801900a:	463b      	mov	r3, r7
 801900c:	461f      	mov	r7, r3
 801900e:	3b01      	subs	r3, #1
 8019010:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8019014:	2a39      	cmp	r2, #57	; 0x39
 8019016:	d06c      	beq.n	80190f2 <_dtoa_r+0xb82>
 8019018:	3201      	adds	r2, #1
 801901a:	701a      	strb	r2, [r3, #0]
 801901c:	e74a      	b.n	8018eb4 <_dtoa_r+0x944>
 801901e:	2a00      	cmp	r2, #0
 8019020:	dd07      	ble.n	8019032 <_dtoa_r+0xac2>
 8019022:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8019026:	d0ed      	beq.n	8019004 <_dtoa_r+0xa94>
 8019028:	9a04      	ldr	r2, [sp, #16]
 801902a:	f109 0301 	add.w	r3, r9, #1
 801902e:	7013      	strb	r3, [r2, #0]
 8019030:	e740      	b.n	8018eb4 <_dtoa_r+0x944>
 8019032:	9b08      	ldr	r3, [sp, #32]
 8019034:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019036:	f803 9c01 	strb.w	r9, [r3, #-1]
 801903a:	4293      	cmp	r3, r2
 801903c:	d043      	beq.n	80190c6 <_dtoa_r+0xb56>
 801903e:	4651      	mov	r1, sl
 8019040:	2300      	movs	r3, #0
 8019042:	220a      	movs	r2, #10
 8019044:	4628      	mov	r0, r5
 8019046:	f000 f91f 	bl	8019288 <__multadd>
 801904a:	45b0      	cmp	r8, r6
 801904c:	4682      	mov	sl, r0
 801904e:	f04f 0300 	mov.w	r3, #0
 8019052:	f04f 020a 	mov.w	r2, #10
 8019056:	4641      	mov	r1, r8
 8019058:	4628      	mov	r0, r5
 801905a:	d107      	bne.n	801906c <_dtoa_r+0xafc>
 801905c:	f000 f914 	bl	8019288 <__multadd>
 8019060:	4680      	mov	r8, r0
 8019062:	4606      	mov	r6, r0
 8019064:	9b08      	ldr	r3, [sp, #32]
 8019066:	3301      	adds	r3, #1
 8019068:	9308      	str	r3, [sp, #32]
 801906a:	e775      	b.n	8018f58 <_dtoa_r+0x9e8>
 801906c:	f000 f90c 	bl	8019288 <__multadd>
 8019070:	4631      	mov	r1, r6
 8019072:	4680      	mov	r8, r0
 8019074:	2300      	movs	r3, #0
 8019076:	220a      	movs	r2, #10
 8019078:	4628      	mov	r0, r5
 801907a:	f000 f905 	bl	8019288 <__multadd>
 801907e:	4606      	mov	r6, r0
 8019080:	e7f0      	b.n	8019064 <_dtoa_r+0xaf4>
 8019082:	9b08      	ldr	r3, [sp, #32]
 8019084:	9306      	str	r3, [sp, #24]
 8019086:	9f03      	ldr	r7, [sp, #12]
 8019088:	4621      	mov	r1, r4
 801908a:	4650      	mov	r0, sl
 801908c:	f7ff f9ea 	bl	8018464 <quorem>
 8019090:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8019094:	9b03      	ldr	r3, [sp, #12]
 8019096:	f807 9b01 	strb.w	r9, [r7], #1
 801909a:	1afa      	subs	r2, r7, r3
 801909c:	9b06      	ldr	r3, [sp, #24]
 801909e:	4293      	cmp	r3, r2
 80190a0:	dd07      	ble.n	80190b2 <_dtoa_r+0xb42>
 80190a2:	4651      	mov	r1, sl
 80190a4:	2300      	movs	r3, #0
 80190a6:	220a      	movs	r2, #10
 80190a8:	4628      	mov	r0, r5
 80190aa:	f000 f8ed 	bl	8019288 <__multadd>
 80190ae:	4682      	mov	sl, r0
 80190b0:	e7ea      	b.n	8019088 <_dtoa_r+0xb18>
 80190b2:	9b06      	ldr	r3, [sp, #24]
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	bfc8      	it	gt
 80190b8:	461f      	movgt	r7, r3
 80190ba:	9b03      	ldr	r3, [sp, #12]
 80190bc:	bfd8      	it	le
 80190be:	2701      	movle	r7, #1
 80190c0:	441f      	add	r7, r3
 80190c2:	f04f 0800 	mov.w	r8, #0
 80190c6:	4651      	mov	r1, sl
 80190c8:	2201      	movs	r2, #1
 80190ca:	4628      	mov	r0, r5
 80190cc:	f000 fad4 	bl	8019678 <__lshift>
 80190d0:	4621      	mov	r1, r4
 80190d2:	4682      	mov	sl, r0
 80190d4:	f000 fb3c 	bl	8019750 <__mcmp>
 80190d8:	2800      	cmp	r0, #0
 80190da:	dc96      	bgt.n	801900a <_dtoa_r+0xa9a>
 80190dc:	d102      	bne.n	80190e4 <_dtoa_r+0xb74>
 80190de:	f019 0f01 	tst.w	r9, #1
 80190e2:	d192      	bne.n	801900a <_dtoa_r+0xa9a>
 80190e4:	463b      	mov	r3, r7
 80190e6:	461f      	mov	r7, r3
 80190e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80190ec:	2a30      	cmp	r2, #48	; 0x30
 80190ee:	d0fa      	beq.n	80190e6 <_dtoa_r+0xb76>
 80190f0:	e6e0      	b.n	8018eb4 <_dtoa_r+0x944>
 80190f2:	9a03      	ldr	r2, [sp, #12]
 80190f4:	429a      	cmp	r2, r3
 80190f6:	d189      	bne.n	801900c <_dtoa_r+0xa9c>
 80190f8:	f10b 0b01 	add.w	fp, fp, #1
 80190fc:	2331      	movs	r3, #49	; 0x31
 80190fe:	e796      	b.n	801902e <_dtoa_r+0xabe>
 8019100:	4b09      	ldr	r3, [pc, #36]	; (8019128 <_dtoa_r+0xbb8>)
 8019102:	f7ff baa1 	b.w	8018648 <_dtoa_r+0xd8>
 8019106:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8019108:	2b00      	cmp	r3, #0
 801910a:	f47f aa79 	bne.w	8018600 <_dtoa_r+0x90>
 801910e:	4b07      	ldr	r3, [pc, #28]	; (801912c <_dtoa_r+0xbbc>)
 8019110:	f7ff ba9a 	b.w	8018648 <_dtoa_r+0xd8>
 8019114:	9b06      	ldr	r3, [sp, #24]
 8019116:	2b00      	cmp	r3, #0
 8019118:	dcb5      	bgt.n	8019086 <_dtoa_r+0xb16>
 801911a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801911c:	2b02      	cmp	r3, #2
 801911e:	f73f aeb4 	bgt.w	8018e8a <_dtoa_r+0x91a>
 8019122:	e7b0      	b.n	8019086 <_dtoa_r+0xb16>
 8019124:	0801ec1e 	.word	0x0801ec1e
 8019128:	0801ef00 	.word	0x0801ef00
 801912c:	0801eba2 	.word	0x0801eba2

08019130 <_free_r>:
 8019130:	b538      	push	{r3, r4, r5, lr}
 8019132:	4605      	mov	r5, r0
 8019134:	2900      	cmp	r1, #0
 8019136:	d041      	beq.n	80191bc <_free_r+0x8c>
 8019138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801913c:	1f0c      	subs	r4, r1, #4
 801913e:	2b00      	cmp	r3, #0
 8019140:	bfb8      	it	lt
 8019142:	18e4      	addlt	r4, r4, r3
 8019144:	f7fe f882 	bl	801724c <__malloc_lock>
 8019148:	4a1d      	ldr	r2, [pc, #116]	; (80191c0 <_free_r+0x90>)
 801914a:	6813      	ldr	r3, [r2, #0]
 801914c:	b933      	cbnz	r3, 801915c <_free_r+0x2c>
 801914e:	6063      	str	r3, [r4, #4]
 8019150:	6014      	str	r4, [r2, #0]
 8019152:	4628      	mov	r0, r5
 8019154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019158:	f7fe b87e 	b.w	8017258 <__malloc_unlock>
 801915c:	42a3      	cmp	r3, r4
 801915e:	d908      	bls.n	8019172 <_free_r+0x42>
 8019160:	6820      	ldr	r0, [r4, #0]
 8019162:	1821      	adds	r1, r4, r0
 8019164:	428b      	cmp	r3, r1
 8019166:	bf01      	itttt	eq
 8019168:	6819      	ldreq	r1, [r3, #0]
 801916a:	685b      	ldreq	r3, [r3, #4]
 801916c:	1809      	addeq	r1, r1, r0
 801916e:	6021      	streq	r1, [r4, #0]
 8019170:	e7ed      	b.n	801914e <_free_r+0x1e>
 8019172:	461a      	mov	r2, r3
 8019174:	685b      	ldr	r3, [r3, #4]
 8019176:	b10b      	cbz	r3, 801917c <_free_r+0x4c>
 8019178:	42a3      	cmp	r3, r4
 801917a:	d9fa      	bls.n	8019172 <_free_r+0x42>
 801917c:	6811      	ldr	r1, [r2, #0]
 801917e:	1850      	adds	r0, r2, r1
 8019180:	42a0      	cmp	r0, r4
 8019182:	d10b      	bne.n	801919c <_free_r+0x6c>
 8019184:	6820      	ldr	r0, [r4, #0]
 8019186:	4401      	add	r1, r0
 8019188:	1850      	adds	r0, r2, r1
 801918a:	4283      	cmp	r3, r0
 801918c:	6011      	str	r1, [r2, #0]
 801918e:	d1e0      	bne.n	8019152 <_free_r+0x22>
 8019190:	6818      	ldr	r0, [r3, #0]
 8019192:	685b      	ldr	r3, [r3, #4]
 8019194:	6053      	str	r3, [r2, #4]
 8019196:	4408      	add	r0, r1
 8019198:	6010      	str	r0, [r2, #0]
 801919a:	e7da      	b.n	8019152 <_free_r+0x22>
 801919c:	d902      	bls.n	80191a4 <_free_r+0x74>
 801919e:	230c      	movs	r3, #12
 80191a0:	602b      	str	r3, [r5, #0]
 80191a2:	e7d6      	b.n	8019152 <_free_r+0x22>
 80191a4:	6820      	ldr	r0, [r4, #0]
 80191a6:	1821      	adds	r1, r4, r0
 80191a8:	428b      	cmp	r3, r1
 80191aa:	bf04      	itt	eq
 80191ac:	6819      	ldreq	r1, [r3, #0]
 80191ae:	685b      	ldreq	r3, [r3, #4]
 80191b0:	6063      	str	r3, [r4, #4]
 80191b2:	bf04      	itt	eq
 80191b4:	1809      	addeq	r1, r1, r0
 80191b6:	6021      	streq	r1, [r4, #0]
 80191b8:	6054      	str	r4, [r2, #4]
 80191ba:	e7ca      	b.n	8019152 <_free_r+0x22>
 80191bc:	bd38      	pop	{r3, r4, r5, pc}
 80191be:	bf00      	nop
 80191c0:	20002250 	.word	0x20002250

080191c4 <_Balloc>:
 80191c4:	b570      	push	{r4, r5, r6, lr}
 80191c6:	69c6      	ldr	r6, [r0, #28]
 80191c8:	4604      	mov	r4, r0
 80191ca:	460d      	mov	r5, r1
 80191cc:	b976      	cbnz	r6, 80191ec <_Balloc+0x28>
 80191ce:	2010      	movs	r0, #16
 80191d0:	f7fd ff8c 	bl	80170ec <malloc>
 80191d4:	4602      	mov	r2, r0
 80191d6:	61e0      	str	r0, [r4, #28]
 80191d8:	b920      	cbnz	r0, 80191e4 <_Balloc+0x20>
 80191da:	4b18      	ldr	r3, [pc, #96]	; (801923c <_Balloc+0x78>)
 80191dc:	4818      	ldr	r0, [pc, #96]	; (8019240 <_Balloc+0x7c>)
 80191de:	216b      	movs	r1, #107	; 0x6b
 80191e0:	f002 faa0 	bl	801b724 <__assert_func>
 80191e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80191e8:	6006      	str	r6, [r0, #0]
 80191ea:	60c6      	str	r6, [r0, #12]
 80191ec:	69e6      	ldr	r6, [r4, #28]
 80191ee:	68f3      	ldr	r3, [r6, #12]
 80191f0:	b183      	cbz	r3, 8019214 <_Balloc+0x50>
 80191f2:	69e3      	ldr	r3, [r4, #28]
 80191f4:	68db      	ldr	r3, [r3, #12]
 80191f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80191fa:	b9b8      	cbnz	r0, 801922c <_Balloc+0x68>
 80191fc:	2101      	movs	r1, #1
 80191fe:	fa01 f605 	lsl.w	r6, r1, r5
 8019202:	1d72      	adds	r2, r6, #5
 8019204:	0092      	lsls	r2, r2, #2
 8019206:	4620      	mov	r0, r4
 8019208:	f002 faaa 	bl	801b760 <_calloc_r>
 801920c:	b160      	cbz	r0, 8019228 <_Balloc+0x64>
 801920e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019212:	e00e      	b.n	8019232 <_Balloc+0x6e>
 8019214:	2221      	movs	r2, #33	; 0x21
 8019216:	2104      	movs	r1, #4
 8019218:	4620      	mov	r0, r4
 801921a:	f002 faa1 	bl	801b760 <_calloc_r>
 801921e:	69e3      	ldr	r3, [r4, #28]
 8019220:	60f0      	str	r0, [r6, #12]
 8019222:	68db      	ldr	r3, [r3, #12]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d1e4      	bne.n	80191f2 <_Balloc+0x2e>
 8019228:	2000      	movs	r0, #0
 801922a:	bd70      	pop	{r4, r5, r6, pc}
 801922c:	6802      	ldr	r2, [r0, #0]
 801922e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019232:	2300      	movs	r3, #0
 8019234:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019238:	e7f7      	b.n	801922a <_Balloc+0x66>
 801923a:	bf00      	nop
 801923c:	0801ebaf 	.word	0x0801ebaf
 8019240:	0801ec2f 	.word	0x0801ec2f

08019244 <_Bfree>:
 8019244:	b570      	push	{r4, r5, r6, lr}
 8019246:	69c6      	ldr	r6, [r0, #28]
 8019248:	4605      	mov	r5, r0
 801924a:	460c      	mov	r4, r1
 801924c:	b976      	cbnz	r6, 801926c <_Bfree+0x28>
 801924e:	2010      	movs	r0, #16
 8019250:	f7fd ff4c 	bl	80170ec <malloc>
 8019254:	4602      	mov	r2, r0
 8019256:	61e8      	str	r0, [r5, #28]
 8019258:	b920      	cbnz	r0, 8019264 <_Bfree+0x20>
 801925a:	4b09      	ldr	r3, [pc, #36]	; (8019280 <_Bfree+0x3c>)
 801925c:	4809      	ldr	r0, [pc, #36]	; (8019284 <_Bfree+0x40>)
 801925e:	218f      	movs	r1, #143	; 0x8f
 8019260:	f002 fa60 	bl	801b724 <__assert_func>
 8019264:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019268:	6006      	str	r6, [r0, #0]
 801926a:	60c6      	str	r6, [r0, #12]
 801926c:	b13c      	cbz	r4, 801927e <_Bfree+0x3a>
 801926e:	69eb      	ldr	r3, [r5, #28]
 8019270:	6862      	ldr	r2, [r4, #4]
 8019272:	68db      	ldr	r3, [r3, #12]
 8019274:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019278:	6021      	str	r1, [r4, #0]
 801927a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801927e:	bd70      	pop	{r4, r5, r6, pc}
 8019280:	0801ebaf 	.word	0x0801ebaf
 8019284:	0801ec2f 	.word	0x0801ec2f

08019288 <__multadd>:
 8019288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801928c:	690d      	ldr	r5, [r1, #16]
 801928e:	4607      	mov	r7, r0
 8019290:	460c      	mov	r4, r1
 8019292:	461e      	mov	r6, r3
 8019294:	f101 0c14 	add.w	ip, r1, #20
 8019298:	2000      	movs	r0, #0
 801929a:	f8dc 3000 	ldr.w	r3, [ip]
 801929e:	b299      	uxth	r1, r3
 80192a0:	fb02 6101 	mla	r1, r2, r1, r6
 80192a4:	0c1e      	lsrs	r6, r3, #16
 80192a6:	0c0b      	lsrs	r3, r1, #16
 80192a8:	fb02 3306 	mla	r3, r2, r6, r3
 80192ac:	b289      	uxth	r1, r1
 80192ae:	3001      	adds	r0, #1
 80192b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80192b4:	4285      	cmp	r5, r0
 80192b6:	f84c 1b04 	str.w	r1, [ip], #4
 80192ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80192be:	dcec      	bgt.n	801929a <__multadd+0x12>
 80192c0:	b30e      	cbz	r6, 8019306 <__multadd+0x7e>
 80192c2:	68a3      	ldr	r3, [r4, #8]
 80192c4:	42ab      	cmp	r3, r5
 80192c6:	dc19      	bgt.n	80192fc <__multadd+0x74>
 80192c8:	6861      	ldr	r1, [r4, #4]
 80192ca:	4638      	mov	r0, r7
 80192cc:	3101      	adds	r1, #1
 80192ce:	f7ff ff79 	bl	80191c4 <_Balloc>
 80192d2:	4680      	mov	r8, r0
 80192d4:	b928      	cbnz	r0, 80192e2 <__multadd+0x5a>
 80192d6:	4602      	mov	r2, r0
 80192d8:	4b0c      	ldr	r3, [pc, #48]	; (801930c <__multadd+0x84>)
 80192da:	480d      	ldr	r0, [pc, #52]	; (8019310 <__multadd+0x88>)
 80192dc:	21ba      	movs	r1, #186	; 0xba
 80192de:	f002 fa21 	bl	801b724 <__assert_func>
 80192e2:	6922      	ldr	r2, [r4, #16]
 80192e4:	3202      	adds	r2, #2
 80192e6:	f104 010c 	add.w	r1, r4, #12
 80192ea:	0092      	lsls	r2, r2, #2
 80192ec:	300c      	adds	r0, #12
 80192ee:	f7ff f8a6 	bl	801843e <memcpy>
 80192f2:	4621      	mov	r1, r4
 80192f4:	4638      	mov	r0, r7
 80192f6:	f7ff ffa5 	bl	8019244 <_Bfree>
 80192fa:	4644      	mov	r4, r8
 80192fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019300:	3501      	adds	r5, #1
 8019302:	615e      	str	r6, [r3, #20]
 8019304:	6125      	str	r5, [r4, #16]
 8019306:	4620      	mov	r0, r4
 8019308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801930c:	0801ec1e 	.word	0x0801ec1e
 8019310:	0801ec2f 	.word	0x0801ec2f

08019314 <__s2b>:
 8019314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019318:	460c      	mov	r4, r1
 801931a:	4615      	mov	r5, r2
 801931c:	461f      	mov	r7, r3
 801931e:	2209      	movs	r2, #9
 8019320:	3308      	adds	r3, #8
 8019322:	4606      	mov	r6, r0
 8019324:	fb93 f3f2 	sdiv	r3, r3, r2
 8019328:	2100      	movs	r1, #0
 801932a:	2201      	movs	r2, #1
 801932c:	429a      	cmp	r2, r3
 801932e:	db09      	blt.n	8019344 <__s2b+0x30>
 8019330:	4630      	mov	r0, r6
 8019332:	f7ff ff47 	bl	80191c4 <_Balloc>
 8019336:	b940      	cbnz	r0, 801934a <__s2b+0x36>
 8019338:	4602      	mov	r2, r0
 801933a:	4b19      	ldr	r3, [pc, #100]	; (80193a0 <__s2b+0x8c>)
 801933c:	4819      	ldr	r0, [pc, #100]	; (80193a4 <__s2b+0x90>)
 801933e:	21d3      	movs	r1, #211	; 0xd3
 8019340:	f002 f9f0 	bl	801b724 <__assert_func>
 8019344:	0052      	lsls	r2, r2, #1
 8019346:	3101      	adds	r1, #1
 8019348:	e7f0      	b.n	801932c <__s2b+0x18>
 801934a:	9b08      	ldr	r3, [sp, #32]
 801934c:	6143      	str	r3, [r0, #20]
 801934e:	2d09      	cmp	r5, #9
 8019350:	f04f 0301 	mov.w	r3, #1
 8019354:	6103      	str	r3, [r0, #16]
 8019356:	dd16      	ble.n	8019386 <__s2b+0x72>
 8019358:	f104 0909 	add.w	r9, r4, #9
 801935c:	46c8      	mov	r8, r9
 801935e:	442c      	add	r4, r5
 8019360:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019364:	4601      	mov	r1, r0
 8019366:	3b30      	subs	r3, #48	; 0x30
 8019368:	220a      	movs	r2, #10
 801936a:	4630      	mov	r0, r6
 801936c:	f7ff ff8c 	bl	8019288 <__multadd>
 8019370:	45a0      	cmp	r8, r4
 8019372:	d1f5      	bne.n	8019360 <__s2b+0x4c>
 8019374:	f1a5 0408 	sub.w	r4, r5, #8
 8019378:	444c      	add	r4, r9
 801937a:	1b2d      	subs	r5, r5, r4
 801937c:	1963      	adds	r3, r4, r5
 801937e:	42bb      	cmp	r3, r7
 8019380:	db04      	blt.n	801938c <__s2b+0x78>
 8019382:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019386:	340a      	adds	r4, #10
 8019388:	2509      	movs	r5, #9
 801938a:	e7f6      	b.n	801937a <__s2b+0x66>
 801938c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019390:	4601      	mov	r1, r0
 8019392:	3b30      	subs	r3, #48	; 0x30
 8019394:	220a      	movs	r2, #10
 8019396:	4630      	mov	r0, r6
 8019398:	f7ff ff76 	bl	8019288 <__multadd>
 801939c:	e7ee      	b.n	801937c <__s2b+0x68>
 801939e:	bf00      	nop
 80193a0:	0801ec1e 	.word	0x0801ec1e
 80193a4:	0801ec2f 	.word	0x0801ec2f

080193a8 <__hi0bits>:
 80193a8:	0c02      	lsrs	r2, r0, #16
 80193aa:	0412      	lsls	r2, r2, #16
 80193ac:	4603      	mov	r3, r0
 80193ae:	b9ca      	cbnz	r2, 80193e4 <__hi0bits+0x3c>
 80193b0:	0403      	lsls	r3, r0, #16
 80193b2:	2010      	movs	r0, #16
 80193b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80193b8:	bf04      	itt	eq
 80193ba:	021b      	lsleq	r3, r3, #8
 80193bc:	3008      	addeq	r0, #8
 80193be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80193c2:	bf04      	itt	eq
 80193c4:	011b      	lsleq	r3, r3, #4
 80193c6:	3004      	addeq	r0, #4
 80193c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80193cc:	bf04      	itt	eq
 80193ce:	009b      	lsleq	r3, r3, #2
 80193d0:	3002      	addeq	r0, #2
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	db05      	blt.n	80193e2 <__hi0bits+0x3a>
 80193d6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80193da:	f100 0001 	add.w	r0, r0, #1
 80193de:	bf08      	it	eq
 80193e0:	2020      	moveq	r0, #32
 80193e2:	4770      	bx	lr
 80193e4:	2000      	movs	r0, #0
 80193e6:	e7e5      	b.n	80193b4 <__hi0bits+0xc>

080193e8 <__lo0bits>:
 80193e8:	6803      	ldr	r3, [r0, #0]
 80193ea:	4602      	mov	r2, r0
 80193ec:	f013 0007 	ands.w	r0, r3, #7
 80193f0:	d00b      	beq.n	801940a <__lo0bits+0x22>
 80193f2:	07d9      	lsls	r1, r3, #31
 80193f4:	d421      	bmi.n	801943a <__lo0bits+0x52>
 80193f6:	0798      	lsls	r0, r3, #30
 80193f8:	bf49      	itett	mi
 80193fa:	085b      	lsrmi	r3, r3, #1
 80193fc:	089b      	lsrpl	r3, r3, #2
 80193fe:	2001      	movmi	r0, #1
 8019400:	6013      	strmi	r3, [r2, #0]
 8019402:	bf5c      	itt	pl
 8019404:	6013      	strpl	r3, [r2, #0]
 8019406:	2002      	movpl	r0, #2
 8019408:	4770      	bx	lr
 801940a:	b299      	uxth	r1, r3
 801940c:	b909      	cbnz	r1, 8019412 <__lo0bits+0x2a>
 801940e:	0c1b      	lsrs	r3, r3, #16
 8019410:	2010      	movs	r0, #16
 8019412:	b2d9      	uxtb	r1, r3
 8019414:	b909      	cbnz	r1, 801941a <__lo0bits+0x32>
 8019416:	3008      	adds	r0, #8
 8019418:	0a1b      	lsrs	r3, r3, #8
 801941a:	0719      	lsls	r1, r3, #28
 801941c:	bf04      	itt	eq
 801941e:	091b      	lsreq	r3, r3, #4
 8019420:	3004      	addeq	r0, #4
 8019422:	0799      	lsls	r1, r3, #30
 8019424:	bf04      	itt	eq
 8019426:	089b      	lsreq	r3, r3, #2
 8019428:	3002      	addeq	r0, #2
 801942a:	07d9      	lsls	r1, r3, #31
 801942c:	d403      	bmi.n	8019436 <__lo0bits+0x4e>
 801942e:	085b      	lsrs	r3, r3, #1
 8019430:	f100 0001 	add.w	r0, r0, #1
 8019434:	d003      	beq.n	801943e <__lo0bits+0x56>
 8019436:	6013      	str	r3, [r2, #0]
 8019438:	4770      	bx	lr
 801943a:	2000      	movs	r0, #0
 801943c:	4770      	bx	lr
 801943e:	2020      	movs	r0, #32
 8019440:	4770      	bx	lr
	...

08019444 <__i2b>:
 8019444:	b510      	push	{r4, lr}
 8019446:	460c      	mov	r4, r1
 8019448:	2101      	movs	r1, #1
 801944a:	f7ff febb 	bl	80191c4 <_Balloc>
 801944e:	4602      	mov	r2, r0
 8019450:	b928      	cbnz	r0, 801945e <__i2b+0x1a>
 8019452:	4b05      	ldr	r3, [pc, #20]	; (8019468 <__i2b+0x24>)
 8019454:	4805      	ldr	r0, [pc, #20]	; (801946c <__i2b+0x28>)
 8019456:	f240 1145 	movw	r1, #325	; 0x145
 801945a:	f002 f963 	bl	801b724 <__assert_func>
 801945e:	2301      	movs	r3, #1
 8019460:	6144      	str	r4, [r0, #20]
 8019462:	6103      	str	r3, [r0, #16]
 8019464:	bd10      	pop	{r4, pc}
 8019466:	bf00      	nop
 8019468:	0801ec1e 	.word	0x0801ec1e
 801946c:	0801ec2f 	.word	0x0801ec2f

08019470 <__multiply>:
 8019470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019474:	4691      	mov	r9, r2
 8019476:	690a      	ldr	r2, [r1, #16]
 8019478:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801947c:	429a      	cmp	r2, r3
 801947e:	bfb8      	it	lt
 8019480:	460b      	movlt	r3, r1
 8019482:	460c      	mov	r4, r1
 8019484:	bfbc      	itt	lt
 8019486:	464c      	movlt	r4, r9
 8019488:	4699      	movlt	r9, r3
 801948a:	6927      	ldr	r7, [r4, #16]
 801948c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019490:	68a3      	ldr	r3, [r4, #8]
 8019492:	6861      	ldr	r1, [r4, #4]
 8019494:	eb07 060a 	add.w	r6, r7, sl
 8019498:	42b3      	cmp	r3, r6
 801949a:	b085      	sub	sp, #20
 801949c:	bfb8      	it	lt
 801949e:	3101      	addlt	r1, #1
 80194a0:	f7ff fe90 	bl	80191c4 <_Balloc>
 80194a4:	b930      	cbnz	r0, 80194b4 <__multiply+0x44>
 80194a6:	4602      	mov	r2, r0
 80194a8:	4b44      	ldr	r3, [pc, #272]	; (80195bc <__multiply+0x14c>)
 80194aa:	4845      	ldr	r0, [pc, #276]	; (80195c0 <__multiply+0x150>)
 80194ac:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80194b0:	f002 f938 	bl	801b724 <__assert_func>
 80194b4:	f100 0514 	add.w	r5, r0, #20
 80194b8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80194bc:	462b      	mov	r3, r5
 80194be:	2200      	movs	r2, #0
 80194c0:	4543      	cmp	r3, r8
 80194c2:	d321      	bcc.n	8019508 <__multiply+0x98>
 80194c4:	f104 0314 	add.w	r3, r4, #20
 80194c8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80194cc:	f109 0314 	add.w	r3, r9, #20
 80194d0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80194d4:	9202      	str	r2, [sp, #8]
 80194d6:	1b3a      	subs	r2, r7, r4
 80194d8:	3a15      	subs	r2, #21
 80194da:	f022 0203 	bic.w	r2, r2, #3
 80194de:	3204      	adds	r2, #4
 80194e0:	f104 0115 	add.w	r1, r4, #21
 80194e4:	428f      	cmp	r7, r1
 80194e6:	bf38      	it	cc
 80194e8:	2204      	movcc	r2, #4
 80194ea:	9201      	str	r2, [sp, #4]
 80194ec:	9a02      	ldr	r2, [sp, #8]
 80194ee:	9303      	str	r3, [sp, #12]
 80194f0:	429a      	cmp	r2, r3
 80194f2:	d80c      	bhi.n	801950e <__multiply+0x9e>
 80194f4:	2e00      	cmp	r6, #0
 80194f6:	dd03      	ble.n	8019500 <__multiply+0x90>
 80194f8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d05a      	beq.n	80195b6 <__multiply+0x146>
 8019500:	6106      	str	r6, [r0, #16]
 8019502:	b005      	add	sp, #20
 8019504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019508:	f843 2b04 	str.w	r2, [r3], #4
 801950c:	e7d8      	b.n	80194c0 <__multiply+0x50>
 801950e:	f8b3 a000 	ldrh.w	sl, [r3]
 8019512:	f1ba 0f00 	cmp.w	sl, #0
 8019516:	d023      	beq.n	8019560 <__multiply+0xf0>
 8019518:	f104 0e14 	add.w	lr, r4, #20
 801951c:	46a9      	mov	r9, r5
 801951e:	f04f 0c00 	mov.w	ip, #0
 8019522:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019526:	f8d9 1000 	ldr.w	r1, [r9]
 801952a:	fa1f fb82 	uxth.w	fp, r2
 801952e:	b289      	uxth	r1, r1
 8019530:	fb0a 110b 	mla	r1, sl, fp, r1
 8019534:	4461      	add	r1, ip
 8019536:	f8d9 c000 	ldr.w	ip, [r9]
 801953a:	0c12      	lsrs	r2, r2, #16
 801953c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8019540:	fb0a c202 	mla	r2, sl, r2, ip
 8019544:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019548:	b289      	uxth	r1, r1
 801954a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801954e:	4577      	cmp	r7, lr
 8019550:	f849 1b04 	str.w	r1, [r9], #4
 8019554:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019558:	d8e3      	bhi.n	8019522 <__multiply+0xb2>
 801955a:	9a01      	ldr	r2, [sp, #4]
 801955c:	f845 c002 	str.w	ip, [r5, r2]
 8019560:	9a03      	ldr	r2, [sp, #12]
 8019562:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019566:	3304      	adds	r3, #4
 8019568:	f1b9 0f00 	cmp.w	r9, #0
 801956c:	d021      	beq.n	80195b2 <__multiply+0x142>
 801956e:	6829      	ldr	r1, [r5, #0]
 8019570:	f104 0c14 	add.w	ip, r4, #20
 8019574:	46ae      	mov	lr, r5
 8019576:	f04f 0a00 	mov.w	sl, #0
 801957a:	f8bc b000 	ldrh.w	fp, [ip]
 801957e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019582:	fb09 220b 	mla	r2, r9, fp, r2
 8019586:	4452      	add	r2, sl
 8019588:	b289      	uxth	r1, r1
 801958a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801958e:	f84e 1b04 	str.w	r1, [lr], #4
 8019592:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019596:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801959a:	f8be 1000 	ldrh.w	r1, [lr]
 801959e:	fb09 110a 	mla	r1, r9, sl, r1
 80195a2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80195a6:	4567      	cmp	r7, ip
 80195a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80195ac:	d8e5      	bhi.n	801957a <__multiply+0x10a>
 80195ae:	9a01      	ldr	r2, [sp, #4]
 80195b0:	50a9      	str	r1, [r5, r2]
 80195b2:	3504      	adds	r5, #4
 80195b4:	e79a      	b.n	80194ec <__multiply+0x7c>
 80195b6:	3e01      	subs	r6, #1
 80195b8:	e79c      	b.n	80194f4 <__multiply+0x84>
 80195ba:	bf00      	nop
 80195bc:	0801ec1e 	.word	0x0801ec1e
 80195c0:	0801ec2f 	.word	0x0801ec2f

080195c4 <__pow5mult>:
 80195c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80195c8:	4615      	mov	r5, r2
 80195ca:	f012 0203 	ands.w	r2, r2, #3
 80195ce:	4606      	mov	r6, r0
 80195d0:	460f      	mov	r7, r1
 80195d2:	d007      	beq.n	80195e4 <__pow5mult+0x20>
 80195d4:	4c25      	ldr	r4, [pc, #148]	; (801966c <__pow5mult+0xa8>)
 80195d6:	3a01      	subs	r2, #1
 80195d8:	2300      	movs	r3, #0
 80195da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80195de:	f7ff fe53 	bl	8019288 <__multadd>
 80195e2:	4607      	mov	r7, r0
 80195e4:	10ad      	asrs	r5, r5, #2
 80195e6:	d03d      	beq.n	8019664 <__pow5mult+0xa0>
 80195e8:	69f4      	ldr	r4, [r6, #28]
 80195ea:	b97c      	cbnz	r4, 801960c <__pow5mult+0x48>
 80195ec:	2010      	movs	r0, #16
 80195ee:	f7fd fd7d 	bl	80170ec <malloc>
 80195f2:	4602      	mov	r2, r0
 80195f4:	61f0      	str	r0, [r6, #28]
 80195f6:	b928      	cbnz	r0, 8019604 <__pow5mult+0x40>
 80195f8:	4b1d      	ldr	r3, [pc, #116]	; (8019670 <__pow5mult+0xac>)
 80195fa:	481e      	ldr	r0, [pc, #120]	; (8019674 <__pow5mult+0xb0>)
 80195fc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8019600:	f002 f890 	bl	801b724 <__assert_func>
 8019604:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019608:	6004      	str	r4, [r0, #0]
 801960a:	60c4      	str	r4, [r0, #12]
 801960c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8019610:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019614:	b94c      	cbnz	r4, 801962a <__pow5mult+0x66>
 8019616:	f240 2171 	movw	r1, #625	; 0x271
 801961a:	4630      	mov	r0, r6
 801961c:	f7ff ff12 	bl	8019444 <__i2b>
 8019620:	2300      	movs	r3, #0
 8019622:	f8c8 0008 	str.w	r0, [r8, #8]
 8019626:	4604      	mov	r4, r0
 8019628:	6003      	str	r3, [r0, #0]
 801962a:	f04f 0900 	mov.w	r9, #0
 801962e:	07eb      	lsls	r3, r5, #31
 8019630:	d50a      	bpl.n	8019648 <__pow5mult+0x84>
 8019632:	4639      	mov	r1, r7
 8019634:	4622      	mov	r2, r4
 8019636:	4630      	mov	r0, r6
 8019638:	f7ff ff1a 	bl	8019470 <__multiply>
 801963c:	4639      	mov	r1, r7
 801963e:	4680      	mov	r8, r0
 8019640:	4630      	mov	r0, r6
 8019642:	f7ff fdff 	bl	8019244 <_Bfree>
 8019646:	4647      	mov	r7, r8
 8019648:	106d      	asrs	r5, r5, #1
 801964a:	d00b      	beq.n	8019664 <__pow5mult+0xa0>
 801964c:	6820      	ldr	r0, [r4, #0]
 801964e:	b938      	cbnz	r0, 8019660 <__pow5mult+0x9c>
 8019650:	4622      	mov	r2, r4
 8019652:	4621      	mov	r1, r4
 8019654:	4630      	mov	r0, r6
 8019656:	f7ff ff0b 	bl	8019470 <__multiply>
 801965a:	6020      	str	r0, [r4, #0]
 801965c:	f8c0 9000 	str.w	r9, [r0]
 8019660:	4604      	mov	r4, r0
 8019662:	e7e4      	b.n	801962e <__pow5mult+0x6a>
 8019664:	4638      	mov	r0, r7
 8019666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801966a:	bf00      	nop
 801966c:	0801ed78 	.word	0x0801ed78
 8019670:	0801ebaf 	.word	0x0801ebaf
 8019674:	0801ec2f 	.word	0x0801ec2f

08019678 <__lshift>:
 8019678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801967c:	460c      	mov	r4, r1
 801967e:	6849      	ldr	r1, [r1, #4]
 8019680:	6923      	ldr	r3, [r4, #16]
 8019682:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019686:	68a3      	ldr	r3, [r4, #8]
 8019688:	4607      	mov	r7, r0
 801968a:	4691      	mov	r9, r2
 801968c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019690:	f108 0601 	add.w	r6, r8, #1
 8019694:	42b3      	cmp	r3, r6
 8019696:	db0b      	blt.n	80196b0 <__lshift+0x38>
 8019698:	4638      	mov	r0, r7
 801969a:	f7ff fd93 	bl	80191c4 <_Balloc>
 801969e:	4605      	mov	r5, r0
 80196a0:	b948      	cbnz	r0, 80196b6 <__lshift+0x3e>
 80196a2:	4602      	mov	r2, r0
 80196a4:	4b28      	ldr	r3, [pc, #160]	; (8019748 <__lshift+0xd0>)
 80196a6:	4829      	ldr	r0, [pc, #164]	; (801974c <__lshift+0xd4>)
 80196a8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80196ac:	f002 f83a 	bl	801b724 <__assert_func>
 80196b0:	3101      	adds	r1, #1
 80196b2:	005b      	lsls	r3, r3, #1
 80196b4:	e7ee      	b.n	8019694 <__lshift+0x1c>
 80196b6:	2300      	movs	r3, #0
 80196b8:	f100 0114 	add.w	r1, r0, #20
 80196bc:	f100 0210 	add.w	r2, r0, #16
 80196c0:	4618      	mov	r0, r3
 80196c2:	4553      	cmp	r3, sl
 80196c4:	db33      	blt.n	801972e <__lshift+0xb6>
 80196c6:	6920      	ldr	r0, [r4, #16]
 80196c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80196cc:	f104 0314 	add.w	r3, r4, #20
 80196d0:	f019 091f 	ands.w	r9, r9, #31
 80196d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80196d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80196dc:	d02b      	beq.n	8019736 <__lshift+0xbe>
 80196de:	f1c9 0e20 	rsb	lr, r9, #32
 80196e2:	468a      	mov	sl, r1
 80196e4:	2200      	movs	r2, #0
 80196e6:	6818      	ldr	r0, [r3, #0]
 80196e8:	fa00 f009 	lsl.w	r0, r0, r9
 80196ec:	4310      	orrs	r0, r2
 80196ee:	f84a 0b04 	str.w	r0, [sl], #4
 80196f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80196f6:	459c      	cmp	ip, r3
 80196f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80196fc:	d8f3      	bhi.n	80196e6 <__lshift+0x6e>
 80196fe:	ebac 0304 	sub.w	r3, ip, r4
 8019702:	3b15      	subs	r3, #21
 8019704:	f023 0303 	bic.w	r3, r3, #3
 8019708:	3304      	adds	r3, #4
 801970a:	f104 0015 	add.w	r0, r4, #21
 801970e:	4584      	cmp	ip, r0
 8019710:	bf38      	it	cc
 8019712:	2304      	movcc	r3, #4
 8019714:	50ca      	str	r2, [r1, r3]
 8019716:	b10a      	cbz	r2, 801971c <__lshift+0xa4>
 8019718:	f108 0602 	add.w	r6, r8, #2
 801971c:	3e01      	subs	r6, #1
 801971e:	4638      	mov	r0, r7
 8019720:	612e      	str	r6, [r5, #16]
 8019722:	4621      	mov	r1, r4
 8019724:	f7ff fd8e 	bl	8019244 <_Bfree>
 8019728:	4628      	mov	r0, r5
 801972a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801972e:	f842 0f04 	str.w	r0, [r2, #4]!
 8019732:	3301      	adds	r3, #1
 8019734:	e7c5      	b.n	80196c2 <__lshift+0x4a>
 8019736:	3904      	subs	r1, #4
 8019738:	f853 2b04 	ldr.w	r2, [r3], #4
 801973c:	f841 2f04 	str.w	r2, [r1, #4]!
 8019740:	459c      	cmp	ip, r3
 8019742:	d8f9      	bhi.n	8019738 <__lshift+0xc0>
 8019744:	e7ea      	b.n	801971c <__lshift+0xa4>
 8019746:	bf00      	nop
 8019748:	0801ec1e 	.word	0x0801ec1e
 801974c:	0801ec2f 	.word	0x0801ec2f

08019750 <__mcmp>:
 8019750:	690a      	ldr	r2, [r1, #16]
 8019752:	4603      	mov	r3, r0
 8019754:	6900      	ldr	r0, [r0, #16]
 8019756:	1a80      	subs	r0, r0, r2
 8019758:	b530      	push	{r4, r5, lr}
 801975a:	d10d      	bne.n	8019778 <__mcmp+0x28>
 801975c:	3314      	adds	r3, #20
 801975e:	3114      	adds	r1, #20
 8019760:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8019764:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019768:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801976c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019770:	4295      	cmp	r5, r2
 8019772:	d002      	beq.n	801977a <__mcmp+0x2a>
 8019774:	d304      	bcc.n	8019780 <__mcmp+0x30>
 8019776:	2001      	movs	r0, #1
 8019778:	bd30      	pop	{r4, r5, pc}
 801977a:	42a3      	cmp	r3, r4
 801977c:	d3f4      	bcc.n	8019768 <__mcmp+0x18>
 801977e:	e7fb      	b.n	8019778 <__mcmp+0x28>
 8019780:	f04f 30ff 	mov.w	r0, #4294967295
 8019784:	e7f8      	b.n	8019778 <__mcmp+0x28>
	...

08019788 <__mdiff>:
 8019788:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801978c:	460d      	mov	r5, r1
 801978e:	4607      	mov	r7, r0
 8019790:	4611      	mov	r1, r2
 8019792:	4628      	mov	r0, r5
 8019794:	4614      	mov	r4, r2
 8019796:	f7ff ffdb 	bl	8019750 <__mcmp>
 801979a:	1e06      	subs	r6, r0, #0
 801979c:	d111      	bne.n	80197c2 <__mdiff+0x3a>
 801979e:	4631      	mov	r1, r6
 80197a0:	4638      	mov	r0, r7
 80197a2:	f7ff fd0f 	bl	80191c4 <_Balloc>
 80197a6:	4602      	mov	r2, r0
 80197a8:	b928      	cbnz	r0, 80197b6 <__mdiff+0x2e>
 80197aa:	4b39      	ldr	r3, [pc, #228]	; (8019890 <__mdiff+0x108>)
 80197ac:	f240 2137 	movw	r1, #567	; 0x237
 80197b0:	4838      	ldr	r0, [pc, #224]	; (8019894 <__mdiff+0x10c>)
 80197b2:	f001 ffb7 	bl	801b724 <__assert_func>
 80197b6:	2301      	movs	r3, #1
 80197b8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80197bc:	4610      	mov	r0, r2
 80197be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197c2:	bfa4      	itt	ge
 80197c4:	4623      	movge	r3, r4
 80197c6:	462c      	movge	r4, r5
 80197c8:	4638      	mov	r0, r7
 80197ca:	6861      	ldr	r1, [r4, #4]
 80197cc:	bfa6      	itte	ge
 80197ce:	461d      	movge	r5, r3
 80197d0:	2600      	movge	r6, #0
 80197d2:	2601      	movlt	r6, #1
 80197d4:	f7ff fcf6 	bl	80191c4 <_Balloc>
 80197d8:	4602      	mov	r2, r0
 80197da:	b918      	cbnz	r0, 80197e4 <__mdiff+0x5c>
 80197dc:	4b2c      	ldr	r3, [pc, #176]	; (8019890 <__mdiff+0x108>)
 80197de:	f240 2145 	movw	r1, #581	; 0x245
 80197e2:	e7e5      	b.n	80197b0 <__mdiff+0x28>
 80197e4:	6927      	ldr	r7, [r4, #16]
 80197e6:	60c6      	str	r6, [r0, #12]
 80197e8:	692e      	ldr	r6, [r5, #16]
 80197ea:	f104 0014 	add.w	r0, r4, #20
 80197ee:	f105 0914 	add.w	r9, r5, #20
 80197f2:	f102 0e14 	add.w	lr, r2, #20
 80197f6:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 80197fa:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80197fe:	3410      	adds	r4, #16
 8019800:	46f2      	mov	sl, lr
 8019802:	2100      	movs	r1, #0
 8019804:	f859 3b04 	ldr.w	r3, [r9], #4
 8019808:	f854 bf04 	ldr.w	fp, [r4, #4]!
 801980c:	fa11 f88b 	uxtah	r8, r1, fp
 8019810:	b299      	uxth	r1, r3
 8019812:	0c1b      	lsrs	r3, r3, #16
 8019814:	eba8 0801 	sub.w	r8, r8, r1
 8019818:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801981c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019820:	fa1f f888 	uxth.w	r8, r8
 8019824:	1419      	asrs	r1, r3, #16
 8019826:	454e      	cmp	r6, r9
 8019828:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801982c:	f84a 3b04 	str.w	r3, [sl], #4
 8019830:	d8e8      	bhi.n	8019804 <__mdiff+0x7c>
 8019832:	1b73      	subs	r3, r6, r5
 8019834:	3b15      	subs	r3, #21
 8019836:	f023 0303 	bic.w	r3, r3, #3
 801983a:	3304      	adds	r3, #4
 801983c:	3515      	adds	r5, #21
 801983e:	42ae      	cmp	r6, r5
 8019840:	bf38      	it	cc
 8019842:	2304      	movcc	r3, #4
 8019844:	4418      	add	r0, r3
 8019846:	4473      	add	r3, lr
 8019848:	469e      	mov	lr, r3
 801984a:	4606      	mov	r6, r0
 801984c:	4566      	cmp	r6, ip
 801984e:	d30e      	bcc.n	801986e <__mdiff+0xe6>
 8019850:	f10c 0103 	add.w	r1, ip, #3
 8019854:	1a09      	subs	r1, r1, r0
 8019856:	f021 0103 	bic.w	r1, r1, #3
 801985a:	3803      	subs	r0, #3
 801985c:	4584      	cmp	ip, r0
 801985e:	bf38      	it	cc
 8019860:	2100      	movcc	r1, #0
 8019862:	440b      	add	r3, r1
 8019864:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019868:	b179      	cbz	r1, 801988a <__mdiff+0x102>
 801986a:	6117      	str	r7, [r2, #16]
 801986c:	e7a6      	b.n	80197bc <__mdiff+0x34>
 801986e:	f856 8b04 	ldr.w	r8, [r6], #4
 8019872:	fa11 f488 	uxtah	r4, r1, r8
 8019876:	1425      	asrs	r5, r4, #16
 8019878:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 801987c:	b2a4      	uxth	r4, r4
 801987e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8019882:	f84e 4b04 	str.w	r4, [lr], #4
 8019886:	1429      	asrs	r1, r5, #16
 8019888:	e7e0      	b.n	801984c <__mdiff+0xc4>
 801988a:	3f01      	subs	r7, #1
 801988c:	e7ea      	b.n	8019864 <__mdiff+0xdc>
 801988e:	bf00      	nop
 8019890:	0801ec1e 	.word	0x0801ec1e
 8019894:	0801ec2f 	.word	0x0801ec2f

08019898 <__ulp>:
 8019898:	4b0e      	ldr	r3, [pc, #56]	; (80198d4 <__ulp+0x3c>)
 801989a:	400b      	ands	r3, r1
 801989c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	dc08      	bgt.n	80198b6 <__ulp+0x1e>
 80198a4:	425b      	negs	r3, r3
 80198a6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80198aa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80198ae:	da04      	bge.n	80198ba <__ulp+0x22>
 80198b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80198b4:	4113      	asrs	r3, r2
 80198b6:	2200      	movs	r2, #0
 80198b8:	e008      	b.n	80198cc <__ulp+0x34>
 80198ba:	f1a2 0314 	sub.w	r3, r2, #20
 80198be:	2b1e      	cmp	r3, #30
 80198c0:	bfda      	itte	le
 80198c2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80198c6:	40da      	lsrle	r2, r3
 80198c8:	2201      	movgt	r2, #1
 80198ca:	2300      	movs	r3, #0
 80198cc:	4619      	mov	r1, r3
 80198ce:	4610      	mov	r0, r2
 80198d0:	4770      	bx	lr
 80198d2:	bf00      	nop
 80198d4:	7ff00000 	.word	0x7ff00000

080198d8 <__b2d>:
 80198d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80198da:	6905      	ldr	r5, [r0, #16]
 80198dc:	f100 0714 	add.w	r7, r0, #20
 80198e0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80198e4:	1f2e      	subs	r6, r5, #4
 80198e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80198ea:	4620      	mov	r0, r4
 80198ec:	f7ff fd5c 	bl	80193a8 <__hi0bits>
 80198f0:	f1c0 0220 	rsb	r2, r0, #32
 80198f4:	280a      	cmp	r0, #10
 80198f6:	f8df c06c 	ldr.w	ip, [pc, #108]	; 8019964 <__b2d+0x8c>
 80198fa:	600a      	str	r2, [r1, #0]
 80198fc:	4603      	mov	r3, r0
 80198fe:	dc12      	bgt.n	8019926 <__b2d+0x4e>
 8019900:	f1c0 0e0b 	rsb	lr, r0, #11
 8019904:	fa24 f20e 	lsr.w	r2, r4, lr
 8019908:	42b7      	cmp	r7, r6
 801990a:	ea42 010c 	orr.w	r1, r2, ip
 801990e:	bf34      	ite	cc
 8019910:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8019914:	2200      	movcs	r2, #0
 8019916:	3315      	adds	r3, #21
 8019918:	fa04 f303 	lsl.w	r3, r4, r3
 801991c:	fa22 f20e 	lsr.w	r2, r2, lr
 8019920:	431a      	orrs	r2, r3
 8019922:	4610      	mov	r0, r2
 8019924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019926:	42b7      	cmp	r7, r6
 8019928:	bf3a      	itte	cc
 801992a:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 801992e:	f1a5 0608 	subcc.w	r6, r5, #8
 8019932:	2200      	movcs	r2, #0
 8019934:	3b0b      	subs	r3, #11
 8019936:	d012      	beq.n	801995e <__b2d+0x86>
 8019938:	f1c3 0520 	rsb	r5, r3, #32
 801993c:	fa22 f105 	lsr.w	r1, r2, r5
 8019940:	409c      	lsls	r4, r3
 8019942:	430c      	orrs	r4, r1
 8019944:	42be      	cmp	r6, r7
 8019946:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 801994a:	bf8c      	ite	hi
 801994c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019950:	2400      	movls	r4, #0
 8019952:	409a      	lsls	r2, r3
 8019954:	40ec      	lsrs	r4, r5
 8019956:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801995a:	4322      	orrs	r2, r4
 801995c:	e7e1      	b.n	8019922 <__b2d+0x4a>
 801995e:	ea44 010c 	orr.w	r1, r4, ip
 8019962:	e7de      	b.n	8019922 <__b2d+0x4a>
 8019964:	3ff00000 	.word	0x3ff00000

08019968 <__d2b>:
 8019968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801996a:	2101      	movs	r1, #1
 801996c:	9e08      	ldr	r6, [sp, #32]
 801996e:	4617      	mov	r7, r2
 8019970:	461c      	mov	r4, r3
 8019972:	f7ff fc27 	bl	80191c4 <_Balloc>
 8019976:	4605      	mov	r5, r0
 8019978:	b930      	cbnz	r0, 8019988 <__d2b+0x20>
 801997a:	4602      	mov	r2, r0
 801997c:	4b23      	ldr	r3, [pc, #140]	; (8019a0c <__d2b+0xa4>)
 801997e:	4824      	ldr	r0, [pc, #144]	; (8019a10 <__d2b+0xa8>)
 8019980:	f240 310f 	movw	r1, #783	; 0x30f
 8019984:	f001 fece 	bl	801b724 <__assert_func>
 8019988:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801998c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8019990:	bb24      	cbnz	r4, 80199dc <__d2b+0x74>
 8019992:	2f00      	cmp	r7, #0
 8019994:	9301      	str	r3, [sp, #4]
 8019996:	d026      	beq.n	80199e6 <__d2b+0x7e>
 8019998:	4668      	mov	r0, sp
 801999a:	9700      	str	r7, [sp, #0]
 801999c:	f7ff fd24 	bl	80193e8 <__lo0bits>
 80199a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80199a4:	b1e8      	cbz	r0, 80199e2 <__d2b+0x7a>
 80199a6:	f1c0 0320 	rsb	r3, r0, #32
 80199aa:	fa02 f303 	lsl.w	r3, r2, r3
 80199ae:	430b      	orrs	r3, r1
 80199b0:	40c2      	lsrs	r2, r0
 80199b2:	616b      	str	r3, [r5, #20]
 80199b4:	9201      	str	r2, [sp, #4]
 80199b6:	9b01      	ldr	r3, [sp, #4]
 80199b8:	61ab      	str	r3, [r5, #24]
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	bf14      	ite	ne
 80199be:	2102      	movne	r1, #2
 80199c0:	2101      	moveq	r1, #1
 80199c2:	6129      	str	r1, [r5, #16]
 80199c4:	b1bc      	cbz	r4, 80199f6 <__d2b+0x8e>
 80199c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80199ca:	4404      	add	r4, r0
 80199cc:	6034      	str	r4, [r6, #0]
 80199ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80199d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80199d4:	6018      	str	r0, [r3, #0]
 80199d6:	4628      	mov	r0, r5
 80199d8:	b003      	add	sp, #12
 80199da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80199dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80199e0:	e7d7      	b.n	8019992 <__d2b+0x2a>
 80199e2:	6169      	str	r1, [r5, #20]
 80199e4:	e7e7      	b.n	80199b6 <__d2b+0x4e>
 80199e6:	a801      	add	r0, sp, #4
 80199e8:	f7ff fcfe 	bl	80193e8 <__lo0bits>
 80199ec:	9b01      	ldr	r3, [sp, #4]
 80199ee:	616b      	str	r3, [r5, #20]
 80199f0:	3020      	adds	r0, #32
 80199f2:	2101      	movs	r1, #1
 80199f4:	e7e5      	b.n	80199c2 <__d2b+0x5a>
 80199f6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80199fa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80199fe:	6030      	str	r0, [r6, #0]
 8019a00:	6918      	ldr	r0, [r3, #16]
 8019a02:	f7ff fcd1 	bl	80193a8 <__hi0bits>
 8019a06:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8019a0a:	e7e2      	b.n	80199d2 <__d2b+0x6a>
 8019a0c:	0801ec1e 	.word	0x0801ec1e
 8019a10:	0801ec2f 	.word	0x0801ec2f

08019a14 <__ratio>:
 8019a14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a18:	4688      	mov	r8, r1
 8019a1a:	4669      	mov	r1, sp
 8019a1c:	4681      	mov	r9, r0
 8019a1e:	f7ff ff5b 	bl	80198d8 <__b2d>
 8019a22:	460f      	mov	r7, r1
 8019a24:	4604      	mov	r4, r0
 8019a26:	460d      	mov	r5, r1
 8019a28:	4640      	mov	r0, r8
 8019a2a:	a901      	add	r1, sp, #4
 8019a2c:	f7ff ff54 	bl	80198d8 <__b2d>
 8019a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019a34:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019a38:	eba3 0c02 	sub.w	ip, r3, r2
 8019a3c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8019a40:	1a9b      	subs	r3, r3, r2
 8019a42:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019a46:	2b00      	cmp	r3, #0
 8019a48:	bfd5      	itete	le
 8019a4a:	460a      	movle	r2, r1
 8019a4c:	462a      	movgt	r2, r5
 8019a4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019a52:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019a56:	468b      	mov	fp, r1
 8019a58:	bfd8      	it	le
 8019a5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8019a5e:	465b      	mov	r3, fp
 8019a60:	4602      	mov	r2, r0
 8019a62:	4639      	mov	r1, r7
 8019a64:	4620      	mov	r0, r4
 8019a66:	f7e6 fec9 	bl	80007fc <__aeabi_ddiv>
 8019a6a:	b003      	add	sp, #12
 8019a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019a70 <__copybits>:
 8019a70:	3901      	subs	r1, #1
 8019a72:	b570      	push	{r4, r5, r6, lr}
 8019a74:	1149      	asrs	r1, r1, #5
 8019a76:	6914      	ldr	r4, [r2, #16]
 8019a78:	3101      	adds	r1, #1
 8019a7a:	f102 0314 	add.w	r3, r2, #20
 8019a7e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019a82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019a86:	1f05      	subs	r5, r0, #4
 8019a88:	42a3      	cmp	r3, r4
 8019a8a:	d30c      	bcc.n	8019aa6 <__copybits+0x36>
 8019a8c:	1aa3      	subs	r3, r4, r2
 8019a8e:	3b11      	subs	r3, #17
 8019a90:	f023 0303 	bic.w	r3, r3, #3
 8019a94:	3211      	adds	r2, #17
 8019a96:	42a2      	cmp	r2, r4
 8019a98:	bf88      	it	hi
 8019a9a:	2300      	movhi	r3, #0
 8019a9c:	4418      	add	r0, r3
 8019a9e:	2300      	movs	r3, #0
 8019aa0:	4288      	cmp	r0, r1
 8019aa2:	d305      	bcc.n	8019ab0 <__copybits+0x40>
 8019aa4:	bd70      	pop	{r4, r5, r6, pc}
 8019aa6:	f853 6b04 	ldr.w	r6, [r3], #4
 8019aaa:	f845 6f04 	str.w	r6, [r5, #4]!
 8019aae:	e7eb      	b.n	8019a88 <__copybits+0x18>
 8019ab0:	f840 3b04 	str.w	r3, [r0], #4
 8019ab4:	e7f4      	b.n	8019aa0 <__copybits+0x30>

08019ab6 <__any_on>:
 8019ab6:	f100 0214 	add.w	r2, r0, #20
 8019aba:	6900      	ldr	r0, [r0, #16]
 8019abc:	114b      	asrs	r3, r1, #5
 8019abe:	4298      	cmp	r0, r3
 8019ac0:	b510      	push	{r4, lr}
 8019ac2:	db11      	blt.n	8019ae8 <__any_on+0x32>
 8019ac4:	dd0a      	ble.n	8019adc <__any_on+0x26>
 8019ac6:	f011 011f 	ands.w	r1, r1, #31
 8019aca:	d007      	beq.n	8019adc <__any_on+0x26>
 8019acc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019ad0:	fa24 f001 	lsr.w	r0, r4, r1
 8019ad4:	fa00 f101 	lsl.w	r1, r0, r1
 8019ad8:	428c      	cmp	r4, r1
 8019ada:	d10b      	bne.n	8019af4 <__any_on+0x3e>
 8019adc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019ae0:	4293      	cmp	r3, r2
 8019ae2:	d803      	bhi.n	8019aec <__any_on+0x36>
 8019ae4:	2000      	movs	r0, #0
 8019ae6:	bd10      	pop	{r4, pc}
 8019ae8:	4603      	mov	r3, r0
 8019aea:	e7f7      	b.n	8019adc <__any_on+0x26>
 8019aec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019af0:	2900      	cmp	r1, #0
 8019af2:	d0f5      	beq.n	8019ae0 <__any_on+0x2a>
 8019af4:	2001      	movs	r0, #1
 8019af6:	e7f6      	b.n	8019ae6 <__any_on+0x30>

08019af8 <sulp>:
 8019af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019afc:	460f      	mov	r7, r1
 8019afe:	4690      	mov	r8, r2
 8019b00:	f7ff feca 	bl	8019898 <__ulp>
 8019b04:	4604      	mov	r4, r0
 8019b06:	460d      	mov	r5, r1
 8019b08:	f1b8 0f00 	cmp.w	r8, #0
 8019b0c:	d011      	beq.n	8019b32 <sulp+0x3a>
 8019b0e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8019b12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	dd0b      	ble.n	8019b32 <sulp+0x3a>
 8019b1a:	051b      	lsls	r3, r3, #20
 8019b1c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8019b20:	2400      	movs	r4, #0
 8019b22:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8019b26:	4622      	mov	r2, r4
 8019b28:	462b      	mov	r3, r5
 8019b2a:	f7e6 fd3d 	bl	80005a8 <__aeabi_dmul>
 8019b2e:	4604      	mov	r4, r0
 8019b30:	460d      	mov	r5, r1
 8019b32:	4620      	mov	r0, r4
 8019b34:	4629      	mov	r1, r5
 8019b36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b3a:	0000      	movs	r0, r0
 8019b3c:	0000      	movs	r0, r0
	...

08019b40 <_strtod_l>:
 8019b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b44:	b09f      	sub	sp, #124	; 0x7c
 8019b46:	4604      	mov	r4, r0
 8019b48:	9217      	str	r2, [sp, #92]	; 0x5c
 8019b4a:	2200      	movs	r2, #0
 8019b4c:	921a      	str	r2, [sp, #104]	; 0x68
 8019b4e:	460d      	mov	r5, r1
 8019b50:	f04f 0800 	mov.w	r8, #0
 8019b54:	f04f 0900 	mov.w	r9, #0
 8019b58:	460a      	mov	r2, r1
 8019b5a:	9219      	str	r2, [sp, #100]	; 0x64
 8019b5c:	7811      	ldrb	r1, [r2, #0]
 8019b5e:	292b      	cmp	r1, #43	; 0x2b
 8019b60:	d04a      	beq.n	8019bf8 <_strtod_l+0xb8>
 8019b62:	d838      	bhi.n	8019bd6 <_strtod_l+0x96>
 8019b64:	290d      	cmp	r1, #13
 8019b66:	d832      	bhi.n	8019bce <_strtod_l+0x8e>
 8019b68:	2908      	cmp	r1, #8
 8019b6a:	d832      	bhi.n	8019bd2 <_strtod_l+0x92>
 8019b6c:	2900      	cmp	r1, #0
 8019b6e:	d03b      	beq.n	8019be8 <_strtod_l+0xa8>
 8019b70:	2200      	movs	r2, #0
 8019b72:	920e      	str	r2, [sp, #56]	; 0x38
 8019b74:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8019b76:	7832      	ldrb	r2, [r6, #0]
 8019b78:	2a30      	cmp	r2, #48	; 0x30
 8019b7a:	f040 80b2 	bne.w	8019ce2 <_strtod_l+0x1a2>
 8019b7e:	7872      	ldrb	r2, [r6, #1]
 8019b80:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8019b84:	2a58      	cmp	r2, #88	; 0x58
 8019b86:	d16e      	bne.n	8019c66 <_strtod_l+0x126>
 8019b88:	9302      	str	r3, [sp, #8]
 8019b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019b8c:	9301      	str	r3, [sp, #4]
 8019b8e:	ab1a      	add	r3, sp, #104	; 0x68
 8019b90:	9300      	str	r3, [sp, #0]
 8019b92:	4a8d      	ldr	r2, [pc, #564]	; (8019dc8 <_strtod_l+0x288>)
 8019b94:	ab1b      	add	r3, sp, #108	; 0x6c
 8019b96:	a919      	add	r1, sp, #100	; 0x64
 8019b98:	4620      	mov	r0, r4
 8019b9a:	f001 fe5d 	bl	801b858 <__gethex>
 8019b9e:	f010 070f 	ands.w	r7, r0, #15
 8019ba2:	4605      	mov	r5, r0
 8019ba4:	d005      	beq.n	8019bb2 <_strtod_l+0x72>
 8019ba6:	2f06      	cmp	r7, #6
 8019ba8:	d128      	bne.n	8019bfc <_strtod_l+0xbc>
 8019baa:	3601      	adds	r6, #1
 8019bac:	2300      	movs	r3, #0
 8019bae:	9619      	str	r6, [sp, #100]	; 0x64
 8019bb0:	930e      	str	r3, [sp, #56]	; 0x38
 8019bb2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019bb4:	2b00      	cmp	r3, #0
 8019bb6:	f040 859c 	bne.w	801a6f2 <_strtod_l+0xbb2>
 8019bba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019bbc:	b1cb      	cbz	r3, 8019bf2 <_strtod_l+0xb2>
 8019bbe:	4642      	mov	r2, r8
 8019bc0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019bc4:	4610      	mov	r0, r2
 8019bc6:	4619      	mov	r1, r3
 8019bc8:	b01f      	add	sp, #124	; 0x7c
 8019bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bce:	2920      	cmp	r1, #32
 8019bd0:	d1ce      	bne.n	8019b70 <_strtod_l+0x30>
 8019bd2:	3201      	adds	r2, #1
 8019bd4:	e7c1      	b.n	8019b5a <_strtod_l+0x1a>
 8019bd6:	292d      	cmp	r1, #45	; 0x2d
 8019bd8:	d1ca      	bne.n	8019b70 <_strtod_l+0x30>
 8019bda:	2101      	movs	r1, #1
 8019bdc:	910e      	str	r1, [sp, #56]	; 0x38
 8019bde:	1c51      	adds	r1, r2, #1
 8019be0:	9119      	str	r1, [sp, #100]	; 0x64
 8019be2:	7852      	ldrb	r2, [r2, #1]
 8019be4:	2a00      	cmp	r2, #0
 8019be6:	d1c5      	bne.n	8019b74 <_strtod_l+0x34>
 8019be8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8019bea:	9519      	str	r5, [sp, #100]	; 0x64
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	f040 857e 	bne.w	801a6ee <_strtod_l+0xbae>
 8019bf2:	4642      	mov	r2, r8
 8019bf4:	464b      	mov	r3, r9
 8019bf6:	e7e5      	b.n	8019bc4 <_strtod_l+0x84>
 8019bf8:	2100      	movs	r1, #0
 8019bfa:	e7ef      	b.n	8019bdc <_strtod_l+0x9c>
 8019bfc:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8019bfe:	b13a      	cbz	r2, 8019c10 <_strtod_l+0xd0>
 8019c00:	2135      	movs	r1, #53	; 0x35
 8019c02:	a81c      	add	r0, sp, #112	; 0x70
 8019c04:	f7ff ff34 	bl	8019a70 <__copybits>
 8019c08:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019c0a:	4620      	mov	r0, r4
 8019c0c:	f7ff fb1a 	bl	8019244 <_Bfree>
 8019c10:	3f01      	subs	r7, #1
 8019c12:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8019c14:	2f04      	cmp	r7, #4
 8019c16:	d806      	bhi.n	8019c26 <_strtod_l+0xe6>
 8019c18:	e8df f007 	tbb	[pc, r7]
 8019c1c:	201d0314 	.word	0x201d0314
 8019c20:	14          	.byte	0x14
 8019c21:	00          	.byte	0x00
 8019c22:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8019c26:	05e9      	lsls	r1, r5, #23
 8019c28:	bf48      	it	mi
 8019c2a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8019c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019c32:	0d1b      	lsrs	r3, r3, #20
 8019c34:	051b      	lsls	r3, r3, #20
 8019c36:	2b00      	cmp	r3, #0
 8019c38:	d1bb      	bne.n	8019bb2 <_strtod_l+0x72>
 8019c3a:	f7fe fbd3 	bl	80183e4 <__errno>
 8019c3e:	2322      	movs	r3, #34	; 0x22
 8019c40:	6003      	str	r3, [r0, #0]
 8019c42:	e7b6      	b.n	8019bb2 <_strtod_l+0x72>
 8019c44:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8019c48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019c4c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8019c50:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8019c54:	e7e7      	b.n	8019c26 <_strtod_l+0xe6>
 8019c56:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8019dcc <_strtod_l+0x28c>
 8019c5a:	e7e4      	b.n	8019c26 <_strtod_l+0xe6>
 8019c5c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8019c60:	f04f 38ff 	mov.w	r8, #4294967295
 8019c64:	e7df      	b.n	8019c26 <_strtod_l+0xe6>
 8019c66:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c68:	1c5a      	adds	r2, r3, #1
 8019c6a:	9219      	str	r2, [sp, #100]	; 0x64
 8019c6c:	785b      	ldrb	r3, [r3, #1]
 8019c6e:	2b30      	cmp	r3, #48	; 0x30
 8019c70:	d0f9      	beq.n	8019c66 <_strtod_l+0x126>
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d09d      	beq.n	8019bb2 <_strtod_l+0x72>
 8019c76:	2301      	movs	r3, #1
 8019c78:	f04f 0a00 	mov.w	sl, #0
 8019c7c:	9305      	str	r3, [sp, #20]
 8019c7e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019c80:	930b      	str	r3, [sp, #44]	; 0x2c
 8019c82:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8019c86:	46d3      	mov	fp, sl
 8019c88:	220a      	movs	r2, #10
 8019c8a:	9819      	ldr	r0, [sp, #100]	; 0x64
 8019c8c:	7806      	ldrb	r6, [r0, #0]
 8019c8e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8019c92:	b2d9      	uxtb	r1, r3
 8019c94:	2909      	cmp	r1, #9
 8019c96:	d926      	bls.n	8019ce6 <_strtod_l+0x1a6>
 8019c98:	494d      	ldr	r1, [pc, #308]	; (8019dd0 <_strtod_l+0x290>)
 8019c9a:	2201      	movs	r2, #1
 8019c9c:	f7fe fb36 	bl	801830c <strncmp>
 8019ca0:	2800      	cmp	r0, #0
 8019ca2:	d030      	beq.n	8019d06 <_strtod_l+0x1c6>
 8019ca4:	2000      	movs	r0, #0
 8019ca6:	4632      	mov	r2, r6
 8019ca8:	9008      	str	r0, [sp, #32]
 8019caa:	465e      	mov	r6, fp
 8019cac:	4603      	mov	r3, r0
 8019cae:	2a65      	cmp	r2, #101	; 0x65
 8019cb0:	d001      	beq.n	8019cb6 <_strtod_l+0x176>
 8019cb2:	2a45      	cmp	r2, #69	; 0x45
 8019cb4:	d113      	bne.n	8019cde <_strtod_l+0x19e>
 8019cb6:	b91e      	cbnz	r6, 8019cc0 <_strtod_l+0x180>
 8019cb8:	9a05      	ldr	r2, [sp, #20]
 8019cba:	4302      	orrs	r2, r0
 8019cbc:	d094      	beq.n	8019be8 <_strtod_l+0xa8>
 8019cbe:	2600      	movs	r6, #0
 8019cc0:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8019cc2:	1c6a      	adds	r2, r5, #1
 8019cc4:	9219      	str	r2, [sp, #100]	; 0x64
 8019cc6:	786a      	ldrb	r2, [r5, #1]
 8019cc8:	2a2b      	cmp	r2, #43	; 0x2b
 8019cca:	d074      	beq.n	8019db6 <_strtod_l+0x276>
 8019ccc:	2a2d      	cmp	r2, #45	; 0x2d
 8019cce:	d078      	beq.n	8019dc2 <_strtod_l+0x282>
 8019cd0:	f04f 0c00 	mov.w	ip, #0
 8019cd4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8019cd8:	2909      	cmp	r1, #9
 8019cda:	d97f      	bls.n	8019ddc <_strtod_l+0x29c>
 8019cdc:	9519      	str	r5, [sp, #100]	; 0x64
 8019cde:	2700      	movs	r7, #0
 8019ce0:	e09e      	b.n	8019e20 <_strtod_l+0x2e0>
 8019ce2:	2300      	movs	r3, #0
 8019ce4:	e7c8      	b.n	8019c78 <_strtod_l+0x138>
 8019ce6:	f1bb 0f08 	cmp.w	fp, #8
 8019cea:	bfd8      	it	le
 8019cec:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8019cee:	f100 0001 	add.w	r0, r0, #1
 8019cf2:	bfda      	itte	le
 8019cf4:	fb02 3301 	mlale	r3, r2, r1, r3
 8019cf8:	930a      	strle	r3, [sp, #40]	; 0x28
 8019cfa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8019cfe:	f10b 0b01 	add.w	fp, fp, #1
 8019d02:	9019      	str	r0, [sp, #100]	; 0x64
 8019d04:	e7c1      	b.n	8019c8a <_strtod_l+0x14a>
 8019d06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d08:	1c5a      	adds	r2, r3, #1
 8019d0a:	9219      	str	r2, [sp, #100]	; 0x64
 8019d0c:	785a      	ldrb	r2, [r3, #1]
 8019d0e:	f1bb 0f00 	cmp.w	fp, #0
 8019d12:	d037      	beq.n	8019d84 <_strtod_l+0x244>
 8019d14:	9008      	str	r0, [sp, #32]
 8019d16:	465e      	mov	r6, fp
 8019d18:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8019d1c:	2b09      	cmp	r3, #9
 8019d1e:	d912      	bls.n	8019d46 <_strtod_l+0x206>
 8019d20:	2301      	movs	r3, #1
 8019d22:	e7c4      	b.n	8019cae <_strtod_l+0x16e>
 8019d24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d26:	1c5a      	adds	r2, r3, #1
 8019d28:	9219      	str	r2, [sp, #100]	; 0x64
 8019d2a:	785a      	ldrb	r2, [r3, #1]
 8019d2c:	3001      	adds	r0, #1
 8019d2e:	2a30      	cmp	r2, #48	; 0x30
 8019d30:	d0f8      	beq.n	8019d24 <_strtod_l+0x1e4>
 8019d32:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8019d36:	2b08      	cmp	r3, #8
 8019d38:	f200 84e0 	bhi.w	801a6fc <_strtod_l+0xbbc>
 8019d3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019d3e:	9008      	str	r0, [sp, #32]
 8019d40:	2000      	movs	r0, #0
 8019d42:	930b      	str	r3, [sp, #44]	; 0x2c
 8019d44:	4606      	mov	r6, r0
 8019d46:	3a30      	subs	r2, #48	; 0x30
 8019d48:	f100 0301 	add.w	r3, r0, #1
 8019d4c:	d014      	beq.n	8019d78 <_strtod_l+0x238>
 8019d4e:	9908      	ldr	r1, [sp, #32]
 8019d50:	4419      	add	r1, r3
 8019d52:	9108      	str	r1, [sp, #32]
 8019d54:	4633      	mov	r3, r6
 8019d56:	eb00 0c06 	add.w	ip, r0, r6
 8019d5a:	210a      	movs	r1, #10
 8019d5c:	4563      	cmp	r3, ip
 8019d5e:	d113      	bne.n	8019d88 <_strtod_l+0x248>
 8019d60:	1833      	adds	r3, r6, r0
 8019d62:	2b08      	cmp	r3, #8
 8019d64:	f106 0601 	add.w	r6, r6, #1
 8019d68:	4406      	add	r6, r0
 8019d6a:	dc1a      	bgt.n	8019da2 <_strtod_l+0x262>
 8019d6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8019d6e:	230a      	movs	r3, #10
 8019d70:	fb03 2301 	mla	r3, r3, r1, r2
 8019d74:	930a      	str	r3, [sp, #40]	; 0x28
 8019d76:	2300      	movs	r3, #0
 8019d78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019d7a:	1c51      	adds	r1, r2, #1
 8019d7c:	9119      	str	r1, [sp, #100]	; 0x64
 8019d7e:	7852      	ldrb	r2, [r2, #1]
 8019d80:	4618      	mov	r0, r3
 8019d82:	e7c9      	b.n	8019d18 <_strtod_l+0x1d8>
 8019d84:	4658      	mov	r0, fp
 8019d86:	e7d2      	b.n	8019d2e <_strtod_l+0x1ee>
 8019d88:	2b08      	cmp	r3, #8
 8019d8a:	f103 0301 	add.w	r3, r3, #1
 8019d8e:	dc03      	bgt.n	8019d98 <_strtod_l+0x258>
 8019d90:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8019d92:	434f      	muls	r7, r1
 8019d94:	970a      	str	r7, [sp, #40]	; 0x28
 8019d96:	e7e1      	b.n	8019d5c <_strtod_l+0x21c>
 8019d98:	2b10      	cmp	r3, #16
 8019d9a:	bfd8      	it	le
 8019d9c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8019da0:	e7dc      	b.n	8019d5c <_strtod_l+0x21c>
 8019da2:	2e10      	cmp	r6, #16
 8019da4:	bfdc      	itt	le
 8019da6:	230a      	movle	r3, #10
 8019da8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8019dac:	e7e3      	b.n	8019d76 <_strtod_l+0x236>
 8019dae:	2300      	movs	r3, #0
 8019db0:	9308      	str	r3, [sp, #32]
 8019db2:	2301      	movs	r3, #1
 8019db4:	e780      	b.n	8019cb8 <_strtod_l+0x178>
 8019db6:	f04f 0c00 	mov.w	ip, #0
 8019dba:	1caa      	adds	r2, r5, #2
 8019dbc:	9219      	str	r2, [sp, #100]	; 0x64
 8019dbe:	78aa      	ldrb	r2, [r5, #2]
 8019dc0:	e788      	b.n	8019cd4 <_strtod_l+0x194>
 8019dc2:	f04f 0c01 	mov.w	ip, #1
 8019dc6:	e7f8      	b.n	8019dba <_strtod_l+0x27a>
 8019dc8:	0801ed88 	.word	0x0801ed88
 8019dcc:	7ff00000 	.word	0x7ff00000
 8019dd0:	0801ed84 	.word	0x0801ed84
 8019dd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019dd6:	1c51      	adds	r1, r2, #1
 8019dd8:	9119      	str	r1, [sp, #100]	; 0x64
 8019dda:	7852      	ldrb	r2, [r2, #1]
 8019ddc:	2a30      	cmp	r2, #48	; 0x30
 8019dde:	d0f9      	beq.n	8019dd4 <_strtod_l+0x294>
 8019de0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8019de4:	2908      	cmp	r1, #8
 8019de6:	f63f af7a 	bhi.w	8019cde <_strtod_l+0x19e>
 8019dea:	3a30      	subs	r2, #48	; 0x30
 8019dec:	9209      	str	r2, [sp, #36]	; 0x24
 8019dee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019df0:	920c      	str	r2, [sp, #48]	; 0x30
 8019df2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8019df4:	1c57      	adds	r7, r2, #1
 8019df6:	9719      	str	r7, [sp, #100]	; 0x64
 8019df8:	7852      	ldrb	r2, [r2, #1]
 8019dfa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8019dfe:	f1be 0f09 	cmp.w	lr, #9
 8019e02:	d938      	bls.n	8019e76 <_strtod_l+0x336>
 8019e04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019e06:	1a7f      	subs	r7, r7, r1
 8019e08:	2f08      	cmp	r7, #8
 8019e0a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8019e0e:	dc03      	bgt.n	8019e18 <_strtod_l+0x2d8>
 8019e10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019e12:	428f      	cmp	r7, r1
 8019e14:	bfa8      	it	ge
 8019e16:	460f      	movge	r7, r1
 8019e18:	f1bc 0f00 	cmp.w	ip, #0
 8019e1c:	d000      	beq.n	8019e20 <_strtod_l+0x2e0>
 8019e1e:	427f      	negs	r7, r7
 8019e20:	2e00      	cmp	r6, #0
 8019e22:	d14f      	bne.n	8019ec4 <_strtod_l+0x384>
 8019e24:	9905      	ldr	r1, [sp, #20]
 8019e26:	4301      	orrs	r1, r0
 8019e28:	f47f aec3 	bne.w	8019bb2 <_strtod_l+0x72>
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	f47f aedb 	bne.w	8019be8 <_strtod_l+0xa8>
 8019e32:	2a69      	cmp	r2, #105	; 0x69
 8019e34:	d029      	beq.n	8019e8a <_strtod_l+0x34a>
 8019e36:	dc26      	bgt.n	8019e86 <_strtod_l+0x346>
 8019e38:	2a49      	cmp	r2, #73	; 0x49
 8019e3a:	d026      	beq.n	8019e8a <_strtod_l+0x34a>
 8019e3c:	2a4e      	cmp	r2, #78	; 0x4e
 8019e3e:	f47f aed3 	bne.w	8019be8 <_strtod_l+0xa8>
 8019e42:	499a      	ldr	r1, [pc, #616]	; (801a0ac <_strtod_l+0x56c>)
 8019e44:	a819      	add	r0, sp, #100	; 0x64
 8019e46:	f001 ff49 	bl	801bcdc <__match>
 8019e4a:	2800      	cmp	r0, #0
 8019e4c:	f43f aecc 	beq.w	8019be8 <_strtod_l+0xa8>
 8019e50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e52:	781b      	ldrb	r3, [r3, #0]
 8019e54:	2b28      	cmp	r3, #40	; 0x28
 8019e56:	d12f      	bne.n	8019eb8 <_strtod_l+0x378>
 8019e58:	4995      	ldr	r1, [pc, #596]	; (801a0b0 <_strtod_l+0x570>)
 8019e5a:	aa1c      	add	r2, sp, #112	; 0x70
 8019e5c:	a819      	add	r0, sp, #100	; 0x64
 8019e5e:	f001 ff51 	bl	801bd04 <__hexnan>
 8019e62:	2805      	cmp	r0, #5
 8019e64:	d128      	bne.n	8019eb8 <_strtod_l+0x378>
 8019e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8019e68:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8019e6c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8019e70:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8019e74:	e69d      	b.n	8019bb2 <_strtod_l+0x72>
 8019e76:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8019e78:	210a      	movs	r1, #10
 8019e7a:	fb01 2107 	mla	r1, r1, r7, r2
 8019e7e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8019e82:	9209      	str	r2, [sp, #36]	; 0x24
 8019e84:	e7b5      	b.n	8019df2 <_strtod_l+0x2b2>
 8019e86:	2a6e      	cmp	r2, #110	; 0x6e
 8019e88:	e7d9      	b.n	8019e3e <_strtod_l+0x2fe>
 8019e8a:	498a      	ldr	r1, [pc, #552]	; (801a0b4 <_strtod_l+0x574>)
 8019e8c:	a819      	add	r0, sp, #100	; 0x64
 8019e8e:	f001 ff25 	bl	801bcdc <__match>
 8019e92:	2800      	cmp	r0, #0
 8019e94:	f43f aea8 	beq.w	8019be8 <_strtod_l+0xa8>
 8019e98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019e9a:	4987      	ldr	r1, [pc, #540]	; (801a0b8 <_strtod_l+0x578>)
 8019e9c:	3b01      	subs	r3, #1
 8019e9e:	a819      	add	r0, sp, #100	; 0x64
 8019ea0:	9319      	str	r3, [sp, #100]	; 0x64
 8019ea2:	f001 ff1b 	bl	801bcdc <__match>
 8019ea6:	b910      	cbnz	r0, 8019eae <_strtod_l+0x36e>
 8019ea8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019eaa:	3301      	adds	r3, #1
 8019eac:	9319      	str	r3, [sp, #100]	; 0x64
 8019eae:	f8df 920c 	ldr.w	r9, [pc, #524]	; 801a0bc <_strtod_l+0x57c>
 8019eb2:	f04f 0800 	mov.w	r8, #0
 8019eb6:	e67c      	b.n	8019bb2 <_strtod_l+0x72>
 8019eb8:	4881      	ldr	r0, [pc, #516]	; (801a0c0 <_strtod_l+0x580>)
 8019eba:	f001 fc2d 	bl	801b718 <nan>
 8019ebe:	4680      	mov	r8, r0
 8019ec0:	4689      	mov	r9, r1
 8019ec2:	e676      	b.n	8019bb2 <_strtod_l+0x72>
 8019ec4:	9b08      	ldr	r3, [sp, #32]
 8019ec6:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019ec8:	1afb      	subs	r3, r7, r3
 8019eca:	f1bb 0f00 	cmp.w	fp, #0
 8019ece:	bf08      	it	eq
 8019ed0:	46b3      	moveq	fp, r6
 8019ed2:	2e10      	cmp	r6, #16
 8019ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8019ed6:	4635      	mov	r5, r6
 8019ed8:	bfa8      	it	ge
 8019eda:	2510      	movge	r5, #16
 8019edc:	f7e6 faea 	bl	80004b4 <__aeabi_ui2d>
 8019ee0:	2e09      	cmp	r6, #9
 8019ee2:	4680      	mov	r8, r0
 8019ee4:	4689      	mov	r9, r1
 8019ee6:	dd13      	ble.n	8019f10 <_strtod_l+0x3d0>
 8019ee8:	4b76      	ldr	r3, [pc, #472]	; (801a0c4 <_strtod_l+0x584>)
 8019eea:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019eee:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8019ef2:	f7e6 fb59 	bl	80005a8 <__aeabi_dmul>
 8019ef6:	4680      	mov	r8, r0
 8019ef8:	4650      	mov	r0, sl
 8019efa:	4689      	mov	r9, r1
 8019efc:	f7e6 fada 	bl	80004b4 <__aeabi_ui2d>
 8019f00:	4602      	mov	r2, r0
 8019f02:	460b      	mov	r3, r1
 8019f04:	4640      	mov	r0, r8
 8019f06:	4649      	mov	r1, r9
 8019f08:	f7e6 f998 	bl	800023c <__adddf3>
 8019f0c:	4680      	mov	r8, r0
 8019f0e:	4689      	mov	r9, r1
 8019f10:	2e0f      	cmp	r6, #15
 8019f12:	dc36      	bgt.n	8019f82 <_strtod_l+0x442>
 8019f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f16:	2b00      	cmp	r3, #0
 8019f18:	f43f ae4b 	beq.w	8019bb2 <_strtod_l+0x72>
 8019f1c:	dd22      	ble.n	8019f64 <_strtod_l+0x424>
 8019f1e:	2b16      	cmp	r3, #22
 8019f20:	dc09      	bgt.n	8019f36 <_strtod_l+0x3f6>
 8019f22:	4968      	ldr	r1, [pc, #416]	; (801a0c4 <_strtod_l+0x584>)
 8019f24:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f2c:	4642      	mov	r2, r8
 8019f2e:	464b      	mov	r3, r9
 8019f30:	f7e6 fb3a 	bl	80005a8 <__aeabi_dmul>
 8019f34:	e7c3      	b.n	8019ebe <_strtod_l+0x37e>
 8019f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f38:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8019f3c:	4293      	cmp	r3, r2
 8019f3e:	db20      	blt.n	8019f82 <_strtod_l+0x442>
 8019f40:	4c60      	ldr	r4, [pc, #384]	; (801a0c4 <_strtod_l+0x584>)
 8019f42:	f1c6 060f 	rsb	r6, r6, #15
 8019f46:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8019f4a:	4642      	mov	r2, r8
 8019f4c:	464b      	mov	r3, r9
 8019f4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019f52:	f7e6 fb29 	bl	80005a8 <__aeabi_dmul>
 8019f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f58:	1b9e      	subs	r6, r3, r6
 8019f5a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8019f5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019f62:	e7e5      	b.n	8019f30 <_strtod_l+0x3f0>
 8019f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f66:	3316      	adds	r3, #22
 8019f68:	db0b      	blt.n	8019f82 <_strtod_l+0x442>
 8019f6a:	9b08      	ldr	r3, [sp, #32]
 8019f6c:	1bdf      	subs	r7, r3, r7
 8019f6e:	4b55      	ldr	r3, [pc, #340]	; (801a0c4 <_strtod_l+0x584>)
 8019f70:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019f74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019f78:	4640      	mov	r0, r8
 8019f7a:	4649      	mov	r1, r9
 8019f7c:	f7e6 fc3e 	bl	80007fc <__aeabi_ddiv>
 8019f80:	e79d      	b.n	8019ebe <_strtod_l+0x37e>
 8019f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f84:	1b75      	subs	r5, r6, r5
 8019f86:	441d      	add	r5, r3
 8019f88:	2d00      	cmp	r5, #0
 8019f8a:	dd70      	ble.n	801a06e <_strtod_l+0x52e>
 8019f8c:	f015 030f 	ands.w	r3, r5, #15
 8019f90:	d00a      	beq.n	8019fa8 <_strtod_l+0x468>
 8019f92:	494c      	ldr	r1, [pc, #304]	; (801a0c4 <_strtod_l+0x584>)
 8019f94:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8019f98:	4642      	mov	r2, r8
 8019f9a:	464b      	mov	r3, r9
 8019f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019fa0:	f7e6 fb02 	bl	80005a8 <__aeabi_dmul>
 8019fa4:	4680      	mov	r8, r0
 8019fa6:	4689      	mov	r9, r1
 8019fa8:	f035 050f 	bics.w	r5, r5, #15
 8019fac:	d04d      	beq.n	801a04a <_strtod_l+0x50a>
 8019fae:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8019fb2:	dd22      	ble.n	8019ffa <_strtod_l+0x4ba>
 8019fb4:	2600      	movs	r6, #0
 8019fb6:	46b3      	mov	fp, r6
 8019fb8:	960b      	str	r6, [sp, #44]	; 0x2c
 8019fba:	9608      	str	r6, [sp, #32]
 8019fbc:	2322      	movs	r3, #34	; 0x22
 8019fbe:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 801a0bc <_strtod_l+0x57c>
 8019fc2:	6023      	str	r3, [r4, #0]
 8019fc4:	f04f 0800 	mov.w	r8, #0
 8019fc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019fca:	2b00      	cmp	r3, #0
 8019fcc:	f43f adf1 	beq.w	8019bb2 <_strtod_l+0x72>
 8019fd0:	991a      	ldr	r1, [sp, #104]	; 0x68
 8019fd2:	4620      	mov	r0, r4
 8019fd4:	f7ff f936 	bl	8019244 <_Bfree>
 8019fd8:	9908      	ldr	r1, [sp, #32]
 8019fda:	4620      	mov	r0, r4
 8019fdc:	f7ff f932 	bl	8019244 <_Bfree>
 8019fe0:	4659      	mov	r1, fp
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	f7ff f92e 	bl	8019244 <_Bfree>
 8019fe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019fea:	4620      	mov	r0, r4
 8019fec:	f7ff f92a 	bl	8019244 <_Bfree>
 8019ff0:	4631      	mov	r1, r6
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	f7ff f926 	bl	8019244 <_Bfree>
 8019ff8:	e5db      	b.n	8019bb2 <_strtod_l+0x72>
 8019ffa:	4b33      	ldr	r3, [pc, #204]	; (801a0c8 <_strtod_l+0x588>)
 8019ffc:	9305      	str	r3, [sp, #20]
 8019ffe:	2300      	movs	r3, #0
 801a000:	112d      	asrs	r5, r5, #4
 801a002:	4640      	mov	r0, r8
 801a004:	4649      	mov	r1, r9
 801a006:	469a      	mov	sl, r3
 801a008:	2d01      	cmp	r5, #1
 801a00a:	dc21      	bgt.n	801a050 <_strtod_l+0x510>
 801a00c:	b10b      	cbz	r3, 801a012 <_strtod_l+0x4d2>
 801a00e:	4680      	mov	r8, r0
 801a010:	4689      	mov	r9, r1
 801a012:	492d      	ldr	r1, [pc, #180]	; (801a0c8 <_strtod_l+0x588>)
 801a014:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801a018:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801a01c:	4642      	mov	r2, r8
 801a01e:	464b      	mov	r3, r9
 801a020:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a024:	f7e6 fac0 	bl	80005a8 <__aeabi_dmul>
 801a028:	4b24      	ldr	r3, [pc, #144]	; (801a0bc <_strtod_l+0x57c>)
 801a02a:	460a      	mov	r2, r1
 801a02c:	400b      	ands	r3, r1
 801a02e:	4927      	ldr	r1, [pc, #156]	; (801a0cc <_strtod_l+0x58c>)
 801a030:	428b      	cmp	r3, r1
 801a032:	4680      	mov	r8, r0
 801a034:	d8be      	bhi.n	8019fb4 <_strtod_l+0x474>
 801a036:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801a03a:	428b      	cmp	r3, r1
 801a03c:	bf86      	itte	hi
 801a03e:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801a0d0 <_strtod_l+0x590>
 801a042:	f04f 38ff 	movhi.w	r8, #4294967295
 801a046:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801a04a:	2300      	movs	r3, #0
 801a04c:	9305      	str	r3, [sp, #20]
 801a04e:	e07b      	b.n	801a148 <_strtod_l+0x608>
 801a050:	07ea      	lsls	r2, r5, #31
 801a052:	d505      	bpl.n	801a060 <_strtod_l+0x520>
 801a054:	9b05      	ldr	r3, [sp, #20]
 801a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a05a:	f7e6 faa5 	bl	80005a8 <__aeabi_dmul>
 801a05e:	2301      	movs	r3, #1
 801a060:	9a05      	ldr	r2, [sp, #20]
 801a062:	3208      	adds	r2, #8
 801a064:	f10a 0a01 	add.w	sl, sl, #1
 801a068:	106d      	asrs	r5, r5, #1
 801a06a:	9205      	str	r2, [sp, #20]
 801a06c:	e7cc      	b.n	801a008 <_strtod_l+0x4c8>
 801a06e:	d0ec      	beq.n	801a04a <_strtod_l+0x50a>
 801a070:	426d      	negs	r5, r5
 801a072:	f015 020f 	ands.w	r2, r5, #15
 801a076:	d00a      	beq.n	801a08e <_strtod_l+0x54e>
 801a078:	4b12      	ldr	r3, [pc, #72]	; (801a0c4 <_strtod_l+0x584>)
 801a07a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801a07e:	4640      	mov	r0, r8
 801a080:	4649      	mov	r1, r9
 801a082:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a086:	f7e6 fbb9 	bl	80007fc <__aeabi_ddiv>
 801a08a:	4680      	mov	r8, r0
 801a08c:	4689      	mov	r9, r1
 801a08e:	112d      	asrs	r5, r5, #4
 801a090:	d0db      	beq.n	801a04a <_strtod_l+0x50a>
 801a092:	2d1f      	cmp	r5, #31
 801a094:	dd1e      	ble.n	801a0d4 <_strtod_l+0x594>
 801a096:	2600      	movs	r6, #0
 801a098:	46b3      	mov	fp, r6
 801a09a:	960b      	str	r6, [sp, #44]	; 0x2c
 801a09c:	9608      	str	r6, [sp, #32]
 801a09e:	2322      	movs	r3, #34	; 0x22
 801a0a0:	f04f 0800 	mov.w	r8, #0
 801a0a4:	f04f 0900 	mov.w	r9, #0
 801a0a8:	6023      	str	r3, [r4, #0]
 801a0aa:	e78d      	b.n	8019fc8 <_strtod_l+0x488>
 801a0ac:	0801eb78 	.word	0x0801eb78
 801a0b0:	0801ed9c 	.word	0x0801ed9c
 801a0b4:	0801eb70 	.word	0x0801eb70
 801a0b8:	0801eba5 	.word	0x0801eba5
 801a0bc:	7ff00000 	.word	0x7ff00000
 801a0c0:	0801ef48 	.word	0x0801ef48
 801a0c4:	0801ecb0 	.word	0x0801ecb0
 801a0c8:	0801ec88 	.word	0x0801ec88
 801a0cc:	7ca00000 	.word	0x7ca00000
 801a0d0:	7fefffff 	.word	0x7fefffff
 801a0d4:	f015 0310 	ands.w	r3, r5, #16
 801a0d8:	bf18      	it	ne
 801a0da:	236a      	movne	r3, #106	; 0x6a
 801a0dc:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 801a3ac <_strtod_l+0x86c>
 801a0e0:	9305      	str	r3, [sp, #20]
 801a0e2:	4640      	mov	r0, r8
 801a0e4:	4649      	mov	r1, r9
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	07ea      	lsls	r2, r5, #31
 801a0ea:	d504      	bpl.n	801a0f6 <_strtod_l+0x5b6>
 801a0ec:	e9da 2300 	ldrd	r2, r3, [sl]
 801a0f0:	f7e6 fa5a 	bl	80005a8 <__aeabi_dmul>
 801a0f4:	2301      	movs	r3, #1
 801a0f6:	106d      	asrs	r5, r5, #1
 801a0f8:	f10a 0a08 	add.w	sl, sl, #8
 801a0fc:	d1f4      	bne.n	801a0e8 <_strtod_l+0x5a8>
 801a0fe:	b10b      	cbz	r3, 801a104 <_strtod_l+0x5c4>
 801a100:	4680      	mov	r8, r0
 801a102:	4689      	mov	r9, r1
 801a104:	9b05      	ldr	r3, [sp, #20]
 801a106:	b1bb      	cbz	r3, 801a138 <_strtod_l+0x5f8>
 801a108:	f3c9 520a 	ubfx	r2, r9, #20, #11
 801a10c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801a110:	2b00      	cmp	r3, #0
 801a112:	4649      	mov	r1, r9
 801a114:	dd10      	ble.n	801a138 <_strtod_l+0x5f8>
 801a116:	2b1f      	cmp	r3, #31
 801a118:	f340 8125 	ble.w	801a366 <_strtod_l+0x826>
 801a11c:	2b34      	cmp	r3, #52	; 0x34
 801a11e:	bfde      	ittt	le
 801a120:	f04f 33ff 	movle.w	r3, #4294967295
 801a124:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801a128:	4093      	lslle	r3, r2
 801a12a:	f04f 0800 	mov.w	r8, #0
 801a12e:	bfcc      	ite	gt
 801a130:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801a134:	ea03 0901 	andle.w	r9, r3, r1
 801a138:	2200      	movs	r2, #0
 801a13a:	2300      	movs	r3, #0
 801a13c:	4640      	mov	r0, r8
 801a13e:	4649      	mov	r1, r9
 801a140:	f7e6 fc9a 	bl	8000a78 <__aeabi_dcmpeq>
 801a144:	2800      	cmp	r0, #0
 801a146:	d1a6      	bne.n	801a096 <_strtod_l+0x556>
 801a148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a14a:	9300      	str	r3, [sp, #0]
 801a14c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801a14e:	4633      	mov	r3, r6
 801a150:	465a      	mov	r2, fp
 801a152:	4620      	mov	r0, r4
 801a154:	f7ff f8de 	bl	8019314 <__s2b>
 801a158:	900b      	str	r0, [sp, #44]	; 0x2c
 801a15a:	2800      	cmp	r0, #0
 801a15c:	f43f af2a 	beq.w	8019fb4 <_strtod_l+0x474>
 801a160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a162:	9b08      	ldr	r3, [sp, #32]
 801a164:	2a00      	cmp	r2, #0
 801a166:	eba3 0307 	sub.w	r3, r3, r7
 801a16a:	bfa8      	it	ge
 801a16c:	2300      	movge	r3, #0
 801a16e:	9312      	str	r3, [sp, #72]	; 0x48
 801a170:	2600      	movs	r6, #0
 801a172:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801a176:	9316      	str	r3, [sp, #88]	; 0x58
 801a178:	46b3      	mov	fp, r6
 801a17a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a17c:	4620      	mov	r0, r4
 801a17e:	6859      	ldr	r1, [r3, #4]
 801a180:	f7ff f820 	bl	80191c4 <_Balloc>
 801a184:	9008      	str	r0, [sp, #32]
 801a186:	2800      	cmp	r0, #0
 801a188:	f43f af18 	beq.w	8019fbc <_strtod_l+0x47c>
 801a18c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a18e:	691a      	ldr	r2, [r3, #16]
 801a190:	3202      	adds	r2, #2
 801a192:	f103 010c 	add.w	r1, r3, #12
 801a196:	0092      	lsls	r2, r2, #2
 801a198:	300c      	adds	r0, #12
 801a19a:	f7fe f950 	bl	801843e <memcpy>
 801a19e:	ab1c      	add	r3, sp, #112	; 0x70
 801a1a0:	9301      	str	r3, [sp, #4]
 801a1a2:	ab1b      	add	r3, sp, #108	; 0x6c
 801a1a4:	9300      	str	r3, [sp, #0]
 801a1a6:	4642      	mov	r2, r8
 801a1a8:	464b      	mov	r3, r9
 801a1aa:	4620      	mov	r0, r4
 801a1ac:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 801a1b0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 801a1b4:	f7ff fbd8 	bl	8019968 <__d2b>
 801a1b8:	901a      	str	r0, [sp, #104]	; 0x68
 801a1ba:	2800      	cmp	r0, #0
 801a1bc:	f43f aefe 	beq.w	8019fbc <_strtod_l+0x47c>
 801a1c0:	2101      	movs	r1, #1
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	f7ff f93e 	bl	8019444 <__i2b>
 801a1c8:	4683      	mov	fp, r0
 801a1ca:	2800      	cmp	r0, #0
 801a1cc:	f43f aef6 	beq.w	8019fbc <_strtod_l+0x47c>
 801a1d0:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 801a1d2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a1d4:	2f00      	cmp	r7, #0
 801a1d6:	bfab      	itete	ge
 801a1d8:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 801a1da:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801a1dc:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801a1de:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 801a1e2:	bfac      	ite	ge
 801a1e4:	eb07 0a03 	addge.w	sl, r7, r3
 801a1e8:	1bdd      	sublt	r5, r3, r7
 801a1ea:	9b05      	ldr	r3, [sp, #20]
 801a1ec:	1aff      	subs	r7, r7, r3
 801a1ee:	4417      	add	r7, r2
 801a1f0:	4b6f      	ldr	r3, [pc, #444]	; (801a3b0 <_strtod_l+0x870>)
 801a1f2:	3f01      	subs	r7, #1
 801a1f4:	429f      	cmp	r7, r3
 801a1f6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801a1fa:	f280 80c7 	bge.w	801a38c <_strtod_l+0x84c>
 801a1fe:	1bdb      	subs	r3, r3, r7
 801a200:	2b1f      	cmp	r3, #31
 801a202:	eba2 0203 	sub.w	r2, r2, r3
 801a206:	f04f 0101 	mov.w	r1, #1
 801a20a:	f300 80b3 	bgt.w	801a374 <_strtod_l+0x834>
 801a20e:	fa01 f303 	lsl.w	r3, r1, r3
 801a212:	9313      	str	r3, [sp, #76]	; 0x4c
 801a214:	2300      	movs	r3, #0
 801a216:	9310      	str	r3, [sp, #64]	; 0x40
 801a218:	eb0a 0702 	add.w	r7, sl, r2
 801a21c:	9b05      	ldr	r3, [sp, #20]
 801a21e:	45ba      	cmp	sl, r7
 801a220:	4415      	add	r5, r2
 801a222:	441d      	add	r5, r3
 801a224:	4653      	mov	r3, sl
 801a226:	bfa8      	it	ge
 801a228:	463b      	movge	r3, r7
 801a22a:	42ab      	cmp	r3, r5
 801a22c:	bfa8      	it	ge
 801a22e:	462b      	movge	r3, r5
 801a230:	2b00      	cmp	r3, #0
 801a232:	bfc2      	ittt	gt
 801a234:	1aff      	subgt	r7, r7, r3
 801a236:	1aed      	subgt	r5, r5, r3
 801a238:	ebaa 0a03 	subgt.w	sl, sl, r3
 801a23c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a23e:	2b00      	cmp	r3, #0
 801a240:	dd17      	ble.n	801a272 <_strtod_l+0x732>
 801a242:	4659      	mov	r1, fp
 801a244:	461a      	mov	r2, r3
 801a246:	4620      	mov	r0, r4
 801a248:	f7ff f9bc 	bl	80195c4 <__pow5mult>
 801a24c:	4683      	mov	fp, r0
 801a24e:	2800      	cmp	r0, #0
 801a250:	f43f aeb4 	beq.w	8019fbc <_strtod_l+0x47c>
 801a254:	4601      	mov	r1, r0
 801a256:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801a258:	4620      	mov	r0, r4
 801a25a:	f7ff f909 	bl	8019470 <__multiply>
 801a25e:	900a      	str	r0, [sp, #40]	; 0x28
 801a260:	2800      	cmp	r0, #0
 801a262:	f43f aeab 	beq.w	8019fbc <_strtod_l+0x47c>
 801a266:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a268:	4620      	mov	r0, r4
 801a26a:	f7fe ffeb 	bl	8019244 <_Bfree>
 801a26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a270:	931a      	str	r3, [sp, #104]	; 0x68
 801a272:	2f00      	cmp	r7, #0
 801a274:	f300 808f 	bgt.w	801a396 <_strtod_l+0x856>
 801a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	dd08      	ble.n	801a290 <_strtod_l+0x750>
 801a27e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801a280:	9908      	ldr	r1, [sp, #32]
 801a282:	4620      	mov	r0, r4
 801a284:	f7ff f99e 	bl	80195c4 <__pow5mult>
 801a288:	9008      	str	r0, [sp, #32]
 801a28a:	2800      	cmp	r0, #0
 801a28c:	f43f ae96 	beq.w	8019fbc <_strtod_l+0x47c>
 801a290:	2d00      	cmp	r5, #0
 801a292:	dd08      	ble.n	801a2a6 <_strtod_l+0x766>
 801a294:	9908      	ldr	r1, [sp, #32]
 801a296:	462a      	mov	r2, r5
 801a298:	4620      	mov	r0, r4
 801a29a:	f7ff f9ed 	bl	8019678 <__lshift>
 801a29e:	9008      	str	r0, [sp, #32]
 801a2a0:	2800      	cmp	r0, #0
 801a2a2:	f43f ae8b 	beq.w	8019fbc <_strtod_l+0x47c>
 801a2a6:	f1ba 0f00 	cmp.w	sl, #0
 801a2aa:	dd08      	ble.n	801a2be <_strtod_l+0x77e>
 801a2ac:	4659      	mov	r1, fp
 801a2ae:	4652      	mov	r2, sl
 801a2b0:	4620      	mov	r0, r4
 801a2b2:	f7ff f9e1 	bl	8019678 <__lshift>
 801a2b6:	4683      	mov	fp, r0
 801a2b8:	2800      	cmp	r0, #0
 801a2ba:	f43f ae7f 	beq.w	8019fbc <_strtod_l+0x47c>
 801a2be:	9a08      	ldr	r2, [sp, #32]
 801a2c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a2c2:	4620      	mov	r0, r4
 801a2c4:	f7ff fa60 	bl	8019788 <__mdiff>
 801a2c8:	4606      	mov	r6, r0
 801a2ca:	2800      	cmp	r0, #0
 801a2cc:	f43f ae76 	beq.w	8019fbc <_strtod_l+0x47c>
 801a2d0:	2500      	movs	r5, #0
 801a2d2:	68c3      	ldr	r3, [r0, #12]
 801a2d4:	60c5      	str	r5, [r0, #12]
 801a2d6:	4659      	mov	r1, fp
 801a2d8:	930a      	str	r3, [sp, #40]	; 0x28
 801a2da:	f7ff fa39 	bl	8019750 <__mcmp>
 801a2de:	42a8      	cmp	r0, r5
 801a2e0:	da6c      	bge.n	801a3bc <_strtod_l+0x87c>
 801a2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a2e4:	ea53 0308 	orrs.w	r3, r3, r8
 801a2e8:	f040 8090 	bne.w	801a40c <_strtod_l+0x8cc>
 801a2ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	f040 808b 	bne.w	801a40c <_strtod_l+0x8cc>
 801a2f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a2fa:	0d1b      	lsrs	r3, r3, #20
 801a2fc:	051b      	lsls	r3, r3, #20
 801a2fe:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801a302:	f240 8083 	bls.w	801a40c <_strtod_l+0x8cc>
 801a306:	6973      	ldr	r3, [r6, #20]
 801a308:	b913      	cbnz	r3, 801a310 <_strtod_l+0x7d0>
 801a30a:	6933      	ldr	r3, [r6, #16]
 801a30c:	2b01      	cmp	r3, #1
 801a30e:	dd7d      	ble.n	801a40c <_strtod_l+0x8cc>
 801a310:	4631      	mov	r1, r6
 801a312:	2201      	movs	r2, #1
 801a314:	4620      	mov	r0, r4
 801a316:	f7ff f9af 	bl	8019678 <__lshift>
 801a31a:	4659      	mov	r1, fp
 801a31c:	4606      	mov	r6, r0
 801a31e:	f7ff fa17 	bl	8019750 <__mcmp>
 801a322:	2800      	cmp	r0, #0
 801a324:	dd72      	ble.n	801a40c <_strtod_l+0x8cc>
 801a326:	9905      	ldr	r1, [sp, #20]
 801a328:	4a22      	ldr	r2, [pc, #136]	; (801a3b4 <_strtod_l+0x874>)
 801a32a:	464b      	mov	r3, r9
 801a32c:	2900      	cmp	r1, #0
 801a32e:	f000 808e 	beq.w	801a44e <_strtod_l+0x90e>
 801a332:	ea02 0109 	and.w	r1, r2, r9
 801a336:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801a33a:	f300 8088 	bgt.w	801a44e <_strtod_l+0x90e>
 801a33e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801a342:	f77f aeac 	ble.w	801a09e <_strtod_l+0x55e>
 801a346:	4b1c      	ldr	r3, [pc, #112]	; (801a3b8 <_strtod_l+0x878>)
 801a348:	4640      	mov	r0, r8
 801a34a:	4649      	mov	r1, r9
 801a34c:	2200      	movs	r2, #0
 801a34e:	f7e6 f92b 	bl	80005a8 <__aeabi_dmul>
 801a352:	4b18      	ldr	r3, [pc, #96]	; (801a3b4 <_strtod_l+0x874>)
 801a354:	400b      	ands	r3, r1
 801a356:	4680      	mov	r8, r0
 801a358:	4689      	mov	r9, r1
 801a35a:	2b00      	cmp	r3, #0
 801a35c:	f47f ae38 	bne.w	8019fd0 <_strtod_l+0x490>
 801a360:	2322      	movs	r3, #34	; 0x22
 801a362:	6023      	str	r3, [r4, #0]
 801a364:	e634      	b.n	8019fd0 <_strtod_l+0x490>
 801a366:	f04f 32ff 	mov.w	r2, #4294967295
 801a36a:	fa02 f303 	lsl.w	r3, r2, r3
 801a36e:	ea03 0808 	and.w	r8, r3, r8
 801a372:	e6e1      	b.n	801a138 <_strtod_l+0x5f8>
 801a374:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 801a378:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 801a37c:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 801a380:	37e2      	adds	r7, #226	; 0xe2
 801a382:	fa01 f307 	lsl.w	r3, r1, r7
 801a386:	9310      	str	r3, [sp, #64]	; 0x40
 801a388:	9113      	str	r1, [sp, #76]	; 0x4c
 801a38a:	e745      	b.n	801a218 <_strtod_l+0x6d8>
 801a38c:	2300      	movs	r3, #0
 801a38e:	9310      	str	r3, [sp, #64]	; 0x40
 801a390:	2301      	movs	r3, #1
 801a392:	9313      	str	r3, [sp, #76]	; 0x4c
 801a394:	e740      	b.n	801a218 <_strtod_l+0x6d8>
 801a396:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a398:	463a      	mov	r2, r7
 801a39a:	4620      	mov	r0, r4
 801a39c:	f7ff f96c 	bl	8019678 <__lshift>
 801a3a0:	901a      	str	r0, [sp, #104]	; 0x68
 801a3a2:	2800      	cmp	r0, #0
 801a3a4:	f47f af68 	bne.w	801a278 <_strtod_l+0x738>
 801a3a8:	e608      	b.n	8019fbc <_strtod_l+0x47c>
 801a3aa:	bf00      	nop
 801a3ac:	0801edb0 	.word	0x0801edb0
 801a3b0:	fffffc02 	.word	0xfffffc02
 801a3b4:	7ff00000 	.word	0x7ff00000
 801a3b8:	39500000 	.word	0x39500000
 801a3bc:	46ca      	mov	sl, r9
 801a3be:	d165      	bne.n	801a48c <_strtod_l+0x94c>
 801a3c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801a3c2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a3c6:	b352      	cbz	r2, 801a41e <_strtod_l+0x8de>
 801a3c8:	4a9d      	ldr	r2, [pc, #628]	; (801a640 <_strtod_l+0xb00>)
 801a3ca:	4293      	cmp	r3, r2
 801a3cc:	d12a      	bne.n	801a424 <_strtod_l+0x8e4>
 801a3ce:	9b05      	ldr	r3, [sp, #20]
 801a3d0:	4641      	mov	r1, r8
 801a3d2:	b1fb      	cbz	r3, 801a414 <_strtod_l+0x8d4>
 801a3d4:	4b9b      	ldr	r3, [pc, #620]	; (801a644 <_strtod_l+0xb04>)
 801a3d6:	ea09 0303 	and.w	r3, r9, r3
 801a3da:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a3de:	f04f 32ff 	mov.w	r2, #4294967295
 801a3e2:	d81a      	bhi.n	801a41a <_strtod_l+0x8da>
 801a3e4:	0d1b      	lsrs	r3, r3, #20
 801a3e6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a3ea:	fa02 f303 	lsl.w	r3, r2, r3
 801a3ee:	4299      	cmp	r1, r3
 801a3f0:	d118      	bne.n	801a424 <_strtod_l+0x8e4>
 801a3f2:	4b95      	ldr	r3, [pc, #596]	; (801a648 <_strtod_l+0xb08>)
 801a3f4:	459a      	cmp	sl, r3
 801a3f6:	d102      	bne.n	801a3fe <_strtod_l+0x8be>
 801a3f8:	3101      	adds	r1, #1
 801a3fa:	f43f addf 	beq.w	8019fbc <_strtod_l+0x47c>
 801a3fe:	4b91      	ldr	r3, [pc, #580]	; (801a644 <_strtod_l+0xb04>)
 801a400:	ea0a 0303 	and.w	r3, sl, r3
 801a404:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801a408:	f04f 0800 	mov.w	r8, #0
 801a40c:	9b05      	ldr	r3, [sp, #20]
 801a40e:	2b00      	cmp	r3, #0
 801a410:	d199      	bne.n	801a346 <_strtod_l+0x806>
 801a412:	e5dd      	b.n	8019fd0 <_strtod_l+0x490>
 801a414:	f04f 33ff 	mov.w	r3, #4294967295
 801a418:	e7e9      	b.n	801a3ee <_strtod_l+0x8ae>
 801a41a:	4613      	mov	r3, r2
 801a41c:	e7e7      	b.n	801a3ee <_strtod_l+0x8ae>
 801a41e:	ea53 0308 	orrs.w	r3, r3, r8
 801a422:	d080      	beq.n	801a326 <_strtod_l+0x7e6>
 801a424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a426:	b1e3      	cbz	r3, 801a462 <_strtod_l+0x922>
 801a428:	ea13 0f0a 	tst.w	r3, sl
 801a42c:	d0ee      	beq.n	801a40c <_strtod_l+0x8cc>
 801a42e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a430:	9a05      	ldr	r2, [sp, #20]
 801a432:	4640      	mov	r0, r8
 801a434:	4649      	mov	r1, r9
 801a436:	b1c3      	cbz	r3, 801a46a <_strtod_l+0x92a>
 801a438:	f7ff fb5e 	bl	8019af8 <sulp>
 801a43c:	4602      	mov	r2, r0
 801a43e:	460b      	mov	r3, r1
 801a440:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a442:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a444:	f7e5 fefa 	bl	800023c <__adddf3>
 801a448:	4680      	mov	r8, r0
 801a44a:	4689      	mov	r9, r1
 801a44c:	e7de      	b.n	801a40c <_strtod_l+0x8cc>
 801a44e:	4013      	ands	r3, r2
 801a450:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801a454:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801a458:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801a45c:	f04f 38ff 	mov.w	r8, #4294967295
 801a460:	e7d4      	b.n	801a40c <_strtod_l+0x8cc>
 801a462:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a464:	ea13 0f08 	tst.w	r3, r8
 801a468:	e7e0      	b.n	801a42c <_strtod_l+0x8ec>
 801a46a:	f7ff fb45 	bl	8019af8 <sulp>
 801a46e:	4602      	mov	r2, r0
 801a470:	460b      	mov	r3, r1
 801a472:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a474:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a476:	f7e5 fedf 	bl	8000238 <__aeabi_dsub>
 801a47a:	2200      	movs	r2, #0
 801a47c:	2300      	movs	r3, #0
 801a47e:	4680      	mov	r8, r0
 801a480:	4689      	mov	r9, r1
 801a482:	f7e6 faf9 	bl	8000a78 <__aeabi_dcmpeq>
 801a486:	2800      	cmp	r0, #0
 801a488:	d0c0      	beq.n	801a40c <_strtod_l+0x8cc>
 801a48a:	e608      	b.n	801a09e <_strtod_l+0x55e>
 801a48c:	4659      	mov	r1, fp
 801a48e:	4630      	mov	r0, r6
 801a490:	f7ff fac0 	bl	8019a14 <__ratio>
 801a494:	4602      	mov	r2, r0
 801a496:	460b      	mov	r3, r1
 801a498:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a49c:	2200      	movs	r2, #0
 801a49e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801a4a2:	f7e6 fafd 	bl	8000aa0 <__aeabi_dcmple>
 801a4a6:	2800      	cmp	r0, #0
 801a4a8:	d06f      	beq.n	801a58a <_strtod_l+0xa4a>
 801a4aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d17c      	bne.n	801a5aa <_strtod_l+0xa6a>
 801a4b0:	f1b8 0f00 	cmp.w	r8, #0
 801a4b4:	d159      	bne.n	801a56a <_strtod_l+0xa2a>
 801a4b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a4ba:	2b00      	cmp	r3, #0
 801a4bc:	d17b      	bne.n	801a5b6 <_strtod_l+0xa76>
 801a4be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a4c2:	4b62      	ldr	r3, [pc, #392]	; (801a64c <_strtod_l+0xb0c>)
 801a4c4:	2200      	movs	r2, #0
 801a4c6:	f7e6 fae1 	bl	8000a8c <__aeabi_dcmplt>
 801a4ca:	2800      	cmp	r0, #0
 801a4cc:	d15a      	bne.n	801a584 <_strtod_l+0xa44>
 801a4ce:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a4d2:	4b5f      	ldr	r3, [pc, #380]	; (801a650 <_strtod_l+0xb10>)
 801a4d4:	2200      	movs	r2, #0
 801a4d6:	f7e6 f867 	bl	80005a8 <__aeabi_dmul>
 801a4da:	4605      	mov	r5, r0
 801a4dc:	460f      	mov	r7, r1
 801a4de:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 801a4e2:	9506      	str	r5, [sp, #24]
 801a4e4:	9307      	str	r3, [sp, #28]
 801a4e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a4ea:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a4ee:	4b55      	ldr	r3, [pc, #340]	; (801a644 <_strtod_l+0xb04>)
 801a4f0:	4a54      	ldr	r2, [pc, #336]	; (801a644 <_strtod_l+0xb04>)
 801a4f2:	ea0a 0303 	and.w	r3, sl, r3
 801a4f6:	9313      	str	r3, [sp, #76]	; 0x4c
 801a4f8:	4b56      	ldr	r3, [pc, #344]	; (801a654 <_strtod_l+0xb14>)
 801a4fa:	ea0a 0202 	and.w	r2, sl, r2
 801a4fe:	429a      	cmp	r2, r3
 801a500:	f040 80ae 	bne.w	801a660 <_strtod_l+0xb20>
 801a504:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801a508:	4640      	mov	r0, r8
 801a50a:	4649      	mov	r1, r9
 801a50c:	f7ff f9c4 	bl	8019898 <__ulp>
 801a510:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801a514:	f7e6 f848 	bl	80005a8 <__aeabi_dmul>
 801a518:	4642      	mov	r2, r8
 801a51a:	464b      	mov	r3, r9
 801a51c:	f7e5 fe8e 	bl	800023c <__adddf3>
 801a520:	f8df a120 	ldr.w	sl, [pc, #288]	; 801a644 <_strtod_l+0xb04>
 801a524:	4a4c      	ldr	r2, [pc, #304]	; (801a658 <_strtod_l+0xb18>)
 801a526:	ea01 0a0a 	and.w	sl, r1, sl
 801a52a:	4592      	cmp	sl, r2
 801a52c:	4680      	mov	r8, r0
 801a52e:	d948      	bls.n	801a5c2 <_strtod_l+0xa82>
 801a530:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a532:	4b45      	ldr	r3, [pc, #276]	; (801a648 <_strtod_l+0xb08>)
 801a534:	429a      	cmp	r2, r3
 801a536:	d103      	bne.n	801a540 <_strtod_l+0xa00>
 801a538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801a53a:	3301      	adds	r3, #1
 801a53c:	f43f ad3e 	beq.w	8019fbc <_strtod_l+0x47c>
 801a540:	f8df 9104 	ldr.w	r9, [pc, #260]	; 801a648 <_strtod_l+0xb08>
 801a544:	f04f 38ff 	mov.w	r8, #4294967295
 801a548:	991a      	ldr	r1, [sp, #104]	; 0x68
 801a54a:	4620      	mov	r0, r4
 801a54c:	f7fe fe7a 	bl	8019244 <_Bfree>
 801a550:	9908      	ldr	r1, [sp, #32]
 801a552:	4620      	mov	r0, r4
 801a554:	f7fe fe76 	bl	8019244 <_Bfree>
 801a558:	4659      	mov	r1, fp
 801a55a:	4620      	mov	r0, r4
 801a55c:	f7fe fe72 	bl	8019244 <_Bfree>
 801a560:	4631      	mov	r1, r6
 801a562:	4620      	mov	r0, r4
 801a564:	f7fe fe6e 	bl	8019244 <_Bfree>
 801a568:	e607      	b.n	801a17a <_strtod_l+0x63a>
 801a56a:	f1b8 0f01 	cmp.w	r8, #1
 801a56e:	d103      	bne.n	801a578 <_strtod_l+0xa38>
 801a570:	f1b9 0f00 	cmp.w	r9, #0
 801a574:	f43f ad93 	beq.w	801a09e <_strtod_l+0x55e>
 801a578:	4b38      	ldr	r3, [pc, #224]	; (801a65c <_strtod_l+0xb1c>)
 801a57a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a57c:	2200      	movs	r2, #0
 801a57e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a582:	e016      	b.n	801a5b2 <_strtod_l+0xa72>
 801a584:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801a586:	4f32      	ldr	r7, [pc, #200]	; (801a650 <_strtod_l+0xb10>)
 801a588:	e7a9      	b.n	801a4de <_strtod_l+0x99e>
 801a58a:	4b31      	ldr	r3, [pc, #196]	; (801a650 <_strtod_l+0xb10>)
 801a58c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801a590:	2200      	movs	r2, #0
 801a592:	f7e6 f809 	bl	80005a8 <__aeabi_dmul>
 801a596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a598:	4605      	mov	r5, r0
 801a59a:	460f      	mov	r7, r1
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d09e      	beq.n	801a4de <_strtod_l+0x99e>
 801a5a0:	4602      	mov	r2, r0
 801a5a2:	460b      	mov	r3, r1
 801a5a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a5a8:	e79d      	b.n	801a4e6 <_strtod_l+0x9a6>
 801a5aa:	4b28      	ldr	r3, [pc, #160]	; (801a64c <_strtod_l+0xb0c>)
 801a5ac:	2200      	movs	r2, #0
 801a5ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a5b2:	4f26      	ldr	r7, [pc, #152]	; (801a64c <_strtod_l+0xb0c>)
 801a5b4:	e797      	b.n	801a4e6 <_strtod_l+0x9a6>
 801a5b6:	4b29      	ldr	r3, [pc, #164]	; (801a65c <_strtod_l+0xb1c>)
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801a5be:	4645      	mov	r5, r8
 801a5c0:	e7f7      	b.n	801a5b2 <_strtod_l+0xa72>
 801a5c2:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 801a5c6:	9b05      	ldr	r3, [sp, #20]
 801a5c8:	46ca      	mov	sl, r9
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d1bc      	bne.n	801a548 <_strtod_l+0xa08>
 801a5ce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801a5d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a5d4:	0d1b      	lsrs	r3, r3, #20
 801a5d6:	051b      	lsls	r3, r3, #20
 801a5d8:	429a      	cmp	r2, r3
 801a5da:	d1b5      	bne.n	801a548 <_strtod_l+0xa08>
 801a5dc:	4628      	mov	r0, r5
 801a5de:	4639      	mov	r1, r7
 801a5e0:	f7e6 fe5c 	bl	800129c <__aeabi_d2lz>
 801a5e4:	f7e5 ffb2 	bl	800054c <__aeabi_l2d>
 801a5e8:	4602      	mov	r2, r0
 801a5ea:	460b      	mov	r3, r1
 801a5ec:	4628      	mov	r0, r5
 801a5ee:	4639      	mov	r1, r7
 801a5f0:	f7e5 fe22 	bl	8000238 <__aeabi_dsub>
 801a5f4:	460b      	mov	r3, r1
 801a5f6:	4602      	mov	r2, r0
 801a5f8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801a5fc:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 801a600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a602:	ea4a 0a08 	orr.w	sl, sl, r8
 801a606:	ea5a 0a03 	orrs.w	sl, sl, r3
 801a60a:	d06a      	beq.n	801a6e2 <_strtod_l+0xba2>
 801a60c:	a308      	add	r3, pc, #32	; (adr r3, 801a630 <_strtod_l+0xaf0>)
 801a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a612:	f7e6 fa3b 	bl	8000a8c <__aeabi_dcmplt>
 801a616:	2800      	cmp	r0, #0
 801a618:	f47f acda 	bne.w	8019fd0 <_strtod_l+0x490>
 801a61c:	a306      	add	r3, pc, #24	; (adr r3, 801a638 <_strtod_l+0xaf8>)
 801a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a622:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801a626:	f7e6 fa4f 	bl	8000ac8 <__aeabi_dcmpgt>
 801a62a:	2800      	cmp	r0, #0
 801a62c:	d08c      	beq.n	801a548 <_strtod_l+0xa08>
 801a62e:	e4cf      	b.n	8019fd0 <_strtod_l+0x490>
 801a630:	94a03595 	.word	0x94a03595
 801a634:	3fdfffff 	.word	0x3fdfffff
 801a638:	35afe535 	.word	0x35afe535
 801a63c:	3fe00000 	.word	0x3fe00000
 801a640:	000fffff 	.word	0x000fffff
 801a644:	7ff00000 	.word	0x7ff00000
 801a648:	7fefffff 	.word	0x7fefffff
 801a64c:	3ff00000 	.word	0x3ff00000
 801a650:	3fe00000 	.word	0x3fe00000
 801a654:	7fe00000 	.word	0x7fe00000
 801a658:	7c9fffff 	.word	0x7c9fffff
 801a65c:	bff00000 	.word	0xbff00000
 801a660:	9b05      	ldr	r3, [sp, #20]
 801a662:	b333      	cbz	r3, 801a6b2 <_strtod_l+0xb72>
 801a664:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a666:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801a66a:	d822      	bhi.n	801a6b2 <_strtod_l+0xb72>
 801a66c:	a328      	add	r3, pc, #160	; (adr r3, 801a710 <_strtod_l+0xbd0>)
 801a66e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a672:	4628      	mov	r0, r5
 801a674:	4639      	mov	r1, r7
 801a676:	f7e6 fa13 	bl	8000aa0 <__aeabi_dcmple>
 801a67a:	b1a0      	cbz	r0, 801a6a6 <_strtod_l+0xb66>
 801a67c:	4639      	mov	r1, r7
 801a67e:	4628      	mov	r0, r5
 801a680:	f7e6 fa6a 	bl	8000b58 <__aeabi_d2uiz>
 801a684:	2801      	cmp	r0, #1
 801a686:	bf38      	it	cc
 801a688:	2001      	movcc	r0, #1
 801a68a:	f7e5 ff13 	bl	80004b4 <__aeabi_ui2d>
 801a68e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a690:	4605      	mov	r5, r0
 801a692:	460f      	mov	r7, r1
 801a694:	bb03      	cbnz	r3, 801a6d8 <_strtod_l+0xb98>
 801a696:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a69a:	9014      	str	r0, [sp, #80]	; 0x50
 801a69c:	9315      	str	r3, [sp, #84]	; 0x54
 801a69e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801a6a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801a6a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a6a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a6aa:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801a6ae:	1a9b      	subs	r3, r3, r2
 801a6b0:	9311      	str	r3, [sp, #68]	; 0x44
 801a6b2:	980c      	ldr	r0, [sp, #48]	; 0x30
 801a6b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801a6b6:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 801a6ba:	f7ff f8ed 	bl	8019898 <__ulp>
 801a6be:	4602      	mov	r2, r0
 801a6c0:	460b      	mov	r3, r1
 801a6c2:	4640      	mov	r0, r8
 801a6c4:	4649      	mov	r1, r9
 801a6c6:	f7e5 ff6f 	bl	80005a8 <__aeabi_dmul>
 801a6ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a6cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a6ce:	f7e5 fdb5 	bl	800023c <__adddf3>
 801a6d2:	4680      	mov	r8, r0
 801a6d4:	4689      	mov	r9, r1
 801a6d6:	e776      	b.n	801a5c6 <_strtod_l+0xa86>
 801a6d8:	4602      	mov	r2, r0
 801a6da:	460b      	mov	r3, r1
 801a6dc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801a6e0:	e7dd      	b.n	801a69e <_strtod_l+0xb5e>
 801a6e2:	a30d      	add	r3, pc, #52	; (adr r3, 801a718 <_strtod_l+0xbd8>)
 801a6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a6e8:	f7e6 f9d0 	bl	8000a8c <__aeabi_dcmplt>
 801a6ec:	e79d      	b.n	801a62a <_strtod_l+0xaea>
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	930e      	str	r3, [sp, #56]	; 0x38
 801a6f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801a6f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a6f6:	6013      	str	r3, [r2, #0]
 801a6f8:	f7ff ba5f 	b.w	8019bba <_strtod_l+0x7a>
 801a6fc:	2a65      	cmp	r2, #101	; 0x65
 801a6fe:	f43f ab56 	beq.w	8019dae <_strtod_l+0x26e>
 801a702:	2a45      	cmp	r2, #69	; 0x45
 801a704:	f43f ab53 	beq.w	8019dae <_strtod_l+0x26e>
 801a708:	2301      	movs	r3, #1
 801a70a:	f7ff bb8b 	b.w	8019e24 <_strtod_l+0x2e4>
 801a70e:	bf00      	nop
 801a710:	ffc00000 	.word	0xffc00000
 801a714:	41dfffff 	.word	0x41dfffff
 801a718:	94a03595 	.word	0x94a03595
 801a71c:	3fcfffff 	.word	0x3fcfffff

0801a720 <_strtod_r>:
 801a720:	4b01      	ldr	r3, [pc, #4]	; (801a728 <_strtod_r+0x8>)
 801a722:	f7ff ba0d 	b.w	8019b40 <_strtod_l>
 801a726:	bf00      	nop
 801a728:	200001c4 	.word	0x200001c4

0801a72c <_strtol_l.constprop.0>:
 801a72c:	2b01      	cmp	r3, #1
 801a72e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a732:	4686      	mov	lr, r0
 801a734:	4690      	mov	r8, r2
 801a736:	d001      	beq.n	801a73c <_strtol_l.constprop.0+0x10>
 801a738:	2b24      	cmp	r3, #36	; 0x24
 801a73a:	d906      	bls.n	801a74a <_strtol_l.constprop.0+0x1e>
 801a73c:	f7fd fe52 	bl	80183e4 <__errno>
 801a740:	2316      	movs	r3, #22
 801a742:	6003      	str	r3, [r0, #0]
 801a744:	2000      	movs	r0, #0
 801a746:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a74a:	4836      	ldr	r0, [pc, #216]	; (801a824 <_strtol_l.constprop.0+0xf8>)
 801a74c:	460d      	mov	r5, r1
 801a74e:	462a      	mov	r2, r5
 801a750:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a754:	5d06      	ldrb	r6, [r0, r4]
 801a756:	f016 0608 	ands.w	r6, r6, #8
 801a75a:	d1f8      	bne.n	801a74e <_strtol_l.constprop.0+0x22>
 801a75c:	2c2d      	cmp	r4, #45	; 0x2d
 801a75e:	d12e      	bne.n	801a7be <_strtol_l.constprop.0+0x92>
 801a760:	782c      	ldrb	r4, [r5, #0]
 801a762:	2601      	movs	r6, #1
 801a764:	1c95      	adds	r5, r2, #2
 801a766:	2b00      	cmp	r3, #0
 801a768:	d057      	beq.n	801a81a <_strtol_l.constprop.0+0xee>
 801a76a:	2b10      	cmp	r3, #16
 801a76c:	d109      	bne.n	801a782 <_strtol_l.constprop.0+0x56>
 801a76e:	2c30      	cmp	r4, #48	; 0x30
 801a770:	d107      	bne.n	801a782 <_strtol_l.constprop.0+0x56>
 801a772:	782a      	ldrb	r2, [r5, #0]
 801a774:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 801a778:	2a58      	cmp	r2, #88	; 0x58
 801a77a:	d149      	bne.n	801a810 <_strtol_l.constprop.0+0xe4>
 801a77c:	786c      	ldrb	r4, [r5, #1]
 801a77e:	2310      	movs	r3, #16
 801a780:	3502      	adds	r5, #2
 801a782:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 801a786:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a78a:	2200      	movs	r2, #0
 801a78c:	fbbc f9f3 	udiv	r9, ip, r3
 801a790:	4610      	mov	r0, r2
 801a792:	fb03 ca19 	mls	sl, r3, r9, ip
 801a796:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801a79a:	2f09      	cmp	r7, #9
 801a79c:	d814      	bhi.n	801a7c8 <_strtol_l.constprop.0+0x9c>
 801a79e:	463c      	mov	r4, r7
 801a7a0:	42a3      	cmp	r3, r4
 801a7a2:	dd20      	ble.n	801a7e6 <_strtol_l.constprop.0+0xba>
 801a7a4:	1c57      	adds	r7, r2, #1
 801a7a6:	d007      	beq.n	801a7b8 <_strtol_l.constprop.0+0x8c>
 801a7a8:	4581      	cmp	r9, r0
 801a7aa:	d319      	bcc.n	801a7e0 <_strtol_l.constprop.0+0xb4>
 801a7ac:	d101      	bne.n	801a7b2 <_strtol_l.constprop.0+0x86>
 801a7ae:	45a2      	cmp	sl, r4
 801a7b0:	db16      	blt.n	801a7e0 <_strtol_l.constprop.0+0xb4>
 801a7b2:	fb00 4003 	mla	r0, r0, r3, r4
 801a7b6:	2201      	movs	r2, #1
 801a7b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801a7bc:	e7eb      	b.n	801a796 <_strtol_l.constprop.0+0x6a>
 801a7be:	2c2b      	cmp	r4, #43	; 0x2b
 801a7c0:	bf04      	itt	eq
 801a7c2:	782c      	ldrbeq	r4, [r5, #0]
 801a7c4:	1c95      	addeq	r5, r2, #2
 801a7c6:	e7ce      	b.n	801a766 <_strtol_l.constprop.0+0x3a>
 801a7c8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801a7cc:	2f19      	cmp	r7, #25
 801a7ce:	d801      	bhi.n	801a7d4 <_strtol_l.constprop.0+0xa8>
 801a7d0:	3c37      	subs	r4, #55	; 0x37
 801a7d2:	e7e5      	b.n	801a7a0 <_strtol_l.constprop.0+0x74>
 801a7d4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801a7d8:	2f19      	cmp	r7, #25
 801a7da:	d804      	bhi.n	801a7e6 <_strtol_l.constprop.0+0xba>
 801a7dc:	3c57      	subs	r4, #87	; 0x57
 801a7de:	e7df      	b.n	801a7a0 <_strtol_l.constprop.0+0x74>
 801a7e0:	f04f 32ff 	mov.w	r2, #4294967295
 801a7e4:	e7e8      	b.n	801a7b8 <_strtol_l.constprop.0+0x8c>
 801a7e6:	1c53      	adds	r3, r2, #1
 801a7e8:	d108      	bne.n	801a7fc <_strtol_l.constprop.0+0xd0>
 801a7ea:	2322      	movs	r3, #34	; 0x22
 801a7ec:	f8ce 3000 	str.w	r3, [lr]
 801a7f0:	4660      	mov	r0, ip
 801a7f2:	f1b8 0f00 	cmp.w	r8, #0
 801a7f6:	d0a6      	beq.n	801a746 <_strtol_l.constprop.0+0x1a>
 801a7f8:	1e69      	subs	r1, r5, #1
 801a7fa:	e006      	b.n	801a80a <_strtol_l.constprop.0+0xde>
 801a7fc:	b106      	cbz	r6, 801a800 <_strtol_l.constprop.0+0xd4>
 801a7fe:	4240      	negs	r0, r0
 801a800:	f1b8 0f00 	cmp.w	r8, #0
 801a804:	d09f      	beq.n	801a746 <_strtol_l.constprop.0+0x1a>
 801a806:	2a00      	cmp	r2, #0
 801a808:	d1f6      	bne.n	801a7f8 <_strtol_l.constprop.0+0xcc>
 801a80a:	f8c8 1000 	str.w	r1, [r8]
 801a80e:	e79a      	b.n	801a746 <_strtol_l.constprop.0+0x1a>
 801a810:	2430      	movs	r4, #48	; 0x30
 801a812:	2b00      	cmp	r3, #0
 801a814:	d1b5      	bne.n	801a782 <_strtol_l.constprop.0+0x56>
 801a816:	2308      	movs	r3, #8
 801a818:	e7b3      	b.n	801a782 <_strtol_l.constprop.0+0x56>
 801a81a:	2c30      	cmp	r4, #48	; 0x30
 801a81c:	d0a9      	beq.n	801a772 <_strtol_l.constprop.0+0x46>
 801a81e:	230a      	movs	r3, #10
 801a820:	e7af      	b.n	801a782 <_strtol_l.constprop.0+0x56>
 801a822:	bf00      	nop
 801a824:	0801edd9 	.word	0x0801edd9

0801a828 <_strtol_r>:
 801a828:	f7ff bf80 	b.w	801a72c <_strtol_l.constprop.0>

0801a82c <__ssputs_r>:
 801a82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a830:	688e      	ldr	r6, [r1, #8]
 801a832:	461f      	mov	r7, r3
 801a834:	42be      	cmp	r6, r7
 801a836:	680b      	ldr	r3, [r1, #0]
 801a838:	4682      	mov	sl, r0
 801a83a:	460c      	mov	r4, r1
 801a83c:	4690      	mov	r8, r2
 801a83e:	d82c      	bhi.n	801a89a <__ssputs_r+0x6e>
 801a840:	898a      	ldrh	r2, [r1, #12]
 801a842:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a846:	d026      	beq.n	801a896 <__ssputs_r+0x6a>
 801a848:	6965      	ldr	r5, [r4, #20]
 801a84a:	6909      	ldr	r1, [r1, #16]
 801a84c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a850:	eba3 0901 	sub.w	r9, r3, r1
 801a854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a858:	1c7b      	adds	r3, r7, #1
 801a85a:	444b      	add	r3, r9
 801a85c:	106d      	asrs	r5, r5, #1
 801a85e:	429d      	cmp	r5, r3
 801a860:	bf38      	it	cc
 801a862:	461d      	movcc	r5, r3
 801a864:	0553      	lsls	r3, r2, #21
 801a866:	d527      	bpl.n	801a8b8 <__ssputs_r+0x8c>
 801a868:	4629      	mov	r1, r5
 801a86a:	f7fc fc6f 	bl	801714c <_malloc_r>
 801a86e:	4606      	mov	r6, r0
 801a870:	b360      	cbz	r0, 801a8cc <__ssputs_r+0xa0>
 801a872:	6921      	ldr	r1, [r4, #16]
 801a874:	464a      	mov	r2, r9
 801a876:	f7fd fde2 	bl	801843e <memcpy>
 801a87a:	89a3      	ldrh	r3, [r4, #12]
 801a87c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a884:	81a3      	strh	r3, [r4, #12]
 801a886:	6126      	str	r6, [r4, #16]
 801a888:	6165      	str	r5, [r4, #20]
 801a88a:	444e      	add	r6, r9
 801a88c:	eba5 0509 	sub.w	r5, r5, r9
 801a890:	6026      	str	r6, [r4, #0]
 801a892:	60a5      	str	r5, [r4, #8]
 801a894:	463e      	mov	r6, r7
 801a896:	42be      	cmp	r6, r7
 801a898:	d900      	bls.n	801a89c <__ssputs_r+0x70>
 801a89a:	463e      	mov	r6, r7
 801a89c:	6820      	ldr	r0, [r4, #0]
 801a89e:	4632      	mov	r2, r6
 801a8a0:	4641      	mov	r1, r8
 801a8a2:	f000 fefc 	bl	801b69e <memmove>
 801a8a6:	68a3      	ldr	r3, [r4, #8]
 801a8a8:	1b9b      	subs	r3, r3, r6
 801a8aa:	60a3      	str	r3, [r4, #8]
 801a8ac:	6823      	ldr	r3, [r4, #0]
 801a8ae:	4433      	add	r3, r6
 801a8b0:	6023      	str	r3, [r4, #0]
 801a8b2:	2000      	movs	r0, #0
 801a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8b8:	462a      	mov	r2, r5
 801a8ba:	f001 fad0 	bl	801be5e <_realloc_r>
 801a8be:	4606      	mov	r6, r0
 801a8c0:	2800      	cmp	r0, #0
 801a8c2:	d1e0      	bne.n	801a886 <__ssputs_r+0x5a>
 801a8c4:	6921      	ldr	r1, [r4, #16]
 801a8c6:	4650      	mov	r0, sl
 801a8c8:	f7fe fc32 	bl	8019130 <_free_r>
 801a8cc:	230c      	movs	r3, #12
 801a8ce:	f8ca 3000 	str.w	r3, [sl]
 801a8d2:	89a3      	ldrh	r3, [r4, #12]
 801a8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a8d8:	81a3      	strh	r3, [r4, #12]
 801a8da:	f04f 30ff 	mov.w	r0, #4294967295
 801a8de:	e7e9      	b.n	801a8b4 <__ssputs_r+0x88>

0801a8e0 <_svfiprintf_r>:
 801a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e4:	4698      	mov	r8, r3
 801a8e6:	898b      	ldrh	r3, [r1, #12]
 801a8e8:	061b      	lsls	r3, r3, #24
 801a8ea:	b09d      	sub	sp, #116	; 0x74
 801a8ec:	4607      	mov	r7, r0
 801a8ee:	460d      	mov	r5, r1
 801a8f0:	4614      	mov	r4, r2
 801a8f2:	d50e      	bpl.n	801a912 <_svfiprintf_r+0x32>
 801a8f4:	690b      	ldr	r3, [r1, #16]
 801a8f6:	b963      	cbnz	r3, 801a912 <_svfiprintf_r+0x32>
 801a8f8:	2140      	movs	r1, #64	; 0x40
 801a8fa:	f7fc fc27 	bl	801714c <_malloc_r>
 801a8fe:	6028      	str	r0, [r5, #0]
 801a900:	6128      	str	r0, [r5, #16]
 801a902:	b920      	cbnz	r0, 801a90e <_svfiprintf_r+0x2e>
 801a904:	230c      	movs	r3, #12
 801a906:	603b      	str	r3, [r7, #0]
 801a908:	f04f 30ff 	mov.w	r0, #4294967295
 801a90c:	e0d0      	b.n	801aab0 <_svfiprintf_r+0x1d0>
 801a90e:	2340      	movs	r3, #64	; 0x40
 801a910:	616b      	str	r3, [r5, #20]
 801a912:	2300      	movs	r3, #0
 801a914:	9309      	str	r3, [sp, #36]	; 0x24
 801a916:	2320      	movs	r3, #32
 801a918:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a91c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a920:	2330      	movs	r3, #48	; 0x30
 801a922:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801aac8 <_svfiprintf_r+0x1e8>
 801a926:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a92a:	f04f 0901 	mov.w	r9, #1
 801a92e:	4623      	mov	r3, r4
 801a930:	469a      	mov	sl, r3
 801a932:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a936:	b10a      	cbz	r2, 801a93c <_svfiprintf_r+0x5c>
 801a938:	2a25      	cmp	r2, #37	; 0x25
 801a93a:	d1f9      	bne.n	801a930 <_svfiprintf_r+0x50>
 801a93c:	ebba 0b04 	subs.w	fp, sl, r4
 801a940:	d00b      	beq.n	801a95a <_svfiprintf_r+0x7a>
 801a942:	465b      	mov	r3, fp
 801a944:	4622      	mov	r2, r4
 801a946:	4629      	mov	r1, r5
 801a948:	4638      	mov	r0, r7
 801a94a:	f7ff ff6f 	bl	801a82c <__ssputs_r>
 801a94e:	3001      	adds	r0, #1
 801a950:	f000 80a9 	beq.w	801aaa6 <_svfiprintf_r+0x1c6>
 801a954:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a956:	445a      	add	r2, fp
 801a958:	9209      	str	r2, [sp, #36]	; 0x24
 801a95a:	f89a 3000 	ldrb.w	r3, [sl]
 801a95e:	2b00      	cmp	r3, #0
 801a960:	f000 80a1 	beq.w	801aaa6 <_svfiprintf_r+0x1c6>
 801a964:	2300      	movs	r3, #0
 801a966:	f04f 32ff 	mov.w	r2, #4294967295
 801a96a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a96e:	f10a 0a01 	add.w	sl, sl, #1
 801a972:	9304      	str	r3, [sp, #16]
 801a974:	9307      	str	r3, [sp, #28]
 801a976:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a97a:	931a      	str	r3, [sp, #104]	; 0x68
 801a97c:	4654      	mov	r4, sl
 801a97e:	2205      	movs	r2, #5
 801a980:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a984:	4850      	ldr	r0, [pc, #320]	; (801aac8 <_svfiprintf_r+0x1e8>)
 801a986:	f7e5 fbfb 	bl	8000180 <memchr>
 801a98a:	9a04      	ldr	r2, [sp, #16]
 801a98c:	b9d8      	cbnz	r0, 801a9c6 <_svfiprintf_r+0xe6>
 801a98e:	06d0      	lsls	r0, r2, #27
 801a990:	bf44      	itt	mi
 801a992:	2320      	movmi	r3, #32
 801a994:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a998:	0711      	lsls	r1, r2, #28
 801a99a:	bf44      	itt	mi
 801a99c:	232b      	movmi	r3, #43	; 0x2b
 801a99e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a9a2:	f89a 3000 	ldrb.w	r3, [sl]
 801a9a6:	2b2a      	cmp	r3, #42	; 0x2a
 801a9a8:	d015      	beq.n	801a9d6 <_svfiprintf_r+0xf6>
 801a9aa:	9a07      	ldr	r2, [sp, #28]
 801a9ac:	4654      	mov	r4, sl
 801a9ae:	2000      	movs	r0, #0
 801a9b0:	f04f 0c0a 	mov.w	ip, #10
 801a9b4:	4621      	mov	r1, r4
 801a9b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9ba:	3b30      	subs	r3, #48	; 0x30
 801a9bc:	2b09      	cmp	r3, #9
 801a9be:	d94d      	bls.n	801aa5c <_svfiprintf_r+0x17c>
 801a9c0:	b1b0      	cbz	r0, 801a9f0 <_svfiprintf_r+0x110>
 801a9c2:	9207      	str	r2, [sp, #28]
 801a9c4:	e014      	b.n	801a9f0 <_svfiprintf_r+0x110>
 801a9c6:	eba0 0308 	sub.w	r3, r0, r8
 801a9ca:	fa09 f303 	lsl.w	r3, r9, r3
 801a9ce:	4313      	orrs	r3, r2
 801a9d0:	9304      	str	r3, [sp, #16]
 801a9d2:	46a2      	mov	sl, r4
 801a9d4:	e7d2      	b.n	801a97c <_svfiprintf_r+0x9c>
 801a9d6:	9b03      	ldr	r3, [sp, #12]
 801a9d8:	1d19      	adds	r1, r3, #4
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	9103      	str	r1, [sp, #12]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	bfbb      	ittet	lt
 801a9e2:	425b      	neglt	r3, r3
 801a9e4:	f042 0202 	orrlt.w	r2, r2, #2
 801a9e8:	9307      	strge	r3, [sp, #28]
 801a9ea:	9307      	strlt	r3, [sp, #28]
 801a9ec:	bfb8      	it	lt
 801a9ee:	9204      	strlt	r2, [sp, #16]
 801a9f0:	7823      	ldrb	r3, [r4, #0]
 801a9f2:	2b2e      	cmp	r3, #46	; 0x2e
 801a9f4:	d10c      	bne.n	801aa10 <_svfiprintf_r+0x130>
 801a9f6:	7863      	ldrb	r3, [r4, #1]
 801a9f8:	2b2a      	cmp	r3, #42	; 0x2a
 801a9fa:	d134      	bne.n	801aa66 <_svfiprintf_r+0x186>
 801a9fc:	9b03      	ldr	r3, [sp, #12]
 801a9fe:	1d1a      	adds	r2, r3, #4
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	9203      	str	r2, [sp, #12]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	bfb8      	it	lt
 801aa08:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa0c:	3402      	adds	r4, #2
 801aa0e:	9305      	str	r3, [sp, #20]
 801aa10:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801aacc <_svfiprintf_r+0x1ec>
 801aa14:	7821      	ldrb	r1, [r4, #0]
 801aa16:	2203      	movs	r2, #3
 801aa18:	4650      	mov	r0, sl
 801aa1a:	f7e5 fbb1 	bl	8000180 <memchr>
 801aa1e:	b138      	cbz	r0, 801aa30 <_svfiprintf_r+0x150>
 801aa20:	9b04      	ldr	r3, [sp, #16]
 801aa22:	eba0 000a 	sub.w	r0, r0, sl
 801aa26:	2240      	movs	r2, #64	; 0x40
 801aa28:	4082      	lsls	r2, r0
 801aa2a:	4313      	orrs	r3, r2
 801aa2c:	3401      	adds	r4, #1
 801aa2e:	9304      	str	r3, [sp, #16]
 801aa30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa34:	4826      	ldr	r0, [pc, #152]	; (801aad0 <_svfiprintf_r+0x1f0>)
 801aa36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa3a:	2206      	movs	r2, #6
 801aa3c:	f7e5 fba0 	bl	8000180 <memchr>
 801aa40:	2800      	cmp	r0, #0
 801aa42:	d038      	beq.n	801aab6 <_svfiprintf_r+0x1d6>
 801aa44:	4b23      	ldr	r3, [pc, #140]	; (801aad4 <_svfiprintf_r+0x1f4>)
 801aa46:	bb1b      	cbnz	r3, 801aa90 <_svfiprintf_r+0x1b0>
 801aa48:	9b03      	ldr	r3, [sp, #12]
 801aa4a:	3307      	adds	r3, #7
 801aa4c:	f023 0307 	bic.w	r3, r3, #7
 801aa50:	3308      	adds	r3, #8
 801aa52:	9303      	str	r3, [sp, #12]
 801aa54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa56:	4433      	add	r3, r6
 801aa58:	9309      	str	r3, [sp, #36]	; 0x24
 801aa5a:	e768      	b.n	801a92e <_svfiprintf_r+0x4e>
 801aa5c:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa60:	460c      	mov	r4, r1
 801aa62:	2001      	movs	r0, #1
 801aa64:	e7a6      	b.n	801a9b4 <_svfiprintf_r+0xd4>
 801aa66:	2300      	movs	r3, #0
 801aa68:	3401      	adds	r4, #1
 801aa6a:	9305      	str	r3, [sp, #20]
 801aa6c:	4619      	mov	r1, r3
 801aa6e:	f04f 0c0a 	mov.w	ip, #10
 801aa72:	4620      	mov	r0, r4
 801aa74:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa78:	3a30      	subs	r2, #48	; 0x30
 801aa7a:	2a09      	cmp	r2, #9
 801aa7c:	d903      	bls.n	801aa86 <_svfiprintf_r+0x1a6>
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d0c6      	beq.n	801aa10 <_svfiprintf_r+0x130>
 801aa82:	9105      	str	r1, [sp, #20]
 801aa84:	e7c4      	b.n	801aa10 <_svfiprintf_r+0x130>
 801aa86:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa8a:	4604      	mov	r4, r0
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	e7f0      	b.n	801aa72 <_svfiprintf_r+0x192>
 801aa90:	ab03      	add	r3, sp, #12
 801aa92:	9300      	str	r3, [sp, #0]
 801aa94:	462a      	mov	r2, r5
 801aa96:	4b10      	ldr	r3, [pc, #64]	; (801aad8 <_svfiprintf_r+0x1f8>)
 801aa98:	a904      	add	r1, sp, #16
 801aa9a:	4638      	mov	r0, r7
 801aa9c:	f7fc fc80 	bl	80173a0 <_printf_float>
 801aaa0:	1c42      	adds	r2, r0, #1
 801aaa2:	4606      	mov	r6, r0
 801aaa4:	d1d6      	bne.n	801aa54 <_svfiprintf_r+0x174>
 801aaa6:	89ab      	ldrh	r3, [r5, #12]
 801aaa8:	065b      	lsls	r3, r3, #25
 801aaaa:	f53f af2d 	bmi.w	801a908 <_svfiprintf_r+0x28>
 801aaae:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aab0:	b01d      	add	sp, #116	; 0x74
 801aab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aab6:	ab03      	add	r3, sp, #12
 801aab8:	9300      	str	r3, [sp, #0]
 801aaba:	462a      	mov	r2, r5
 801aabc:	4b06      	ldr	r3, [pc, #24]	; (801aad8 <_svfiprintf_r+0x1f8>)
 801aabe:	a904      	add	r1, sp, #16
 801aac0:	4638      	mov	r0, r7
 801aac2:	f7fc ff07 	bl	80178d4 <_printf_i>
 801aac6:	e7eb      	b.n	801aaa0 <_svfiprintf_r+0x1c0>
 801aac8:	0801eed9 	.word	0x0801eed9
 801aacc:	0801eedf 	.word	0x0801eedf
 801aad0:	0801eee3 	.word	0x0801eee3
 801aad4:	080173a1 	.word	0x080173a1
 801aad8:	0801a82d 	.word	0x0801a82d

0801aadc <_sungetc_r>:
 801aadc:	b538      	push	{r3, r4, r5, lr}
 801aade:	1c4b      	adds	r3, r1, #1
 801aae0:	4614      	mov	r4, r2
 801aae2:	d103      	bne.n	801aaec <_sungetc_r+0x10>
 801aae4:	f04f 35ff 	mov.w	r5, #4294967295
 801aae8:	4628      	mov	r0, r5
 801aaea:	bd38      	pop	{r3, r4, r5, pc}
 801aaec:	8993      	ldrh	r3, [r2, #12]
 801aaee:	f023 0320 	bic.w	r3, r3, #32
 801aaf2:	8193      	strh	r3, [r2, #12]
 801aaf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801aaf6:	6852      	ldr	r2, [r2, #4]
 801aaf8:	b2cd      	uxtb	r5, r1
 801aafa:	b18b      	cbz	r3, 801ab20 <_sungetc_r+0x44>
 801aafc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801aafe:	4293      	cmp	r3, r2
 801ab00:	dd08      	ble.n	801ab14 <_sungetc_r+0x38>
 801ab02:	6823      	ldr	r3, [r4, #0]
 801ab04:	1e5a      	subs	r2, r3, #1
 801ab06:	6022      	str	r2, [r4, #0]
 801ab08:	f803 5c01 	strb.w	r5, [r3, #-1]
 801ab0c:	6863      	ldr	r3, [r4, #4]
 801ab0e:	3301      	adds	r3, #1
 801ab10:	6063      	str	r3, [r4, #4]
 801ab12:	e7e9      	b.n	801aae8 <_sungetc_r+0xc>
 801ab14:	4621      	mov	r1, r4
 801ab16:	f000 fd88 	bl	801b62a <__submore>
 801ab1a:	2800      	cmp	r0, #0
 801ab1c:	d0f1      	beq.n	801ab02 <_sungetc_r+0x26>
 801ab1e:	e7e1      	b.n	801aae4 <_sungetc_r+0x8>
 801ab20:	6921      	ldr	r1, [r4, #16]
 801ab22:	6823      	ldr	r3, [r4, #0]
 801ab24:	b151      	cbz	r1, 801ab3c <_sungetc_r+0x60>
 801ab26:	4299      	cmp	r1, r3
 801ab28:	d208      	bcs.n	801ab3c <_sungetc_r+0x60>
 801ab2a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801ab2e:	42a9      	cmp	r1, r5
 801ab30:	d104      	bne.n	801ab3c <_sungetc_r+0x60>
 801ab32:	3b01      	subs	r3, #1
 801ab34:	3201      	adds	r2, #1
 801ab36:	6023      	str	r3, [r4, #0]
 801ab38:	6062      	str	r2, [r4, #4]
 801ab3a:	e7d5      	b.n	801aae8 <_sungetc_r+0xc>
 801ab3c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 801ab40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab44:	6363      	str	r3, [r4, #52]	; 0x34
 801ab46:	2303      	movs	r3, #3
 801ab48:	63a3      	str	r3, [r4, #56]	; 0x38
 801ab4a:	4623      	mov	r3, r4
 801ab4c:	f803 5f46 	strb.w	r5, [r3, #70]!
 801ab50:	6023      	str	r3, [r4, #0]
 801ab52:	2301      	movs	r3, #1
 801ab54:	e7dc      	b.n	801ab10 <_sungetc_r+0x34>

0801ab56 <__ssrefill_r>:
 801ab56:	b510      	push	{r4, lr}
 801ab58:	460c      	mov	r4, r1
 801ab5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801ab5c:	b169      	cbz	r1, 801ab7a <__ssrefill_r+0x24>
 801ab5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab62:	4299      	cmp	r1, r3
 801ab64:	d001      	beq.n	801ab6a <__ssrefill_r+0x14>
 801ab66:	f7fe fae3 	bl	8019130 <_free_r>
 801ab6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ab6c:	6063      	str	r3, [r4, #4]
 801ab6e:	2000      	movs	r0, #0
 801ab70:	6360      	str	r0, [r4, #52]	; 0x34
 801ab72:	b113      	cbz	r3, 801ab7a <__ssrefill_r+0x24>
 801ab74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801ab76:	6023      	str	r3, [r4, #0]
 801ab78:	bd10      	pop	{r4, pc}
 801ab7a:	6923      	ldr	r3, [r4, #16]
 801ab7c:	6023      	str	r3, [r4, #0]
 801ab7e:	2300      	movs	r3, #0
 801ab80:	6063      	str	r3, [r4, #4]
 801ab82:	89a3      	ldrh	r3, [r4, #12]
 801ab84:	f043 0320 	orr.w	r3, r3, #32
 801ab88:	81a3      	strh	r3, [r4, #12]
 801ab8a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab8e:	e7f3      	b.n	801ab78 <__ssrefill_r+0x22>

0801ab90 <__ssvfiscanf_r>:
 801ab90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab94:	460c      	mov	r4, r1
 801ab96:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801ab9a:	2100      	movs	r1, #0
 801ab9c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 801aba0:	49a6      	ldr	r1, [pc, #664]	; (801ae3c <__ssvfiscanf_r+0x2ac>)
 801aba2:	91a0      	str	r1, [sp, #640]	; 0x280
 801aba4:	f10d 0804 	add.w	r8, sp, #4
 801aba8:	49a5      	ldr	r1, [pc, #660]	; (801ae40 <__ssvfiscanf_r+0x2b0>)
 801abaa:	4fa6      	ldr	r7, [pc, #664]	; (801ae44 <__ssvfiscanf_r+0x2b4>)
 801abac:	f8df 9298 	ldr.w	r9, [pc, #664]	; 801ae48 <__ssvfiscanf_r+0x2b8>
 801abb0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801abb4:	4606      	mov	r6, r0
 801abb6:	91a1      	str	r1, [sp, #644]	; 0x284
 801abb8:	9300      	str	r3, [sp, #0]
 801abba:	7813      	ldrb	r3, [r2, #0]
 801abbc:	2b00      	cmp	r3, #0
 801abbe:	f000 815a 	beq.w	801ae76 <__ssvfiscanf_r+0x2e6>
 801abc2:	5cf9      	ldrb	r1, [r7, r3]
 801abc4:	f011 0108 	ands.w	r1, r1, #8
 801abc8:	f102 0501 	add.w	r5, r2, #1
 801abcc:	d019      	beq.n	801ac02 <__ssvfiscanf_r+0x72>
 801abce:	6863      	ldr	r3, [r4, #4]
 801abd0:	2b00      	cmp	r3, #0
 801abd2:	dd0f      	ble.n	801abf4 <__ssvfiscanf_r+0x64>
 801abd4:	6823      	ldr	r3, [r4, #0]
 801abd6:	781a      	ldrb	r2, [r3, #0]
 801abd8:	5cba      	ldrb	r2, [r7, r2]
 801abda:	0712      	lsls	r2, r2, #28
 801abdc:	d401      	bmi.n	801abe2 <__ssvfiscanf_r+0x52>
 801abde:	462a      	mov	r2, r5
 801abe0:	e7eb      	b.n	801abba <__ssvfiscanf_r+0x2a>
 801abe2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801abe4:	3201      	adds	r2, #1
 801abe6:	9245      	str	r2, [sp, #276]	; 0x114
 801abe8:	6862      	ldr	r2, [r4, #4]
 801abea:	3301      	adds	r3, #1
 801abec:	3a01      	subs	r2, #1
 801abee:	6062      	str	r2, [r4, #4]
 801abf0:	6023      	str	r3, [r4, #0]
 801abf2:	e7ec      	b.n	801abce <__ssvfiscanf_r+0x3e>
 801abf4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801abf6:	4621      	mov	r1, r4
 801abf8:	4630      	mov	r0, r6
 801abfa:	4798      	blx	r3
 801abfc:	2800      	cmp	r0, #0
 801abfe:	d0e9      	beq.n	801abd4 <__ssvfiscanf_r+0x44>
 801ac00:	e7ed      	b.n	801abde <__ssvfiscanf_r+0x4e>
 801ac02:	2b25      	cmp	r3, #37	; 0x25
 801ac04:	d012      	beq.n	801ac2c <__ssvfiscanf_r+0x9c>
 801ac06:	469a      	mov	sl, r3
 801ac08:	6863      	ldr	r3, [r4, #4]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	f340 8091 	ble.w	801ad32 <__ssvfiscanf_r+0x1a2>
 801ac10:	6822      	ldr	r2, [r4, #0]
 801ac12:	7813      	ldrb	r3, [r2, #0]
 801ac14:	4553      	cmp	r3, sl
 801ac16:	f040 812e 	bne.w	801ae76 <__ssvfiscanf_r+0x2e6>
 801ac1a:	6863      	ldr	r3, [r4, #4]
 801ac1c:	3b01      	subs	r3, #1
 801ac1e:	6063      	str	r3, [r4, #4]
 801ac20:	9b45      	ldr	r3, [sp, #276]	; 0x114
 801ac22:	3201      	adds	r2, #1
 801ac24:	3301      	adds	r3, #1
 801ac26:	6022      	str	r2, [r4, #0]
 801ac28:	9345      	str	r3, [sp, #276]	; 0x114
 801ac2a:	e7d8      	b.n	801abde <__ssvfiscanf_r+0x4e>
 801ac2c:	9141      	str	r1, [sp, #260]	; 0x104
 801ac2e:	9143      	str	r1, [sp, #268]	; 0x10c
 801ac30:	7853      	ldrb	r3, [r2, #1]
 801ac32:	2b2a      	cmp	r3, #42	; 0x2a
 801ac34:	bf02      	ittt	eq
 801ac36:	2310      	moveq	r3, #16
 801ac38:	1c95      	addeq	r5, r2, #2
 801ac3a:	9341      	streq	r3, [sp, #260]	; 0x104
 801ac3c:	220a      	movs	r2, #10
 801ac3e:	46aa      	mov	sl, r5
 801ac40:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801ac44:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 801ac48:	2b09      	cmp	r3, #9
 801ac4a:	d91c      	bls.n	801ac86 <__ssvfiscanf_r+0xf6>
 801ac4c:	487e      	ldr	r0, [pc, #504]	; (801ae48 <__ssvfiscanf_r+0x2b8>)
 801ac4e:	2203      	movs	r2, #3
 801ac50:	f7e5 fa96 	bl	8000180 <memchr>
 801ac54:	b138      	cbz	r0, 801ac66 <__ssvfiscanf_r+0xd6>
 801ac56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ac58:	eba0 0009 	sub.w	r0, r0, r9
 801ac5c:	2301      	movs	r3, #1
 801ac5e:	4083      	lsls	r3, r0
 801ac60:	4313      	orrs	r3, r2
 801ac62:	9341      	str	r3, [sp, #260]	; 0x104
 801ac64:	4655      	mov	r5, sl
 801ac66:	f815 3b01 	ldrb.w	r3, [r5], #1
 801ac6a:	2b78      	cmp	r3, #120	; 0x78
 801ac6c:	d806      	bhi.n	801ac7c <__ssvfiscanf_r+0xec>
 801ac6e:	2b57      	cmp	r3, #87	; 0x57
 801ac70:	d810      	bhi.n	801ac94 <__ssvfiscanf_r+0x104>
 801ac72:	2b25      	cmp	r3, #37	; 0x25
 801ac74:	d0c7      	beq.n	801ac06 <__ssvfiscanf_r+0x76>
 801ac76:	d857      	bhi.n	801ad28 <__ssvfiscanf_r+0x198>
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d065      	beq.n	801ad48 <__ssvfiscanf_r+0x1b8>
 801ac7c:	2303      	movs	r3, #3
 801ac7e:	9347      	str	r3, [sp, #284]	; 0x11c
 801ac80:	230a      	movs	r3, #10
 801ac82:	9342      	str	r3, [sp, #264]	; 0x108
 801ac84:	e076      	b.n	801ad74 <__ssvfiscanf_r+0x1e4>
 801ac86:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801ac88:	fb02 1103 	mla	r1, r2, r3, r1
 801ac8c:	3930      	subs	r1, #48	; 0x30
 801ac8e:	9143      	str	r1, [sp, #268]	; 0x10c
 801ac90:	4655      	mov	r5, sl
 801ac92:	e7d4      	b.n	801ac3e <__ssvfiscanf_r+0xae>
 801ac94:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801ac98:	2a20      	cmp	r2, #32
 801ac9a:	d8ef      	bhi.n	801ac7c <__ssvfiscanf_r+0xec>
 801ac9c:	a101      	add	r1, pc, #4	; (adr r1, 801aca4 <__ssvfiscanf_r+0x114>)
 801ac9e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801aca2:	bf00      	nop
 801aca4:	0801ad57 	.word	0x0801ad57
 801aca8:	0801ac7d 	.word	0x0801ac7d
 801acac:	0801ac7d 	.word	0x0801ac7d
 801acb0:	0801adb5 	.word	0x0801adb5
 801acb4:	0801ac7d 	.word	0x0801ac7d
 801acb8:	0801ac7d 	.word	0x0801ac7d
 801acbc:	0801ac7d 	.word	0x0801ac7d
 801acc0:	0801ac7d 	.word	0x0801ac7d
 801acc4:	0801ac7d 	.word	0x0801ac7d
 801acc8:	0801ac7d 	.word	0x0801ac7d
 801accc:	0801ac7d 	.word	0x0801ac7d
 801acd0:	0801adcb 	.word	0x0801adcb
 801acd4:	0801adb1 	.word	0x0801adb1
 801acd8:	0801ad2f 	.word	0x0801ad2f
 801acdc:	0801ad2f 	.word	0x0801ad2f
 801ace0:	0801ad2f 	.word	0x0801ad2f
 801ace4:	0801ac7d 	.word	0x0801ac7d
 801ace8:	0801ad6d 	.word	0x0801ad6d
 801acec:	0801ac7d 	.word	0x0801ac7d
 801acf0:	0801ac7d 	.word	0x0801ac7d
 801acf4:	0801ac7d 	.word	0x0801ac7d
 801acf8:	0801ac7d 	.word	0x0801ac7d
 801acfc:	0801addb 	.word	0x0801addb
 801ad00:	0801ada9 	.word	0x0801ada9
 801ad04:	0801ad4f 	.word	0x0801ad4f
 801ad08:	0801ac7d 	.word	0x0801ac7d
 801ad0c:	0801ac7d 	.word	0x0801ac7d
 801ad10:	0801add7 	.word	0x0801add7
 801ad14:	0801ac7d 	.word	0x0801ac7d
 801ad18:	0801adb1 	.word	0x0801adb1
 801ad1c:	0801ac7d 	.word	0x0801ac7d
 801ad20:	0801ac7d 	.word	0x0801ac7d
 801ad24:	0801ad57 	.word	0x0801ad57
 801ad28:	3b45      	subs	r3, #69	; 0x45
 801ad2a:	2b02      	cmp	r3, #2
 801ad2c:	d8a6      	bhi.n	801ac7c <__ssvfiscanf_r+0xec>
 801ad2e:	2305      	movs	r3, #5
 801ad30:	e01f      	b.n	801ad72 <__ssvfiscanf_r+0x1e2>
 801ad32:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ad34:	4621      	mov	r1, r4
 801ad36:	4630      	mov	r0, r6
 801ad38:	4798      	blx	r3
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	f43f af68 	beq.w	801ac10 <__ssvfiscanf_r+0x80>
 801ad40:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ad42:	2800      	cmp	r0, #0
 801ad44:	f040 808d 	bne.w	801ae62 <__ssvfiscanf_r+0x2d2>
 801ad48:	f04f 30ff 	mov.w	r0, #4294967295
 801ad4c:	e08f      	b.n	801ae6e <__ssvfiscanf_r+0x2de>
 801ad4e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ad50:	f042 0220 	orr.w	r2, r2, #32
 801ad54:	9241      	str	r2, [sp, #260]	; 0x104
 801ad56:	9a41      	ldr	r2, [sp, #260]	; 0x104
 801ad58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801ad5c:	9241      	str	r2, [sp, #260]	; 0x104
 801ad5e:	2210      	movs	r2, #16
 801ad60:	2b6f      	cmp	r3, #111	; 0x6f
 801ad62:	9242      	str	r2, [sp, #264]	; 0x108
 801ad64:	bf34      	ite	cc
 801ad66:	2303      	movcc	r3, #3
 801ad68:	2304      	movcs	r3, #4
 801ad6a:	e002      	b.n	801ad72 <__ssvfiscanf_r+0x1e2>
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	9342      	str	r3, [sp, #264]	; 0x108
 801ad70:	2303      	movs	r3, #3
 801ad72:	9347      	str	r3, [sp, #284]	; 0x11c
 801ad74:	6863      	ldr	r3, [r4, #4]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	dd3d      	ble.n	801adf6 <__ssvfiscanf_r+0x266>
 801ad7a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801ad7c:	0659      	lsls	r1, r3, #25
 801ad7e:	d404      	bmi.n	801ad8a <__ssvfiscanf_r+0x1fa>
 801ad80:	6823      	ldr	r3, [r4, #0]
 801ad82:	781a      	ldrb	r2, [r3, #0]
 801ad84:	5cba      	ldrb	r2, [r7, r2]
 801ad86:	0712      	lsls	r2, r2, #28
 801ad88:	d43c      	bmi.n	801ae04 <__ssvfiscanf_r+0x274>
 801ad8a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801ad8c:	2b02      	cmp	r3, #2
 801ad8e:	dc4b      	bgt.n	801ae28 <__ssvfiscanf_r+0x298>
 801ad90:	466b      	mov	r3, sp
 801ad92:	4622      	mov	r2, r4
 801ad94:	a941      	add	r1, sp, #260	; 0x104
 801ad96:	4630      	mov	r0, r6
 801ad98:	f000 f9b4 	bl	801b104 <_scanf_chars>
 801ad9c:	2801      	cmp	r0, #1
 801ad9e:	d06a      	beq.n	801ae76 <__ssvfiscanf_r+0x2e6>
 801ada0:	2802      	cmp	r0, #2
 801ada2:	f47f af1c 	bne.w	801abde <__ssvfiscanf_r+0x4e>
 801ada6:	e7cb      	b.n	801ad40 <__ssvfiscanf_r+0x1b0>
 801ada8:	2308      	movs	r3, #8
 801adaa:	9342      	str	r3, [sp, #264]	; 0x108
 801adac:	2304      	movs	r3, #4
 801adae:	e7e0      	b.n	801ad72 <__ssvfiscanf_r+0x1e2>
 801adb0:	220a      	movs	r2, #10
 801adb2:	e7d5      	b.n	801ad60 <__ssvfiscanf_r+0x1d0>
 801adb4:	4629      	mov	r1, r5
 801adb6:	4640      	mov	r0, r8
 801adb8:	f000 fbfe 	bl	801b5b8 <__sccl>
 801adbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801adbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801adc2:	9341      	str	r3, [sp, #260]	; 0x104
 801adc4:	4605      	mov	r5, r0
 801adc6:	2301      	movs	r3, #1
 801adc8:	e7d3      	b.n	801ad72 <__ssvfiscanf_r+0x1e2>
 801adca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801adcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801add0:	9341      	str	r3, [sp, #260]	; 0x104
 801add2:	2300      	movs	r3, #0
 801add4:	e7cd      	b.n	801ad72 <__ssvfiscanf_r+0x1e2>
 801add6:	2302      	movs	r3, #2
 801add8:	e7cb      	b.n	801ad72 <__ssvfiscanf_r+0x1e2>
 801adda:	9841      	ldr	r0, [sp, #260]	; 0x104
 801addc:	06c3      	lsls	r3, r0, #27
 801adde:	f53f aefe 	bmi.w	801abde <__ssvfiscanf_r+0x4e>
 801ade2:	9b00      	ldr	r3, [sp, #0]
 801ade4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ade6:	1d19      	adds	r1, r3, #4
 801ade8:	9100      	str	r1, [sp, #0]
 801adea:	681b      	ldr	r3, [r3, #0]
 801adec:	07c0      	lsls	r0, r0, #31
 801adee:	bf4c      	ite	mi
 801adf0:	801a      	strhmi	r2, [r3, #0]
 801adf2:	601a      	strpl	r2, [r3, #0]
 801adf4:	e6f3      	b.n	801abde <__ssvfiscanf_r+0x4e>
 801adf6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801adf8:	4621      	mov	r1, r4
 801adfa:	4630      	mov	r0, r6
 801adfc:	4798      	blx	r3
 801adfe:	2800      	cmp	r0, #0
 801ae00:	d0bb      	beq.n	801ad7a <__ssvfiscanf_r+0x1ea>
 801ae02:	e79d      	b.n	801ad40 <__ssvfiscanf_r+0x1b0>
 801ae04:	9a45      	ldr	r2, [sp, #276]	; 0x114
 801ae06:	3201      	adds	r2, #1
 801ae08:	9245      	str	r2, [sp, #276]	; 0x114
 801ae0a:	6862      	ldr	r2, [r4, #4]
 801ae0c:	3a01      	subs	r2, #1
 801ae0e:	2a00      	cmp	r2, #0
 801ae10:	6062      	str	r2, [r4, #4]
 801ae12:	dd02      	ble.n	801ae1a <__ssvfiscanf_r+0x28a>
 801ae14:	3301      	adds	r3, #1
 801ae16:	6023      	str	r3, [r4, #0]
 801ae18:	e7b2      	b.n	801ad80 <__ssvfiscanf_r+0x1f0>
 801ae1a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801ae1c:	4621      	mov	r1, r4
 801ae1e:	4630      	mov	r0, r6
 801ae20:	4798      	blx	r3
 801ae22:	2800      	cmp	r0, #0
 801ae24:	d0ac      	beq.n	801ad80 <__ssvfiscanf_r+0x1f0>
 801ae26:	e78b      	b.n	801ad40 <__ssvfiscanf_r+0x1b0>
 801ae28:	2b04      	cmp	r3, #4
 801ae2a:	dc0f      	bgt.n	801ae4c <__ssvfiscanf_r+0x2bc>
 801ae2c:	466b      	mov	r3, sp
 801ae2e:	4622      	mov	r2, r4
 801ae30:	a941      	add	r1, sp, #260	; 0x104
 801ae32:	4630      	mov	r0, r6
 801ae34:	f000 f9c0 	bl	801b1b8 <_scanf_i>
 801ae38:	e7b0      	b.n	801ad9c <__ssvfiscanf_r+0x20c>
 801ae3a:	bf00      	nop
 801ae3c:	0801aadd 	.word	0x0801aadd
 801ae40:	0801ab57 	.word	0x0801ab57
 801ae44:	0801edd9 	.word	0x0801edd9
 801ae48:	0801eedf 	.word	0x0801eedf
 801ae4c:	4b0b      	ldr	r3, [pc, #44]	; (801ae7c <__ssvfiscanf_r+0x2ec>)
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	f43f aec5 	beq.w	801abde <__ssvfiscanf_r+0x4e>
 801ae54:	466b      	mov	r3, sp
 801ae56:	4622      	mov	r2, r4
 801ae58:	a941      	add	r1, sp, #260	; 0x104
 801ae5a:	4630      	mov	r0, r6
 801ae5c:	f7fc fe5c 	bl	8017b18 <_scanf_float>
 801ae60:	e79c      	b.n	801ad9c <__ssvfiscanf_r+0x20c>
 801ae62:	89a3      	ldrh	r3, [r4, #12]
 801ae64:	f013 0f40 	tst.w	r3, #64	; 0x40
 801ae68:	bf18      	it	ne
 801ae6a:	f04f 30ff 	movne.w	r0, #4294967295
 801ae6e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 801ae72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae76:	9844      	ldr	r0, [sp, #272]	; 0x110
 801ae78:	e7f9      	b.n	801ae6e <__ssvfiscanf_r+0x2de>
 801ae7a:	bf00      	nop
 801ae7c:	08017b19 	.word	0x08017b19

0801ae80 <__sfputc_r>:
 801ae80:	6893      	ldr	r3, [r2, #8]
 801ae82:	3b01      	subs	r3, #1
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	b410      	push	{r4}
 801ae88:	6093      	str	r3, [r2, #8]
 801ae8a:	da07      	bge.n	801ae9c <__sfputc_r+0x1c>
 801ae8c:	6994      	ldr	r4, [r2, #24]
 801ae8e:	42a3      	cmp	r3, r4
 801ae90:	db01      	blt.n	801ae96 <__sfputc_r+0x16>
 801ae92:	290a      	cmp	r1, #10
 801ae94:	d102      	bne.n	801ae9c <__sfputc_r+0x1c>
 801ae96:	bc10      	pop	{r4}
 801ae98:	f7fd b99b 	b.w	80181d2 <__swbuf_r>
 801ae9c:	6813      	ldr	r3, [r2, #0]
 801ae9e:	1c58      	adds	r0, r3, #1
 801aea0:	6010      	str	r0, [r2, #0]
 801aea2:	7019      	strb	r1, [r3, #0]
 801aea4:	4608      	mov	r0, r1
 801aea6:	bc10      	pop	{r4}
 801aea8:	4770      	bx	lr

0801aeaa <__sfputs_r>:
 801aeaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeac:	4606      	mov	r6, r0
 801aeae:	460f      	mov	r7, r1
 801aeb0:	4614      	mov	r4, r2
 801aeb2:	18d5      	adds	r5, r2, r3
 801aeb4:	42ac      	cmp	r4, r5
 801aeb6:	d101      	bne.n	801aebc <__sfputs_r+0x12>
 801aeb8:	2000      	movs	r0, #0
 801aeba:	e007      	b.n	801aecc <__sfputs_r+0x22>
 801aebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aec0:	463a      	mov	r2, r7
 801aec2:	4630      	mov	r0, r6
 801aec4:	f7ff ffdc 	bl	801ae80 <__sfputc_r>
 801aec8:	1c43      	adds	r3, r0, #1
 801aeca:	d1f3      	bne.n	801aeb4 <__sfputs_r+0xa>
 801aecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aed0 <_vfiprintf_r>:
 801aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aed4:	460d      	mov	r5, r1
 801aed6:	b09d      	sub	sp, #116	; 0x74
 801aed8:	4614      	mov	r4, r2
 801aeda:	4698      	mov	r8, r3
 801aedc:	4606      	mov	r6, r0
 801aede:	b118      	cbz	r0, 801aee8 <_vfiprintf_r+0x18>
 801aee0:	6a03      	ldr	r3, [r0, #32]
 801aee2:	b90b      	cbnz	r3, 801aee8 <_vfiprintf_r+0x18>
 801aee4:	f7fd f8b0 	bl	8018048 <__sinit>
 801aee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aeea:	07d9      	lsls	r1, r3, #31
 801aeec:	d405      	bmi.n	801aefa <_vfiprintf_r+0x2a>
 801aeee:	89ab      	ldrh	r3, [r5, #12]
 801aef0:	059a      	lsls	r2, r3, #22
 801aef2:	d402      	bmi.n	801aefa <_vfiprintf_r+0x2a>
 801aef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aef6:	f7fd faa0 	bl	801843a <__retarget_lock_acquire_recursive>
 801aefa:	89ab      	ldrh	r3, [r5, #12]
 801aefc:	071b      	lsls	r3, r3, #28
 801aefe:	d501      	bpl.n	801af04 <_vfiprintf_r+0x34>
 801af00:	692b      	ldr	r3, [r5, #16]
 801af02:	b99b      	cbnz	r3, 801af2c <_vfiprintf_r+0x5c>
 801af04:	4629      	mov	r1, r5
 801af06:	4630      	mov	r0, r6
 801af08:	f7fd f9a0 	bl	801824c <__swsetup_r>
 801af0c:	b170      	cbz	r0, 801af2c <_vfiprintf_r+0x5c>
 801af0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801af10:	07dc      	lsls	r4, r3, #31
 801af12:	d504      	bpl.n	801af1e <_vfiprintf_r+0x4e>
 801af14:	f04f 30ff 	mov.w	r0, #4294967295
 801af18:	b01d      	add	sp, #116	; 0x74
 801af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af1e:	89ab      	ldrh	r3, [r5, #12]
 801af20:	0598      	lsls	r0, r3, #22
 801af22:	d4f7      	bmi.n	801af14 <_vfiprintf_r+0x44>
 801af24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af26:	f7fd fa89 	bl	801843c <__retarget_lock_release_recursive>
 801af2a:	e7f3      	b.n	801af14 <_vfiprintf_r+0x44>
 801af2c:	2300      	movs	r3, #0
 801af2e:	9309      	str	r3, [sp, #36]	; 0x24
 801af30:	2320      	movs	r3, #32
 801af32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af36:	f8cd 800c 	str.w	r8, [sp, #12]
 801af3a:	2330      	movs	r3, #48	; 0x30
 801af3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801b0f0 <_vfiprintf_r+0x220>
 801af40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af44:	f04f 0901 	mov.w	r9, #1
 801af48:	4623      	mov	r3, r4
 801af4a:	469a      	mov	sl, r3
 801af4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af50:	b10a      	cbz	r2, 801af56 <_vfiprintf_r+0x86>
 801af52:	2a25      	cmp	r2, #37	; 0x25
 801af54:	d1f9      	bne.n	801af4a <_vfiprintf_r+0x7a>
 801af56:	ebba 0b04 	subs.w	fp, sl, r4
 801af5a:	d00b      	beq.n	801af74 <_vfiprintf_r+0xa4>
 801af5c:	465b      	mov	r3, fp
 801af5e:	4622      	mov	r2, r4
 801af60:	4629      	mov	r1, r5
 801af62:	4630      	mov	r0, r6
 801af64:	f7ff ffa1 	bl	801aeaa <__sfputs_r>
 801af68:	3001      	adds	r0, #1
 801af6a:	f000 80a9 	beq.w	801b0c0 <_vfiprintf_r+0x1f0>
 801af6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af70:	445a      	add	r2, fp
 801af72:	9209      	str	r2, [sp, #36]	; 0x24
 801af74:	f89a 3000 	ldrb.w	r3, [sl]
 801af78:	2b00      	cmp	r3, #0
 801af7a:	f000 80a1 	beq.w	801b0c0 <_vfiprintf_r+0x1f0>
 801af7e:	2300      	movs	r3, #0
 801af80:	f04f 32ff 	mov.w	r2, #4294967295
 801af84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af88:	f10a 0a01 	add.w	sl, sl, #1
 801af8c:	9304      	str	r3, [sp, #16]
 801af8e:	9307      	str	r3, [sp, #28]
 801af90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801af94:	931a      	str	r3, [sp, #104]	; 0x68
 801af96:	4654      	mov	r4, sl
 801af98:	2205      	movs	r2, #5
 801af9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af9e:	4854      	ldr	r0, [pc, #336]	; (801b0f0 <_vfiprintf_r+0x220>)
 801afa0:	f7e5 f8ee 	bl	8000180 <memchr>
 801afa4:	9a04      	ldr	r2, [sp, #16]
 801afa6:	b9d8      	cbnz	r0, 801afe0 <_vfiprintf_r+0x110>
 801afa8:	06d1      	lsls	r1, r2, #27
 801afaa:	bf44      	itt	mi
 801afac:	2320      	movmi	r3, #32
 801afae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801afb2:	0713      	lsls	r3, r2, #28
 801afb4:	bf44      	itt	mi
 801afb6:	232b      	movmi	r3, #43	; 0x2b
 801afb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801afbc:	f89a 3000 	ldrb.w	r3, [sl]
 801afc0:	2b2a      	cmp	r3, #42	; 0x2a
 801afc2:	d015      	beq.n	801aff0 <_vfiprintf_r+0x120>
 801afc4:	9a07      	ldr	r2, [sp, #28]
 801afc6:	4654      	mov	r4, sl
 801afc8:	2000      	movs	r0, #0
 801afca:	f04f 0c0a 	mov.w	ip, #10
 801afce:	4621      	mov	r1, r4
 801afd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801afd4:	3b30      	subs	r3, #48	; 0x30
 801afd6:	2b09      	cmp	r3, #9
 801afd8:	d94d      	bls.n	801b076 <_vfiprintf_r+0x1a6>
 801afda:	b1b0      	cbz	r0, 801b00a <_vfiprintf_r+0x13a>
 801afdc:	9207      	str	r2, [sp, #28]
 801afde:	e014      	b.n	801b00a <_vfiprintf_r+0x13a>
 801afe0:	eba0 0308 	sub.w	r3, r0, r8
 801afe4:	fa09 f303 	lsl.w	r3, r9, r3
 801afe8:	4313      	orrs	r3, r2
 801afea:	9304      	str	r3, [sp, #16]
 801afec:	46a2      	mov	sl, r4
 801afee:	e7d2      	b.n	801af96 <_vfiprintf_r+0xc6>
 801aff0:	9b03      	ldr	r3, [sp, #12]
 801aff2:	1d19      	adds	r1, r3, #4
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	9103      	str	r1, [sp, #12]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	bfbb      	ittet	lt
 801affc:	425b      	neglt	r3, r3
 801affe:	f042 0202 	orrlt.w	r2, r2, #2
 801b002:	9307      	strge	r3, [sp, #28]
 801b004:	9307      	strlt	r3, [sp, #28]
 801b006:	bfb8      	it	lt
 801b008:	9204      	strlt	r2, [sp, #16]
 801b00a:	7823      	ldrb	r3, [r4, #0]
 801b00c:	2b2e      	cmp	r3, #46	; 0x2e
 801b00e:	d10c      	bne.n	801b02a <_vfiprintf_r+0x15a>
 801b010:	7863      	ldrb	r3, [r4, #1]
 801b012:	2b2a      	cmp	r3, #42	; 0x2a
 801b014:	d134      	bne.n	801b080 <_vfiprintf_r+0x1b0>
 801b016:	9b03      	ldr	r3, [sp, #12]
 801b018:	1d1a      	adds	r2, r3, #4
 801b01a:	681b      	ldr	r3, [r3, #0]
 801b01c:	9203      	str	r2, [sp, #12]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	bfb8      	it	lt
 801b022:	f04f 33ff 	movlt.w	r3, #4294967295
 801b026:	3402      	adds	r4, #2
 801b028:	9305      	str	r3, [sp, #20]
 801b02a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801b0f4 <_vfiprintf_r+0x224>
 801b02e:	7821      	ldrb	r1, [r4, #0]
 801b030:	2203      	movs	r2, #3
 801b032:	4650      	mov	r0, sl
 801b034:	f7e5 f8a4 	bl	8000180 <memchr>
 801b038:	b138      	cbz	r0, 801b04a <_vfiprintf_r+0x17a>
 801b03a:	9b04      	ldr	r3, [sp, #16]
 801b03c:	eba0 000a 	sub.w	r0, r0, sl
 801b040:	2240      	movs	r2, #64	; 0x40
 801b042:	4082      	lsls	r2, r0
 801b044:	4313      	orrs	r3, r2
 801b046:	3401      	adds	r4, #1
 801b048:	9304      	str	r3, [sp, #16]
 801b04a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b04e:	482a      	ldr	r0, [pc, #168]	; (801b0f8 <_vfiprintf_r+0x228>)
 801b050:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b054:	2206      	movs	r2, #6
 801b056:	f7e5 f893 	bl	8000180 <memchr>
 801b05a:	2800      	cmp	r0, #0
 801b05c:	d03f      	beq.n	801b0de <_vfiprintf_r+0x20e>
 801b05e:	4b27      	ldr	r3, [pc, #156]	; (801b0fc <_vfiprintf_r+0x22c>)
 801b060:	bb1b      	cbnz	r3, 801b0aa <_vfiprintf_r+0x1da>
 801b062:	9b03      	ldr	r3, [sp, #12]
 801b064:	3307      	adds	r3, #7
 801b066:	f023 0307 	bic.w	r3, r3, #7
 801b06a:	3308      	adds	r3, #8
 801b06c:	9303      	str	r3, [sp, #12]
 801b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b070:	443b      	add	r3, r7
 801b072:	9309      	str	r3, [sp, #36]	; 0x24
 801b074:	e768      	b.n	801af48 <_vfiprintf_r+0x78>
 801b076:	fb0c 3202 	mla	r2, ip, r2, r3
 801b07a:	460c      	mov	r4, r1
 801b07c:	2001      	movs	r0, #1
 801b07e:	e7a6      	b.n	801afce <_vfiprintf_r+0xfe>
 801b080:	2300      	movs	r3, #0
 801b082:	3401      	adds	r4, #1
 801b084:	9305      	str	r3, [sp, #20]
 801b086:	4619      	mov	r1, r3
 801b088:	f04f 0c0a 	mov.w	ip, #10
 801b08c:	4620      	mov	r0, r4
 801b08e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b092:	3a30      	subs	r2, #48	; 0x30
 801b094:	2a09      	cmp	r2, #9
 801b096:	d903      	bls.n	801b0a0 <_vfiprintf_r+0x1d0>
 801b098:	2b00      	cmp	r3, #0
 801b09a:	d0c6      	beq.n	801b02a <_vfiprintf_r+0x15a>
 801b09c:	9105      	str	r1, [sp, #20]
 801b09e:	e7c4      	b.n	801b02a <_vfiprintf_r+0x15a>
 801b0a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801b0a4:	4604      	mov	r4, r0
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	e7f0      	b.n	801b08c <_vfiprintf_r+0x1bc>
 801b0aa:	ab03      	add	r3, sp, #12
 801b0ac:	9300      	str	r3, [sp, #0]
 801b0ae:	462a      	mov	r2, r5
 801b0b0:	4b13      	ldr	r3, [pc, #76]	; (801b100 <_vfiprintf_r+0x230>)
 801b0b2:	a904      	add	r1, sp, #16
 801b0b4:	4630      	mov	r0, r6
 801b0b6:	f7fc f973 	bl	80173a0 <_printf_float>
 801b0ba:	4607      	mov	r7, r0
 801b0bc:	1c78      	adds	r0, r7, #1
 801b0be:	d1d6      	bne.n	801b06e <_vfiprintf_r+0x19e>
 801b0c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b0c2:	07d9      	lsls	r1, r3, #31
 801b0c4:	d405      	bmi.n	801b0d2 <_vfiprintf_r+0x202>
 801b0c6:	89ab      	ldrh	r3, [r5, #12]
 801b0c8:	059a      	lsls	r2, r3, #22
 801b0ca:	d402      	bmi.n	801b0d2 <_vfiprintf_r+0x202>
 801b0cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b0ce:	f7fd f9b5 	bl	801843c <__retarget_lock_release_recursive>
 801b0d2:	89ab      	ldrh	r3, [r5, #12]
 801b0d4:	065b      	lsls	r3, r3, #25
 801b0d6:	f53f af1d 	bmi.w	801af14 <_vfiprintf_r+0x44>
 801b0da:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b0dc:	e71c      	b.n	801af18 <_vfiprintf_r+0x48>
 801b0de:	ab03      	add	r3, sp, #12
 801b0e0:	9300      	str	r3, [sp, #0]
 801b0e2:	462a      	mov	r2, r5
 801b0e4:	4b06      	ldr	r3, [pc, #24]	; (801b100 <_vfiprintf_r+0x230>)
 801b0e6:	a904      	add	r1, sp, #16
 801b0e8:	4630      	mov	r0, r6
 801b0ea:	f7fc fbf3 	bl	80178d4 <_printf_i>
 801b0ee:	e7e4      	b.n	801b0ba <_vfiprintf_r+0x1ea>
 801b0f0:	0801eed9 	.word	0x0801eed9
 801b0f4:	0801eedf 	.word	0x0801eedf
 801b0f8:	0801eee3 	.word	0x0801eee3
 801b0fc:	080173a1 	.word	0x080173a1
 801b100:	0801aeab 	.word	0x0801aeab

0801b104 <_scanf_chars>:
 801b104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b108:	4615      	mov	r5, r2
 801b10a:	688a      	ldr	r2, [r1, #8]
 801b10c:	4680      	mov	r8, r0
 801b10e:	460c      	mov	r4, r1
 801b110:	b932      	cbnz	r2, 801b120 <_scanf_chars+0x1c>
 801b112:	698a      	ldr	r2, [r1, #24]
 801b114:	2a00      	cmp	r2, #0
 801b116:	bf0c      	ite	eq
 801b118:	2201      	moveq	r2, #1
 801b11a:	f04f 32ff 	movne.w	r2, #4294967295
 801b11e:	608a      	str	r2, [r1, #8]
 801b120:	6822      	ldr	r2, [r4, #0]
 801b122:	f8df 9090 	ldr.w	r9, [pc, #144]	; 801b1b4 <_scanf_chars+0xb0>
 801b126:	06d1      	lsls	r1, r2, #27
 801b128:	bf5f      	itttt	pl
 801b12a:	681a      	ldrpl	r2, [r3, #0]
 801b12c:	1d11      	addpl	r1, r2, #4
 801b12e:	6019      	strpl	r1, [r3, #0]
 801b130:	6816      	ldrpl	r6, [r2, #0]
 801b132:	2700      	movs	r7, #0
 801b134:	69a0      	ldr	r0, [r4, #24]
 801b136:	b188      	cbz	r0, 801b15c <_scanf_chars+0x58>
 801b138:	2801      	cmp	r0, #1
 801b13a:	d107      	bne.n	801b14c <_scanf_chars+0x48>
 801b13c:	682b      	ldr	r3, [r5, #0]
 801b13e:	781a      	ldrb	r2, [r3, #0]
 801b140:	6963      	ldr	r3, [r4, #20]
 801b142:	5c9b      	ldrb	r3, [r3, r2]
 801b144:	b953      	cbnz	r3, 801b15c <_scanf_chars+0x58>
 801b146:	2f00      	cmp	r7, #0
 801b148:	d031      	beq.n	801b1ae <_scanf_chars+0xaa>
 801b14a:	e022      	b.n	801b192 <_scanf_chars+0x8e>
 801b14c:	2802      	cmp	r0, #2
 801b14e:	d120      	bne.n	801b192 <_scanf_chars+0x8e>
 801b150:	682b      	ldr	r3, [r5, #0]
 801b152:	781b      	ldrb	r3, [r3, #0]
 801b154:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b158:	071b      	lsls	r3, r3, #28
 801b15a:	d41a      	bmi.n	801b192 <_scanf_chars+0x8e>
 801b15c:	6823      	ldr	r3, [r4, #0]
 801b15e:	06da      	lsls	r2, r3, #27
 801b160:	bf5e      	ittt	pl
 801b162:	682b      	ldrpl	r3, [r5, #0]
 801b164:	781b      	ldrbpl	r3, [r3, #0]
 801b166:	f806 3b01 	strbpl.w	r3, [r6], #1
 801b16a:	682a      	ldr	r2, [r5, #0]
 801b16c:	686b      	ldr	r3, [r5, #4]
 801b16e:	3201      	adds	r2, #1
 801b170:	602a      	str	r2, [r5, #0]
 801b172:	68a2      	ldr	r2, [r4, #8]
 801b174:	3b01      	subs	r3, #1
 801b176:	3a01      	subs	r2, #1
 801b178:	606b      	str	r3, [r5, #4]
 801b17a:	3701      	adds	r7, #1
 801b17c:	60a2      	str	r2, [r4, #8]
 801b17e:	b142      	cbz	r2, 801b192 <_scanf_chars+0x8e>
 801b180:	2b00      	cmp	r3, #0
 801b182:	dcd7      	bgt.n	801b134 <_scanf_chars+0x30>
 801b184:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b188:	4629      	mov	r1, r5
 801b18a:	4640      	mov	r0, r8
 801b18c:	4798      	blx	r3
 801b18e:	2800      	cmp	r0, #0
 801b190:	d0d0      	beq.n	801b134 <_scanf_chars+0x30>
 801b192:	6823      	ldr	r3, [r4, #0]
 801b194:	f013 0310 	ands.w	r3, r3, #16
 801b198:	d105      	bne.n	801b1a6 <_scanf_chars+0xa2>
 801b19a:	68e2      	ldr	r2, [r4, #12]
 801b19c:	3201      	adds	r2, #1
 801b19e:	60e2      	str	r2, [r4, #12]
 801b1a0:	69a2      	ldr	r2, [r4, #24]
 801b1a2:	b102      	cbz	r2, 801b1a6 <_scanf_chars+0xa2>
 801b1a4:	7033      	strb	r3, [r6, #0]
 801b1a6:	6923      	ldr	r3, [r4, #16]
 801b1a8:	443b      	add	r3, r7
 801b1aa:	6123      	str	r3, [r4, #16]
 801b1ac:	2000      	movs	r0, #0
 801b1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1b2:	bf00      	nop
 801b1b4:	0801edd9 	.word	0x0801edd9

0801b1b8 <_scanf_i>:
 801b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b1bc:	4698      	mov	r8, r3
 801b1be:	4b74      	ldr	r3, [pc, #464]	; (801b390 <_scanf_i+0x1d8>)
 801b1c0:	460c      	mov	r4, r1
 801b1c2:	4682      	mov	sl, r0
 801b1c4:	4616      	mov	r6, r2
 801b1c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801b1ca:	b087      	sub	sp, #28
 801b1cc:	ab03      	add	r3, sp, #12
 801b1ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801b1d2:	4b70      	ldr	r3, [pc, #448]	; (801b394 <_scanf_i+0x1dc>)
 801b1d4:	69a1      	ldr	r1, [r4, #24]
 801b1d6:	4a70      	ldr	r2, [pc, #448]	; (801b398 <_scanf_i+0x1e0>)
 801b1d8:	2903      	cmp	r1, #3
 801b1da:	bf18      	it	ne
 801b1dc:	461a      	movne	r2, r3
 801b1de:	68a3      	ldr	r3, [r4, #8]
 801b1e0:	9201      	str	r2, [sp, #4]
 801b1e2:	1e5a      	subs	r2, r3, #1
 801b1e4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801b1e8:	bf88      	it	hi
 801b1ea:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801b1ee:	4627      	mov	r7, r4
 801b1f0:	bf82      	ittt	hi
 801b1f2:	eb03 0905 	addhi.w	r9, r3, r5
 801b1f6:	f240 135d 	movwhi	r3, #349	; 0x15d
 801b1fa:	60a3      	strhi	r3, [r4, #8]
 801b1fc:	f857 3b1c 	ldr.w	r3, [r7], #28
 801b200:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 801b204:	bf98      	it	ls
 801b206:	f04f 0900 	movls.w	r9, #0
 801b20a:	6023      	str	r3, [r4, #0]
 801b20c:	463d      	mov	r5, r7
 801b20e:	f04f 0b00 	mov.w	fp, #0
 801b212:	6831      	ldr	r1, [r6, #0]
 801b214:	ab03      	add	r3, sp, #12
 801b216:	7809      	ldrb	r1, [r1, #0]
 801b218:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801b21c:	2202      	movs	r2, #2
 801b21e:	f7e4 ffaf 	bl	8000180 <memchr>
 801b222:	b328      	cbz	r0, 801b270 <_scanf_i+0xb8>
 801b224:	f1bb 0f01 	cmp.w	fp, #1
 801b228:	d159      	bne.n	801b2de <_scanf_i+0x126>
 801b22a:	6862      	ldr	r2, [r4, #4]
 801b22c:	b92a      	cbnz	r2, 801b23a <_scanf_i+0x82>
 801b22e:	6822      	ldr	r2, [r4, #0]
 801b230:	2308      	movs	r3, #8
 801b232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801b236:	6063      	str	r3, [r4, #4]
 801b238:	6022      	str	r2, [r4, #0]
 801b23a:	6822      	ldr	r2, [r4, #0]
 801b23c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801b240:	6022      	str	r2, [r4, #0]
 801b242:	68a2      	ldr	r2, [r4, #8]
 801b244:	1e51      	subs	r1, r2, #1
 801b246:	60a1      	str	r1, [r4, #8]
 801b248:	b192      	cbz	r2, 801b270 <_scanf_i+0xb8>
 801b24a:	6832      	ldr	r2, [r6, #0]
 801b24c:	1c51      	adds	r1, r2, #1
 801b24e:	6031      	str	r1, [r6, #0]
 801b250:	7812      	ldrb	r2, [r2, #0]
 801b252:	f805 2b01 	strb.w	r2, [r5], #1
 801b256:	6872      	ldr	r2, [r6, #4]
 801b258:	3a01      	subs	r2, #1
 801b25a:	2a00      	cmp	r2, #0
 801b25c:	6072      	str	r2, [r6, #4]
 801b25e:	dc07      	bgt.n	801b270 <_scanf_i+0xb8>
 801b260:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801b264:	4631      	mov	r1, r6
 801b266:	4650      	mov	r0, sl
 801b268:	4790      	blx	r2
 801b26a:	2800      	cmp	r0, #0
 801b26c:	f040 8085 	bne.w	801b37a <_scanf_i+0x1c2>
 801b270:	f10b 0b01 	add.w	fp, fp, #1
 801b274:	f1bb 0f03 	cmp.w	fp, #3
 801b278:	d1cb      	bne.n	801b212 <_scanf_i+0x5a>
 801b27a:	6863      	ldr	r3, [r4, #4]
 801b27c:	b90b      	cbnz	r3, 801b282 <_scanf_i+0xca>
 801b27e:	230a      	movs	r3, #10
 801b280:	6063      	str	r3, [r4, #4]
 801b282:	6863      	ldr	r3, [r4, #4]
 801b284:	4945      	ldr	r1, [pc, #276]	; (801b39c <_scanf_i+0x1e4>)
 801b286:	6960      	ldr	r0, [r4, #20]
 801b288:	1ac9      	subs	r1, r1, r3
 801b28a:	f000 f995 	bl	801b5b8 <__sccl>
 801b28e:	f04f 0b00 	mov.w	fp, #0
 801b292:	68a3      	ldr	r3, [r4, #8]
 801b294:	6822      	ldr	r2, [r4, #0]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d03d      	beq.n	801b316 <_scanf_i+0x15e>
 801b29a:	6831      	ldr	r1, [r6, #0]
 801b29c:	6960      	ldr	r0, [r4, #20]
 801b29e:	f891 c000 	ldrb.w	ip, [r1]
 801b2a2:	f810 000c 	ldrb.w	r0, [r0, ip]
 801b2a6:	2800      	cmp	r0, #0
 801b2a8:	d035      	beq.n	801b316 <_scanf_i+0x15e>
 801b2aa:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801b2ae:	d124      	bne.n	801b2fa <_scanf_i+0x142>
 801b2b0:	0510      	lsls	r0, r2, #20
 801b2b2:	d522      	bpl.n	801b2fa <_scanf_i+0x142>
 801b2b4:	f10b 0b01 	add.w	fp, fp, #1
 801b2b8:	f1b9 0f00 	cmp.w	r9, #0
 801b2bc:	d003      	beq.n	801b2c6 <_scanf_i+0x10e>
 801b2be:	3301      	adds	r3, #1
 801b2c0:	f109 39ff 	add.w	r9, r9, #4294967295
 801b2c4:	60a3      	str	r3, [r4, #8]
 801b2c6:	6873      	ldr	r3, [r6, #4]
 801b2c8:	3b01      	subs	r3, #1
 801b2ca:	2b00      	cmp	r3, #0
 801b2cc:	6073      	str	r3, [r6, #4]
 801b2ce:	dd1b      	ble.n	801b308 <_scanf_i+0x150>
 801b2d0:	6833      	ldr	r3, [r6, #0]
 801b2d2:	3301      	adds	r3, #1
 801b2d4:	6033      	str	r3, [r6, #0]
 801b2d6:	68a3      	ldr	r3, [r4, #8]
 801b2d8:	3b01      	subs	r3, #1
 801b2da:	60a3      	str	r3, [r4, #8]
 801b2dc:	e7d9      	b.n	801b292 <_scanf_i+0xda>
 801b2de:	f1bb 0f02 	cmp.w	fp, #2
 801b2e2:	d1ae      	bne.n	801b242 <_scanf_i+0x8a>
 801b2e4:	6822      	ldr	r2, [r4, #0]
 801b2e6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801b2ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801b2ee:	d1bf      	bne.n	801b270 <_scanf_i+0xb8>
 801b2f0:	2310      	movs	r3, #16
 801b2f2:	6063      	str	r3, [r4, #4]
 801b2f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b2f8:	e7a2      	b.n	801b240 <_scanf_i+0x88>
 801b2fa:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801b2fe:	6022      	str	r2, [r4, #0]
 801b300:	780b      	ldrb	r3, [r1, #0]
 801b302:	f805 3b01 	strb.w	r3, [r5], #1
 801b306:	e7de      	b.n	801b2c6 <_scanf_i+0x10e>
 801b308:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801b30c:	4631      	mov	r1, r6
 801b30e:	4650      	mov	r0, sl
 801b310:	4798      	blx	r3
 801b312:	2800      	cmp	r0, #0
 801b314:	d0df      	beq.n	801b2d6 <_scanf_i+0x11e>
 801b316:	6823      	ldr	r3, [r4, #0]
 801b318:	05d9      	lsls	r1, r3, #23
 801b31a:	d50d      	bpl.n	801b338 <_scanf_i+0x180>
 801b31c:	42bd      	cmp	r5, r7
 801b31e:	d909      	bls.n	801b334 <_scanf_i+0x17c>
 801b320:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801b324:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801b328:	4632      	mov	r2, r6
 801b32a:	4650      	mov	r0, sl
 801b32c:	4798      	blx	r3
 801b32e:	f105 39ff 	add.w	r9, r5, #4294967295
 801b332:	464d      	mov	r5, r9
 801b334:	42bd      	cmp	r5, r7
 801b336:	d028      	beq.n	801b38a <_scanf_i+0x1d2>
 801b338:	6822      	ldr	r2, [r4, #0]
 801b33a:	f012 0210 	ands.w	r2, r2, #16
 801b33e:	d113      	bne.n	801b368 <_scanf_i+0x1b0>
 801b340:	702a      	strb	r2, [r5, #0]
 801b342:	6863      	ldr	r3, [r4, #4]
 801b344:	9e01      	ldr	r6, [sp, #4]
 801b346:	4639      	mov	r1, r7
 801b348:	4650      	mov	r0, sl
 801b34a:	47b0      	blx	r6
 801b34c:	f8d8 3000 	ldr.w	r3, [r8]
 801b350:	6821      	ldr	r1, [r4, #0]
 801b352:	1d1a      	adds	r2, r3, #4
 801b354:	f8c8 2000 	str.w	r2, [r8]
 801b358:	f011 0f20 	tst.w	r1, #32
 801b35c:	681b      	ldr	r3, [r3, #0]
 801b35e:	d00f      	beq.n	801b380 <_scanf_i+0x1c8>
 801b360:	6018      	str	r0, [r3, #0]
 801b362:	68e3      	ldr	r3, [r4, #12]
 801b364:	3301      	adds	r3, #1
 801b366:	60e3      	str	r3, [r4, #12]
 801b368:	6923      	ldr	r3, [r4, #16]
 801b36a:	1bed      	subs	r5, r5, r7
 801b36c:	445d      	add	r5, fp
 801b36e:	442b      	add	r3, r5
 801b370:	6123      	str	r3, [r4, #16]
 801b372:	2000      	movs	r0, #0
 801b374:	b007      	add	sp, #28
 801b376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b37a:	f04f 0b00 	mov.w	fp, #0
 801b37e:	e7ca      	b.n	801b316 <_scanf_i+0x15e>
 801b380:	07ca      	lsls	r2, r1, #31
 801b382:	bf4c      	ite	mi
 801b384:	8018      	strhmi	r0, [r3, #0]
 801b386:	6018      	strpl	r0, [r3, #0]
 801b388:	e7eb      	b.n	801b362 <_scanf_i+0x1aa>
 801b38a:	2001      	movs	r0, #1
 801b38c:	e7f2      	b.n	801b374 <_scanf_i+0x1bc>
 801b38e:	bf00      	nop
 801b390:	0801c234 	.word	0x0801c234
 801b394:	0801bfa1 	.word	0x0801bfa1
 801b398:	0801a829 	.word	0x0801a829
 801b39c:	0801eefa 	.word	0x0801eefa

0801b3a0 <__sflush_r>:
 801b3a0:	898a      	ldrh	r2, [r1, #12]
 801b3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3a4:	4605      	mov	r5, r0
 801b3a6:	0710      	lsls	r0, r2, #28
 801b3a8:	460c      	mov	r4, r1
 801b3aa:	d457      	bmi.n	801b45c <__sflush_r+0xbc>
 801b3ac:	684b      	ldr	r3, [r1, #4]
 801b3ae:	2b00      	cmp	r3, #0
 801b3b0:	dc04      	bgt.n	801b3bc <__sflush_r+0x1c>
 801b3b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	dc01      	bgt.n	801b3bc <__sflush_r+0x1c>
 801b3b8:	2000      	movs	r0, #0
 801b3ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b3be:	2e00      	cmp	r6, #0
 801b3c0:	d0fa      	beq.n	801b3b8 <__sflush_r+0x18>
 801b3c2:	2300      	movs	r3, #0
 801b3c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b3c8:	682f      	ldr	r7, [r5, #0]
 801b3ca:	6a21      	ldr	r1, [r4, #32]
 801b3cc:	602b      	str	r3, [r5, #0]
 801b3ce:	d032      	beq.n	801b436 <__sflush_r+0x96>
 801b3d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b3d2:	89a3      	ldrh	r3, [r4, #12]
 801b3d4:	075a      	lsls	r2, r3, #29
 801b3d6:	d505      	bpl.n	801b3e4 <__sflush_r+0x44>
 801b3d8:	6863      	ldr	r3, [r4, #4]
 801b3da:	1ac0      	subs	r0, r0, r3
 801b3dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b3de:	b10b      	cbz	r3, 801b3e4 <__sflush_r+0x44>
 801b3e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b3e2:	1ac0      	subs	r0, r0, r3
 801b3e4:	2300      	movs	r3, #0
 801b3e6:	4602      	mov	r2, r0
 801b3e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b3ea:	6a21      	ldr	r1, [r4, #32]
 801b3ec:	4628      	mov	r0, r5
 801b3ee:	47b0      	blx	r6
 801b3f0:	1c43      	adds	r3, r0, #1
 801b3f2:	89a3      	ldrh	r3, [r4, #12]
 801b3f4:	d106      	bne.n	801b404 <__sflush_r+0x64>
 801b3f6:	6829      	ldr	r1, [r5, #0]
 801b3f8:	291d      	cmp	r1, #29
 801b3fa:	d82b      	bhi.n	801b454 <__sflush_r+0xb4>
 801b3fc:	4a28      	ldr	r2, [pc, #160]	; (801b4a0 <__sflush_r+0x100>)
 801b3fe:	410a      	asrs	r2, r1
 801b400:	07d6      	lsls	r6, r2, #31
 801b402:	d427      	bmi.n	801b454 <__sflush_r+0xb4>
 801b404:	2200      	movs	r2, #0
 801b406:	6062      	str	r2, [r4, #4]
 801b408:	04d9      	lsls	r1, r3, #19
 801b40a:	6922      	ldr	r2, [r4, #16]
 801b40c:	6022      	str	r2, [r4, #0]
 801b40e:	d504      	bpl.n	801b41a <__sflush_r+0x7a>
 801b410:	1c42      	adds	r2, r0, #1
 801b412:	d101      	bne.n	801b418 <__sflush_r+0x78>
 801b414:	682b      	ldr	r3, [r5, #0]
 801b416:	b903      	cbnz	r3, 801b41a <__sflush_r+0x7a>
 801b418:	6560      	str	r0, [r4, #84]	; 0x54
 801b41a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b41c:	602f      	str	r7, [r5, #0]
 801b41e:	2900      	cmp	r1, #0
 801b420:	d0ca      	beq.n	801b3b8 <__sflush_r+0x18>
 801b422:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b426:	4299      	cmp	r1, r3
 801b428:	d002      	beq.n	801b430 <__sflush_r+0x90>
 801b42a:	4628      	mov	r0, r5
 801b42c:	f7fd fe80 	bl	8019130 <_free_r>
 801b430:	2000      	movs	r0, #0
 801b432:	6360      	str	r0, [r4, #52]	; 0x34
 801b434:	e7c1      	b.n	801b3ba <__sflush_r+0x1a>
 801b436:	2301      	movs	r3, #1
 801b438:	4628      	mov	r0, r5
 801b43a:	47b0      	blx	r6
 801b43c:	1c41      	adds	r1, r0, #1
 801b43e:	d1c8      	bne.n	801b3d2 <__sflush_r+0x32>
 801b440:	682b      	ldr	r3, [r5, #0]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d0c5      	beq.n	801b3d2 <__sflush_r+0x32>
 801b446:	2b1d      	cmp	r3, #29
 801b448:	d001      	beq.n	801b44e <__sflush_r+0xae>
 801b44a:	2b16      	cmp	r3, #22
 801b44c:	d101      	bne.n	801b452 <__sflush_r+0xb2>
 801b44e:	602f      	str	r7, [r5, #0]
 801b450:	e7b2      	b.n	801b3b8 <__sflush_r+0x18>
 801b452:	89a3      	ldrh	r3, [r4, #12]
 801b454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b458:	81a3      	strh	r3, [r4, #12]
 801b45a:	e7ae      	b.n	801b3ba <__sflush_r+0x1a>
 801b45c:	690f      	ldr	r7, [r1, #16]
 801b45e:	2f00      	cmp	r7, #0
 801b460:	d0aa      	beq.n	801b3b8 <__sflush_r+0x18>
 801b462:	0793      	lsls	r3, r2, #30
 801b464:	680e      	ldr	r6, [r1, #0]
 801b466:	bf08      	it	eq
 801b468:	694b      	ldreq	r3, [r1, #20]
 801b46a:	600f      	str	r7, [r1, #0]
 801b46c:	bf18      	it	ne
 801b46e:	2300      	movne	r3, #0
 801b470:	1bf6      	subs	r6, r6, r7
 801b472:	608b      	str	r3, [r1, #8]
 801b474:	2e00      	cmp	r6, #0
 801b476:	dd9f      	ble.n	801b3b8 <__sflush_r+0x18>
 801b478:	6a21      	ldr	r1, [r4, #32]
 801b47a:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 801b47e:	4633      	mov	r3, r6
 801b480:	463a      	mov	r2, r7
 801b482:	4628      	mov	r0, r5
 801b484:	47e0      	blx	ip
 801b486:	2800      	cmp	r0, #0
 801b488:	dc06      	bgt.n	801b498 <__sflush_r+0xf8>
 801b48a:	89a3      	ldrh	r3, [r4, #12]
 801b48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b490:	81a3      	strh	r3, [r4, #12]
 801b492:	f04f 30ff 	mov.w	r0, #4294967295
 801b496:	e790      	b.n	801b3ba <__sflush_r+0x1a>
 801b498:	4407      	add	r7, r0
 801b49a:	1a36      	subs	r6, r6, r0
 801b49c:	e7ea      	b.n	801b474 <__sflush_r+0xd4>
 801b49e:	bf00      	nop
 801b4a0:	dfbffffe 	.word	0xdfbffffe

0801b4a4 <_fflush_r>:
 801b4a4:	b538      	push	{r3, r4, r5, lr}
 801b4a6:	690b      	ldr	r3, [r1, #16]
 801b4a8:	4605      	mov	r5, r0
 801b4aa:	460c      	mov	r4, r1
 801b4ac:	b913      	cbnz	r3, 801b4b4 <_fflush_r+0x10>
 801b4ae:	2500      	movs	r5, #0
 801b4b0:	4628      	mov	r0, r5
 801b4b2:	bd38      	pop	{r3, r4, r5, pc}
 801b4b4:	b118      	cbz	r0, 801b4be <_fflush_r+0x1a>
 801b4b6:	6a03      	ldr	r3, [r0, #32]
 801b4b8:	b90b      	cbnz	r3, 801b4be <_fflush_r+0x1a>
 801b4ba:	f7fc fdc5 	bl	8018048 <__sinit>
 801b4be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d0f3      	beq.n	801b4ae <_fflush_r+0xa>
 801b4c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b4c8:	07d0      	lsls	r0, r2, #31
 801b4ca:	d404      	bmi.n	801b4d6 <_fflush_r+0x32>
 801b4cc:	0599      	lsls	r1, r3, #22
 801b4ce:	d402      	bmi.n	801b4d6 <_fflush_r+0x32>
 801b4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4d2:	f7fc ffb2 	bl	801843a <__retarget_lock_acquire_recursive>
 801b4d6:	4628      	mov	r0, r5
 801b4d8:	4621      	mov	r1, r4
 801b4da:	f7ff ff61 	bl	801b3a0 <__sflush_r>
 801b4de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b4e0:	07da      	lsls	r2, r3, #31
 801b4e2:	4605      	mov	r5, r0
 801b4e4:	d4e4      	bmi.n	801b4b0 <_fflush_r+0xc>
 801b4e6:	89a3      	ldrh	r3, [r4, #12]
 801b4e8:	059b      	lsls	r3, r3, #22
 801b4ea:	d4e1      	bmi.n	801b4b0 <_fflush_r+0xc>
 801b4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b4ee:	f7fc ffa5 	bl	801843c <__retarget_lock_release_recursive>
 801b4f2:	e7dd      	b.n	801b4b0 <_fflush_r+0xc>

0801b4f4 <__swhatbuf_r>:
 801b4f4:	b570      	push	{r4, r5, r6, lr}
 801b4f6:	460c      	mov	r4, r1
 801b4f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b4fc:	2900      	cmp	r1, #0
 801b4fe:	b096      	sub	sp, #88	; 0x58
 801b500:	4615      	mov	r5, r2
 801b502:	461e      	mov	r6, r3
 801b504:	da0d      	bge.n	801b522 <__swhatbuf_r+0x2e>
 801b506:	89a3      	ldrh	r3, [r4, #12]
 801b508:	f013 0f80 	tst.w	r3, #128	; 0x80
 801b50c:	f04f 0100 	mov.w	r1, #0
 801b510:	bf0c      	ite	eq
 801b512:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801b516:	2340      	movne	r3, #64	; 0x40
 801b518:	2000      	movs	r0, #0
 801b51a:	6031      	str	r1, [r6, #0]
 801b51c:	602b      	str	r3, [r5, #0]
 801b51e:	b016      	add	sp, #88	; 0x58
 801b520:	bd70      	pop	{r4, r5, r6, pc}
 801b522:	466a      	mov	r2, sp
 801b524:	f000 f8d6 	bl	801b6d4 <_fstat_r>
 801b528:	2800      	cmp	r0, #0
 801b52a:	dbec      	blt.n	801b506 <__swhatbuf_r+0x12>
 801b52c:	9901      	ldr	r1, [sp, #4]
 801b52e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801b532:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801b536:	4259      	negs	r1, r3
 801b538:	4159      	adcs	r1, r3
 801b53a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b53e:	e7eb      	b.n	801b518 <__swhatbuf_r+0x24>

0801b540 <__smakebuf_r>:
 801b540:	898b      	ldrh	r3, [r1, #12]
 801b542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b544:	079d      	lsls	r5, r3, #30
 801b546:	4606      	mov	r6, r0
 801b548:	460c      	mov	r4, r1
 801b54a:	d507      	bpl.n	801b55c <__smakebuf_r+0x1c>
 801b54c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b550:	6023      	str	r3, [r4, #0]
 801b552:	6123      	str	r3, [r4, #16]
 801b554:	2301      	movs	r3, #1
 801b556:	6163      	str	r3, [r4, #20]
 801b558:	b002      	add	sp, #8
 801b55a:	bd70      	pop	{r4, r5, r6, pc}
 801b55c:	ab01      	add	r3, sp, #4
 801b55e:	466a      	mov	r2, sp
 801b560:	f7ff ffc8 	bl	801b4f4 <__swhatbuf_r>
 801b564:	9900      	ldr	r1, [sp, #0]
 801b566:	4605      	mov	r5, r0
 801b568:	4630      	mov	r0, r6
 801b56a:	f7fb fdef 	bl	801714c <_malloc_r>
 801b56e:	b948      	cbnz	r0, 801b584 <__smakebuf_r+0x44>
 801b570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b574:	059a      	lsls	r2, r3, #22
 801b576:	d4ef      	bmi.n	801b558 <__smakebuf_r+0x18>
 801b578:	f023 0303 	bic.w	r3, r3, #3
 801b57c:	f043 0302 	orr.w	r3, r3, #2
 801b580:	81a3      	strh	r3, [r4, #12]
 801b582:	e7e3      	b.n	801b54c <__smakebuf_r+0xc>
 801b584:	89a3      	ldrh	r3, [r4, #12]
 801b586:	6020      	str	r0, [r4, #0]
 801b588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b58c:	81a3      	strh	r3, [r4, #12]
 801b58e:	9b00      	ldr	r3, [sp, #0]
 801b590:	6163      	str	r3, [r4, #20]
 801b592:	9b01      	ldr	r3, [sp, #4]
 801b594:	6120      	str	r0, [r4, #16]
 801b596:	b15b      	cbz	r3, 801b5b0 <__smakebuf_r+0x70>
 801b598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b59c:	4630      	mov	r0, r6
 801b59e:	f000 f8ab 	bl	801b6f8 <_isatty_r>
 801b5a2:	b128      	cbz	r0, 801b5b0 <__smakebuf_r+0x70>
 801b5a4:	89a3      	ldrh	r3, [r4, #12]
 801b5a6:	f023 0303 	bic.w	r3, r3, #3
 801b5aa:	f043 0301 	orr.w	r3, r3, #1
 801b5ae:	81a3      	strh	r3, [r4, #12]
 801b5b0:	89a3      	ldrh	r3, [r4, #12]
 801b5b2:	431d      	orrs	r5, r3
 801b5b4:	81a5      	strh	r5, [r4, #12]
 801b5b6:	e7cf      	b.n	801b558 <__smakebuf_r+0x18>

0801b5b8 <__sccl>:
 801b5b8:	b570      	push	{r4, r5, r6, lr}
 801b5ba:	780b      	ldrb	r3, [r1, #0]
 801b5bc:	4604      	mov	r4, r0
 801b5be:	2b5e      	cmp	r3, #94	; 0x5e
 801b5c0:	bf0b      	itete	eq
 801b5c2:	784b      	ldrbeq	r3, [r1, #1]
 801b5c4:	1c4a      	addne	r2, r1, #1
 801b5c6:	1c8a      	addeq	r2, r1, #2
 801b5c8:	2100      	movne	r1, #0
 801b5ca:	bf08      	it	eq
 801b5cc:	2101      	moveq	r1, #1
 801b5ce:	3801      	subs	r0, #1
 801b5d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 801b5d4:	f800 1f01 	strb.w	r1, [r0, #1]!
 801b5d8:	42a8      	cmp	r0, r5
 801b5da:	d1fb      	bne.n	801b5d4 <__sccl+0x1c>
 801b5dc:	b90b      	cbnz	r3, 801b5e2 <__sccl+0x2a>
 801b5de:	1e50      	subs	r0, r2, #1
 801b5e0:	bd70      	pop	{r4, r5, r6, pc}
 801b5e2:	f081 0101 	eor.w	r1, r1, #1
 801b5e6:	54e1      	strb	r1, [r4, r3]
 801b5e8:	4610      	mov	r0, r2
 801b5ea:	4602      	mov	r2, r0
 801b5ec:	f812 5b01 	ldrb.w	r5, [r2], #1
 801b5f0:	2d2d      	cmp	r5, #45	; 0x2d
 801b5f2:	d005      	beq.n	801b600 <__sccl+0x48>
 801b5f4:	2d5d      	cmp	r5, #93	; 0x5d
 801b5f6:	d016      	beq.n	801b626 <__sccl+0x6e>
 801b5f8:	2d00      	cmp	r5, #0
 801b5fa:	d0f1      	beq.n	801b5e0 <__sccl+0x28>
 801b5fc:	462b      	mov	r3, r5
 801b5fe:	e7f2      	b.n	801b5e6 <__sccl+0x2e>
 801b600:	7846      	ldrb	r6, [r0, #1]
 801b602:	2e5d      	cmp	r6, #93	; 0x5d
 801b604:	d0fa      	beq.n	801b5fc <__sccl+0x44>
 801b606:	42b3      	cmp	r3, r6
 801b608:	dcf8      	bgt.n	801b5fc <__sccl+0x44>
 801b60a:	3002      	adds	r0, #2
 801b60c:	461a      	mov	r2, r3
 801b60e:	3201      	adds	r2, #1
 801b610:	4296      	cmp	r6, r2
 801b612:	54a1      	strb	r1, [r4, r2]
 801b614:	dcfb      	bgt.n	801b60e <__sccl+0x56>
 801b616:	1af2      	subs	r2, r6, r3
 801b618:	3a01      	subs	r2, #1
 801b61a:	1c5d      	adds	r5, r3, #1
 801b61c:	42b3      	cmp	r3, r6
 801b61e:	bfa8      	it	ge
 801b620:	2200      	movge	r2, #0
 801b622:	18ab      	adds	r3, r5, r2
 801b624:	e7e1      	b.n	801b5ea <__sccl+0x32>
 801b626:	4610      	mov	r0, r2
 801b628:	e7da      	b.n	801b5e0 <__sccl+0x28>

0801b62a <__submore>:
 801b62a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b62e:	460c      	mov	r4, r1
 801b630:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801b632:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b636:	4299      	cmp	r1, r3
 801b638:	d11d      	bne.n	801b676 <__submore+0x4c>
 801b63a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801b63e:	f7fb fd85 	bl	801714c <_malloc_r>
 801b642:	b918      	cbnz	r0, 801b64c <__submore+0x22>
 801b644:	f04f 30ff 	mov.w	r0, #4294967295
 801b648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b64c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b650:	63a3      	str	r3, [r4, #56]	; 0x38
 801b652:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801b656:	6360      	str	r0, [r4, #52]	; 0x34
 801b658:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801b65c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801b660:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801b664:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801b668:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801b66c:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801b670:	6020      	str	r0, [r4, #0]
 801b672:	2000      	movs	r0, #0
 801b674:	e7e8      	b.n	801b648 <__submore+0x1e>
 801b676:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801b678:	0077      	lsls	r7, r6, #1
 801b67a:	463a      	mov	r2, r7
 801b67c:	f000 fbef 	bl	801be5e <_realloc_r>
 801b680:	4605      	mov	r5, r0
 801b682:	2800      	cmp	r0, #0
 801b684:	d0de      	beq.n	801b644 <__submore+0x1a>
 801b686:	eb00 0806 	add.w	r8, r0, r6
 801b68a:	4601      	mov	r1, r0
 801b68c:	4632      	mov	r2, r6
 801b68e:	4640      	mov	r0, r8
 801b690:	f7fc fed5 	bl	801843e <memcpy>
 801b694:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801b698:	f8c4 8000 	str.w	r8, [r4]
 801b69c:	e7e9      	b.n	801b672 <__submore+0x48>

0801b69e <memmove>:
 801b69e:	4288      	cmp	r0, r1
 801b6a0:	b510      	push	{r4, lr}
 801b6a2:	eb01 0402 	add.w	r4, r1, r2
 801b6a6:	d902      	bls.n	801b6ae <memmove+0x10>
 801b6a8:	4284      	cmp	r4, r0
 801b6aa:	4623      	mov	r3, r4
 801b6ac:	d807      	bhi.n	801b6be <memmove+0x20>
 801b6ae:	1e43      	subs	r3, r0, #1
 801b6b0:	42a1      	cmp	r1, r4
 801b6b2:	d008      	beq.n	801b6c6 <memmove+0x28>
 801b6b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b6b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b6bc:	e7f8      	b.n	801b6b0 <memmove+0x12>
 801b6be:	4402      	add	r2, r0
 801b6c0:	4601      	mov	r1, r0
 801b6c2:	428a      	cmp	r2, r1
 801b6c4:	d100      	bne.n	801b6c8 <memmove+0x2a>
 801b6c6:	bd10      	pop	{r4, pc}
 801b6c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b6cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b6d0:	e7f7      	b.n	801b6c2 <memmove+0x24>
	...

0801b6d4 <_fstat_r>:
 801b6d4:	b538      	push	{r3, r4, r5, lr}
 801b6d6:	4d07      	ldr	r5, [pc, #28]	; (801b6f4 <_fstat_r+0x20>)
 801b6d8:	2300      	movs	r3, #0
 801b6da:	4604      	mov	r4, r0
 801b6dc:	4608      	mov	r0, r1
 801b6de:	4611      	mov	r1, r2
 801b6e0:	602b      	str	r3, [r5, #0]
 801b6e2:	f7e7 f9a2 	bl	8002a2a <_fstat>
 801b6e6:	1c43      	adds	r3, r0, #1
 801b6e8:	d102      	bne.n	801b6f0 <_fstat_r+0x1c>
 801b6ea:	682b      	ldr	r3, [r5, #0]
 801b6ec:	b103      	cbz	r3, 801b6f0 <_fstat_r+0x1c>
 801b6ee:	6023      	str	r3, [r4, #0]
 801b6f0:	bd38      	pop	{r3, r4, r5, pc}
 801b6f2:	bf00      	nop
 801b6f4:	20002394 	.word	0x20002394

0801b6f8 <_isatty_r>:
 801b6f8:	b538      	push	{r3, r4, r5, lr}
 801b6fa:	4d06      	ldr	r5, [pc, #24]	; (801b714 <_isatty_r+0x1c>)
 801b6fc:	2300      	movs	r3, #0
 801b6fe:	4604      	mov	r4, r0
 801b700:	4608      	mov	r0, r1
 801b702:	602b      	str	r3, [r5, #0]
 801b704:	f7e7 f996 	bl	8002a34 <_isatty>
 801b708:	1c43      	adds	r3, r0, #1
 801b70a:	d102      	bne.n	801b712 <_isatty_r+0x1a>
 801b70c:	682b      	ldr	r3, [r5, #0]
 801b70e:	b103      	cbz	r3, 801b712 <_isatty_r+0x1a>
 801b710:	6023      	str	r3, [r4, #0]
 801b712:	bd38      	pop	{r3, r4, r5, pc}
 801b714:	20002394 	.word	0x20002394

0801b718 <nan>:
 801b718:	4901      	ldr	r1, [pc, #4]	; (801b720 <nan+0x8>)
 801b71a:	2000      	movs	r0, #0
 801b71c:	4770      	bx	lr
 801b71e:	bf00      	nop
 801b720:	7ff80000 	.word	0x7ff80000

0801b724 <__assert_func>:
 801b724:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b726:	4614      	mov	r4, r2
 801b728:	461a      	mov	r2, r3
 801b72a:	4b09      	ldr	r3, [pc, #36]	; (801b750 <__assert_func+0x2c>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	4605      	mov	r5, r0
 801b730:	68d8      	ldr	r0, [r3, #12]
 801b732:	b14c      	cbz	r4, 801b748 <__assert_func+0x24>
 801b734:	4b07      	ldr	r3, [pc, #28]	; (801b754 <__assert_func+0x30>)
 801b736:	9100      	str	r1, [sp, #0]
 801b738:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b73c:	4906      	ldr	r1, [pc, #24]	; (801b758 <__assert_func+0x34>)
 801b73e:	462b      	mov	r3, r5
 801b740:	f000 fc3e 	bl	801bfc0 <fiprintf>
 801b744:	f000 fc4e 	bl	801bfe4 <abort>
 801b748:	4b04      	ldr	r3, [pc, #16]	; (801b75c <__assert_func+0x38>)
 801b74a:	461c      	mov	r4, r3
 801b74c:	e7f3      	b.n	801b736 <__assert_func+0x12>
 801b74e:	bf00      	nop
 801b750:	200001c0 	.word	0x200001c0
 801b754:	0801ef0d 	.word	0x0801ef0d
 801b758:	0801ef1a 	.word	0x0801ef1a
 801b75c:	0801ef48 	.word	0x0801ef48

0801b760 <_calloc_r>:
 801b760:	b570      	push	{r4, r5, r6, lr}
 801b762:	fba1 5402 	umull	r5, r4, r1, r2
 801b766:	b934      	cbnz	r4, 801b776 <_calloc_r+0x16>
 801b768:	4629      	mov	r1, r5
 801b76a:	f7fb fcef 	bl	801714c <_malloc_r>
 801b76e:	4606      	mov	r6, r0
 801b770:	b928      	cbnz	r0, 801b77e <_calloc_r+0x1e>
 801b772:	4630      	mov	r0, r6
 801b774:	bd70      	pop	{r4, r5, r6, pc}
 801b776:	220c      	movs	r2, #12
 801b778:	6002      	str	r2, [r0, #0]
 801b77a:	2600      	movs	r6, #0
 801b77c:	e7f9      	b.n	801b772 <_calloc_r+0x12>
 801b77e:	462a      	mov	r2, r5
 801b780:	4621      	mov	r1, r4
 801b782:	f7fc fdbb 	bl	80182fc <memset>
 801b786:	e7f4      	b.n	801b772 <_calloc_r+0x12>

0801b788 <rshift>:
 801b788:	6903      	ldr	r3, [r0, #16]
 801b78a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801b78e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b792:	ea4f 1261 	mov.w	r2, r1, asr #5
 801b796:	f100 0414 	add.w	r4, r0, #20
 801b79a:	dd45      	ble.n	801b828 <rshift+0xa0>
 801b79c:	f011 011f 	ands.w	r1, r1, #31
 801b7a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801b7a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801b7a8:	d10c      	bne.n	801b7c4 <rshift+0x3c>
 801b7aa:	f100 0710 	add.w	r7, r0, #16
 801b7ae:	4629      	mov	r1, r5
 801b7b0:	42b1      	cmp	r1, r6
 801b7b2:	d334      	bcc.n	801b81e <rshift+0x96>
 801b7b4:	1a9b      	subs	r3, r3, r2
 801b7b6:	009b      	lsls	r3, r3, #2
 801b7b8:	1eea      	subs	r2, r5, #3
 801b7ba:	4296      	cmp	r6, r2
 801b7bc:	bf38      	it	cc
 801b7be:	2300      	movcc	r3, #0
 801b7c0:	4423      	add	r3, r4
 801b7c2:	e015      	b.n	801b7f0 <rshift+0x68>
 801b7c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801b7c8:	f1c1 0820 	rsb	r8, r1, #32
 801b7cc:	40cf      	lsrs	r7, r1
 801b7ce:	f105 0e04 	add.w	lr, r5, #4
 801b7d2:	46a1      	mov	r9, r4
 801b7d4:	4576      	cmp	r6, lr
 801b7d6:	46f4      	mov	ip, lr
 801b7d8:	d815      	bhi.n	801b806 <rshift+0x7e>
 801b7da:	1a9a      	subs	r2, r3, r2
 801b7dc:	0092      	lsls	r2, r2, #2
 801b7de:	3a04      	subs	r2, #4
 801b7e0:	3501      	adds	r5, #1
 801b7e2:	42ae      	cmp	r6, r5
 801b7e4:	bf38      	it	cc
 801b7e6:	2200      	movcc	r2, #0
 801b7e8:	18a3      	adds	r3, r4, r2
 801b7ea:	50a7      	str	r7, [r4, r2]
 801b7ec:	b107      	cbz	r7, 801b7f0 <rshift+0x68>
 801b7ee:	3304      	adds	r3, #4
 801b7f0:	1b1a      	subs	r2, r3, r4
 801b7f2:	42a3      	cmp	r3, r4
 801b7f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801b7f8:	bf08      	it	eq
 801b7fa:	2300      	moveq	r3, #0
 801b7fc:	6102      	str	r2, [r0, #16]
 801b7fe:	bf08      	it	eq
 801b800:	6143      	streq	r3, [r0, #20]
 801b802:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b806:	f8dc c000 	ldr.w	ip, [ip]
 801b80a:	fa0c fc08 	lsl.w	ip, ip, r8
 801b80e:	ea4c 0707 	orr.w	r7, ip, r7
 801b812:	f849 7b04 	str.w	r7, [r9], #4
 801b816:	f85e 7b04 	ldr.w	r7, [lr], #4
 801b81a:	40cf      	lsrs	r7, r1
 801b81c:	e7da      	b.n	801b7d4 <rshift+0x4c>
 801b81e:	f851 cb04 	ldr.w	ip, [r1], #4
 801b822:	f847 cf04 	str.w	ip, [r7, #4]!
 801b826:	e7c3      	b.n	801b7b0 <rshift+0x28>
 801b828:	4623      	mov	r3, r4
 801b82a:	e7e1      	b.n	801b7f0 <rshift+0x68>

0801b82c <__hexdig_fun>:
 801b82c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801b830:	2b09      	cmp	r3, #9
 801b832:	d802      	bhi.n	801b83a <__hexdig_fun+0xe>
 801b834:	3820      	subs	r0, #32
 801b836:	b2c0      	uxtb	r0, r0
 801b838:	4770      	bx	lr
 801b83a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801b83e:	2b05      	cmp	r3, #5
 801b840:	d801      	bhi.n	801b846 <__hexdig_fun+0x1a>
 801b842:	3847      	subs	r0, #71	; 0x47
 801b844:	e7f7      	b.n	801b836 <__hexdig_fun+0xa>
 801b846:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801b84a:	2b05      	cmp	r3, #5
 801b84c:	d801      	bhi.n	801b852 <__hexdig_fun+0x26>
 801b84e:	3827      	subs	r0, #39	; 0x27
 801b850:	e7f1      	b.n	801b836 <__hexdig_fun+0xa>
 801b852:	2000      	movs	r0, #0
 801b854:	4770      	bx	lr
	...

0801b858 <__gethex>:
 801b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b85c:	4617      	mov	r7, r2
 801b85e:	680a      	ldr	r2, [r1, #0]
 801b860:	b085      	sub	sp, #20
 801b862:	f102 0b02 	add.w	fp, r2, #2
 801b866:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801b86a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801b86e:	4681      	mov	r9, r0
 801b870:	468a      	mov	sl, r1
 801b872:	9302      	str	r3, [sp, #8]
 801b874:	32fe      	adds	r2, #254	; 0xfe
 801b876:	eb02 030b 	add.w	r3, r2, fp
 801b87a:	46d8      	mov	r8, fp
 801b87c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801b880:	9301      	str	r3, [sp, #4]
 801b882:	2830      	cmp	r0, #48	; 0x30
 801b884:	d0f7      	beq.n	801b876 <__gethex+0x1e>
 801b886:	f7ff ffd1 	bl	801b82c <__hexdig_fun>
 801b88a:	4604      	mov	r4, r0
 801b88c:	2800      	cmp	r0, #0
 801b88e:	d138      	bne.n	801b902 <__gethex+0xaa>
 801b890:	49a8      	ldr	r1, [pc, #672]	; (801bb34 <__gethex+0x2dc>)
 801b892:	2201      	movs	r2, #1
 801b894:	4640      	mov	r0, r8
 801b896:	f7fc fd39 	bl	801830c <strncmp>
 801b89a:	4606      	mov	r6, r0
 801b89c:	2800      	cmp	r0, #0
 801b89e:	d169      	bne.n	801b974 <__gethex+0x11c>
 801b8a0:	f898 0001 	ldrb.w	r0, [r8, #1]
 801b8a4:	465d      	mov	r5, fp
 801b8a6:	f7ff ffc1 	bl	801b82c <__hexdig_fun>
 801b8aa:	2800      	cmp	r0, #0
 801b8ac:	d064      	beq.n	801b978 <__gethex+0x120>
 801b8ae:	465a      	mov	r2, fp
 801b8b0:	7810      	ldrb	r0, [r2, #0]
 801b8b2:	2830      	cmp	r0, #48	; 0x30
 801b8b4:	4690      	mov	r8, r2
 801b8b6:	f102 0201 	add.w	r2, r2, #1
 801b8ba:	d0f9      	beq.n	801b8b0 <__gethex+0x58>
 801b8bc:	f7ff ffb6 	bl	801b82c <__hexdig_fun>
 801b8c0:	2301      	movs	r3, #1
 801b8c2:	fab0 f480 	clz	r4, r0
 801b8c6:	0964      	lsrs	r4, r4, #5
 801b8c8:	465e      	mov	r6, fp
 801b8ca:	9301      	str	r3, [sp, #4]
 801b8cc:	4642      	mov	r2, r8
 801b8ce:	4615      	mov	r5, r2
 801b8d0:	3201      	adds	r2, #1
 801b8d2:	7828      	ldrb	r0, [r5, #0]
 801b8d4:	f7ff ffaa 	bl	801b82c <__hexdig_fun>
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	d1f8      	bne.n	801b8ce <__gethex+0x76>
 801b8dc:	4995      	ldr	r1, [pc, #596]	; (801bb34 <__gethex+0x2dc>)
 801b8de:	2201      	movs	r2, #1
 801b8e0:	4628      	mov	r0, r5
 801b8e2:	f7fc fd13 	bl	801830c <strncmp>
 801b8e6:	b978      	cbnz	r0, 801b908 <__gethex+0xb0>
 801b8e8:	b946      	cbnz	r6, 801b8fc <__gethex+0xa4>
 801b8ea:	1c6e      	adds	r6, r5, #1
 801b8ec:	4632      	mov	r2, r6
 801b8ee:	4615      	mov	r5, r2
 801b8f0:	3201      	adds	r2, #1
 801b8f2:	7828      	ldrb	r0, [r5, #0]
 801b8f4:	f7ff ff9a 	bl	801b82c <__hexdig_fun>
 801b8f8:	2800      	cmp	r0, #0
 801b8fa:	d1f8      	bne.n	801b8ee <__gethex+0x96>
 801b8fc:	1b73      	subs	r3, r6, r5
 801b8fe:	009e      	lsls	r6, r3, #2
 801b900:	e004      	b.n	801b90c <__gethex+0xb4>
 801b902:	2400      	movs	r4, #0
 801b904:	4626      	mov	r6, r4
 801b906:	e7e1      	b.n	801b8cc <__gethex+0x74>
 801b908:	2e00      	cmp	r6, #0
 801b90a:	d1f7      	bne.n	801b8fc <__gethex+0xa4>
 801b90c:	782b      	ldrb	r3, [r5, #0]
 801b90e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b912:	2b50      	cmp	r3, #80	; 0x50
 801b914:	d13d      	bne.n	801b992 <__gethex+0x13a>
 801b916:	786b      	ldrb	r3, [r5, #1]
 801b918:	2b2b      	cmp	r3, #43	; 0x2b
 801b91a:	d02f      	beq.n	801b97c <__gethex+0x124>
 801b91c:	2b2d      	cmp	r3, #45	; 0x2d
 801b91e:	d031      	beq.n	801b984 <__gethex+0x12c>
 801b920:	1c69      	adds	r1, r5, #1
 801b922:	f04f 0b00 	mov.w	fp, #0
 801b926:	7808      	ldrb	r0, [r1, #0]
 801b928:	f7ff ff80 	bl	801b82c <__hexdig_fun>
 801b92c:	1e42      	subs	r2, r0, #1
 801b92e:	b2d2      	uxtb	r2, r2
 801b930:	2a18      	cmp	r2, #24
 801b932:	d82e      	bhi.n	801b992 <__gethex+0x13a>
 801b934:	f1a0 0210 	sub.w	r2, r0, #16
 801b938:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801b93c:	f7ff ff76 	bl	801b82c <__hexdig_fun>
 801b940:	f100 3cff 	add.w	ip, r0, #4294967295
 801b944:	fa5f fc8c 	uxtb.w	ip, ip
 801b948:	f1bc 0f18 	cmp.w	ip, #24
 801b94c:	d91d      	bls.n	801b98a <__gethex+0x132>
 801b94e:	f1bb 0f00 	cmp.w	fp, #0
 801b952:	d000      	beq.n	801b956 <__gethex+0xfe>
 801b954:	4252      	negs	r2, r2
 801b956:	4416      	add	r6, r2
 801b958:	f8ca 1000 	str.w	r1, [sl]
 801b95c:	b1dc      	cbz	r4, 801b996 <__gethex+0x13e>
 801b95e:	9b01      	ldr	r3, [sp, #4]
 801b960:	2b00      	cmp	r3, #0
 801b962:	bf14      	ite	ne
 801b964:	f04f 0800 	movne.w	r8, #0
 801b968:	f04f 0806 	moveq.w	r8, #6
 801b96c:	4640      	mov	r0, r8
 801b96e:	b005      	add	sp, #20
 801b970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b974:	4645      	mov	r5, r8
 801b976:	4626      	mov	r6, r4
 801b978:	2401      	movs	r4, #1
 801b97a:	e7c7      	b.n	801b90c <__gethex+0xb4>
 801b97c:	f04f 0b00 	mov.w	fp, #0
 801b980:	1ca9      	adds	r1, r5, #2
 801b982:	e7d0      	b.n	801b926 <__gethex+0xce>
 801b984:	f04f 0b01 	mov.w	fp, #1
 801b988:	e7fa      	b.n	801b980 <__gethex+0x128>
 801b98a:	230a      	movs	r3, #10
 801b98c:	fb03 0002 	mla	r0, r3, r2, r0
 801b990:	e7d0      	b.n	801b934 <__gethex+0xdc>
 801b992:	4629      	mov	r1, r5
 801b994:	e7e0      	b.n	801b958 <__gethex+0x100>
 801b996:	eba5 0308 	sub.w	r3, r5, r8
 801b99a:	3b01      	subs	r3, #1
 801b99c:	4621      	mov	r1, r4
 801b99e:	2b07      	cmp	r3, #7
 801b9a0:	dc0a      	bgt.n	801b9b8 <__gethex+0x160>
 801b9a2:	4648      	mov	r0, r9
 801b9a4:	f7fd fc0e 	bl	80191c4 <_Balloc>
 801b9a8:	4604      	mov	r4, r0
 801b9aa:	b940      	cbnz	r0, 801b9be <__gethex+0x166>
 801b9ac:	4b62      	ldr	r3, [pc, #392]	; (801bb38 <__gethex+0x2e0>)
 801b9ae:	4602      	mov	r2, r0
 801b9b0:	21e4      	movs	r1, #228	; 0xe4
 801b9b2:	4862      	ldr	r0, [pc, #392]	; (801bb3c <__gethex+0x2e4>)
 801b9b4:	f7ff feb6 	bl	801b724 <__assert_func>
 801b9b8:	3101      	adds	r1, #1
 801b9ba:	105b      	asrs	r3, r3, #1
 801b9bc:	e7ef      	b.n	801b99e <__gethex+0x146>
 801b9be:	f100 0a14 	add.w	sl, r0, #20
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	f8cd a004 	str.w	sl, [sp, #4]
 801b9c8:	469b      	mov	fp, r3
 801b9ca:	45a8      	cmp	r8, r5
 801b9cc:	d344      	bcc.n	801ba58 <__gethex+0x200>
 801b9ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b9d2:	f848 bb04 	str.w	fp, [r8], #4
 801b9d6:	eba8 080a 	sub.w	r8, r8, sl
 801b9da:	ea4f 02a8 	mov.w	r2, r8, asr #2
 801b9de:	6122      	str	r2, [r4, #16]
 801b9e0:	4658      	mov	r0, fp
 801b9e2:	ea4f 1842 	mov.w	r8, r2, lsl #5
 801b9e6:	f7fd fcdf 	bl	80193a8 <__hi0bits>
 801b9ea:	683d      	ldr	r5, [r7, #0]
 801b9ec:	eba8 0800 	sub.w	r8, r8, r0
 801b9f0:	45a8      	cmp	r8, r5
 801b9f2:	dd59      	ble.n	801baa8 <__gethex+0x250>
 801b9f4:	eba8 0805 	sub.w	r8, r8, r5
 801b9f8:	4641      	mov	r1, r8
 801b9fa:	4620      	mov	r0, r4
 801b9fc:	f7fe f85b 	bl	8019ab6 <__any_on>
 801ba00:	4683      	mov	fp, r0
 801ba02:	b1b8      	cbz	r0, 801ba34 <__gethex+0x1dc>
 801ba04:	f108 33ff 	add.w	r3, r8, #4294967295
 801ba08:	1159      	asrs	r1, r3, #5
 801ba0a:	f003 021f 	and.w	r2, r3, #31
 801ba0e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ba12:	f04f 0b01 	mov.w	fp, #1
 801ba16:	fa0b f202 	lsl.w	r2, fp, r2
 801ba1a:	420a      	tst	r2, r1
 801ba1c:	d00a      	beq.n	801ba34 <__gethex+0x1dc>
 801ba1e:	455b      	cmp	r3, fp
 801ba20:	dd06      	ble.n	801ba30 <__gethex+0x1d8>
 801ba22:	f1a8 0102 	sub.w	r1, r8, #2
 801ba26:	4620      	mov	r0, r4
 801ba28:	f7fe f845 	bl	8019ab6 <__any_on>
 801ba2c:	2800      	cmp	r0, #0
 801ba2e:	d138      	bne.n	801baa2 <__gethex+0x24a>
 801ba30:	f04f 0b02 	mov.w	fp, #2
 801ba34:	4641      	mov	r1, r8
 801ba36:	4620      	mov	r0, r4
 801ba38:	f7ff fea6 	bl	801b788 <rshift>
 801ba3c:	4446      	add	r6, r8
 801ba3e:	68bb      	ldr	r3, [r7, #8]
 801ba40:	42b3      	cmp	r3, r6
 801ba42:	da41      	bge.n	801bac8 <__gethex+0x270>
 801ba44:	4621      	mov	r1, r4
 801ba46:	4648      	mov	r0, r9
 801ba48:	f7fd fbfc 	bl	8019244 <_Bfree>
 801ba4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ba4e:	2300      	movs	r3, #0
 801ba50:	6013      	str	r3, [r2, #0]
 801ba52:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 801ba56:	e789      	b.n	801b96c <__gethex+0x114>
 801ba58:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801ba5c:	2a2e      	cmp	r2, #46	; 0x2e
 801ba5e:	d014      	beq.n	801ba8a <__gethex+0x232>
 801ba60:	2b20      	cmp	r3, #32
 801ba62:	d106      	bne.n	801ba72 <__gethex+0x21a>
 801ba64:	9b01      	ldr	r3, [sp, #4]
 801ba66:	f843 bb04 	str.w	fp, [r3], #4
 801ba6a:	f04f 0b00 	mov.w	fp, #0
 801ba6e:	9301      	str	r3, [sp, #4]
 801ba70:	465b      	mov	r3, fp
 801ba72:	7828      	ldrb	r0, [r5, #0]
 801ba74:	9303      	str	r3, [sp, #12]
 801ba76:	f7ff fed9 	bl	801b82c <__hexdig_fun>
 801ba7a:	9b03      	ldr	r3, [sp, #12]
 801ba7c:	f000 000f 	and.w	r0, r0, #15
 801ba80:	4098      	lsls	r0, r3
 801ba82:	ea4b 0b00 	orr.w	fp, fp, r0
 801ba86:	3304      	adds	r3, #4
 801ba88:	e79f      	b.n	801b9ca <__gethex+0x172>
 801ba8a:	45a8      	cmp	r8, r5
 801ba8c:	d8e8      	bhi.n	801ba60 <__gethex+0x208>
 801ba8e:	4929      	ldr	r1, [pc, #164]	; (801bb34 <__gethex+0x2dc>)
 801ba90:	9303      	str	r3, [sp, #12]
 801ba92:	2201      	movs	r2, #1
 801ba94:	4628      	mov	r0, r5
 801ba96:	f7fc fc39 	bl	801830c <strncmp>
 801ba9a:	9b03      	ldr	r3, [sp, #12]
 801ba9c:	2800      	cmp	r0, #0
 801ba9e:	d1df      	bne.n	801ba60 <__gethex+0x208>
 801baa0:	e793      	b.n	801b9ca <__gethex+0x172>
 801baa2:	f04f 0b03 	mov.w	fp, #3
 801baa6:	e7c5      	b.n	801ba34 <__gethex+0x1dc>
 801baa8:	da0b      	bge.n	801bac2 <__gethex+0x26a>
 801baaa:	eba5 0808 	sub.w	r8, r5, r8
 801baae:	4621      	mov	r1, r4
 801bab0:	4642      	mov	r2, r8
 801bab2:	4648      	mov	r0, r9
 801bab4:	f7fd fde0 	bl	8019678 <__lshift>
 801bab8:	eba6 0608 	sub.w	r6, r6, r8
 801babc:	4604      	mov	r4, r0
 801babe:	f100 0a14 	add.w	sl, r0, #20
 801bac2:	f04f 0b00 	mov.w	fp, #0
 801bac6:	e7ba      	b.n	801ba3e <__gethex+0x1e6>
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	42b3      	cmp	r3, r6
 801bacc:	dd74      	ble.n	801bbb8 <__gethex+0x360>
 801bace:	1b9e      	subs	r6, r3, r6
 801bad0:	42b5      	cmp	r5, r6
 801bad2:	dc35      	bgt.n	801bb40 <__gethex+0x2e8>
 801bad4:	68fb      	ldr	r3, [r7, #12]
 801bad6:	2b02      	cmp	r3, #2
 801bad8:	d023      	beq.n	801bb22 <__gethex+0x2ca>
 801bada:	2b03      	cmp	r3, #3
 801badc:	d025      	beq.n	801bb2a <__gethex+0x2d2>
 801bade:	2b01      	cmp	r3, #1
 801bae0:	d115      	bne.n	801bb0e <__gethex+0x2b6>
 801bae2:	42b5      	cmp	r5, r6
 801bae4:	d113      	bne.n	801bb0e <__gethex+0x2b6>
 801bae6:	2d01      	cmp	r5, #1
 801bae8:	d10b      	bne.n	801bb02 <__gethex+0x2aa>
 801baea:	9a02      	ldr	r2, [sp, #8]
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	6013      	str	r3, [r2, #0]
 801baf0:	2301      	movs	r3, #1
 801baf2:	6123      	str	r3, [r4, #16]
 801baf4:	f8ca 3000 	str.w	r3, [sl]
 801baf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bafa:	f04f 0862 	mov.w	r8, #98	; 0x62
 801bafe:	601c      	str	r4, [r3, #0]
 801bb00:	e734      	b.n	801b96c <__gethex+0x114>
 801bb02:	1e69      	subs	r1, r5, #1
 801bb04:	4620      	mov	r0, r4
 801bb06:	f7fd ffd6 	bl	8019ab6 <__any_on>
 801bb0a:	2800      	cmp	r0, #0
 801bb0c:	d1ed      	bne.n	801baea <__gethex+0x292>
 801bb0e:	4621      	mov	r1, r4
 801bb10:	4648      	mov	r0, r9
 801bb12:	f7fd fb97 	bl	8019244 <_Bfree>
 801bb16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bb18:	2300      	movs	r3, #0
 801bb1a:	6013      	str	r3, [r2, #0]
 801bb1c:	f04f 0850 	mov.w	r8, #80	; 0x50
 801bb20:	e724      	b.n	801b96c <__gethex+0x114>
 801bb22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d1f2      	bne.n	801bb0e <__gethex+0x2b6>
 801bb28:	e7df      	b.n	801baea <__gethex+0x292>
 801bb2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d1dc      	bne.n	801baea <__gethex+0x292>
 801bb30:	e7ed      	b.n	801bb0e <__gethex+0x2b6>
 801bb32:	bf00      	nop
 801bb34:	0801ed84 	.word	0x0801ed84
 801bb38:	0801ec1e 	.word	0x0801ec1e
 801bb3c:	0801ef49 	.word	0x0801ef49
 801bb40:	f106 38ff 	add.w	r8, r6, #4294967295
 801bb44:	f1bb 0f00 	cmp.w	fp, #0
 801bb48:	d133      	bne.n	801bbb2 <__gethex+0x35a>
 801bb4a:	f1b8 0f00 	cmp.w	r8, #0
 801bb4e:	d004      	beq.n	801bb5a <__gethex+0x302>
 801bb50:	4641      	mov	r1, r8
 801bb52:	4620      	mov	r0, r4
 801bb54:	f7fd ffaf 	bl	8019ab6 <__any_on>
 801bb58:	4683      	mov	fp, r0
 801bb5a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801bb5e:	2301      	movs	r3, #1
 801bb60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801bb64:	f008 081f 	and.w	r8, r8, #31
 801bb68:	fa03 f308 	lsl.w	r3, r3, r8
 801bb6c:	4213      	tst	r3, r2
 801bb6e:	4631      	mov	r1, r6
 801bb70:	4620      	mov	r0, r4
 801bb72:	bf18      	it	ne
 801bb74:	f04b 0b02 	orrne.w	fp, fp, #2
 801bb78:	1bad      	subs	r5, r5, r6
 801bb7a:	f7ff fe05 	bl	801b788 <rshift>
 801bb7e:	687e      	ldr	r6, [r7, #4]
 801bb80:	f04f 0802 	mov.w	r8, #2
 801bb84:	f1bb 0f00 	cmp.w	fp, #0
 801bb88:	d04a      	beq.n	801bc20 <__gethex+0x3c8>
 801bb8a:	68fb      	ldr	r3, [r7, #12]
 801bb8c:	2b02      	cmp	r3, #2
 801bb8e:	d016      	beq.n	801bbbe <__gethex+0x366>
 801bb90:	2b03      	cmp	r3, #3
 801bb92:	d018      	beq.n	801bbc6 <__gethex+0x36e>
 801bb94:	2b01      	cmp	r3, #1
 801bb96:	d109      	bne.n	801bbac <__gethex+0x354>
 801bb98:	f01b 0f02 	tst.w	fp, #2
 801bb9c:	d006      	beq.n	801bbac <__gethex+0x354>
 801bb9e:	f8da 3000 	ldr.w	r3, [sl]
 801bba2:	ea4b 0b03 	orr.w	fp, fp, r3
 801bba6:	f01b 0f01 	tst.w	fp, #1
 801bbaa:	d10f      	bne.n	801bbcc <__gethex+0x374>
 801bbac:	f048 0810 	orr.w	r8, r8, #16
 801bbb0:	e036      	b.n	801bc20 <__gethex+0x3c8>
 801bbb2:	f04f 0b01 	mov.w	fp, #1
 801bbb6:	e7d0      	b.n	801bb5a <__gethex+0x302>
 801bbb8:	f04f 0801 	mov.w	r8, #1
 801bbbc:	e7e2      	b.n	801bb84 <__gethex+0x32c>
 801bbbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bbc0:	f1c3 0301 	rsb	r3, r3, #1
 801bbc4:	930f      	str	r3, [sp, #60]	; 0x3c
 801bbc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801bbc8:	2b00      	cmp	r3, #0
 801bbca:	d0ef      	beq.n	801bbac <__gethex+0x354>
 801bbcc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801bbd0:	f104 0214 	add.w	r2, r4, #20
 801bbd4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801bbd8:	9301      	str	r3, [sp, #4]
 801bbda:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801bbde:	2300      	movs	r3, #0
 801bbe0:	4694      	mov	ip, r2
 801bbe2:	f852 1b04 	ldr.w	r1, [r2], #4
 801bbe6:	f1b1 3fff 	cmp.w	r1, #4294967295
 801bbea:	d01e      	beq.n	801bc2a <__gethex+0x3d2>
 801bbec:	3101      	adds	r1, #1
 801bbee:	f8cc 1000 	str.w	r1, [ip]
 801bbf2:	f1b8 0f02 	cmp.w	r8, #2
 801bbf6:	f104 0214 	add.w	r2, r4, #20
 801bbfa:	d13d      	bne.n	801bc78 <__gethex+0x420>
 801bbfc:	683b      	ldr	r3, [r7, #0]
 801bbfe:	3b01      	subs	r3, #1
 801bc00:	42ab      	cmp	r3, r5
 801bc02:	d10b      	bne.n	801bc1c <__gethex+0x3c4>
 801bc04:	1169      	asrs	r1, r5, #5
 801bc06:	2301      	movs	r3, #1
 801bc08:	f005 051f 	and.w	r5, r5, #31
 801bc0c:	fa03 f505 	lsl.w	r5, r3, r5
 801bc10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bc14:	421d      	tst	r5, r3
 801bc16:	bf18      	it	ne
 801bc18:	f04f 0801 	movne.w	r8, #1
 801bc1c:	f048 0820 	orr.w	r8, r8, #32
 801bc20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc22:	601c      	str	r4, [r3, #0]
 801bc24:	9b02      	ldr	r3, [sp, #8]
 801bc26:	601e      	str	r6, [r3, #0]
 801bc28:	e6a0      	b.n	801b96c <__gethex+0x114>
 801bc2a:	4290      	cmp	r0, r2
 801bc2c:	f842 3c04 	str.w	r3, [r2, #-4]
 801bc30:	d8d6      	bhi.n	801bbe0 <__gethex+0x388>
 801bc32:	68a2      	ldr	r2, [r4, #8]
 801bc34:	4593      	cmp	fp, r2
 801bc36:	db17      	blt.n	801bc68 <__gethex+0x410>
 801bc38:	6861      	ldr	r1, [r4, #4]
 801bc3a:	4648      	mov	r0, r9
 801bc3c:	3101      	adds	r1, #1
 801bc3e:	f7fd fac1 	bl	80191c4 <_Balloc>
 801bc42:	4682      	mov	sl, r0
 801bc44:	b918      	cbnz	r0, 801bc4e <__gethex+0x3f6>
 801bc46:	4b1b      	ldr	r3, [pc, #108]	; (801bcb4 <__gethex+0x45c>)
 801bc48:	4602      	mov	r2, r0
 801bc4a:	2184      	movs	r1, #132	; 0x84
 801bc4c:	e6b1      	b.n	801b9b2 <__gethex+0x15a>
 801bc4e:	6922      	ldr	r2, [r4, #16]
 801bc50:	3202      	adds	r2, #2
 801bc52:	f104 010c 	add.w	r1, r4, #12
 801bc56:	0092      	lsls	r2, r2, #2
 801bc58:	300c      	adds	r0, #12
 801bc5a:	f7fc fbf0 	bl	801843e <memcpy>
 801bc5e:	4621      	mov	r1, r4
 801bc60:	4648      	mov	r0, r9
 801bc62:	f7fd faef 	bl	8019244 <_Bfree>
 801bc66:	4654      	mov	r4, sl
 801bc68:	6922      	ldr	r2, [r4, #16]
 801bc6a:	1c51      	adds	r1, r2, #1
 801bc6c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bc70:	6121      	str	r1, [r4, #16]
 801bc72:	2101      	movs	r1, #1
 801bc74:	6151      	str	r1, [r2, #20]
 801bc76:	e7bc      	b.n	801bbf2 <__gethex+0x39a>
 801bc78:	6921      	ldr	r1, [r4, #16]
 801bc7a:	4559      	cmp	r1, fp
 801bc7c:	dd0b      	ble.n	801bc96 <__gethex+0x43e>
 801bc7e:	2101      	movs	r1, #1
 801bc80:	4620      	mov	r0, r4
 801bc82:	f7ff fd81 	bl	801b788 <rshift>
 801bc86:	68bb      	ldr	r3, [r7, #8]
 801bc88:	3601      	adds	r6, #1
 801bc8a:	42b3      	cmp	r3, r6
 801bc8c:	f6ff aeda 	blt.w	801ba44 <__gethex+0x1ec>
 801bc90:	f04f 0801 	mov.w	r8, #1
 801bc94:	e7c2      	b.n	801bc1c <__gethex+0x3c4>
 801bc96:	f015 051f 	ands.w	r5, r5, #31
 801bc9a:	d0f9      	beq.n	801bc90 <__gethex+0x438>
 801bc9c:	9b01      	ldr	r3, [sp, #4]
 801bc9e:	441a      	add	r2, r3
 801bca0:	f1c5 0520 	rsb	r5, r5, #32
 801bca4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 801bca8:	f7fd fb7e 	bl	80193a8 <__hi0bits>
 801bcac:	42a8      	cmp	r0, r5
 801bcae:	dbe6      	blt.n	801bc7e <__gethex+0x426>
 801bcb0:	e7ee      	b.n	801bc90 <__gethex+0x438>
 801bcb2:	bf00      	nop
 801bcb4:	0801ec1e 	.word	0x0801ec1e

0801bcb8 <L_shift>:
 801bcb8:	f1c2 0208 	rsb	r2, r2, #8
 801bcbc:	0092      	lsls	r2, r2, #2
 801bcbe:	b570      	push	{r4, r5, r6, lr}
 801bcc0:	f1c2 0620 	rsb	r6, r2, #32
 801bcc4:	6843      	ldr	r3, [r0, #4]
 801bcc6:	6804      	ldr	r4, [r0, #0]
 801bcc8:	fa03 f506 	lsl.w	r5, r3, r6
 801bccc:	432c      	orrs	r4, r5
 801bcce:	40d3      	lsrs	r3, r2
 801bcd0:	6004      	str	r4, [r0, #0]
 801bcd2:	f840 3f04 	str.w	r3, [r0, #4]!
 801bcd6:	4288      	cmp	r0, r1
 801bcd8:	d3f4      	bcc.n	801bcc4 <L_shift+0xc>
 801bcda:	bd70      	pop	{r4, r5, r6, pc}

0801bcdc <__match>:
 801bcdc:	b530      	push	{r4, r5, lr}
 801bcde:	6803      	ldr	r3, [r0, #0]
 801bce0:	3301      	adds	r3, #1
 801bce2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bce6:	b914      	cbnz	r4, 801bcee <__match+0x12>
 801bce8:	6003      	str	r3, [r0, #0]
 801bcea:	2001      	movs	r0, #1
 801bcec:	bd30      	pop	{r4, r5, pc}
 801bcee:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bcf2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801bcf6:	2d19      	cmp	r5, #25
 801bcf8:	bf98      	it	ls
 801bcfa:	3220      	addls	r2, #32
 801bcfc:	42a2      	cmp	r2, r4
 801bcfe:	d0f0      	beq.n	801bce2 <__match+0x6>
 801bd00:	2000      	movs	r0, #0
 801bd02:	e7f3      	b.n	801bcec <__match+0x10>

0801bd04 <__hexnan>:
 801bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd08:	680b      	ldr	r3, [r1, #0]
 801bd0a:	6801      	ldr	r1, [r0, #0]
 801bd0c:	115e      	asrs	r6, r3, #5
 801bd0e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801bd12:	f013 031f 	ands.w	r3, r3, #31
 801bd16:	b087      	sub	sp, #28
 801bd18:	bf18      	it	ne
 801bd1a:	3604      	addne	r6, #4
 801bd1c:	2500      	movs	r5, #0
 801bd1e:	1f37      	subs	r7, r6, #4
 801bd20:	4682      	mov	sl, r0
 801bd22:	4690      	mov	r8, r2
 801bd24:	9301      	str	r3, [sp, #4]
 801bd26:	f846 5c04 	str.w	r5, [r6, #-4]
 801bd2a:	46b9      	mov	r9, r7
 801bd2c:	463c      	mov	r4, r7
 801bd2e:	9502      	str	r5, [sp, #8]
 801bd30:	46ab      	mov	fp, r5
 801bd32:	784a      	ldrb	r2, [r1, #1]
 801bd34:	1c4b      	adds	r3, r1, #1
 801bd36:	9303      	str	r3, [sp, #12]
 801bd38:	b342      	cbz	r2, 801bd8c <__hexnan+0x88>
 801bd3a:	4610      	mov	r0, r2
 801bd3c:	9105      	str	r1, [sp, #20]
 801bd3e:	9204      	str	r2, [sp, #16]
 801bd40:	f7ff fd74 	bl	801b82c <__hexdig_fun>
 801bd44:	2800      	cmp	r0, #0
 801bd46:	d14f      	bne.n	801bde8 <__hexnan+0xe4>
 801bd48:	9a04      	ldr	r2, [sp, #16]
 801bd4a:	9905      	ldr	r1, [sp, #20]
 801bd4c:	2a20      	cmp	r2, #32
 801bd4e:	d818      	bhi.n	801bd82 <__hexnan+0x7e>
 801bd50:	9b02      	ldr	r3, [sp, #8]
 801bd52:	459b      	cmp	fp, r3
 801bd54:	dd13      	ble.n	801bd7e <__hexnan+0x7a>
 801bd56:	454c      	cmp	r4, r9
 801bd58:	d206      	bcs.n	801bd68 <__hexnan+0x64>
 801bd5a:	2d07      	cmp	r5, #7
 801bd5c:	dc04      	bgt.n	801bd68 <__hexnan+0x64>
 801bd5e:	462a      	mov	r2, r5
 801bd60:	4649      	mov	r1, r9
 801bd62:	4620      	mov	r0, r4
 801bd64:	f7ff ffa8 	bl	801bcb8 <L_shift>
 801bd68:	4544      	cmp	r4, r8
 801bd6a:	d950      	bls.n	801be0e <__hexnan+0x10a>
 801bd6c:	2300      	movs	r3, #0
 801bd6e:	f1a4 0904 	sub.w	r9, r4, #4
 801bd72:	f844 3c04 	str.w	r3, [r4, #-4]
 801bd76:	f8cd b008 	str.w	fp, [sp, #8]
 801bd7a:	464c      	mov	r4, r9
 801bd7c:	461d      	mov	r5, r3
 801bd7e:	9903      	ldr	r1, [sp, #12]
 801bd80:	e7d7      	b.n	801bd32 <__hexnan+0x2e>
 801bd82:	2a29      	cmp	r2, #41	; 0x29
 801bd84:	d155      	bne.n	801be32 <__hexnan+0x12e>
 801bd86:	3102      	adds	r1, #2
 801bd88:	f8ca 1000 	str.w	r1, [sl]
 801bd8c:	f1bb 0f00 	cmp.w	fp, #0
 801bd90:	d04f      	beq.n	801be32 <__hexnan+0x12e>
 801bd92:	454c      	cmp	r4, r9
 801bd94:	d206      	bcs.n	801bda4 <__hexnan+0xa0>
 801bd96:	2d07      	cmp	r5, #7
 801bd98:	dc04      	bgt.n	801bda4 <__hexnan+0xa0>
 801bd9a:	462a      	mov	r2, r5
 801bd9c:	4649      	mov	r1, r9
 801bd9e:	4620      	mov	r0, r4
 801bda0:	f7ff ff8a 	bl	801bcb8 <L_shift>
 801bda4:	4544      	cmp	r4, r8
 801bda6:	d934      	bls.n	801be12 <__hexnan+0x10e>
 801bda8:	f1a8 0204 	sub.w	r2, r8, #4
 801bdac:	4623      	mov	r3, r4
 801bdae:	f853 1b04 	ldr.w	r1, [r3], #4
 801bdb2:	f842 1f04 	str.w	r1, [r2, #4]!
 801bdb6:	429f      	cmp	r7, r3
 801bdb8:	d2f9      	bcs.n	801bdae <__hexnan+0xaa>
 801bdba:	1b3b      	subs	r3, r7, r4
 801bdbc:	f023 0303 	bic.w	r3, r3, #3
 801bdc0:	3304      	adds	r3, #4
 801bdc2:	3e03      	subs	r6, #3
 801bdc4:	3401      	adds	r4, #1
 801bdc6:	42a6      	cmp	r6, r4
 801bdc8:	bf38      	it	cc
 801bdca:	2304      	movcc	r3, #4
 801bdcc:	4443      	add	r3, r8
 801bdce:	2200      	movs	r2, #0
 801bdd0:	f843 2b04 	str.w	r2, [r3], #4
 801bdd4:	429f      	cmp	r7, r3
 801bdd6:	d2fb      	bcs.n	801bdd0 <__hexnan+0xcc>
 801bdd8:	683b      	ldr	r3, [r7, #0]
 801bdda:	b91b      	cbnz	r3, 801bde4 <__hexnan+0xe0>
 801bddc:	4547      	cmp	r7, r8
 801bdde:	d126      	bne.n	801be2e <__hexnan+0x12a>
 801bde0:	2301      	movs	r3, #1
 801bde2:	603b      	str	r3, [r7, #0]
 801bde4:	2005      	movs	r0, #5
 801bde6:	e025      	b.n	801be34 <__hexnan+0x130>
 801bde8:	3501      	adds	r5, #1
 801bdea:	2d08      	cmp	r5, #8
 801bdec:	f10b 0b01 	add.w	fp, fp, #1
 801bdf0:	dd06      	ble.n	801be00 <__hexnan+0xfc>
 801bdf2:	4544      	cmp	r4, r8
 801bdf4:	d9c3      	bls.n	801bd7e <__hexnan+0x7a>
 801bdf6:	2300      	movs	r3, #0
 801bdf8:	f844 3c04 	str.w	r3, [r4, #-4]
 801bdfc:	2501      	movs	r5, #1
 801bdfe:	3c04      	subs	r4, #4
 801be00:	6822      	ldr	r2, [r4, #0]
 801be02:	f000 000f 	and.w	r0, r0, #15
 801be06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801be0a:	6020      	str	r0, [r4, #0]
 801be0c:	e7b7      	b.n	801bd7e <__hexnan+0x7a>
 801be0e:	2508      	movs	r5, #8
 801be10:	e7b5      	b.n	801bd7e <__hexnan+0x7a>
 801be12:	9b01      	ldr	r3, [sp, #4]
 801be14:	2b00      	cmp	r3, #0
 801be16:	d0df      	beq.n	801bdd8 <__hexnan+0xd4>
 801be18:	f1c3 0320 	rsb	r3, r3, #32
 801be1c:	f04f 32ff 	mov.w	r2, #4294967295
 801be20:	40da      	lsrs	r2, r3
 801be22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801be26:	4013      	ands	r3, r2
 801be28:	f846 3c04 	str.w	r3, [r6, #-4]
 801be2c:	e7d4      	b.n	801bdd8 <__hexnan+0xd4>
 801be2e:	3f04      	subs	r7, #4
 801be30:	e7d2      	b.n	801bdd8 <__hexnan+0xd4>
 801be32:	2004      	movs	r0, #4
 801be34:	b007      	add	sp, #28
 801be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be3a <__ascii_mbtowc>:
 801be3a:	b082      	sub	sp, #8
 801be3c:	b901      	cbnz	r1, 801be40 <__ascii_mbtowc+0x6>
 801be3e:	a901      	add	r1, sp, #4
 801be40:	b142      	cbz	r2, 801be54 <__ascii_mbtowc+0x1a>
 801be42:	b14b      	cbz	r3, 801be58 <__ascii_mbtowc+0x1e>
 801be44:	7813      	ldrb	r3, [r2, #0]
 801be46:	600b      	str	r3, [r1, #0]
 801be48:	7812      	ldrb	r2, [r2, #0]
 801be4a:	1e10      	subs	r0, r2, #0
 801be4c:	bf18      	it	ne
 801be4e:	2001      	movne	r0, #1
 801be50:	b002      	add	sp, #8
 801be52:	4770      	bx	lr
 801be54:	4610      	mov	r0, r2
 801be56:	e7fb      	b.n	801be50 <__ascii_mbtowc+0x16>
 801be58:	f06f 0001 	mvn.w	r0, #1
 801be5c:	e7f8      	b.n	801be50 <__ascii_mbtowc+0x16>

0801be5e <_realloc_r>:
 801be5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be62:	4680      	mov	r8, r0
 801be64:	4614      	mov	r4, r2
 801be66:	460e      	mov	r6, r1
 801be68:	b921      	cbnz	r1, 801be74 <_realloc_r+0x16>
 801be6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801be6e:	4611      	mov	r1, r2
 801be70:	f7fb b96c 	b.w	801714c <_malloc_r>
 801be74:	b92a      	cbnz	r2, 801be82 <_realloc_r+0x24>
 801be76:	f7fd f95b 	bl	8019130 <_free_r>
 801be7a:	4625      	mov	r5, r4
 801be7c:	4628      	mov	r0, r5
 801be7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801be82:	f000 f8b6 	bl	801bff2 <_malloc_usable_size_r>
 801be86:	4284      	cmp	r4, r0
 801be88:	4607      	mov	r7, r0
 801be8a:	d802      	bhi.n	801be92 <_realloc_r+0x34>
 801be8c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801be90:	d812      	bhi.n	801beb8 <_realloc_r+0x5a>
 801be92:	4621      	mov	r1, r4
 801be94:	4640      	mov	r0, r8
 801be96:	f7fb f959 	bl	801714c <_malloc_r>
 801be9a:	4605      	mov	r5, r0
 801be9c:	2800      	cmp	r0, #0
 801be9e:	d0ed      	beq.n	801be7c <_realloc_r+0x1e>
 801bea0:	42bc      	cmp	r4, r7
 801bea2:	4622      	mov	r2, r4
 801bea4:	4631      	mov	r1, r6
 801bea6:	bf28      	it	cs
 801bea8:	463a      	movcs	r2, r7
 801beaa:	f7fc fac8 	bl	801843e <memcpy>
 801beae:	4631      	mov	r1, r6
 801beb0:	4640      	mov	r0, r8
 801beb2:	f7fd f93d 	bl	8019130 <_free_r>
 801beb6:	e7e1      	b.n	801be7c <_realloc_r+0x1e>
 801beb8:	4635      	mov	r5, r6
 801beba:	e7df      	b.n	801be7c <_realloc_r+0x1e>

0801bebc <_strtoul_l.constprop.0>:
 801bebc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bec0:	4f36      	ldr	r7, [pc, #216]	; (801bf9c <_strtoul_l.constprop.0+0xe0>)
 801bec2:	4686      	mov	lr, r0
 801bec4:	460d      	mov	r5, r1
 801bec6:	4628      	mov	r0, r5
 801bec8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801becc:	5d3e      	ldrb	r6, [r7, r4]
 801bece:	f016 0608 	ands.w	r6, r6, #8
 801bed2:	d1f8      	bne.n	801bec6 <_strtoul_l.constprop.0+0xa>
 801bed4:	2c2d      	cmp	r4, #45	; 0x2d
 801bed6:	d130      	bne.n	801bf3a <_strtoul_l.constprop.0+0x7e>
 801bed8:	782c      	ldrb	r4, [r5, #0]
 801beda:	2601      	movs	r6, #1
 801bedc:	1c85      	adds	r5, r0, #2
 801bede:	2b00      	cmp	r3, #0
 801bee0:	d057      	beq.n	801bf92 <_strtoul_l.constprop.0+0xd6>
 801bee2:	2b10      	cmp	r3, #16
 801bee4:	d109      	bne.n	801befa <_strtoul_l.constprop.0+0x3e>
 801bee6:	2c30      	cmp	r4, #48	; 0x30
 801bee8:	d107      	bne.n	801befa <_strtoul_l.constprop.0+0x3e>
 801beea:	7828      	ldrb	r0, [r5, #0]
 801beec:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801bef0:	2858      	cmp	r0, #88	; 0x58
 801bef2:	d149      	bne.n	801bf88 <_strtoul_l.constprop.0+0xcc>
 801bef4:	786c      	ldrb	r4, [r5, #1]
 801bef6:	2310      	movs	r3, #16
 801bef8:	3502      	adds	r5, #2
 801befa:	f04f 38ff 	mov.w	r8, #4294967295
 801befe:	2700      	movs	r7, #0
 801bf00:	fbb8 f8f3 	udiv	r8, r8, r3
 801bf04:	fb03 f908 	mul.w	r9, r3, r8
 801bf08:	ea6f 0909 	mvn.w	r9, r9
 801bf0c:	4638      	mov	r0, r7
 801bf0e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801bf12:	f1bc 0f09 	cmp.w	ip, #9
 801bf16:	d815      	bhi.n	801bf44 <_strtoul_l.constprop.0+0x88>
 801bf18:	4664      	mov	r4, ip
 801bf1a:	42a3      	cmp	r3, r4
 801bf1c:	dd23      	ble.n	801bf66 <_strtoul_l.constprop.0+0xaa>
 801bf1e:	f1b7 3fff 	cmp.w	r7, #4294967295
 801bf22:	d007      	beq.n	801bf34 <_strtoul_l.constprop.0+0x78>
 801bf24:	4580      	cmp	r8, r0
 801bf26:	d31b      	bcc.n	801bf60 <_strtoul_l.constprop.0+0xa4>
 801bf28:	d101      	bne.n	801bf2e <_strtoul_l.constprop.0+0x72>
 801bf2a:	45a1      	cmp	r9, r4
 801bf2c:	db18      	blt.n	801bf60 <_strtoul_l.constprop.0+0xa4>
 801bf2e:	fb00 4003 	mla	r0, r0, r3, r4
 801bf32:	2701      	movs	r7, #1
 801bf34:	f815 4b01 	ldrb.w	r4, [r5], #1
 801bf38:	e7e9      	b.n	801bf0e <_strtoul_l.constprop.0+0x52>
 801bf3a:	2c2b      	cmp	r4, #43	; 0x2b
 801bf3c:	bf04      	itt	eq
 801bf3e:	782c      	ldrbeq	r4, [r5, #0]
 801bf40:	1c85      	addeq	r5, r0, #2
 801bf42:	e7cc      	b.n	801bede <_strtoul_l.constprop.0+0x22>
 801bf44:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801bf48:	f1bc 0f19 	cmp.w	ip, #25
 801bf4c:	d801      	bhi.n	801bf52 <_strtoul_l.constprop.0+0x96>
 801bf4e:	3c37      	subs	r4, #55	; 0x37
 801bf50:	e7e3      	b.n	801bf1a <_strtoul_l.constprop.0+0x5e>
 801bf52:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801bf56:	f1bc 0f19 	cmp.w	ip, #25
 801bf5a:	d804      	bhi.n	801bf66 <_strtoul_l.constprop.0+0xaa>
 801bf5c:	3c57      	subs	r4, #87	; 0x57
 801bf5e:	e7dc      	b.n	801bf1a <_strtoul_l.constprop.0+0x5e>
 801bf60:	f04f 37ff 	mov.w	r7, #4294967295
 801bf64:	e7e6      	b.n	801bf34 <_strtoul_l.constprop.0+0x78>
 801bf66:	1c7b      	adds	r3, r7, #1
 801bf68:	d106      	bne.n	801bf78 <_strtoul_l.constprop.0+0xbc>
 801bf6a:	2322      	movs	r3, #34	; 0x22
 801bf6c:	f8ce 3000 	str.w	r3, [lr]
 801bf70:	4638      	mov	r0, r7
 801bf72:	b932      	cbnz	r2, 801bf82 <_strtoul_l.constprop.0+0xc6>
 801bf74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf78:	b106      	cbz	r6, 801bf7c <_strtoul_l.constprop.0+0xc0>
 801bf7a:	4240      	negs	r0, r0
 801bf7c:	2a00      	cmp	r2, #0
 801bf7e:	d0f9      	beq.n	801bf74 <_strtoul_l.constprop.0+0xb8>
 801bf80:	b107      	cbz	r7, 801bf84 <_strtoul_l.constprop.0+0xc8>
 801bf82:	1e69      	subs	r1, r5, #1
 801bf84:	6011      	str	r1, [r2, #0]
 801bf86:	e7f5      	b.n	801bf74 <_strtoul_l.constprop.0+0xb8>
 801bf88:	2430      	movs	r4, #48	; 0x30
 801bf8a:	2b00      	cmp	r3, #0
 801bf8c:	d1b5      	bne.n	801befa <_strtoul_l.constprop.0+0x3e>
 801bf8e:	2308      	movs	r3, #8
 801bf90:	e7b3      	b.n	801befa <_strtoul_l.constprop.0+0x3e>
 801bf92:	2c30      	cmp	r4, #48	; 0x30
 801bf94:	d0a9      	beq.n	801beea <_strtoul_l.constprop.0+0x2e>
 801bf96:	230a      	movs	r3, #10
 801bf98:	e7af      	b.n	801befa <_strtoul_l.constprop.0+0x3e>
 801bf9a:	bf00      	nop
 801bf9c:	0801edd9 	.word	0x0801edd9

0801bfa0 <_strtoul_r>:
 801bfa0:	f7ff bf8c 	b.w	801bebc <_strtoul_l.constprop.0>

0801bfa4 <__ascii_wctomb>:
 801bfa4:	4603      	mov	r3, r0
 801bfa6:	4608      	mov	r0, r1
 801bfa8:	b141      	cbz	r1, 801bfbc <__ascii_wctomb+0x18>
 801bfaa:	2aff      	cmp	r2, #255	; 0xff
 801bfac:	d904      	bls.n	801bfb8 <__ascii_wctomb+0x14>
 801bfae:	228a      	movs	r2, #138	; 0x8a
 801bfb0:	601a      	str	r2, [r3, #0]
 801bfb2:	f04f 30ff 	mov.w	r0, #4294967295
 801bfb6:	4770      	bx	lr
 801bfb8:	700a      	strb	r2, [r1, #0]
 801bfba:	2001      	movs	r0, #1
 801bfbc:	4770      	bx	lr
	...

0801bfc0 <fiprintf>:
 801bfc0:	b40e      	push	{r1, r2, r3}
 801bfc2:	b503      	push	{r0, r1, lr}
 801bfc4:	4601      	mov	r1, r0
 801bfc6:	ab03      	add	r3, sp, #12
 801bfc8:	4805      	ldr	r0, [pc, #20]	; (801bfe0 <fiprintf+0x20>)
 801bfca:	f853 2b04 	ldr.w	r2, [r3], #4
 801bfce:	6800      	ldr	r0, [r0, #0]
 801bfd0:	9301      	str	r3, [sp, #4]
 801bfd2:	f7fe ff7d 	bl	801aed0 <_vfiprintf_r>
 801bfd6:	b002      	add	sp, #8
 801bfd8:	f85d eb04 	ldr.w	lr, [sp], #4
 801bfdc:	b003      	add	sp, #12
 801bfde:	4770      	bx	lr
 801bfe0:	200001c0 	.word	0x200001c0

0801bfe4 <abort>:
 801bfe4:	b508      	push	{r3, lr}
 801bfe6:	2006      	movs	r0, #6
 801bfe8:	f000 f834 	bl	801c054 <raise>
 801bfec:	2001      	movs	r0, #1
 801bfee:	f7e6 fcf5 	bl	80029dc <_exit>

0801bff2 <_malloc_usable_size_r>:
 801bff2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bff6:	1f18      	subs	r0, r3, #4
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	bfbc      	itt	lt
 801bffc:	580b      	ldrlt	r3, [r1, r0]
 801bffe:	18c0      	addlt	r0, r0, r3
 801c000:	4770      	bx	lr

0801c002 <_raise_r>:
 801c002:	291f      	cmp	r1, #31
 801c004:	b538      	push	{r3, r4, r5, lr}
 801c006:	4604      	mov	r4, r0
 801c008:	460d      	mov	r5, r1
 801c00a:	d904      	bls.n	801c016 <_raise_r+0x14>
 801c00c:	2316      	movs	r3, #22
 801c00e:	6003      	str	r3, [r0, #0]
 801c010:	f04f 30ff 	mov.w	r0, #4294967295
 801c014:	bd38      	pop	{r3, r4, r5, pc}
 801c016:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801c018:	b112      	cbz	r2, 801c020 <_raise_r+0x1e>
 801c01a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c01e:	b94b      	cbnz	r3, 801c034 <_raise_r+0x32>
 801c020:	4620      	mov	r0, r4
 801c022:	f000 f831 	bl	801c088 <_getpid_r>
 801c026:	462a      	mov	r2, r5
 801c028:	4601      	mov	r1, r0
 801c02a:	4620      	mov	r0, r4
 801c02c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c030:	f000 b818 	b.w	801c064 <_kill_r>
 801c034:	2b01      	cmp	r3, #1
 801c036:	d00a      	beq.n	801c04e <_raise_r+0x4c>
 801c038:	1c59      	adds	r1, r3, #1
 801c03a:	d103      	bne.n	801c044 <_raise_r+0x42>
 801c03c:	2316      	movs	r3, #22
 801c03e:	6003      	str	r3, [r0, #0]
 801c040:	2001      	movs	r0, #1
 801c042:	e7e7      	b.n	801c014 <_raise_r+0x12>
 801c044:	2400      	movs	r4, #0
 801c046:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c04a:	4628      	mov	r0, r5
 801c04c:	4798      	blx	r3
 801c04e:	2000      	movs	r0, #0
 801c050:	e7e0      	b.n	801c014 <_raise_r+0x12>
	...

0801c054 <raise>:
 801c054:	4b02      	ldr	r3, [pc, #8]	; (801c060 <raise+0xc>)
 801c056:	4601      	mov	r1, r0
 801c058:	6818      	ldr	r0, [r3, #0]
 801c05a:	f7ff bfd2 	b.w	801c002 <_raise_r>
 801c05e:	bf00      	nop
 801c060:	200001c0 	.word	0x200001c0

0801c064 <_kill_r>:
 801c064:	b538      	push	{r3, r4, r5, lr}
 801c066:	4d07      	ldr	r5, [pc, #28]	; (801c084 <_kill_r+0x20>)
 801c068:	2300      	movs	r3, #0
 801c06a:	4604      	mov	r4, r0
 801c06c:	4608      	mov	r0, r1
 801c06e:	4611      	mov	r1, r2
 801c070:	602b      	str	r3, [r5, #0]
 801c072:	f7e6 fcab 	bl	80029cc <_kill>
 801c076:	1c43      	adds	r3, r0, #1
 801c078:	d102      	bne.n	801c080 <_kill_r+0x1c>
 801c07a:	682b      	ldr	r3, [r5, #0]
 801c07c:	b103      	cbz	r3, 801c080 <_kill_r+0x1c>
 801c07e:	6023      	str	r3, [r4, #0]
 801c080:	bd38      	pop	{r3, r4, r5, pc}
 801c082:	bf00      	nop
 801c084:	20002394 	.word	0x20002394

0801c088 <_getpid_r>:
 801c088:	f7e6 bc9e 	b.w	80029c8 <_getpid>
 801c08c:	0000      	movs	r0, r0
	...

0801c090 <floor>:
 801c090:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c098:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c09c:	2e13      	cmp	r6, #19
 801c09e:	460b      	mov	r3, r1
 801c0a0:	4607      	mov	r7, r0
 801c0a2:	460c      	mov	r4, r1
 801c0a4:	4605      	mov	r5, r0
 801c0a6:	dc32      	bgt.n	801c10e <floor+0x7e>
 801c0a8:	2e00      	cmp	r6, #0
 801c0aa:	da14      	bge.n	801c0d6 <floor+0x46>
 801c0ac:	a334      	add	r3, pc, #208	; (adr r3, 801c180 <floor+0xf0>)
 801c0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0b2:	f7e4 f8c3 	bl	800023c <__adddf3>
 801c0b6:	2200      	movs	r2, #0
 801c0b8:	2300      	movs	r3, #0
 801c0ba:	f7e4 fd05 	bl	8000ac8 <__aeabi_dcmpgt>
 801c0be:	b138      	cbz	r0, 801c0d0 <floor+0x40>
 801c0c0:	2c00      	cmp	r4, #0
 801c0c2:	da56      	bge.n	801c172 <floor+0xe2>
 801c0c4:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 801c0c8:	4325      	orrs	r5, r4
 801c0ca:	d055      	beq.n	801c178 <floor+0xe8>
 801c0cc:	4c2e      	ldr	r4, [pc, #184]	; (801c188 <floor+0xf8>)
 801c0ce:	2500      	movs	r5, #0
 801c0d0:	4623      	mov	r3, r4
 801c0d2:	462f      	mov	r7, r5
 801c0d4:	e025      	b.n	801c122 <floor+0x92>
 801c0d6:	4a2d      	ldr	r2, [pc, #180]	; (801c18c <floor+0xfc>)
 801c0d8:	fa42 f806 	asr.w	r8, r2, r6
 801c0dc:	ea01 0208 	and.w	r2, r1, r8
 801c0e0:	4302      	orrs	r2, r0
 801c0e2:	d01e      	beq.n	801c122 <floor+0x92>
 801c0e4:	a326      	add	r3, pc, #152	; (adr r3, 801c180 <floor+0xf0>)
 801c0e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c0ea:	f7e4 f8a7 	bl	800023c <__adddf3>
 801c0ee:	2200      	movs	r2, #0
 801c0f0:	2300      	movs	r3, #0
 801c0f2:	f7e4 fce9 	bl	8000ac8 <__aeabi_dcmpgt>
 801c0f6:	2800      	cmp	r0, #0
 801c0f8:	d0ea      	beq.n	801c0d0 <floor+0x40>
 801c0fa:	2c00      	cmp	r4, #0
 801c0fc:	bfbe      	ittt	lt
 801c0fe:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801c102:	4133      	asrlt	r3, r6
 801c104:	18e4      	addlt	r4, r4, r3
 801c106:	ea24 0408 	bic.w	r4, r4, r8
 801c10a:	2500      	movs	r5, #0
 801c10c:	e7e0      	b.n	801c0d0 <floor+0x40>
 801c10e:	2e33      	cmp	r6, #51	; 0x33
 801c110:	dd0b      	ble.n	801c12a <floor+0x9a>
 801c112:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c116:	d104      	bne.n	801c122 <floor+0x92>
 801c118:	4602      	mov	r2, r0
 801c11a:	f7e4 f88f 	bl	800023c <__adddf3>
 801c11e:	4607      	mov	r7, r0
 801c120:	460b      	mov	r3, r1
 801c122:	4638      	mov	r0, r7
 801c124:	4619      	mov	r1, r3
 801c126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c12a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801c12e:	f04f 38ff 	mov.w	r8, #4294967295
 801c132:	fa28 f802 	lsr.w	r8, r8, r2
 801c136:	ea10 0f08 	tst.w	r0, r8
 801c13a:	d0f2      	beq.n	801c122 <floor+0x92>
 801c13c:	a310      	add	r3, pc, #64	; (adr r3, 801c180 <floor+0xf0>)
 801c13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c142:	f7e4 f87b 	bl	800023c <__adddf3>
 801c146:	2200      	movs	r2, #0
 801c148:	2300      	movs	r3, #0
 801c14a:	f7e4 fcbd 	bl	8000ac8 <__aeabi_dcmpgt>
 801c14e:	2800      	cmp	r0, #0
 801c150:	d0be      	beq.n	801c0d0 <floor+0x40>
 801c152:	2c00      	cmp	r4, #0
 801c154:	da0a      	bge.n	801c16c <floor+0xdc>
 801c156:	2e14      	cmp	r6, #20
 801c158:	d101      	bne.n	801c15e <floor+0xce>
 801c15a:	3401      	adds	r4, #1
 801c15c:	e006      	b.n	801c16c <floor+0xdc>
 801c15e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801c162:	2301      	movs	r3, #1
 801c164:	40b3      	lsls	r3, r6
 801c166:	441d      	add	r5, r3
 801c168:	42af      	cmp	r7, r5
 801c16a:	d8f6      	bhi.n	801c15a <floor+0xca>
 801c16c:	ea25 0508 	bic.w	r5, r5, r8
 801c170:	e7ae      	b.n	801c0d0 <floor+0x40>
 801c172:	2500      	movs	r5, #0
 801c174:	462c      	mov	r4, r5
 801c176:	e7ab      	b.n	801c0d0 <floor+0x40>
 801c178:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801c17c:	e7a8      	b.n	801c0d0 <floor+0x40>
 801c17e:	bf00      	nop
 801c180:	8800759c 	.word	0x8800759c
 801c184:	7e37e43c 	.word	0x7e37e43c
 801c188:	bff00000 	.word	0xbff00000
 801c18c:	000fffff 	.word	0x000fffff

0801c190 <_init>:
 801c190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c192:	bf00      	nop
 801c194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c196:	bc08      	pop	{r3}
 801c198:	469e      	mov	lr, r3
 801c19a:	4770      	bx	lr

0801c19c <_fini>:
 801c19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c19e:	bf00      	nop
 801c1a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c1a2:	bc08      	pop	{r3}
 801c1a4:	469e      	mov	lr, r3
 801c1a6:	4770      	bx	lr
